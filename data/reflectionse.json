{
  "encoded": "Ww0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQ29udHJvbCBBbmQgQ2hvaWNlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhlIGNoaWVmIHRhc2sgaW4gbGlmZSBpcyBzaW1wbHkgdGhpczogdG8gaWRlbnRpZnkgYW5kIHNlcGFyYXRlIG1hdHRlcnMgc28gdGhhdCBJIGNhbiBzYXkgY2xlYXJseSB0byBteXNlbGYgd2hpY2ggYXJlIGV4dGVybmFscyBub3QgdW5kZXIgbXkgY29udHJvbCwgYW5kIHdoaWNoIGhhdmUgdG8gZG8gd2l0aCB0aGUgY2hvaWNlcyBJIGFjdHVhbGx5IGNvbnRyb2wuIFdoZXJlIHRoZW4gZG8gSSBsb29rIGZvciBnb29kIGFuZCBldmlsPyBOb3QgdG8gdW5jb250cm9sbGFibGUgZXh0ZXJuYWxzLCBidXQgd2l0aGluIG15c2VsZiB0byB0aGUgY2hvaWNlcyB0aGF0IGFyZSBteSBvd24uLi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAyLjUuNC01Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZSBzaW5nbGUgbW9zdCBpbXBvcnRhbnQgcHJhY3RpY2UgaW4gU3RvaWMgcGhpbG9zb3BoeSBpcyBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiB3aGF0IHdlIGNhbiBjaGFuZ2UgYW5kIHdoYXQgd2UgY2FuJ3QuIFdoYXQgd2UgaGF2ZSBpbmZsdWVuY2Ugb3ZlciBhbmQgd2hhdCB3ZSBkbyBub3QuIEEgZmxpZ2h0IGlzIGRlbGF5ZWQgYmVjYXVzZSBvZiB3ZWF0aGVyJm1kYXNoO25vIGFtb3VudCBvZiB5ZWxsaW5nIGF0IGFuIGFpcmxpbmUgcmVwcmVzZW50YXRpdmUgd2lsbCBlbmQgYSBzdG9ybS4gTm8gYW1vdW50IG9mIHdpc2hpbmcgd2lsbCBtYWtlIHlvdSB0YWxsZXIgb3Igc2hvcnRlciBvciBib3JuIGluIGEgZGlmZmVyZW50IGNvdW50cnkuIE5vIG1hdHRlciBob3cgaGFyZCB5b3UgdHJ5LCB5b3UgY2FuJ3QgPGVtPm1ha2U8L2VtPiBzb21lb25lIGxpa2UgeW91LiBBbmQgb24gdG9wIG9mIHRoYXQsIHRpbWUgc3BlbnQgaHVybGluZyB5b3Vyc2VsZiBhdCB0aGVzZSBpbW1vdmFibGUgb2JqZWN0cyBpcyB0aW1lIG5vdCBzcGVudCBvbiB0aGUgdGhpbmdzIHdlIDxlbT5jYW48L2VtPiBjaGFuZ2UuPC9wPjxwPlRoZSByZWNvdmVyeSBjb21tdW5pdHkgcHJhY3RpY2VzIHNvbWV0aGluZyBjYWxsZWQgdGhlIFNlcmVuaXR5IFByYXllcjogPHE+R29kLCBncmFudCBtZSB0aGUgc2VyZW5pdHkgdG8gYWNjZXB0IHRoZSB0aGluZ3MgSSAgY2Fubm90IGNoYW5nZSwgdGhlIGNvdXJhZ2UgdG8gY2hhbmdlIHRoZSB0aGluZ3MgSSBjYW4sIGFuZCB0aGUgd2lzZG9tIHRvIGtub3cgdGhlIGRpZmZlcmVuY2UuPC9xPiBBZGRpY3RzIGNhbm5vdCBjaGFuZ2UgdGhlIGFidXNlIHN1ZmZlcmVkIGluIGNoaWxkaG9vZC4gVGhleSBjYW5ub3QgdW5kbyB0aGUgY2hvaWNlcyB0aGV5IGhhdmUgbWFkZSBvciB0aGUgaHVydCB0aGV5IGhhdmUgY2F1c2VkLiBCdXQgdGhleSA8ZW0+Y2FuPC9lbT4gY2hhbmdlIHRoZSBmdXR1cmUmbWRhc2g7dGhyb3VnaCB0aGUgcG93ZXIgdGhleSBoYXZlIGluIHRoZSBwcmVzZW50IG1vbWVudC4gQXMgRXBpY3RldHVzIHNhaWQsIHRoZXkgY2FuIGNvbnRyb2wgdGhlIGNob2ljZXMgdGhleSBtYWtlIHJpZ2h0IG5vdy48L3A+PHA+VGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdXMgdG9kYXkuIElmIHdlIGNhbiBmb2N1cyBvbiBtYWtpbmcgY2xlYXIgd2hhdCBwYXJ0cyBvZiBvdXIgZGF5IGFyZSB3aXRoaW4gb3VyIGNvbnRyb2wgYW5kIHdoYXQgcGFydHMgYXJlIG5vdCwgd2Ugd2lsbCBub3Qgb25seSBiZSBoYXBwaWVyLCB3ZSB3aWxsIGhhdmUgYSBkaXN0aW5jdCBhZHZhbnRhZ2Ugb3ZlciBvdGhlciBwZW9wbGUgd2hvIGZhaWwgdG8gcmVhbGl6ZSB0aGV5IGFyZSBmaWdodGluZyBhbiB1bndpbm5hYmxlIGJhdHRsZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJFZHVjYXRpb24gSXMgRnJlZWRvbSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldoYXQgaXMgdGhlIGZydWl0IG9mIHRoZXNlIHRlYWNoaW5ncz8gT25seSB0aGUgbW9zdCBiZWF1dGlmdWwgYW5kIHByb3BlciBoYXJ2ZXN0IG9mIHRoZSB0cnVseSBlZHVjYXRlZCZtZGFzaDt0cmFucXVpbGl0eSwgZmVhcmxlc3NuZXNzLCBhbmQgZnJlZWRvbS4gV2Ugc2hvdWxkIG5vdCB0cnVzdCB0aGUgbWFzc2VzIHdobyBzYXkgb25seSB0aGUgZnJlZSBjYW4gYmUgZWR1Y2F0ZWQsIGJ1dCByYXRoZXIgdGhlIGxvdmVycyBvZiB3aXNkb20gd2hvIHNheSB0aGF0IG9ubHkgdGhlIGVkdWNhdGVkIGFyZSBmcmVlIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMi4xLjIxLTIzYSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5XaHkgZGlkIHlvdSBwaWNrIHVwIHRoaXMgYm9vaz8gV2h5IHBpY2sgdXAgYW55IGJvb2s/IE5vdCB0byBzZWVtIHNtYXJ0ZXIsIG5vdCB0byBwYXNzIHRpbWUgb24gdGhlIHBsYW5lLCBub3QgdG8gaGVhciB3aGF0IHlvdSB3YW50IHRvIGhlYXImbWRhc2g7dGhlcmUgYXJlIHBsZW50eSBvZiBlYXNpZXIgY2hvaWNlcyB0aGFuIHJlYWRpbmcuPC9wPjxwPk5vLCB5b3UgcGlja2VkIHVwIHRoaXMgYm9vayBiZWNhdXNlIHlvdSBhcmUgbGVhcm5pbmcgaG93IHRvIGxpdmUuIEJlY2F1c2UgeW91IHdhbnQgdG8gYmUgZnJlZXIsIGZlYXIgbGVzcywgYW5kIGFjaGlldmUgYSBzdGF0ZSBvZiBwZWFjZS4gRWR1Y2F0aW9uJm1kYXNoO3JlYWRpbmcgYW5kIG1lZGl0YXRpbmcgb24gdGhlIHdpc2RvbSBvZiBncmVhdCBtaW5kcyZtZGFzaDtpcyBub3QgdG8gYmUgZG9uZSBmb3IgaXRzIG93biBzYWtlLiBJdCBoYXMgYSBwdXJwb3NlLjwvcD48cD5SZW1lbWJlciB0aGF0IGltcGVyYXRpdmUgb24gdGhlIGRheXMgeW91IHN0YXJ0IHRvIGZlZWwgZGlzdHJhY3RlZCwgd2hlbiB3YXRjaGluZyB0ZWxldmlzaW9uIG9yIGhhdmluZyBhIHNuYWNrIHNlZW1zIGxpa2UgYSBiZXR0ZXIgdXNlIG9mIHlvdXIgdGltZSB0aGFuIHJlYWRpbmcgb3Igc3R1ZHlpbmcgcGhpbG9zb3BoeS4gS25vd2xlZGdlJm1kYXNoO3NlbGYta25vd2xlZGdlIGluIHBhcnRpY3VsYXImbWRhc2g7aXMgZnJlZWRvbS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJCZSBSdXRobGVzcyBUbyBUaGUgVGhpbmdzIFRoYXQgRG9uJ3QgTWF0dGVyIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSG93IG1hbnkgaGF2ZSBsYWlkIHdhc3RlIHRvIHlvdXIgbGlmZSB3aGVuIHlvdSB3ZXJlbid0IGF3YXJlIG9mIHdoYXQgeW91IHdlcmUgbG9zaW5nLCBob3cgbWFueSB3YXMgd2FzdGVkIGluIHBvaW50bGVzcyBncmllZiwgZm9vbGlzaCBqb3ksIGdyZWVkeSBkZXNpcmUsIGFuZCBzb2NpYWwgYW11c2VtZW50cyZtZGFzaDtob3cgbGl0dGxlIG9mIHlvdXIgb3duIHdhcyBsZWZ0IHRvIHlvdS4gWW91IHdpbGwgcmVhbGl6ZSB5b3UgYXJlIGR5aW5nIGJlZm9yZSB5b3VyIHRpbWUhIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gdGhlIEJyZXZpdHkgb2YgTGlmZSwgMy4zYiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5PbmUgb2YgdGhlIGhhcmRlc3QgdGhpbmdzIHRvIGRvIGluIGxpZmUgaXMgdG8gc2F5IDxxPk5vLjwvcT4gVG8gaW52aXRhdGlvbnMsIHRvIHJlcXVlc3RzLCB0byBvYmxpZ2F0aW9ucywgdG8gdGhlIHN0dWZmIHRoYXQgZXZlcnlvbmUgZWxzZSBpcyBkb2luZy4gRXZlbiBoYXJkZXIgaXMgc2F5aW5nIG5vIHRvIGNlcnRhaW4gdGltZS1jb25zdW1pbmcgZW1vdGlvbnM6IGFuZ2VyLCBleGNpdGVtZW50LCBkaXN0cmFjdGlvbiwgb2JzZXNzaW9uLCBsdXN0LiBOb25lIG9mIHRoZXNlIGltcHVsc2VzIGZlZWxzIGxpa2UgYSBiaWcgZGVhbCBieSBpdHNlbGYsIGJ1dCBydW4gYW1vaywgdGhleSBiZWNvbWUgYSBjb21taXRtZW50IGxpa2UgYW55dGhpbmcgZWxzZS48L3A+PHA+SWYgeW91J3JlIG5vdCBjYXJlZnVsLCB0aGVzZSBhcmUgcHJlY2lzZWx5IHRoZSBpbXBvc2l0aW9ucyB0aGF0IHdpbGwgb3ZlcndoZWxtIGFuZCBjb25zdW1lIHlvdXIgbGlmZS4gRG8geW91IGV2ZXIgd29uZGVyIGhvdyB5b3UgY2FuIGdldCBzb21lIG9mIHlvdXIgdGltZSBiYWNrLCBob3cgeW91IGNhbiBmZWVsIGxlc3MgYnVzeT8gU3RhcnQgYnkgbGVhcm5pbmcgdGhlIHBvd2VyIG9mIDxxPk5vITwvcT4mbWRhc2g7YXMgaW4gPHE+Tm8sIHRoYW5rIHlvdSw8L3E+IGFuZCA8cT5ObywgSSdtIG5vdCBnb2luZyB0byBnZXQgY2F1Z2h0IHVwIGluIHRoYXQsPC9xPiBhbmQgPHE+Tm8sIEkganVzdCBjYW4ndCByaWdodCBub3cuPC9xPiBJdCBtYXkgaHVydCBzb21lIGZlZWxpbmdzLiBJdCBtYXkgdHVybiBwZW9wbGUgb2ZmLiBJZiBtYXkgdGFrZSBzb21lIGhhcmQgd29yay4gQnV0IHRoZSBtb3JlIHlvdSBzYXkgbm8gdG8gdGhlIHRoaW5ncyB0aGF0IGRvbid0IG1hdHRlciwgdGhlIG1vcmUgeW91IGNhbiBzYXkgeWVzIHRvIHRoZSB0aGluZ3MgdGhhdCBkby4gVGhpcyB3aWxsIGxldCB5b3UgbGl2ZSBhbmQgZW5qb3kgeW91ciBsaWZlJm1kYXNoO3RoZSBsaWZlIHRoYXQgPGVtPnlvdTwvZW0+IHdhbnQuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSA0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIEJpZyBUaHJlZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkFsbCB5b3UgbmVlZCBhcmUgdGhlc2U6IGNlcnRhaW50eSBvZiBqdWRnbWVudCBpbiB0aGUgcHJlc2VudCBtb21lbnQ7PGJyPmFjdGlvbiBmb3IgdGhlIGNvbW1vbiBnb29kIGluIHRoZSBwcmVzZW50IG1vbWVudDs8YnI+YW5kIGFuIGF0dGl0dWRlIG9mIGdyYXRpdHVkZSBpbiB0aGUgcHJlc2VudCBtb21lbnQgZm9yIGFueXRoaW5nIHRoYXQgY29tZXMgeW91ciB3YXkuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDkuNiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5QZXJjZXB0aW9uLCBBY3Rpb24sIFdpbGwuIFRob3NlIGFyZSB0aGUgdGhyZWUgb3ZlcmxhcHBpbmcgYnV0IGNyaXRpY2FsIGRpc2NpcGxpbmVzIG9mIFN0b2ljaXNtLiBUaGVyZSdzIG1vcmUgdG8gdGhlIHBoaWxvc29waHkgY2VydGFpbmx5Jm1kYXNoO2FuZCB3ZSBjb3VsZCBzcGVuZCBhbGwgZGF5IHRhbGtpbmcgYWJvdXQgdGhlIHVuaXF1ZSBiZWxpZWZzIG9mIHRoZSB2YXJpb3VzIFN0b2ljczogPHE+VGhpcyBpcyB3aGF0IEhlcmFjbGl0dXMgdGhvdWdodCAuIC4gLjwvcT4gPHE+WmVubyBpcyBmcm9tIENpdGl1bSwgYSBjaXR5IGluIEN5cHJ1cywgYW5kIGhlIGJlbGlldmVkIC4gLiAuPC9xPiBCdXQgd291bGQgc3VjaCBmYWN0cyByZWFsbHkgaGVscCB5b3UgZGF5IHRvIGRheT8gV2hhdCBjbGFyaXR5IGRvZXMgdHJpdmlhIHByb3ZpZGU/PC9wPjxwPkluc3RlYWQsIHRoZSBmb2xsb3dpbmcgbGl0dGxlIHJlbWluZGVyIHN1bXMgdXAgdGhlIHRocmVlIG1vc3QgZXNzZW50aWFsIHBhcnRzIG9mIFN0b2ljIHBoaWxvc29waHkgd29ydGggY2Fycnlpbmcgd2l0aCB5b3UgZXZlcnkgZGF5LCBpbnRvIGV2ZXJ5IGRlY2lzaW9uOiA8dWw+PGxpPkNvbnRyb2wgeW91ciBwZXJjZXB0aW9ucy48L2xpPjxsaT5EaXJlY3QgeW91ciBhY3Rpb25zIHByb3Blcmx5LjwvbGk+PGxpPldpbGxpbmdseSBhY2NlcHQgd2hhdCdzIG91dHNpZGUgeW91ciBjb250cm9sLjwvbGk+PC91bD48L3A+PHA+VGhhdCdzIGFsbCB3ZSBuZWVkIHRvIGRvLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkNsYXJpZnkgWW91ciBJbnRlbnRpb25zIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiTGV0IGFsbCB5b3VyIGVmZm9ydHMgYmUgZGlyZWN0ZWQgdG8gc29tZXRoaW5nLCBsZXQgaXQga2VlcCB0aGUgZW5kIGluIHZpZXcuIEl0J3Mgbm90IGFjdGl2aXR5IHRoYXQgZGlzdHVyYnMgcGVvcGxlLCBidXQgZmFsc2UgY29uY2VwdGlvbnMgb2YgdGhpbmdzIHRoYXQgZHJpdmUgdGhlbSBtYWQuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gVHJhbnF1aWxpdHkgb2YgTWluZCwgMTIuNSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5MYXcgMjkgb2YgPGNpdGU+VGhlIDQ4IExhd3Mgb2YgUG93ZXI8L2NpdGU+IGlzOiBQbGFuIEFsbCBUaGUgV2F5IFRvIFRoZSBFbmQuIFJvYmVydCBHcmVlbmUgd3JpdGVzLCA8cT5CeSBwbGFubmluZyB0byB0aGUgZW5kIHlvdSB3aWxsIG5vdCBiZSBvdmVyd2hlbG1lZCBieSBjaXJjdW1zdGFuY2VzIGFuZCB5b3Ugd2lsbCBrbm93IHdoZW4gdG8gc3RvcC4gR2VudGx5IGd1aWRlIGZvcnR1bmUgYW5kIGhlbHAgZGV0ZXJtaW5lIHRoZSBmdXR1cmUgb2YgdGhpbmtpbmcgZmFyIGFoZWFkLjwvcT4gVGhlIHNlY29uZCBoYWJpdCBpbiA8Y2l0ZT5UaGUgNyBIYWJpdHMgT2YgSGlnaGx5IFN1Y2Nlc3NmdWwgUGVvcGxlPC9jaXRlPiBpczogYmVnaW4gd2l0aCBhbiBlbmQgaW4gbWluZC48L3A+PHA+SGF2aW5nIGFuIGVuZCBpbiBtaW5kIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHlvdSdsbCByZWFjaCBpdCZtZGFzaDtubyBTdG9pYyB3b3VsZCB0b2xlcmF0ZSB0aGF0IGFzc3VtcHRpb24mbWRhc2g7YnV0IG5vdCBoYXZpbmcgYW4gZW5kIGluIG1pbmQgaXMgYSBndWFyYW50ZWUgeW91IHdvbid0LiBUbyB0aGUgU3RvaWNzLCA8aSBsYW5nPSdlbCc+zr/hvLTOt8+DzrnPgjwvaT4gKGZhbHNlIGNvbmNlcHRpb25zKSBhcmUgcmVzcG9uc2libGUgbm90IGp1c3QgZm9yIGRpc3R1cmJhbmNlcyBpbiB0aGUgc291bCBidXQgZm9yIGNoYW90aWMgYW5kIGR5c2Z1bmN0aW9uYWwgbGl2ZXMgYW5kIG9wZXJhdGlvbnMuIFdoZW4geW91ciBlZmZvcnRzIGFyZSBub3QgZGlyZWN0ZWQgYXQgYSBjYXVzZSBvciBhIHB1cnBvc2UsIGhvdyB3aWxsIHlvdSBrbm93IHdoYXQgdG8gZG8gZGF5IGluIGFuZCBkYXkgb3V0PyBIb3cgd2lsbCB5b3Uga25vdyB3aGF0IHRvIHNheSBubyB0byBhbmQgd2hhdCB0byBzYXkgeWVzIHRvPyBIb3cgd2lsbCB5b3Uga25vdyB3aGVuIHlvdSd2ZSBoYWQgZW5vdWdoLCB3aGVuIHlvdSd2ZSByZWFjaGVkIHlvdXIgZ29hbCwgd2hlbiB5b3UndmUgZ290dGVuIG9mZiB0cmFjaywgaWYgeW91J3ZlIG5ldmVyIGRlZmluZWQgd2hhdCB0aG9zZSB0aGluZ3MgYXJlPzwvcD48cD5UaGUgYW5zd2VyIGlzIHRoYXQgeW91IGNhbm5vdC4gQW5kIHNvIHlvdSBhcmUgZHJpdmVuIGludG8gZmFpbHVyZSZtZGFzaDtvciB3b3JzZSwgaW50byBtYWRuZXNzIGJ5IHRoZSBvYmxpdmlvbiBvZiBkaXJlY3Rpb25sZXNzbmVzcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXaGVyZSwgV2hvLCBXaGF0LCBBbmQgV2h5IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQSBwZXJzb24gd2hvIGRvZXNuJ3Qga25vdyB3aGF0IHRoZSB1bml2ZXJzZSBpcywgZG9lc24ndCBrbm93IHdoZXJlIHRoZXkgYXJlLiBBIHBlcnNvbiB3aG8gZG9lc24ndCBrbm93IHRoZWlyIHB1cnBvc2UgaW4gbGlmZSBkb2Vzbid0IGtub3cgd2hvIHRoZXkgYXJlIG9yIHdoYXQgdGhlIHVuaXZlcnNlIGlzLiBBIHBlcnNvbiB3aG8gZG9lc24ndCBrbm93IGFueSBvbmUgb2YgdGhlc2UgdGhpbmdzIGRvZXNuJ3Qga25vdyB3aHkgdGhleSBhcmUgaGVyZS4gU28gd2hhdCB0byBtYWtlIG9mIHBlb3BsZSB3aG8gc2VlayBvciBhdm9pZCB0aGUgcHJhaXNlIG9mIHRob3NlIHdobyBoYXZlIG5vIGtub3dsZWRnZSBvZiB3aGVyZSBvciB3aG8gdGhleSBhcmU/IiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDguNTIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIGxhdGUgY29tZWRpYW4gTWl0Y2ggSGVkYmVyZyBoYWQgYSBmdW5ueSBzdG9yeSBoZSB0b2xkIGluIGhpcyBhY3QuIFNpdHRpbmcgZG93biBmb3IgYW4gb24tYWlyIGludGVydmlldywgYSByYWRpbyBESiBhc2tlZCBoaW0sIDxxPlNvIHdobyBhcmUgeW91PzwvcT4gSW4gdGhhdCBtb21lbnQsIGhlIGhhZCB0byB0aGluaywgPGVtPklzIHRoaXMgZ3V5IHJlYWxseSBkZWVwIG9yIGRpZCBJIGRyaXZlIHRvIHRoZSB3cm9uZyBzdGF0aW9uPzwvZW0+PC9wPjxwPkhvdyBvZnRlbiBhcmUgd2UgYXNrZWQgYSBzaW1wbGUgcXVlc3Rpb24gbGlrZSA8cT5XaG8gYXJlIHlvdT88L3E+IG9yIDxxPldoYXQgZG8geW91IGRvPzwvcT4gb3IgPHE+V2hlcmUgYXJlIHlvdSBmcm9tPzwvcT4gQ29uc2lkZXJpbmcgaXQgYSBzdXBlcmZpY2lhbCBxdWVzdGlvbiZtZGFzaDtpZiB3ZSBldmVuIGNvbnNpZGVyIGl0IGF0IGFsbCZtZGFzaDt3ZSBkb24ndCBib3RoZXIgd2l0aCBtb3JlIHRoYW4gYSBzdXBlcmZpY2lhbCBhbnN3ZXIuPC9wPjxwPkJ1dCwgZ3VuIHRvIHRoZWlyIGhlYWQsIG1vc3QgcGVvcGxlIGNvdWxkbid0IGdpdmUgbXVjaCBpbiB0aGUgd2F5IG9mIGEgc3Vic3RhbnRpdmUgYW5zd2VyLiBDb3VsZCB5b3U/IEhhdmUgeW91IHRha2VuIHRoZSB0aW1lIHRvIGdldCBjbGFyaXR5IGFib3V0IHdobyB5b3UgYXJlIGFuZCB3aGF0IHlvdSBzdGFuZCBmb3I/IE9yIGFyZSB5b3UgdG9vIGJ1c3kgY2hhc2luZyB1bmltcG9ydGFudCB0aGluZ3MsIG1pbWlja2luZyB0aGUgd3JvbmcgaW5mbHVlbmNlcywgYW5kIGZvbGxvd2luZyBkaXNhcHBvaW50aW5nIG9yIHVuZnVsZmlsbGluZyBvciBub25leGlzdGVudCBwYXRocz88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTZXZlbiBDbGVhciBGdW5jdGlvbnMgT2YgVGhlIE1pbmQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgcHJvcGVyIHdvcmsgb2YgdGhlIG1pbmQgaXMgdGhlIGV4ZXJjaXNlIG9mIGNob2ljZSwgcmVmdXNhbCwgeWVhcm5pbmcsIHJlcHVsc2lvbiwgcHJlcGFyYXRpb24sIHB1cnBvc2UsIGFuZCBhc3NlbnQuIFdoYXQgdGhlbiBjYW4gcG9sbHV0ZSBhbmQgY2xvZyB0aGUgbWluZCdzIHByb3BlciBmdW5jdGlvbmluZz8gTm90aGluZyBidXQgaXRzIG93biBjb3JydXB0IGRlY2lzaW9ucy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCA0LjExLjYtNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5MZXQncyBicmVhayBkb3duIGVhY2ggb25lIG9mIHRob3NlIHRhc2tzOiA8dWwgc3R5bGU9bGlzdC1zdHlsZS10eXBlOm5vbmU+PGxpPkNob2ljZSZtZGFzaDt0byBkbyBhbmQgdGhpbmsgcmlnaHQ8L2xpPjxsaT5SZWZ1c2FsJm1kYXNoO29mIHRlbXB0YXRpb248L2xpPjxsaT5ZZWFybmluZyZtZGFzaDt0byBiZSBiZXR0ZXI8L2xpPjxsaT5SZXB1bHNpb24mbWRhc2g7b2YgbmVnYXRpdml0eSwgb2YgYmFkIGluZmx1ZW5jZXMsIG9mIHdoYXQgaXNuJ3QgdHJ1ZTwvbGk+PGxpPlByZXBhcmF0aW9uJm1kYXNoO2ZvciB3aGF0IGxpZXMgYWhlYWQgb3Igd2hhdGV2ZXIgbWF5IGhhcHBlbjwvbGk+PGxpPlB1cnBvc2UmbWRhc2g7b3VyIGd1aWRpbmcgcHJpbmNpbGUgYW5kIGhpZ2hlc3QgcHJpb3JpdHk8L2xpPjxsaT5Bc3NlbnQmbWRhc2g7dG8gYmUgZnJlZSBvZiBkZWNlcHRpb24gYWJvdXQgd2hhdCdzIGluc2lkZSBhbmQgb3V0c2lkZSBvdXIgY29udHJvbCAoYW5kIGJlIHJlYWR5IHRvIGFjY2VwdCB0aGUgbGF0dGVyKTwvbGk+PC91bD48L3A+PHA+VGhpcyBpcyB3aGF0IHRoZSBtaW5kIGlzIGhlcmUgdG8gZG8uIFdlIG11c3QgbWFrZSBzdXJlIHRoYXQgaXQgZG9lcyZtZGFzaDthbmQgc2VlIGV2ZXJ5dGhpbmcgZWxzZSBhcyBwb2xsdXRpb24gb3IgYSBjb3JydXB0aW9uLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlNlZWluZyBPdXIgQWRkaWN0aW9ucyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldlIG11c3QgZ2l2ZSB1cCBtYW55IHRoaW5ncyB0byB3aGljaCB3ZSBhcmUgYWRkaWN0ZWQsIGNvbnNpZGVyaW5nIHRoZW0gdG8gYmUgZ29vZC4gT3RoZXJ3aXNlLCBjb3VyYWdlIHdpbGwgdmFuaXNoLCB3aGljaCBzaG91bGQgY29udGludWFsbHkgdGVzdCBpdHNlbGYuIEdyZWF0bmVzcyBvZiBzb3VsIHdpbGwgYmUgbG9zdCwgd2hpY2ggY2FuJ3Qgc3RhbmQgb3V0IHVubGVzcyBpdCBkaXNkYWlucyBhcyBwZXR0eSB3aGF0IHRoZSBtb2IgcmVnYXJkcyBhcyBtb3N0IGRlc2lyYWJsZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA3NC4xMmItMTMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+V2hhdCB3ZSBjb25zaWRlciB0byBiZSBoYXJtbGVzcyBpbmR1bGdlbmNlcyBjYW4gZWFzaWx5IGJlY29tZSBmdWxsLWJsb3duIGFkZGljdGlvbnMuIFdlIHN0YXJ0IHdpdGggY29mZmVlIGluIHRoZSBtb3JuaW5nLCBhbmQgc29vbiBlbm91Z2ggd2UgY2FuJ3Qgc3RhcnQgdGhlIGRheSB3aXRob3V0IGl0LiBXZSBjaGVjayBvdXIgZW1haWwgYmVjYXVzZSBpdCdzIHBhcnQgb2Ygb3VyIGpvYiwgYW5kIHNvb24gZW5vdWdoIHdlIGZlZWwgdGhlIHBoYW50b20gYnV6eiBvZiB0aGUgcGhvbmUgaW4gb3VyIHBvY2tldCBldmVyeSBmZXcgc2Vjb25kcy4gU29vbiBlbm91Z2gsIHRoZXNlIGhhcm1sZXNzIGhhYml0cyBhcmUgcnVubmluZyBvdXIgbGl2ZXMuPC9wPjxwPlRoZSBsaXR0bGUgY29tcHVsc2lvbnMgYW5kIGRyaXZlcyB3ZSBoYXZlIG5vdCBvbmx5IGNoaXAgYXdheSBhdCBvdXIgZnJlZWRvbSBhbmQgc292ZXJlaWdudHksIHRoZXkgY2xvdWQgb3VyIGNsYXJpdHkuIFdlIHRoaW5rIHdlJ3JlIGluIGNvbnRyb2wmbWRhc2g7YnV0IGFyZSB3ZSByZWFsbHk/IEFzIG9uZSBhZGRpY3QgcHV0IGl0LCBhZGRpY3Rpb24gaXMgd2hlbiB3ZSd2ZSA8cT5sb3N0IHRoZSBmcmVlZG9tIHRvIGFic3RhaW4uPC9xPiBMZXQgdXMgcmVjbGFpbSB0aGF0IGZyZWVkb20uPC9wPjxwPldoYXQgdGhhdCBhZGRpY3Rpb24gaXMgZm9yIHlvdSBjYW4gdmFyeTogU29kYT8gRHJ1Z3M/IENvbXBsYWluaW5nPyBHb3NzaXA/IFRoZSBJbnRlcm5ldD8gQml0aW5nIHlvdXIgbmFpbHM/IEJ1dCB5b3UgbXVzdCByZWNsYWltIHRoZSBhYmlsaXR5IHRvIGFic3RhaW4gYmVjYXVzZSB3aXRoaW4gaXQgaXMgeW91ciBjbGFyaXR5IGFuZCBzZWxmLWNvbnRyb2wuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSA5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiV2hhdCBXZSBDb250cm9sIEFuZCBXaGF0IFdlIERvbid0IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiU29tZSB0aGluZ3MgYXJlIGluIG91ciBjb250cm9sLCB3aGlsZSBvdGhlcnMgYXJlIG5vdC4gV2UgY29udHJvbCBvdXIgb3BpbmlvbiwgY2hvaWNlLCBkZXNpcmUsIGF2ZXJzaW9uLCBhbmQgaW4gYSB3b3JkLCBldmVyeXRoaW5nIG9mIG91ciBvd24gZG9pbmcuIFdlIGRvbid0IGNvbnRyb2wgb3VyIGJvZHksIHByb3BlcnR5LCByZXB1dGF0aW9uLCBwb3NpdGlvbiwgYW5kIGluIGEgd29yZCwgZXZlcnl0aGluZyBub3Qgb2Ygb3VyIG93biBkb2luZy4gRXZlbiBtb3JlLCB0aGUgdGhpbmdzIGluIG91ciBjb250cm9sIGFyZSBieSBuYXR1cmUgZnJlZSwgdW5oaW5kZXJlZCwgYW5kIHVub2JzdHJ1Y3RlZCwgd2hpbGUgdGhvc2Ugbm90IGluIG91ciBjb250cm9sIGFyZSB3ZWFrLCBzbGF2aXNoLCBjYW4gYmUgaGluZGVyZWQsIGFuZCBhcmUgbm90IG91ciBvd24uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRW5jaGlyaWRpb24sIDEuMS0yIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRvZGF5LCB5b3Ugd29uJ3QgY29udHJvbCB0aGUgZXh0ZXJuYWwgZXZlbnRzIHRoYXQgaGFwcGVuLiBJcyB0aGF0IHNjYXJ5PyBBIGxpdHRsZSwgYnV0IGl0J3MgYmFsYW5jZWQgd2hlbiB3ZSBzZWUgdGhhdCB3ZSBjYW4gY29udHJvbCBvdXIgb3BpbmlvbiA8ZW0+YWJvdXQ8L2VtPiB0aG9zZSBldmVudHMuIFlvdSBkZWNpZGUgd2hldGhlciB0aGV5J3JlIGdvb2Qgb3IgYmFkLCB3aGV0aGVyIHRoZXkncmUgZmFpciBvciB1bmZhaXIuIFlvdSBkb24ndCBjb250cm9sIHRoZSBzaXR1YXRpb24sIGJ1dCB5b3UgY29udHJvbCB3aGF0IHlvdSA8ZW0+dGhpbms8L2VtPiBhYm91dCBpdC48L3A+PHA+U2VlIGhvdyB0aGF0IHdvcmtzPyBFdmVyeSBzaW5nbGUgdGhpbmcgdGhhdCBpcyBvdXRzaWRlIHlvdXIgY29udHJvbCZtZGFzaDt0aGUgb3V0c2lkZSB3b3JsZCwgb3RoZXIgcGVvcGxlLCBsdWNrLCBrYXJtYSwgd2hhdGV2ZXImbWRhc2g7c3RpbGwgcHJlc2VudHMgYSBjb3JyZXNwb25kaW5nIGFyZWEgdGhhdCA8ZW0+aXM8L2VtPiBpbiB5b3VyIGNvbnRyb2wuIFRoaXMgYWxvbmUgZ2l2ZXMgdXMgcGxlbnR5IHRvIG1hbmFnZSwgcGxlbnR5IG9mIHBvd2VyLjwvcD48cD5CZXN0IG9mIGFsbCwgYW4gaG9uZXN0IHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBpcyB3aXRoaW4gb3VyIGNvbnRyb2wgcHJvdmlkZXMgcmVhbCBjbGFyaXR5IGFib3V0IHRoZSB3b3JsZDogYWxsIHdlIGhhdmUgaXMgb3VyIG93biBtaW5kLiBSZW1lbWJlciB0aGF0IHRvZGF5IHdoZW4geW91IHRyeSB0byBleHRlbmQgeW91ciByZWFjaCBvdXR3YXJkJm1kYXNoO3RoYXQgaXQncyBtdWNoIGJldHRlciBhbmQgbW9yZSBhcHByb3ByaWF0ZWx5IGRpcmVjdGVkIDxlbT5pbndhcmQuPC9lbT4uPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIklmIFlvdSBXYW50IFRvIEJlIFN0ZWFkeSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZSBlc3NlbmNlIG9mIGdvb2QgaXMgYSBjZXJ0YWluIGtpbmQgb2YgcmVhc29uZWQgY2hvaWNlOyBqdXN0IGFzIHRoZSBlc3NlbmNlIG9mIGV2aWwgaXMgYW5vdGhlciBraW5kLiBXaGF0IGFib3V0IGV4dGVybmFscywgdGhlbj8gVGhleSBhcmUgb25seSB0aGUgcmF3IG1hdGVyaWFsIGZvciBvdXIgcmVhc29uZWQgY2hvaWNlLCB3aGljaCBmaW5kcyBpdHMgb3duIGdvb2Qgb3IgZXZpbCBpbiB3b3JraW5nIHdpdGggdGhlbS4gSG93IHdpbGwgaXQgZmluZCB0aGUgZ29vZD8gTm90IGJ5IG1hcnZlbGluZyBhdCB0aGUgbWF0ZXJpYWwhIEZvciBpZiBqdWRnbWVudHMgYWJvdXQgdGhlIG1hdGVyaWFsIGFyZSBzdHJhaWdodCB0aGF0IG1ha2VzIG91ciBjaG9pY2VzIGdvb2QsIGJ1dCBpZiB0aG9zZSBqdWRnZW1lbnRzIGFyZSB0d2lzdGVkLCBvdXIgY2hvaWNlcyB0dXJuIGJhZC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAxLjI5LjEtMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgU3RvaWMgc2VlayBzdGVhZGluZXNzLCBzdGFiaWxpdHksIGFuZCB0cmFucXVpbGl0eSZtZGFzaDt0cmFpdHMgbW9zdCBvZiB1cyBhc3BpcmUgdG8gYnV0IHNlZW0gdG8gZXhwZXJpZW5jZSBvbmx5IGZsZWV0aW5nbHkuIEhvdyBkbyB0aGV5IGFjY29tcGxpc2ggdGhpcyBlbHVzaXZlIGdvYWw/IEhvdyBkb2VzIG9uZSBlbWJvZHkgPGkgbGFuZz0nZWwnPs614b2Qz4PPhM6szrjOtc65zrE8L2k+ICh0aGUgd29yZCBBcnJpYW4gdXNlZCB0byBkZXNjcmliZSB0aGlzIHRlYWNoaW5nIG9mIEVwaWN0ZXR1cyk/PC9wPjxwPldlbGwsIGl0J3Mgbm90IGx1Y2suIEl0J3Mgbm90IGJ5IGVsaW1pbmF0aW5nIG91dHNpZGUgaW5mbHVlbmNlcyBvciB0dXJuaW5nIGF3YXkgdG8gcXVpZXQgYW5kIHNvbGl0dWRlLiBJbnN0ZWFkLCBpdCdzIGFib3V0IGZpbHRlcmluZyB0aGUgb3V0c2lkZSB3b3JsZCB0aHJvdWdoIHRoZSBzdHJhaWdodGVuZXIgb2Ygb3VyIGp1ZGdtZW50LiBUaGF0J3Mgd2hhdCBvdXIgcmVhc29uIGNhbiBkbyZtZGFzaDtpdCBjYW4gdGFrZSB0aGUgY3Jvb2tlZCwgY29uZnVzaW5nLCBhbmQgb3ZlcndoZWxtaW5nIG5hdHVyZSBvZiBleHRlcm5hbCBldmVudHMgYW5kIG1ha2UgdGhlbSBvcmRlcmx5LjwvcD48cD5Ib3dldmVyLCBpZiBvdXIganVkZ2VtZW50cyBhcmUgY3Jvb2tlZCBiZWNhdXNlIHdlIGRvbid0IHVzZSByZWFzb24sIHRoZW4gZXZlcnl0aGluZyB0aGF0IGZvbGxvd3Mgd2lsbCBiZSBjcm9va2VkLCBhbmQgd2Ugd2lsbCBsb3NlIG91ciBhYmlsaXR5IHRvIHN0ZWFkeSBvdXJzZWx2ZXMgaW4gdGhlIGNoYW9zIGFuZCBydXNoIG9mIGxpZmUuIElmIHlvdSB3YW50IHRvIGJlIHN0ZWFkeSwgaWYgeW91IHdhbnQgY2xhcml0eSwgcHJvcGVyIGp1ZGdtZW50IGlzIHRoZSBiZXN0IHdheS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDExIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiSWYgWW91IFdhbnQgVG8gQmUgVW5zdGVhZHkiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJGb3IgaWYgYSBwZXJzb24gc2hpZnRzIHRoZWlyIGNhdXRpb24gdG8gdGhlaXIgb3duIHJlYXNvbmVkIGNob2ljZXMgYW5kIHRoZSBhY3RzIG9mIHRob3NlIGNob2ljZXMsIHRoZXkgd2lsbCBhdCB0aGUgc2FtZSB0aW1lIGdhaW4gdGhlIHdpbGwgdG8gYXZvaWQsIGJ1dCBpZiB0aGV5IHNoaWZ0IHRoZWlyIGNhdXRpb24gYXdheSBmcm9tIHRoZWlyIG93biByZWFzb25lZCBjaG9pY2VzIHRvIHRoaW5ncyBub3QgdW5kZXIgdGhlaXIgY29udHJvbCwgc2Vla2luZyB0byBhdm9pZCB3aGF0IGlzIGNvbnRyb2xsZWQgYnkgb3RoZXJzLCB0aGV5IHdpbGwgdGhlbiBiZSBhZ2l0YXRlZCwgZmVhcmZ1bCwgYW5kIHVuc3RhYmxlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDIuMS4xMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgaW1hZ2Ugb2YgdGhlIFplbiBwaGlsb3NvcGhlciBpcyB0aGUgbW9uayB1cCBpbiB0aGUgZ3JlZW4gcXVpZXQgaGlsbHMsIG9yIGluIGEgYmVhdXRpZnVsIHRlbXBsZSBvbiBzb21lIHJvY2t5IGNsaWZmLiBUaGUgU3RvaWNzIGFyZSB0aGUgYW50aXRoZXNpcyBvZiB0aGlzIGlkZWEuIEluc3RlYWQsIHRoZXkgYXJlIHRoZSBtYW4gaW4gdGhlIG1hcmtldHBsYWNlLCB0aGUgc2VuYXRvciBpbiB0aGUgRm9ydW0sIHRoZSBicmF2ZSB3aWZlIHdhaXRpbmcgZm9yIGhlciBzb2xkaWVyIHRvIHJldHVybiBmcm9tIGJhdHRsZSwgdGhlIHNjdWxwdG9yIGJ1c3kgaW4gaGVyIHN0dWRpby4gU3RpbGwsIHRoZSBTdG9pYyBpcyBlcXVhbGx5IGF0IHBlYWNlLjwvcD48cD5FcGljdGV0dXMgaXMgcmVtaW5kaW5nIHlvdSB0aGF0IHNlcmVuaXR5IGFuZCBzdGFiaWxpdHkgYXJlIHJlc3VsdHMgb2YgeW91ciBjaG9pY2VzIGFuZCBqdWRnZW1lbnQsIG5vdCB5b3VyIGVudmlyb25tZW50LiBJZiB5b3Ugc2VlayB0byBhdm9pZCBhbGwgZGlzcnVwdGlvbnMgdG8gdHJhbnF1aWxpdHkmbWRhc2g7b3RoZXIgcGVvcGxlLCBleHRlcm5hbCBldmVudHMsIHN0cmVzcyZtZGFzaDt5b3Ugd2lsbCBuZXZlciBiZSBzdWNjZXNzZnVsLiBZb3VyIHByb2JsZW1zIHdpbGwgZm9sbG93IHlvdSB3aGVyZXZlciB5b3UgcnVuIGFuZCBoaWRlLiBCdXQgaWYgeW91IHNlZWsgdG8gYXZvaWQgdGhlIGhhcm1mdWwgYW5kIGRpc3J1cHRpdmUgPGVtPmp1ZGdlbWVudHM8L2VtPiB0aGF0IGNhdXNlIHRob3NlIHByb2JsZW1zLCB0aGVuIHlvdSB3aWxsIGJlIHN0YWJsZSBhbmQgc3RlYWR5IHdoZXJldmVyIHlvdSBoYXBwZW4gdG8gYmUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBPbmUgUGF0aCBUbyBTZXJlbml0eSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIktlZXAgdGhpcyB0aG91Z2h0IGF0IHRoZSByZWFkeSBhdCBkYXlicmVhaywgYW5kIHRocm91Z2ggdGhlIGRheSBhbmQgbmlnaHQmbWRhc2g7dGhlcmUgaXMgb25seSBvbmUgcGF0aCB0byBoYXBwaW5lc3MsIGFuZCB0aGF0IGlzIGluIGdpdmluZyB1cCBhbGwgb3V0c2lkZSBvZiB5b3VyIHNwaGVyZSBvZiBjaG9pY2UsIHJlZ2FyZGluZyBub3RoaW5nIGVsc2UgYXMgeW91ciBwb3NzZXNzaW9uLCBzdXJyZW5kZXJpbmcgYWxsIGVsc2UgdG8gR29kIGFuZCBGb3J0dW5lLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDQuNC4zOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGlzIG1vcm5pbmcsIHJlbWluZCB5b3Vyc2VsZiBvZiB3aGF0IGlzIGluIHlvdXIgY29udHJvbCBhbmQgd2hhdCdzIG5vdCBpbiB5b3VyIGNvbnRyb2wuIFJlbWluZCB5b3Vyc2VsZiB0byBmb2N1cyBvbiB0aGUgZm9ybWVyIGFuZCBub3QgdGhlIGxhdHRlci48L3A+PHA+QmVmb3JlIGx1bmNoLCByZW1pbmQgeW91cnNlbGYgdGhhdCB0aGUgb25seSB0aGluZyB5b3UgdHJ1bHkgcG9zc2VzcyBpcyB5b3VyIGFiaWxpdHkgdG8gbWFrZSBjaG9pY2VzIChhbmQgdG8gdXNlIHJlYXNvbiBhbmQganVkZ21lbnQgd2hlbiBkb2luZyBzbykuIFRoaXMgaXMgdGhlIG9ubHkgdGhpbmcgdGhhdCBjYW4gbmV2ZXIgYmUgdGFrZW4gZnJvbSB5b3UgY29tcGxldGVseS48L3A+PHA+SW4gdGhlIGFmdGVybm9vbiwgcmVtaW5kIHlvdXJzZWxmIHRoYXQgYXNpZGUgZnJvbSB0aGUgY2hvaWNlcyB5b3UgbWFrZSwgeW91ciBmYXRlIGlzIG5vdCBlbnRpcmVseSB1cCB0byB5b3UuIFRoZSB3b3JsZCBpcyBzcGlubmluZyBhbmQgd2Ugc3BpbiBhbG9uZyB3aXRoIGl0Jm1kYXNoO3doaWNoZXZlciBkaXJlY3Rpb24sIGdvb2Qgb3IgYmFkLjwvcD48cD5JbiB0aGUgZXZlbmluZywgcmVtaW5kIHlvdXJzZWxmIGhvdyBtdWNoIGlzIG91dHNpZGUgb2YgeW91ciBjb250cm9sIGFuZCB3aGVyZSB5b3VyIGNob2ljZXMgYmVnaW4gYW5kIGVuZC48L3A+PHA+QXMgeW91IGxpZSBpbiBiZWQsIHJlbWVtYmVyIHRoYXQgc2xlZXAgaXMgYSBmb3JtIG9mIHN1cnJlbmRlciBhbmQgdHJ1c3QgYW5kIGhvdyBlYXNpbHkgaXQgY29tZXMuIEFuZCBwcmVwYXJlIHRvIHN0YXJ0IHRoZSB3aG9sZSBjeWNsZSBvdmVyIGFnYWluIHRvbW9ycm93LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJDaXJjbGUgT2YgQ29udHJvbCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldlIGNvbnRyb2wgb3VyIHJlYXNvbmVkIGNob2ljZSBhbmQgYWxsIGFjdHMgdGhhdCBkZXBlbmQgb24gdGhhdCBtb3JhbCB3aWxsLiBXaGF0J3Mgbm90IHVuZGVyIG91ciBjb250cm9sIGFyZSB0aGUgYm9keSBhbmQgYW55IG9mIGl0cyBwYXJ0cywgb3VyIHBvc3Nlc3Npb25zLCBwYXJlbnRzLCBzaWJsaW5ncywgY2hpbGRyZW4sIG9yIGNvdW50cnkmbWRhc2g7YW55dGhpbmcgd2l0aCB3aXRoIHdlIG1pZ2h0IGFzc29jaWF0ZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAxLjIyLjEwIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoaXMgaXMgaW1wb3J0YW50IGVub3VnaCB0aGF0IGl0IGJlYXJzIHJlcGVhdGluZzogYSB3aXNlIHBlcnNvbiBrbm93cyB3aGF0J3MgaW5zaWRlIHRoZWlyIGNpcmNsZSBvZiBjb250cm9sIGFuZCB3aGF0IGlzIG91dHNpZGUgb2YgaXQuPC9wPjxwPlRoZSBnb29kIG5ld3MgaXMgdGhhdCBpdCdzIHByZXR0eSBlYXN5IHRvIHJlbWVtYmVyIHdoYXQgaXMgaW5zaWRlIG91ciBjb250cm9sLiBBY2NvcmRpbmcgdG8gdGhlIFN0b2ljcywgdGhlIGNpcmNsZSBvZiBjb250cm9sIGNvbnRhaW5zIGp1c3Qgb25lIHRoaW5nOiBZT1VSIE1JTkQuIFRoYXQncyByaWdodCwgZXZlbiB5b3VyIHBoeXNpY2FsIGJvZHkgaXNuJ3QgY29tcGxldGVseSB3aXRoaW4gdGhlIGNpcmNsZS4gQWZ0ZXIgYWxsLCB5b3UgY291bGQgYmUgc3RydWNrIHdpdGggYSBwaHlzaWNhbCBpbGxuZXNzIG9yIGltcGFpcm1lbnQgYXQgYW55IG1vbWVudC4gWW91IGNvdWxkIGJlIHRyYXZlbGluZyBpbiBhIGZvcmVpZ24gY291bnRyeSBhbmQgYmUgdGhyb3duIGluIGphaWwuPC9wPjxwPkJ1dCB0aGlzIGlzIGFsbCBnb29kIG5ld3MgYmVjYXVzZSBpdCBkcmFzdGljYWxseSByZWR1Y2VzIHRoZSBhbW91bnQgb2YgdGhpbmdzIHRoYXQgeW91IG5lZWQgdG8gdGhpbmsgYWJvdXQuIFRoZXJlIGlzIGNsYXJpdHkgaW4gc2ltcGxpY2l0eS4gV2hpbGUgZXZlcnlvbmUgZWxzZSBpcyBydW5uaW5nIGFyb3VuZCB3aXRoIGEgbGlzdCBvZiByZXNwb25zaWJpbGl0aWVzIGEgbWlsZSBsb25nJm1kYXNoO3RoaW5ncyB0aGV5J3JlIG5vdCBhY3R1YWxseSByZXNwb25zaWJsZSBmb3ImbWRhc2g7eW91J3ZlIGdvdCBqdXN0IHRoYXQgb25lLWl0ZW0gbGlzdC4gWW91J3ZlIGdvdCBqdXN0IG9uZSB0aGluZyB0byBtYW5hZ2U6IHlvdXIgY2hvaWNlcywgeW91ciB3aWxsLCB5b3VyIG1pbmQuPC9wPjxwPlNvIG1pbmQgaXQuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkN1dCBUaGUgU3RyaW5ncyBUaGF0IFB1bGwgWW91ciBNaW5kIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVW5kZXJzdGFuZCBhdCBsYXN0IHRoYXQgeW91IGhhdmUgc29tZXRoaW5nIGluIHlvdSBtb3JlIHBvd2VyZnVsIGFuZCBkaXZpbmUgdGhhbiB3aGF0IGNhdXNlcyB0aGUgYm9kaWx5IHBhc3Npb25zIGFuZCBwdWxscyB5b3UgbGlrZSBhIG1lcmUgcHVwcGV0LiBXaGF0IHRob3VnaHRzIG5vdyBvY2N1cHkgbXkgbWluZD8gSXMgaXQgbm90IGZlYXIsIHN1c3BpY2lvbiwgZGVzaXJlLCBvciBzb21ldGhpbmcgbGlrZSB0aGF0PyIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCAxMi4xOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGluayBvZiBhbGwgdGhlIGludGVyZXN0cyB2eWluZyBmb3IgYSBzaGFyZSBvZiB5b3VyIHdhbGxldCBvciBmb3IgYSBzZWNvbmQgb2YgeW91ciBhdHRlbnRpb24uIEZvb2Qgc2NpZW50aXN0cyBhcmUgZW5naW5lZXJpbmcgcHJvZHVjdHMgdG8gZXhwbG9pdCB5b3VyIHRhc3RlIGJ1ZHMuIFNpbGljb24gVmFsbGV5IGVuZ2luZWVycyBhcmUgZGVzaWduaW5nIGFwcGxpY2F0aW9ucyBhcyBhZGRpY3RpdmUgYXMgZ2FtYmxpbmcuIFRoZSBtZWRpYSBpcyBtYW51ZmFjdHVyaW5nIHN0b3JpZXMgdG8gcHJvdm9rZSBvdXRyYWdlIGFuZCBhbmdlci48L3A+PHA+VGhlc2UgYXJlIGp1c3QgYSBzbWFsbCBzbGljZSBvZiB0aGUgdGVtcHRhdGlvbnMgYW5kIGZvcmNlcyBhY3Rpbmcgb24gdXMmbWRhc2g7ZGlzdHJhY3RpbmcgdXMgYW5kIHB1bGxpbmcgdXMgIGF3YXkgZnJvbSB0aGUgdGhpbmdzIHRoYXQgdHJ1bHkgbWF0dGVyLiBNYXJjdXMsIHRoYW5rZnVsbHksIHdhcyBub3QgZXhwb3NlZCB0byB0aGVzZSBleHRyZW1lIHBhcnRzIG9mIG91ciBtb2Rlcm4gY3VsdHVyZS4gQnV0IGhlIGtuZXcgcGxlbnR5IG9mIGRpc3RyYWN0aW5nIHNpbmtob2xlcyB0b286IGdvc3NpcCwgdGhlIGVuZGxlc3MgY2FsbCBvZiB3b3JrLCBhcyB3ZWxsIGFzIGZlYXIsIHN1c3BpY2lvbiwgbHVzdC4gRXZlcnkgaHVtYW4gYmVpbmcgaXMgcHVsbGVkIGJ5IHRoZXNlIGludGVybmFsIGFuZCBleHRlcm5hbCBmb3JjZXMgdGhhdCBhcmUgaW5jcmVhc2luZ2x5IG1vcmUgcG93ZXJmdWwgYW5kIGhhcmRlciB0byByZXNpc3QuPC9wPjxwPlBoaWxvc29waHkgaXMgc2ltcGx5IGFza2luZyB1cyB0byBwYXkgY2FyZWZ1bCBhdHRlbnRpb24gYW5kIHRvIHN0cml2ZSB0byBiZSBtb3JlIHRoYW4gYSBwYXduLiBBcyBWaWNvdHIgRnJhbmtsIHB1dHMgaXQgaW4gPGNpdGU+VGhlIFdpbGwgdG8gTWVhbmluZzwvY2l0ZT4sIDxxPk1hbiBpcyBwdXNoZWQgYnkgZHJpdmVzIGJ1dCBwdWxsZWQgYnkgdmFsdWVzLjwvcT4gVGhlc2UgdmFsdWVzIGFuZCBpbm5lciBhd2FyZW5lc3MgcHJldmVudCB1cyBmcm9tIGJlaW5nIHB1cHBldHMuIFN1cmUsIHBheWluZyBhdHRlbnRpb24gcmVxdWlyZXMgd29yayBhbmQgYXdhcmVuZXNzLCBidXQgaXNuJ3QgdGhhdCBiZXR0ZXIgdGhhbiBiZWluZyBqZXJrZWQgYWJvdXQgb24gYSBzdHJpbmcuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlBlYWNlIElzIEluIFN0YXlpbmcgVGhlIENvdXJzZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRyYW5xdWlsaXR5IGNhbid0IGJlIGdyYXNwZWQgZXhjZXB0IGJ5IHRob3NlIHdobyBoYXZlIHJlYWNoZWQgYW4gdW53YXZlcmluZyBhZCBmaXJtIHBvd2VyIG9mIGp1ZGdlbWVudCZtZGFzaDt0aGUgcmVzdCBjb25zdGFudGx5IGZhbGwgYW5kIHJpc2UgaW4gdGhlaXIgZGVjaXNpb25zLCB3YXZlcmluZyBpbiBhIHN0YXRlIG9mIGFsdGVybmF0ZWx5IHJlamVjdGluZyBhbmQgYWNjZXB0aW5nIHRoaW5ncy4gV2hhdCBpcyB0aGUgY2F1c2Ugb2YgdGhpcyBiYWNrIGFuZCBmb3J0aD8gSXQncyBiZWNhdXNlIG5vdGhpbmcgaXMgY2xlYXIgYW5kIHRoZXkgcmVseSBvbiB0aGUgbW9zdCB1bmNlcnRhaW4gZ3VpZGUmbWRhc2g7Y29tbW9uIG9waW5pb24uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTW9yYWwgTGV0dGVycywgOTUuNTdiLTU4YSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5JbiBTZW5lY2EncyBlc3NheSBvbiB0cmFucXVpbGl0eSwgaGUgdXNlZCB0aGUgR3JlZWsgd29yZCA8aSBsYW5nPSdlbCc+zrXhvZDOuM+FzrzOr86xPC9pPiwgd2hpY2ggaGUgZGVmaW5lcyBhcyA8cT5iZWxpZXZpbmcgaW4geW91cnNlbGYgYW5kIHRydXN0aW5nIHRoYXQgeW91IGFyZSBvbiB0aGUgcmlnaHQgcGF0aCwgYW5kIG5vdCBiZWluZyBpbiBkb3VidCBieSBmb2xsb3dpbmcgdGhlIG15cmlhZCBmb290cGF0aHMgb2YgdGhvc2Ugd2FuZGVyaW5nIGluIGV2ZXJ5IGRpcmVjdGlvbi48L3E+IEl0IGlzIHRoaXMgc3RhdGUgb2YgbWluZCwgaGUgc2F5cywgdGhhdCBwcm9kdWNlcyB0cmFucXVpbGl0eS48L3A+PHA+Q2xhcml0eSBvZiB2aXNpb24gYWxsb3dzIHVzIHRvIGhhdmUgdGhpcyBiZWxpZWYuIFRoYXQncyBub3QgdG8gc2F5IHdlJ3JlIGFsd2F5cyBnb2luZyB0byBiZSAxMDAgcGVyY2VudCBjZXJ0YWluIG9mIGV2ZXJ5dGhpbmcsIG9yIHRoYXQgd2UgZXZlbiBzaG91bGQgYmUuIFJhdGhlciwgaXQncyB0aGF0IHdlIGNhbiByZXN0IGFzc3VyZWQgd2UncmUgaGVhZGluZyBnZW5lcmFsbHkgaW4gdGhlIHJpZ2h0IGRpcmVjdGlvbiZtZGFzaDt0aGF0IHdlIGRvbid0IG5lZWQgdG8gY29uc3RhbnRseSBjb21wYXJlIG91cnNlbHZlcyB3aXRoIG90aGVyIHBlb3BsZSBvciBjaGFuZ2Ugb3VyIG1pbmQgZXZlcnkgdGhyZWUgc2Vjb25kcyBiYXNlZCBvbiBuZXcgaW5mb3JtYXRpb24uPC9wPjxwPkluc3RlYWQsIHRyYW5xdWlsaXR5IGFuZCBwZWFjZSBhcmUgZm91bmQgaW4gaWRlbnRpZnlpbmcgPGVtPm91cjwvZW0+IHBhdGggYW5kIGluIHN0aWNraW5nIHRvIGl0OiBzdGF5aW5nIHRoZSBjb3Vyc2UmbWRhc2g7bWFraW5nIGFkanVzdG1lbnRzIGhlcmUgYW5kIHRoZXJlLCBuYXR1cmFsbHkmbWRhc2g7YnV0IGlnbm9yaW5nIHRoZSBkaXN0cmFjdGluZyBzaXJlbnMgd2hvIGJlY2tvbiB1cyB0byB0dXJuIHRvd2FyZCB0aGUgcm9ja3MuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAxNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIk5ldmVyIERvIEFueXRoaW5nIE91dCBPZiBIYWJpdCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlNvIGluIHRoZSBtYWpvcml0eSBvZiBvdGhlciB0aGluZ3MsIHdlIGFkZHJlc3MgY2lyY3Vtc3RhbmNlcyBub3QgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSByaWdodCBhc3N1bXB0aW9ucywgYnV0IG1vc3RseSBieSBmb2xsb3dpbmcgd3JldGNoZWQgaGFiaXQuIFNpbmNlIGFsbCB0aGF0IEkndmUgc2FpZCBpcyB0aGUgY2FzZSwgdGhlIHBlcnNvbiBpbiB0cmFpbmluZyBtdXN0IHNlZWsgdG8gcmlzZSBhYm92ZSwgc28gYXMgdG8gc3RvcCBzZWVraW5nIG91dCBwbGVhc3VyZSBhbmQgc3RlZXJpbmcgYXdheSBmcm9tIHBhaW47IHRvIHN0b3AgY2xpbmdpbmcgdG8gbGl2aW5nIGFuZCBhYmhvcnJpbmcgZGVhdGg7IGFuZCBpbiB0aGUgY2FzZSBvZiBwcm9wZXJ0eSBhbmQgbW9uZXksIHRvIHN0b3AgdmFsdWluZyByZWNlaXZpbmcgb3ZlciBnaXZpbmcuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTXVzb25pdXMgUnVmdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJMZWN0dXJlcywgNi4yNS41LTExIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkEgd29ya2VyIGlzIGFza2VkOiA8cT5XaHkgZGlkIHlvdSBkbyBpdCB0aGlzIHdheT88L3E+IFRoZSBhbnN3ZXIsIDxxPkJlY2F1c2UgdGhhdCdzIHRoZSB3YXkgd2UndmUgYWx3YXlzIGRvbmUgdGhpbmdzLjwvcT4gVGhlIGFuc3dlciBmcnVzdHJhdGVzIGV2ZXJ5IGdvb2QgYm9zcyBhbmQgc2V0cyB0aGUgbW91dGggb2YgZXZlcnkgZW50cmVwcmVuZXVyIHdhdGVyaW5nLiBUaGUgd29ya2VyIGhhcyBzdG9wcGVkIHRoaW5raW5nIGFuZCBpcyBtaW5kbGVzc2x5IG9wZXJhdGluZyBvdXQgb2YgaGFiaXQuIFRoZSBidXNpbmVzcyBpcyByaXBlIGZvciBkaXNydXB0aW9uIGJ5IGEgY29tcGV0aXRvciwgYW5kIHRoZSB3b3JrZXIgd2lsbCBwcm9iYWJseSBnZXQgZmlyZWQgYnkgYW55IHRoaW5raW5nIGJvc3MuPC9wPjxwPldlIHNob3VsZCBhcHBseSB0aGUgc2FtZSBydXRobGVzc25lc3MgdG8gb3VyIG93biBoYWJpdHMuIEluIGZhY3QsIHdlIGFyZSBzdHVkeWluZyBwaGlsb3NvcGh5IHByZWNpc2VseSB0byBicmVhayBvdXJzZWx2ZXMgb2Ygcm90ZSBiZWhhdmlvci4gRmluZCB3aGF0IHlvdSBkbyBvdXQgb2Ygcm90ZSBtZW1vcnkgb3Igcm91dGluZS4gQXNrIHlvdXJzZWxmOiA8aT5JcyB0aGlzIHJlYWxseSB0aGUgYmVzdCB3YXkgdG8gZG8gaXQ/PC9pPiBLbm93IHdoeSB5b3UgZG8gd2hhdCB5b3UgZG8gJm5kYXNoIGRvIGl0IGZvciB0aGUgcmlnaHQgcmVhc29ucy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDE3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiUmVib290IFRoZSBSZWFsIFdvcmsiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJIGFtIHlvdXIgdGVhY2hlciBhbmQgeW91IGFyZSBsZWFybmluZyBpbiBteSBzY2hvb2wuICBNeSBhaW0gaXMgdG8gYnJpbmcgeW91IHRvIGNvbXBsZXRpb24sIHVuaGluZGVyZWQsIGZyZWUgZnJvbSBjb21wdWxzaXZlIGJlaGF2aW9yLCB1bnJlc3RyYWluZWQsIHdpdGhvdXQgc2hhbWUsIGZyZWUsIGZsb3VyaXNoaW5nLCBhbmQgaGFwcHksIGxvb2tpbmcgdG8gR29kIGluIHRoaW5ncyBncmVhdCBhbmQgc21hbGwmbWRhc2g7eW91ciBhaW0gaXMgdG8gbGVhcm4gYW5kIGRpbGlnZW50bHkgcHJhY3RpY2UgYWxsIHRoZXNlIHRoaW5ncy4gIFdoeSB0aGVuIGRvbid0IHlvdSBjb21wbGV0ZSB0aGUgd29yaywgaWYgeW91IGhhdmUgdGhlIHJpZ2h0IGFpbSBhbmQgSSBoYXZlIGJvdGggdGhlIHJpZ2h0IGFpbSBhbmQgcmlnaHQgcHJlcGFyYXRpb24/ICBXaGF0IGlzIG1pc3Npbmc/IC4gLiAuIFRoZSB3b3JrIGlzIHF1aXRlIGZlYXNpYmxlLCBhbmQgaXMgdGhlIG9ubHkgdGhpbmcgaW4gb3VyIHBvd2VyIC4gLiAuIExldCBnbyBvZiB0aGUgcGFzdC4gIFdlIG11c3Qgb25seSBiZWdpbi4gIEJlbGlldmUgbWUgYW5kIHlvdSB3aWxsIHNlZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAyLjE5LjI5LTM0Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkRvIHlvdSByZW1lbWJlciwgaW4gc2Nob29sLCBvciBlYXJseSBpbiB5b3VyIGxpZmUsIGJlaW5nIGFmcmFpZCB0byB0cnkgc29tZXRoaW5nIGJlY2F1c2UgeW91IGZlYXJlZCB5b3UgbWlnaHQgZmFpbCBhdCBpdD8gIE1vc3QgdGVlbmFnZXJzIGNob29zZSB0byBmb29sIGFyb3VuZCByYXRoZXIgdGhhbiBleGVydCB0aGVtc2VsdmVzLiAgSGFsZmhlYXJ0ZWQsIGxhenkgZWZmb3J0IGdpdmVzIHRoZW0gYSByZWFkeS1tYWRlIGV4Y3VzZTogPHE+SXQgZG9lc24ndCBtYXR0ZXIuIEkgd2Fzbid0IGV2ZW4gdHJ5aW5nLjwvcT48L3A+PHA+QXMgd2UgZ2V0IG9sZGVyLCBmYWlsdXJlIGlzIG5vdCBzbyBpbmNvbnNlcXVlbnRpYWwgYW55bW9yZS4gIFdoYXQncyBhdCBzdGFrZSBpcyBub3Qgc29tZSBhcmJpdHJhcnkgZ3JhZGUgb3IgaW50cmFtdXJhbCBzcG9ydHMgdHJvcGh5LCBidXQgdGhlIHF1YWxpdHkgb2YgeW91ciBsaWZlIGFuZCB5b3VyIGFiaWxpdHkgdG8gZGVhbCB3aXRoIHRoZSB3b3JsZCBhcm91bmQgeW91LjwvcD48cD5Eb24ndCBsZXQgdGhhdCBpbnRpbWlkYXRlIHlvdSwgdGhvdWdoLiAgWW91IGhhdmUgdGhlIGJlc3QgdGVhY2hlcnMgaW4gdGhlIHdvcmxkOiB0aGUgd2lzZXN0IHBoaWxvc29waGVycyB3aG8gZXZlciBsaXZlZC4gIEFuZCBub3Qgb25seSBhcmUgeW91IGNhcGFibGUsIHRoZSBwcm9mZXNzb3IgaXMgYXNraW5nIGZvciBzb21ldGhpbmcgdmVyeSBzaW1wbGU6IGp1c3QgYmVnaW4gdGhlIHdvcmsuICBUaGUgcmVzdCBmb2xsb3dzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTZWUgVGhlIFdvcmxkIExpa2UgQSBQb2V0IEFuZCBBbiBBcnRpc3QiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJQYXNzIHRocm91Z2ggdGhpcyBicmllZiBwYXRjaCBvZiB0aW1lIGluIGhhcm1vbnkgd2l0aCBuYXR1cmUsIGFuZCBjb21lIHRvIHlvdXIgZmluYWwgcmVzdGluZyBwbGFjZSBncmFjZWZ1bGx5LCBqdXN0IGFzIGEgcmlwZW5lZCBvbGl2ZSBtaWdodCBkcm9wLCBwcmFpc2luZyB0aGUgZWFydGggdGhhdCBub3VyaXNoZWQgaXQgYW5kIGdyYXRlZnVsIHRvIHRoZSB0cmVlIHRoYXQgZ2F2ZSBpdCBncm93dGguIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDQuNDguMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGVyZSBhcmUgc29tZSBzdHVubmluZ2x5IGJlYXV0aWZ1bCB0dXJucyBvZiBwaHJhc2UgaW4gTWFyY3VzJ3MgPGVtPk1lZGl0YXRpb25zPC9lbT4mbWRhc2g7YSBzdXJwcmlzaW5nIHRyZWF0IGNvbnNpZGVyaW5nIHRoZSBpbnRlbmRlZCBhdWRpZW5jZSAoanVzdCBoaW1zZWxmKS4gIEluIG9uZSBwYXNzYWdlLCBoZSBwcmFpc2VzIHRoZSA8cT5jaGFybSBhbmQgYWxsdXJlPC9xPiBvZiBuYXR1cmVzJyBwcm9jZXNzLCB0aGUgPHE+c3RhbGtzIG9mIHJpcGUgZ3JhaW4gYmVuZGluZyBsb3csIHRoZSBmcm93bmluZyBicm93IG9mIHRoZSBsaW9uLCB0aGUgZm9hbSBkcmlwcGluZyBmcm9tIHRoZSBib2FyJ3MgbW91dGguPC9xPiAgV2Ugc2hvdWxkIHRoYW5rIHByaXZhdGUgcmhldG9yaWMgdGVhY2hlciBNYXJjdXMgQ29ybmVsaXVzIEZyb250byBmb3IgdGhlIGltYWdlcnkgaW4gdGhlc2Ugdml2aWQgcGFzc2FnZXMuICBGcm9udG8sIHdpZGVseSBjb25zaWRlcmVkIHRvIHRoZSBSb21lJ3MgYmVzdCBvcmF0b3IgYmVzaWRlcyBDaWNlcm8sIHdhcyBjaG9zZW4gYnkgTWFyY3VzJ3MgYWRvcHRlZCBmYXRoZXIgdG8gdGVhY2ggTWFyY3VzIHRvIHRoaW5rIGFuZCB3cml0ZSBhbmQgc3BlYWsuPC9wPjxwPk1vcmUgdGhhbiBqdXN0IHByZXR0eSBwaHJhc2VzLCB0aGV5IGdhdmUgaGltJm1kYXNoO2FuZCBub3cgdXMmbWRhc2g7YSBwb3dlcmZ1bCBwZXJzcGVjdGl2ZSBvbiBvcmRpbmFyeSBvciBzZWVtaW5nbHkgPGk+dW48L2k+YmVhdXRpZnVsIGV2ZW50cy4gIEl0IHRha2VzIGFuIGFydGlzdCdzIGV5ZSB0byBzZWUgdGhhdCB0aGUgZW5kIG9mIGxpZmUgaXMgbm90IHVubGlrZSBhIHJpcGUgZnJ1aXQgZmFsbGluZyBmcm9tIGl0cyB0cmVlLiAgSXQgdGFrZXMgYSBwb2V0IHRvIG5vdGljZSB0aGUgd2F5IDxxPmJha2luZyBicmVhZCBzcGxpdHMgaW4gcGxhY2VzIGFuZCB0aG9zZSBjcmFja3MsIHdoaWxlIG5vdCBpbnRlbmRlZCBpbiB0aGUgYmFrZXIncyBhcnQsIGNhdGNoIG91ciBleWUgYW5kIHNlcnZlIHRvIHN0aXIgb3VyIGFwcGV0aXRlPC9xPiBhbmQgZmluZCBhIG1ldGFwaG9yIGluIHRoZW0uPC9wPjxwPlRoZXJlIGlzIGNsYXJpdHkgKGFuZCBqb3kpIGluIHNlZWluZyB3aGF0IG90aGVycyBjYW4ndCBzZWUsIGluIGZpbmRpbmcgZ3JhY2UgYW5kIGhhcm1vbnkgaW4gcGxhY2VzIG90aGVycyBvdmVybG9vay4gIElzbid0IHRoYXQgZmFyIGJldHRlciB0aGFuIHNlZWluZyB0aGUgd29ybGQgYXMgc29tZSBkYXJrIHBsYWNlPzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXaGVyZXZlciBZb3UgR28sIFRoZXJlIFlvdXIgQ2hvaWNlIElzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiUmVtZW1iZXIgdG8gY29uZHVjdCB5b3Vyc2VsZiBpbiBsaWZlIGFzIGlmIGF0IGEgYmFucXVldC4gIEFzIHNvbWV0aGluZyBiZWluZyBwYXNzZWQgYXJvdW5kIGNvbWVzIHRvIHlvdSwgcmVhY2ggb3V0IHlvdXIgaGFuZCBhbmQgdGFrZSBhIG1vZGVyYXRlIGhlbHBpbmcuICBEb2VzIGl0IHBhc3MgeW91IGJ5PyAgRG9uJ3Qgc3RvcCBpdC4gIEl0IGhhc24ndCB5ZXQgY29tZT8gIERvbid0IGJ1cm4gaW4gZGVzaXJlIGZvciBpdCwgYnV0IHdhaXQgdW50aWwgaXQgYXJyaXZlcyBpbiBmcm9udCBvZiB5b3UuICBBY3QgdGhpcyB3YXkgd2l0aCBjaGlsZHJlbiwgYSBzcG91c2UsIHRvd2FyZCBwb3NpdGlvbiwgd2l0aCB3ZWFsdGgmbWRhc2g7b25lIGRheSBpdCB3aWxsIG1ha2UgeW91IHdvcnRoeSBvZiBhIGJhbnF1ZXQgd2l0aCB0aGUgZ29kcy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAyLjYuMjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIG5leHQgdGltZSB5b3Ugc2VlIHNvbWV0aGluZyB5b3Ugd2FudCwgcmVtZW1iZXIgRXBpY3RldHVzJ3MgbWV0YXBob3Igb2YgbGlmZSdzIGJhbnF1ZXQuICBBcyB5b3UgZmluZCB5b3Vyc2VsZiBnZXR0aW5nIGV4Y2l0ZWQsIHJlYWR5IHRvIGRvIGFueXRoaW5nIGFuZCBldmVyeXRoaW5nIHRvIGdldCBpdCZtZGFzaDt0aGUgZXF1aXZhbGVudCBvZiByZWFjaGluZyBhY3Jvc3MgdGhlIHRhYmxlIGFuZCBncmFiYmluZyBhIGRpc2ggb3V0IG9mIHNvbWVvbmUncyBoYW5kcyZtZGFzaDtqdXN0IHJlbWluZCB5b3Vyc2VsZjogdGhhdCdzIGJhZCBtYW5uZXJzIGFuZCB1bm5lY2Vzc2FyeS4gIFRoZW4gd2FpdCBwYXRpZW50bHkgZm9yIHlvdXIgdHVybi48L3A+PHA+VGhpcyBtZXRhcGhvciBoYXMgb3RoZXIgaW50ZXJwcmV0YXRpb25zIHRvby4gIEZvciBpbnN0YW5jZSwgd2UgbWlnaHQgcmVmbGVjdCB0aGF0IHdlJ3JlIGx1Y2t5IHRvIGhhdmUgYmVlbiBpbnZpdGVkIHRvIHN1Y2ggYSB3b25kZXJmdWwgZmVhc3QgKGdyYXRpdHVkZSkuICBPciB0aGF0IHdlIHNob3VsZCB0YWtlIG91ciB0aW1lIGFuZCBzYXZvciB0aGUgdGFzdGUgb2Ygd2hhdCdzIG9uIG9mZmVyIChlbmpveWluZyB0aGUgcHJlc2VudCBtb21lbnQpIGJ1dCB0aGF0IHRvIHN0dWZmIG91cnNlbHZlcyBzaWNrIHdpdGggZm9vZCBhbmQgZHJpbmsgc2VydmVzIG5vIG9uZSwgbGVhc3Qgb2YgYWxsIG91ciBoZWFsdGggKGdsdXR0b255IGlzIGEgZGVhZGx5IHNpbiwgYWZ0ZXIgYWxsKS4gIFRoYXQgYXQgdGhlIGVuZCBvZiB0aGUgbWVhbCwgaXQncyBydWRlIG5vdCB0byBoZWxwIHRoZSBob3N0IGNsZWFuIHVwIGFuZCBkbyB0aGUgZGlzaGVzIChzZWxmbGVzc25lc3MpLiAgQW5kIGZpbmFsbHksIHRoYXQgbmV4dCB0aW1lLCBpdCdzIG91ciB0dXJuIHRvIGhvc3QgYW5kIHRyZWF0IG90aGVycyBqdXN0IGFzIHdlIGhhZCBiZWVuIHRyZWF0ZWQgKGNoYXJpdHkpLjwvcD48cD5FbmpveSB0aGUgbWVhbCE8L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDIwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiUmVpZ25pdGUgWW91ciBUaG91Z2h0cyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIllvdXIgcHJpbmNpcGxlcyBjYW4ndCBiZSBleHRpbmd1aXNoZWQgdW5sZXNzIHlvdSBzbnVmZiBvdXQgdGhlIHRob3VnaHRzIHRoYXQgZmVlZCB0aGVtLCBmb3IgaXQncyBjb250aW51YWxseSBpbiB5b3VyIHBvd2VyIHRvIHJlaWduaXRlIG5ldyBvbmVzIC4gLiAuIEl0J3MgcG9zc2libGUgdG8gc3RhcnQgbGl2aW5nIGFnYWluISBTZWUgdGhpbmdzIGFuZXcgYXMgeW91IG9uY2UgZGlkJm1kYXNoO3RoYXQgaXMgaG93IHRvIHJlc3RhcnQgbGlmZSEiLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNy4yIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkhhdmUgeW91IGhhZCBhIGJhZCBjb3VwbGUgb2Ygd2Vla3M/IEhhdmUgeW91IGJlZW4gZHJpZnRpbmcgYXdheSBmcm9tIHRoZSBwcmluY2lwbGVzIGFuZCBiZWxpZWZzIHRoYXQgeW91IGhvbGQgZGVhcj8gIEl0J3MgcGVyZmVjdGx5IGZpbmUuICBJdCBoYXBwZW5zIHRvIGFsbCBvZiB1cy48L3A+PHA+SW4gZmFjdCwgaXQgcHJvYmFibHkgaGFwcGVuZWQgdG8gTWFyY3VzJm1kYXNoO3RoYXQgbWF5IGJlIHdoeSBoZSBzY3JpYmJsZWQgdGhpcyBub3RlIHRvIGhpbXNlbGYuIFBlcmhhcHMgaGUnZCBiZWVuIGRlYWxpbmcgd2l0aCBkaWZmaWN1bHQgc2VuYXRvcnMgb3IgaGF2aW5nIGRpZmZpY3VsdGllcyB3aXRoIGhpcyB0cm91YmxlZCBzb24uIFBlcmhhcHMgaW4gdGhlc2Ugc2NlbmFyaW9zIGhlJ2QgbG9zdCBoaXMgdGVtcGVyLCBiZWNhbWUgZGVwcmVzc2VkLCBvciBzdG9wcGVkIGNoZWNraW5nIGluIHdpdGggaGltc2VsZi4gV2hvIHdvdWxkbid0PzwvcD48cD5CdXQgdGhlIHJlbWluZGVyIGhlcmUgaXMgdGhhdCBubyBtYXR0ZXIgd2hhdCBoYXBwZW5zLCBubyBtYXR0ZXIgaG93IGRpc2FwcG9pbnRpbmcgb3VyIGJlaGF2aW9yIGhhcyBiZWVuIGluIHRoZSBwYXN0LCB0aGUgcHJpbmNpcGxlcyB0aGVtc2VsdmVzIHJlbWFpbiB1bmNoYW5nZWQuICBXZSBjYW4gcmV0dXJuIGFuZCBlbWJyYWNlIHRoZW0gYXQgYW55IG1vbWVudC4gIFdoYXQgaGFwcGVuZWQgeWVzdGVyZGF5Jm1kYXNoO3doYXQgaGFwcGVuZWQgZml2ZSBtaW51dGVzIGFnbyZtZGFzaDtpcyB0aGUgcGFzdC4gIFdlIGNhbiByZWlnbml0ZSBhbmQgcmVzdGFydCB3aGVuZXZlciB3ZSBsaWtlLjwvcD48cD5XaHkgbm90IGRvIGl0IHJpZ2h0IG5vdz88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDIxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQSBNb3JuaW5nIFJpdHVhbCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkFzayB5b3Vyc2VsZiB0aGUgZm9sbG93aW5nIGZpcnN0IHRoaW5nIGluIHRoZSBtb3JuaW5nOjx1bD48bGk+V2hhdCBhbSBJIGxhY2tpbmcgaW4gYXR0YWluaW5nIGZyZWVkb20gZnJvbSBwYXNzaW9uPzwvbGk+PGxpPldoYXQgZm9yIHRyYW5xdWlsaXR5PzwvbGk+PGxpPldoYXQgYW0gST8gQSBtZXJlIGJvZHksIGVzdGF0ZS1ob2xkZXIsIG9yIHJlcHV0YXRpb24/IE5vbmUgb2YgdGhlc2UgdGhpbmdzLjwvbGk+PGxpPldoYXQsIHRoZW4/IEEgcmF0aW9uYWwgYmVpbmcuPC9saT4gPGxpPldoYXQgdGhlbiBpcyBkZW1hbmRlZCBvZiBtZT8gTWVkaXRhdGUgb24geW91ciBhY3Rpb25zLjwvbGk+PGxpPkhvdyBkaWQgSSBzdGVlciBhd2F5IGZyb20gc2VyZW5pdHk/PC9saT48bGk+V2hhdCBkaWQgSSBkbyB0aGF0IHdhcyB1bmZyaWVuZGx5LCB1bnNvY2lhbCwgb3IgdW5jYXJpbmc/PC9saT48bGk+V2hhdCBkaWQgSSBmYWlsIHRvIGRvIGluIGFsbCB0aGVzZSB0aGluZ3M/PC9saT48L3VsPiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDQuNi4zNC0zNSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5NYW55IHN1Y2Nlc3NmdWwgcGVvcGxlIGhhdmUgYSBtb3JuaW5nIHJpdHVhbC4gIEZvciBzb21lLCBpdCdzIG1lZGl0YXRpb24uICBGb3Igb3RoZXJzLCBpdCdzIGV4ZXJjaXNlLiBGb3IgbWFueSwgaXQncyBqb3VybmFsaW5nJm1kYXNoO2p1c3QgYSBmZXcgcGFnZXMgd2hlcmUgdGhleSB3cml0ZSBkb3duIHRoZWlyIHRob3VnaHRzLCBmZWFycywgaG9wZXMuICBJbiB0aGVzZSBjYXNlcywgdGhlIHBvaW50IGlzIG5vdCBzbyBtdWNoIHRoZSBhY3Rpdml0eSBpdHNlbGYgYXMgaXQgaXMgdGhlIHJpdHVhbGl6ZWQgcmVmbGVjdGlvbi4gIFRoZSBpZGVhIGlzIHRvIHRha2Ugc29tZSB0aW1lIHRvIGxvb2sgaW53YXJkIGFuZCBleGFtaW5lLjwvcD48cD5UYWtpbmcgdGhhdCB0aW1lIGlzIHdoYXQgU3RvaWNzIGFkdm9jYXRlZCBtb3JlIHRoYW4gYWxtb3N0IGFueXRoaW5nIGVsc2UuIFdlIGRvbid0IGtub3cgd2hldGhlciBNYXJjdXMgQXVyZWxpdXMgd3JvdGUgaGlzIDxlbT5NZWRpdGF0aW9uczwvZW0+IGluIHRoZSBtb3JuaW5nIG9yIGF0IG5pZ2h0LCBidXQgd2Uga25vdyBoZSBjYXJ2ZWQgb3V0IG1vbWVudHMgb2YgcXVpZXQgYWxvbmUgdGltZSZtZGFzaDthbmQgdGhhdCBoZSB3cm90ZSBmb3IgaGltc2VsZiwgbm90IGZvciBhbnlvbmUgZWxzZS4gIElmIHlvdSdyZSBsb29raW5nIGZvciBhIHBsYWNlIHRvIHN0YXJ0IHlvdXIgb3duIHJpdHVhbCwgeW91IGNvdWxkIGRvIHdvcnNlIHRoYW4gTWFyY3VzJ3MgZXhhbXBsZSBhbmQgRXBpY3RldHVzJ3MgY2hlY2tsaXN0LjwvcD48cD5FdmVyeSBkYXksIHN0YXJ0aW5nIHRvZGF5LCBhc2sgeW91cnNlbGYgdGhlc2Ugc2FtZSB0b3VnaCBxdWVzdGlvbnMuICBMZXQgcGhpbG9zb3BoeSBhbmQgaGFyZCB3b3JrIGd1aWRlIHlvdSB0byBiZXR0ZXIgYW5zd2Vycywgb25lIG1vcm5pbmcgYXQgYSB0aW1lLCBvdmVyIHRoZSBjb3Vyc2Ugb2YgYSBsaWZlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgRGF5IEluIFJldmlldyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkkgd2lsbCBrZWVwIGNvbnN0YW50IHdhdGNoIG92ZXIgbXlzZWxmIGFuZCZtZGFzaDttb3N0IHVzZWZ1bGx5Jm1kYXNoO3dpbGwgcHV0IGVhY2ggZGF5IHVwIGZvciByZXZpZXcuICBGb3IgdGhpcyBpcyB3aGF0IG1ha2VzIHVzIGV2aWwmbWRhc2g7dGhhdCBub25lIG9mIHVzIGxvb2tzIGJhY2sgdXBvbiBvdXIgb3duIGxpdmVzLiAgV2UgcmVmbGVjdCB1cG9uIG9ubHkgdGhhdCB3aGljaCB3ZSBhcmUgYWJvdXQgdG8gZG8uICBBbmQgeWV0IG91ciBwbGFucyBmb3IgdGhlIGZ1dHVyZSBkZXNjZW5kIGZyb20gdGhlIHBhc3QuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTW9yYWwgTGV0dGVycywgODMuMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5JbiBhIGxldHRlciB0byBoaXMgb2xkZXIgYnJvdGhlciBOb3ZhdHVzLCBTZW5lY2EgZGVzY3JpYmVzIGEgYmVuZWZpY2lhbCBleGVyY2lzZSBoZSBib3Jyb3dlZCBmcm9tIGFub3RoZXIgcHJvbWluZW50IHBoaWxvc29waGVyLiAgQXQgdGhlIGVuZCBvZiBlYWNoIGRheSBoZSB3b3VsZCBhc2sgaGltc2VsZiB2YXJpYXRpb25zIG9mIHRoZSBmb2xsb3dpbmcgcXVlc3Rpb25zOiA8ZW0+V2hhdCBiYWQgaGFiaXQgZGlkIEkgY3VyYiB0b2RheT8gIEhvdyBhbSBJIGJldHRlcj8gIFdlcmUgbXkgYWN0aW9ucyBqdXN0PyAgSG93IGNhbiBJIGltcHJvdmU/PC9lbT48L3A+PHA+QXQgdGhlIGJlZ2lubmluZyBvciBlbmQgb2YgZWFjaCBkYXksIHRoZSBTdG9pYyBzaXRzIGRvd24gd2l0aCBoaXMgam91cm5hbCBhbmQgcmV2aWV3czogd2hhdCBoZSBkaWQsIHdoYXQgaGUgdGhvdWdodCwgd2hhdCBjb3VsZCBiZSBpbXByb3ZlZC4gIEl0J3MgZm9yIHRoaXMgcmVhc29uIHRoYXQgTWFyY3VzIEF1cmVsaXVzJ3MgPGVtPk1lZGl0YXRpb25zPC9lbT4gaXMgYSBzb21ld2hhdCBpbnNjcnV0YWJsZSBib29rJm1kYXNoO2l0IHdhcyBmb3IgcGVyc29uYWwgY2xhcml0eSBhbmQgbm90IHB1YmxpYyBiZW5lZml0LiAgV3JpdGluZyBkb3duIFN0b2ljIGV4ZXJjaXNlcyB3YXMgYW5kIGlzIGFsc28gYSBmb3JtIG9mIHByYWN0aWNpbmcgdGhlbSwganVzdCBhcyByZXBlYXRpbmcgYSBwcmF5ZXIgb3IgaHltbiBtaWdodCBiZS48L3A+PHA+S2VlcCB5b3VyIG93biBqb3VybmFsLCB3aGV0aGVyIGl0J3Mgc2F2ZWQgb24gYSBjb21wdXRlciBvciBpbiBhIGxpdHRsZSBub3RlYm9vay4gIFRha2UgdGltZSB0byBjb25zY2lvdXNseSByZWNhbGwgdGhlIGV2ZW50cyBvZiB0aGUgcHJldmlvdXMgZGF5LiAgQmUgdW5mbGluY2hpbmcgaW4geW91ciBhc3Nlc3NtZW50cy4gIE5vdGljZSB3aGF0IGNvbnRyaWJ1dGVkIHRvIHlvdXIgaGFwcGluZXNzIGFuZCB3aGF0IGRldHJhY3RlZCBmcm9tIGl0LiAgV3JpdGUgZG93biB3aGF0IHlvdSdkIGxpa2UgdG8gd29yayBvbiBvciBxdW90ZXMgdGhhdCB5b3UgbGlrZS4gIEJ5IG1ha2luZyB0aGUgZWZmb3J0IHRvIHJlY29yZCBzdWNoIHRob3VnaHRzLCB5b3UncmUgbGVzcyBsaWtlbHkgdG8gZm9yZ2V0IHRoZW0uICBBbiBhZGRlZCBib251czogeW91J2xsIGhhdmUgYSBydW5uaW5nIHRhbGx5IHRvIHRyYWNrIHlvdXIgcHJvZ3Jlc3MgdG9vLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgVHJ1dGggQWJvdXQgTW9uZXkiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJMZXQncyBwYXNzIG92ZXIgdG8gdGhlIHJlYWxseSByaWNoJm1kYXNoO2hvdyBvZnRlbiB0aGUgb2NjYXNpb25zIHRoZXkgbG9vayBqdXN0IGxpa2UgdGhlIHBvb3IhICBXaGVuIHRoZXkgdHJhdmVsIGFicm9hZCB0aGV5IG11c3QgcmVzdHJpY3QgdGhlaXIgYmFnZ2FnZSwgYW5kIHdoZW4gaGFzdGUgaXMgbmVjZXNzYXJ5LCB0aGV5IGRpc21pc3MgdGhlaXIgZW50b3VyYWdlLiAgQW5kIHRob3NlIHdobyBhcmUgaW4gdGhlIGFybXksIGhvdyBmZXcgb2YgdGhlaXIgcG9zc2lvbnMgdGhleSBnZXQgdG8ga2VlcCAuIC4gLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk9uIENvbnNvbGF0aW9uIFRvIEhlbHZpYSwgMTIuMS5iLTIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIGF1dGhvciBGLiBTY290dCBGaXR6Z2VyYWxkLCB3aG8gb2Z0ZW4gZ2xhbW9yaXplZCB0aGUgbGlmZXN0eWxlcyBvZiB0aGUgcmljaCBhbmQgZmFtb3VzIGluIGJvb2tzIGxpa2UgPGk+VGhlIEdyZWF0IEdhdHNieTwvaT4sIG9wZW5zIG9uZSBvZiBoaXMgc2hvcnQgc3RvcmllcyB3aXRoIHRoZSBub3cgY2xhc3NpYyBsaW5lczogPHE+TGV0IG1lIHRlbGwgeW91IGFib3V0IHRoZSB2ZXJ5IHJpY2guICBUaGV5IGFyZSBkaWZmZXJlbnQgZnJvbSB5b3UgYW5kIG1lLjwvcT4gIEEgZmV3IHllYXJzIGFmdGVyIHRoaXMgc3Rvcnkgd2FzIHB1Ymxpc2hlZCwgaGlzIGZyaWVuZCBFcm5lc3QgSGVtaW5nd2F5IHRlYXNlZCBGaXR6Z2VyYWxkIGJ5IHdyaXRpbmcsIDxxPlllcywgdGhleSBoYXZlIG1vcmUgbW9uZXkuPC9xPjwvcD48cD5UaGF0J3Mgd2hhdCBTZW5lY2EgaXMgcmVtaW5kaW5nIHVzLiAgQXMgc29tZW9uZSB3aG8gd2FzIG9uZSBvZiB0aGUgcmljaGVzdCBtZW4gaW4gUm9tZSwgaGUga25ldyBmaXJzdGhhbmQgdGhhdCBtb25leSBvbmx5IG1hcmdpbmFsbHkgY2hhbmdlcyBsaWZlLiAgSXQgZG9lc24ndCBzb2x2ZSB0aGUgcHJvYmxlbXMgdGhhdCBwZW9wbGUgd2l0aG91dCBpdCBzZWVtIHRvIHRoaW5rIGl0IHdpbGwuICBJbiBmYWN0LCBubyBtYXRlcmlhbCBwb3NzZXNzaW9uIHdpbGwuICBFeHRlcm5hbCB0aGluZ3MgY2FuJ3QgZml4IGludGVybmFsIGlzc3Vlcy48L3A+PHA+V2UgY29uc3RhbnRseSBmb3JnZXQgdGhpcyZtZGFzaDthbmQgaXQgY2F1c2VzIHVzIHNvIG11Y2ggY29uZnVzaW9uIGFuZCBwYWluLiAgQXMgSGVtaW5nd2F5IHdvdWxkIGxhdGVyIHdyaXRlIG9mIEZpdHpnZXJhbGQsIDxxPkhlIHRob3VnaHQgW3RoZSByaWNoXSB3ZXJlIGEgc3BlY2lhbCBnbGFtb3JvdXMgcmFjZSBhbmQgd2hlbiBoZSBmb3VuZCB0aGV5IHdlcmVuJ3QsIGl0IHdyZWNrZWQgaGltIGFzIG11Y2ggYXMgYW55IG90aGVyIHRoaW5nIHRoYXQgd3JlY2tlZCBoaW0uPC9xPiAgV2l0aG91dCBhIGNoYW5nZSB0aGUgc2FtZSB3aWxsIGJlIHRydWUgZm9yIHVzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJQdXNoIEZvciBEZWVwIFVuZGVyc3RhbmRpbmciLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJGcm9tIFJ1c3RpY3VzIC4gLiAuIEkgbGVhcm5lZCB0byByZWFkIGNhcmVmdWxseSBhbmQgbm90IGJlIHNhdGlzZmllZCB3aXRoIGEgcm91Z2ggdW5kZXJzdGFuZGluZyBvZiB0aGUgd2hvbGUsIGFuZCBub3QgdG8gYWdyZWUgdG9vIHF1aWNrbHkgd2l0aCB0aG9zZSB3aG8gaGF2ZSBhIGxvdCB0byBzYXkgYWJvdXQgc29tZXRoaW5nLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCAxLjcuMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgZmlyc3QgYm9vayBvZiBNYXJjdXMgQXVyZWxpdXMncyA8ZW0+TWVkaXRhdGlvbnM8L2VtPiBiZWdpbnMgd2l0aCBhIGNhdGFsb2cgb2YgZ3JhdGl0dWRlLiAgSGUgdGhhbmtzLCBvbmUgYnkgb25lLCB0aGUgbGVhZGluZyBpbmZsdWVuY2VzIGluIGhpcyBsaWZlLiAgT25lIG9mIHRoZSBwZW9wbGUgaGUgdGhhbmtzIGlmIFF1aW50dXMgSnVuaXVzIFJ1c3RpY3VzLCBhIHRlYWNoZXIgd2hvIGRldmVsb3BlZCBpbiBoaXMgc3R1ZGVudCBhIGxvdmUgb2YgZGVlcCBjbGFyaXR5IGFuZCB1bmRlcnN0YW5kaW5nJm1kYXNoO2EgZGVzaXJlIHRvIG5vdCBqdXN0IHN0b3AgYXQgdGhlIHN1cmZhY2Ugd2hlbiBpdCBjb21lcyB0byBsZWFybmluZy48L3A+PHA+SXQgd2FzIGFsc28gZnJvbSBSdXN0aWN1cyB0aGF0IE1hcmN1cyB3YXMgaW50cm9kdWNlZCB0byBFcGljdGV0dXMuICBJbiBmYWN0LCBSdXN0aWN1cyBsb2FuZWQgTWFyY3VzIGhpcyBwZXJzb25hbCBjb3B5IG9mIEVwaWN0ZXR1cydzIGxlY3R1cmVzLiBNYXJjdXMgY2xlYXJseSB3YXNuJ3Qgc2F0aXNmaWVkIHdpdGgganVzdCBnZXR0aW5nIHRoZSBnaXN0IG9mIHRoZXNlIGxlY3R1cmVzIGFuZCBkaWRuJ3Qgc2ltcGx5IGFjY2VwdCB0aGVtIG9uIGhpcyB0ZWFjaGVyJ3MgcmVjb21tZW5kYXRpb24uICBQYXVsIEpvaG5zb24gb25jZSBqb2tlZCB0aGF0IEVkbXVuZCBXaWxzb24gcmVhZCBib29rcyA8cT5hcyB0aG91Z2ggdGhlIGF1dGhvciB3YXMgb24gdHJpYWwgZm9yIGhpcyBsaWZlLjwvcT4gIFRoYXQncyBob3cgTWFyY3VzIHJlYWQgRXBpY3RldHVzJm1kYXNoO2FuZCB3aGVuIHRoZSBsZXNzb25zIHBhc3NlZCBtdXN0ZXIsIGhlIDxlbT5hYnNvcmJlZDwvZW0+IHRoZW0uICBUaGV5IGJlY2FtZSBwYXJ0IG9mIGhpcyBETkEgYXMgYSBodW1hbiBiZWluZy4gIEhlIHF1b3RlZCB0aGVtIGF0IGxlbmd0aCBvdmVyIHRoZSBjb3Vyc2Ugb2YgaGlzIGxpZmUsIGZpbmRpbmcgcmVhbCBjbGFyaXR5IGFuZCBzdHJlbmd0aCBpbiB3b3JkcywgZXZlbiBhbWlkIHRoZSBpbW1lbnNlIGx1eHVyeSBhbmQgcG93ZXIgaGUgd291bGQgY29tZSB0byBwb3NzZXNzLjwvcD48cD5UaGF0J3MgdGhlIGtpbmQgb2YgZGVlcCByZWFkaW5nIGFuZCBzdHVkeSB3ZSBuZWVkIHRvIGN1bHRpdmF0ZSBhcyB3ZWxsLCB3aGljaCBpcyB3aHkgd2UncmUgcmVhZGluZyBqdXN0IG9uZSBwYWdlIGEgZGF5IGluc3RlYWQgb2YgYSBjaGFwdGVyIGF0IGEgdGltZS4gIFNvIHdlIGNhbiB0YWtlIHRoZSB0aW1lIHRvIHJlYWQgYXR0ZW50aXZlbHkgYW5kIGRlZXBseS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDI1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIE9ubHkgUHJpemUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXaGF0J3MgbGVmdCB0byBiZSBwcml6ZWQ/IFRoaXMsIEkgdGhpbmsmbWRhc2g7dG8gbGltaXQgb3VyIGFjdGlvbiBvciBpbmFjdGlvbiB0byBvbmx5IHdoYXQncyBpbiBrZWVwaW5nIHdpdGggdGhlIG5lZWRzIG9mIG91ciBvd24gcHJlcGFyYXRpb24gLiAuIC4gIGl0J3Mgd2hhdCB0aGUgZXhlcnRpb25zIG9mIGVkdWNhdGlvbiBhbmQgdGVhY2hpbmcgYXJlIGFsbCBhYm91dCZtZGFzaDtoZXJlIGlzIHRoZSB0aGluZyB0byBiZSBwcml6ZWQhIElmIHlvdSBob2xkIHRoaXMgZmlybWx5LCB5b3UnbGwgc3RvcCB0cnlpbmcgdG8gZ2V0IHlvdXJzZWxmIGFsbCB0aGUgb3RoZXIgdGhpbmdzIC4gLiAuICBJZiB5b3UgZG9uJ3QsIHlvdSB3b24ndCBiZSBmcmVlLCBzZWxmLXN1ZmZpY2llbnQsIG9yIGxpYmVyYXRlZCBmcm9tIHBhc3Npb24sIGJ1dCBuZWNlc3NhcmlseSBmdWxsIG9mIGVudnksIGplYWxvdXN5LCBhbmQgc3VzcGljaW9uIGZvciBhbnkgd2hvIGhhdmUgdGhlIHBvd2VyIHRvIHRha2UgdGhlbSwgYW5kIHlvdSdsbCBwbG90IGFnYWluc3QgdGhvc2Ugd2hvIGRvIGhhdmUgd2hhdCB5b3UgcHJpemUgLiAuIC4gQnV0IGJ5IGhhdmluZyBzb21lIHNlbGYtcmVzcGVjdCBmb3IgeW91ciBvd24gbWluZCBhbmQgcHJpemluZyBpdCwgeW91IHdpbGwgcGxlYXNlIHlvdXJzZWxmIGFuZCBiZSBpbiBiZXR0ZXIgaGFybW9ueSB3aXRoIHlvdXIgZmVsbG93IGh1bWFuIGJlaW5ncywgYW5kIG1vcmUgaW4gdHVuZSB3aXRoIHRoZSBnb2RzJm1kYXNoO3ByYWlzaW5nIGV2ZXJ5dGhpbmcgdGhleSBoYXZlIHNldCBpbiBvcmRlciBhbmQgYWxsb3R0ZWQgeW91LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA2LjE2LjJiLTRhIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPldhcnJlbiBCdWZmZXR0LCB3aG9zZSBuZXQgd29ydGggaXMgYXBwcm94aW1hdGVseSAkNjUgYmlsbGlvbiwgbGl2ZXMgaW4gdGhlIHNhbWUgaG91c2UgaGUgYm91Z2h0IGluIDE5NTggZm9yICQzMSw1MDAuIEpvaG4gVXJzY2hlbCwgYSBsaW5lbWFuIGZvciB0aGUgQmFsdGltb3JlIFJhdmVucywgbWFrZXMgbWlsbGlvbnMgYnV0IG1hbmFnZXMgdG8gbGl2ZSBvbiAkMjUsMDAwIGEgeWVhci4gU2FuIEFudG9uaW8gU3B1cnMgc3RhciBLYXdoaSBMZW9uYXJkIGdldHMgYXJvdW5kIGluIHRoZSAxOTk3IENoZXZ5IFRhaG9lIGhlJ3MgaGFkIHNpbmNlIGhlIHdhcyBhIHRlZW5hZ2VyLCBldmVuIHdpdGggYSBjb250cmFjdCB3b3J0aCBzb21lICQ5NCBtaWxsaW9uLiBXaHk/IEl0J3Mgbm90IGJlY2F1c2UgdGhlc2UgbWVuIGFyZSBjaGVhcC4gSXQncyBiZWNhdXNlIHRoZSB0aGluZ3MgPGVtPnRoYXQgbWF0dGVyIHRvIHRoZW0gYXJlIGNoZWFwPC9lbT4uIDwvcD48cD5OZWl0aGVyIEJ1ZmZldHQgbm9yIFVyc2NoZWwgbm9yIExlb25hcmQgZW5kZWQgdXAgdGhpcyB3YXkgYnkgYWNjaWRlbnQuIFRoZWlyIGxpZmVzdHlsZSBpcyB0aGUgcmVzdWx0IG9mIHByaW9yaXRpemluZy4gVGhleSBjdWx0aXZhdGUgaW50ZXJlc3RzIHRoYXQgYXJlIGRlY2lkZWRseSBiZWxvdyB0aGVpciBmaW5hbmNpYWwgbWVhbnMsIGFuZCBhcyBhIHJlc3VsdCwgPGVtPmFueTwvZW0+IGluY29tZSB3b3VsZCBhbGxvdyB0aGVtIGZyZWVkb20gdG8gcHVyc3VlIHRoZSB0aGluZ3MgdGhleSBtb3N0IGNhcmUgYWJvdXQuIEl0IGp1c3QgaGFwcGVucyB0aGF0IHRoZXkgYmVjYW1lIHdlYWx0aHkgYmV5b25kIGFueSBleHBlY3RhdGlvbi4gVGhpcyBraW5kIG9mIGNsYXJpdHkmbWRhc2g7YWJvdXQgd2hhdCB0aGV5IGxvdmUgbW9zdCBpbiB0aGUgd29ybGQmbWRhc2g7bWVhbnMgdGhleSBjYW4gZW5qb3kgdGhlaXIgbGl2ZXMuIEl0IG1lYW5zIHRoZXknZCBzdGlsbCBiZSBoYXBweSBldmVuIGlmIHRoZSBtYXJrZXRzIHdlcmUgdG8gdHVybiBvciB0aGVpciBjYXJlZXJzIHdlcmUgY3V0IHNob3J0IGJ5IGluanVyeS4gPC9wPjxwPlRoZSBtb3JlIHRoaW5ncyB3ZSBkZXNpcmUgYW5kIHRoZSBtb3JlIHdlIGhhdmUgdG8gZG8gdG8gZWFybiBvciBhdHRhaW4gdGhvc2UgYWNoaWV2ZW1lbnRzLCB0aGUgbGVzcyB3ZSBhY3R1YWxseSBlbmpveSBvdXIgbGl2ZXMmbWRhc2g7YW5kIHRoZSBsZXNzIGZyZWUgd2UgYXJlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgUG93ZXIgT2YgQSBNYW50cmEiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJFcmFzZSB0aGUgZmFsc2UgaW1wcmVzc2lvbnMgZnJvbSB5b3VyIG1pbmQgYnkgY29uc3RhbnRseSBzYXlpbmcgdG8geW91cnNlbGYsIEkgaGF2ZSBpdCBpbiBteSBzb3VsIHRvIGtlZXAgb3V0IGFueSBldmlsLCBkZXNpcmUgb3IgYW55IGtpbmQgb2YgZGlzdHVyYmFuY2UmbWRhc2g7aW5zdGVhZCwgc2VlaW5nIHRoZSB0cnVlIG5hdHVyZSBvZiB0aGluZ3MsIEkgd2lsbCBnaXZlIHRoZW0gb25seSB0aGVpciBkdWUuIEFsd2F5cyByZW1lbWJlciB0aGlzIHBvd2VyIHRoYXQgbmF0dXJlIGdhdmUgeW91LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA4LjI5Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkFueW9uZSB3aG8gaGFzIHRha2VuIGEgeW9nYSBjbGFzcyBvciBiZWVuIGV4cG9zZWQgdG8gSGluZHUgb3IgQnVkZGhpc3QgdGhvdWdodCBoYXMgcHJvYmFibHkgaGVhcmQgb2YgdGhlIGNvbmNlcHQgb2YgYSBtYW50cmEuIEluIFNhbnNrcml0LCBpdCBtZWFucyA8cT5zYWNyZWQgdXR0ZXJhbmNlPC9xPiZtZGFzaDtlc3NlbnRpYWxseSBhIHdvcmQsIGEgcGhyYXNlLCBhIHRob3VnaHQsIGV2ZW4gYSBzb3VuZCZtZGFzaDtpbnRlbmRlZCB0byBwcm92aWRlIGNsYXJpdHkgb3Igc3Bpcml0dWFsIGd1aWRhbmNlLiBBIG1hbnRyYSBjYW4gYmUgZXNwZWNpYWxseSBoZWxwZnVsIGluIHRoZSBtZWRpdGF0aXZlIHByb2Nlc3MgYmVjYXVzZSBpdCBhbGxvd3MgdXMgdG8gYmxvY2sgb3V0IGV2ZXJ5dGhpbmcgZWxzZSB3aGlsZSB3ZSBmb2N1cy48L3A+PHA+SXQncyBmaXR0aW5nLCB0aGVuLCB0aGF0IE1hcmN1cyBBdXJlbGl1cyB3b3VsZCBzdWdnZXN0IHRoaXMgU3RvaWMgbWFudHJhJm1kYXNoO2EgcmVtaW5kZXIgb3Igd2F0Y2ggcGhyYXNlIHRvIHVzZSB3aGVuIHdlIGZlZWwgZmFsc2UgaW1wcmVzc2lvbnMsIGRpc3RyYWN0aW9ucywgb3IgdGhlIGNydXNoIG9mIGV2ZXJ5ZGF5IGxpZmUgdXBvbiB1cy4gSXQgc2F5cywgZXNzZW50aWFsbHksIDxxPkkgaGF2ZSB0aGUgcG93ZXIgd2l0aGluIG1lIHRvIGtlZXAgdGhhdCBvdXQuIEkgY2FuIHNlZSB0aGUgdHJ1dGguPC9xPjwvcD48cD5DaGFuZ2UgdGhlIHdvcmRpbmcgYXMgeW91IGxpa2UuIFRoYXQgcGFydCBpcyB1cCB0byB5b3UuIEJ1dCBoYXZlIGEgbWFudHJhIGFuZCB1c2UgaXQgdG8gZmluZCB0aGUgY2xhcml0eSB5b3UgY3JhdmUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSmFudWFyeSAyNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBUaHJlZSBBcmVhcyBPZiBUcmFpbmluZyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZXJlIGFyZSB0aHJlZSBhcmVhcyBpbiB3aGljaCB0aGUgcGVyc29uIHdobyB3b3VsZCBiZSB3aXNlIGFuZCBnb29kIG11c3QgYmUgdHJhaW5lZC4gIFRoZSBmaXJzdCBoYXMgdG8gZG8gd2l0aCBkZXNpcmVzIGFuZCBhdmVyc2lvbnMmbWRhc2g7dGhhdCBhIHBlcnNvbiBtYXkgbmV2ZXIgbWlzcyB0aGUgbWFyayBpbiBkZXNpcmVzIG5vciBmYWxsIGludG8gd2hhdCByZXBlbHMgdGhlbS4gIFRoZSBzZWNvbmQgaGFzIHRvIGRvIHdpdGggaW1wdWxzZXMgdG8gYWN0IGFuZCBub3QgdG8gYWN0Jm1kYXNoO2FuZCBtb3JlIGJyb2FkbHksIHdpdGggZHV0eSZtZGFzaDt0aGF0IGEgcGVyc29uIG1heSBhY3QgZGVsaWJlcmF0ZWx5IGZvciBnb29kIHJlYXNvbnMgYW5kIG5vdCBjYXJlbGVzc2x5LiAgVGhlIHRoaXJkIGhhcyB0byBkbyB3aXRoIGZyZWVkb20gZnJvbSBkZWNlcHRpb24gYW5kIGNvbXBvc3VyZSBhbmQgdGhlIHdob2xlIGFyZWEgb2YganVkZ21lbnQsIHRoZSBhc3NlbnQgb3VyIG1pbmQgZ2l2ZXMgdG8gaXRzIHBlcmNlcHRpb25zLiAgT2YgdGhlc2UgYXJlYXMsIHRoZSBjaGllZiBhbmQgbW9zdCB1cmdlbnQgaXMgdGhlIGZpcnN0IHdoaWNoIGhhcyB0byBkbyB3aXRoIHRoZSBwYXNzaW9ucywgZm9yIHN0cm9uZyBlbW90aW9ucyBhcmlzZSBvbmx5IHdoZW4gd2UgZmFpbCBpbiBvdXIgZGVzaXJlcyBhbmQgYXZlcnNpb25zLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDMuMi4xLTNhIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRvZGF5LCBsZXQncyBmb2N1cyBvbiB0aGUgdGhyZWUgYXJlYXMgb2YgdHJhaW5pbmcgdGhhdCBFcGljdGV0dXMgbGFpZCBvdXQgZm9yIHVzLjwvcD48cD5GaXJzdCwgd2UgbXVzdCBjb25zaWRlciB3aGF0IHdlIHNob3VsZCBkZXNpcmUgYW5kIHdoYXQgd2Ugc2hvdWxkIGJlIGF2ZXJzZSB0by4gV2h5PyBTbyB0aGF0IHdlIHdhbnQgd2hhdCBpcyBnb29kIGFuZCBhdm9pZCB3aGF0IGlzIGJhZC4gSXQncyBub3QgZW5vdWdoIHRvIGp1c3QgbGlzdGVuIHRvIHlvdXIgYm9keSZtZGFzaDtiZWNhdXNlIG91ciBhdHRyYWN0aW9ucyBvZnRlbiBsZWFkIHVzIGFzdHJheS48L3A+PHA+TmV4dCwgd2UgbXVzdCBleGFtaW5lIG91ciBpbXB1bHNlcyB0byBhY3QmbWRhc2g7dGhhdCBpcywgb3VyIDxlbT5tb3RpdmF0aW9uczwvZW0+LiBBcmUgd2UgZG9pbmcgdGhpbmdzIGZvciB0aGUgcmlnaHQgcmVhc29ucz8gT3IgZG8gd2UgYWN0IGJlY2F1c2Ugd2UgaGF2ZW4ndCBzdG9wcGVkIHRvIHRoaW5rPyBPciBkbyB3ZSBiZWxpZXZlIHRoYXQgd2UgPGVtPmhhdmU8L2VtPiB0byBkbyBzb21ldGhpbmc/PC9wPjxwPkZpbmFsbHksIHRoZXJlIGlzIG91ciBqdWRnbWVudC4gT3VyIGFiaWxpdHkgdG8gc2VlIHRoaW5ncyBjbGVhcmx5IGFuZCBwcm9wZXJseSBjb21lcyB3aGVuIHdlIHVzZSBvdXIgZ3JlYXQgZ2lmdCBmcm9tIG5hdHVyZTogPGVtPnJlYXNvbjwvZW0+LjwvcD48cD5UaGVzZSBhcmUgdGhyZWUgZGlzdGluY3QgYXJlYXMgb2YgdHJhaW5pbmcsIGJ1dCBpbiBwcmFjdGljZSB0aGV5IGFyZSBpbmV4dHJpY2FibHkgaW50ZXJ0d2luZWQuIE91ciBqdWRnbWVudCBhZmZlY3RzIHdoYXQgd2UgZGVzaXJlLCBvdXIgZGVzaXJlcyBhZmZlY3QgaG93IHdlIGFjdCwganVzdCBhcyBvdXIganVkZ21lbnQgZGV0ZXJtaW5lcyBob3cgd2UgYWN0LiBCdXQgd2UgY2FuJ3QganVzdCBleHBlY3QgdGhpcyB0byBoYXBwZW4uIFdlIG11c3QgcHV0IHJlYWwgdGhvdWdodCBhbmQgZW5lcmd5IGludG8gZWFjaCBhcmVhIG9mIG91ciBsaXZlcy4gSWYgd2UgZG8sIHdlJ2xsIGZpbmQgcmVhbCBjbGFyaXR5IGFuZCBzdWNjZXNzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXYXRjaGluZyBUaGUgV2lzZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRha2UgYSBnb29kIGhhcmQgbG9vayBhdCBwZW9wbGUncyBydWxpbmcgcHJpbmNpcGxlLCBlc3BlY2lhbGx5IG9mIHRoZSB3aXNlLCB3aGF0IHRoZXkgcnVuIGF3YXkgZnJvbSBhbmQgd2hhdCB0aGV5IHNlZWsgb3V0LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA0LjM4Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlNlbmVjYSBoYXMgc2FpZCwgPHE+V2l0aG91dCBhIHJ1bGVyIHRvIGRvIGl0IGFnYWluc3QsIHlvdSBjYW4ndCBtYWtlIGNyb29rZWQgc3RyYWlnaHQuPC9xPiAgVGhhdCBpcyB0aGUgcm9sZSBvZiB3aXNlIHBlb3BsZSBpbiBvdXIgbGl2ZXMmbWRhc2g7dG8gc2VydmUgYXMgbW9kZWwgYW5kIGluc3BpcmF0aW9uLiAgVG8gYm91bmNlIG91ciBpZGVhcyBvZmYgYW5kIHRlc3Qgb3VyIHByZXN1bXB0aW9ucy48L3A+PHA+V2hvIHRoYXQgcGVyc29uIHdpbGwgYmUgZm9yIHlvdSBpcyB1cCB0byB5b3UuICBQZXJoYXBzIGl0J3MgeW91ciBmYXRoZXIgb3IgeW91ciBtb3RoZXIsIG9yIGJvdGggY29tYmluZWQuICBNYXliZSBpdCdzIGEgcGhpbG9zb3BoZXIgb3IgYSB3cml0ZXIgb3IgYSB0aGlua2VyLiAgUGVyaGFwcyBXV0JEIChXaGF0IHdvdWxkIEJ1ZGRhIGRvPykgb3IgV1dMRCAoV2hhdCB3b3VsZCBMYW96aSBkbz8pIGlzIHRoZSByaWdodCBtb2RlbCBmb3IgeW91LjwvcD48cD5CdXQgcGljayBzb21lb25lLCB3YXRjaCB3aGF0IHRoZXkgZG8gKGFuZCB3aGF0IHRoZXkgPGVtPmRvbid0PC9lbT4gZG8pLCBhbmQgZG8geW91ciBiZXN0IHRvIGRvIHRoZSBzYW1lIC4gLiAuIHNvIHlvdSBjYW4gYmUgdGhhdCB3aXNlIHBlcnNvbiBmb3Igb3RoZXJzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMjkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJLZWVwIEl0IFNpbXBsZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkF0IGV2ZXJ5IG1vbWVudCBrZWVwIGEgc3R1cmR5IG1pbmQgb24gdGhlIHRhc2sgYXQgaGFuZCwgYXMgYSBSb21hbiBhbmQgaHVtYW4gYmVpbmcsIGRvaW5nIGl0IHdpdGggc3RyaWN0IGFuZCBzaW1wbGUgZGlnbml0eSwgYWZmZWN0aW9uLCBmcmVlZG9tLCBhbmQganVzdGljZSZtZGFzaDtnaXZpbmcgeW91cnNlbGYgYSBicmVhayBmcm9tIGFsbCBvdGhlciBjb25zaWRlcmF0aW9ucy4gIFlvdSBjYW4gZG8gdGhpcyBpZiB5b3UgYXBwcm9hY2ggZWFjaCB0YXNrIGFzIGlmIGl0IGlzIHlvdXIgbGFzdCwgZ2l2aW5nIHVwIGV2ZXJ5IGRpc3RyYWN0aW9uLCBlbW90aW9uYWwgc3VidmVyc2lvbiBvZiByZWFzb24sIGFuZCBhbGwgZHJhbWEsIHZhbml0eSwgYW5kIGNvbXBsYWludCBvdmVyIHlvdXIgZmFpciBzaGFyZS4gIFlvdSBjYW4gc2VlIGhvdyBtYXN0ZXJ5IG92ZXIgYSBmZXcgdGhpbmdzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGxpdmUgYW4gYWJ1bmRhbnQgYW5kIGRldm91dCBsaWZlJm1kYXNoO2ZvciwgaWYgeW91IGtlZXAgd2F0Y2ggb3ZlciB0aGluZ3MsIHRoZSBnb2RzIHdvbid0IGFzayBmb3IgbW9yZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgMi41Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkVhY2ggZGF5IHByZXNlbnRzIHRoZSBjaGFuY2UgdG8gb3ZlcnRoaW5rIHRoaW5ncy4gIFdoYXQgc2hvdWxkIEkgd2Vhcj8gIERvIHRoZXkgbGlrZSBtZT8gIEFtIEkgZWF0aW5nIHdlbGwgZW5vdWdoPyAgV2hhdCdzIG5leHQgZm9yIG1lIGluIGxpZmU/ICBJcyBteSBib3NzIGhhcHB5IHdpdGggbXkgd29yaz88L3A+PHA+VG9kYXksIGxldCdzIGZvY3VzIGp1c3Qgb24gd2hhdCdzIGluIGZyb250IG9mIHVzLiAgV2UnbGwgZm9sbG93IHRoZSBkaWN0dW0gdGhhdCBQcmVzaWRlbnQgVHJ1bWFuIGdhdmUsIDxxPkRvIHlvdXIgam9iIGFuZCBkbyBpdCByaWdodC48L3E+ICBMaWtlIGEgUm9tYW4sIGxpa2UgYSBnb29kIHNvbGRpZXIsIGxpa2UgYSBtYXN0ZXIgb2Ygb3VyIGNyYWZ0LiAgV2UgZG9uJ3QgbmVlZCB0byBnZXQgbG9zdCBpbiBhIHRob3VzYW5kIG90aGVyIGRpc3RyYWN0aW9ucyBvciBpbiBvdGhlciBwZW9wbGUncyBidXNpbmVzcy48L3A+PHA+TWFyY3VzIHNheXMgdG8gYXBwcm9hY2ggZWFjaCB0YXNrIGFzIGlmIGl0IHdlcmUgeW91ciBsYXN0LCBiZWNhdXNlIGl0IHZlcnkgd2VsbCBjb3VsZCBiZS4gIEFuZCBldmVuIGlmIGl0IGlzbid0LCBib3RjaGluZyB3aGF0J3MgcmlnaHQgaW4gZnJvbnQgb2YgeW91IGRvZXNuJ3QgaGVscCBhbnl0aGluZy4gIEZpbmQgY2xhcml0eSBpbiB0aGUgc2ltcGxpY2l0eSBvZiBkb2luZyB5b3VyIGpvYiB0b2RheS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIjxibG9ja3F1b3RlPk5vYm9keSBjYXJlcy4gV29yayBoYXJkZXIuIDxicj48Y2l0ZT4mbWRhc2g7QmlsbCBCdXJyPC9jaXRlPjwvYmxvY2txdW90ZT48YmxvY2txdW90ZT5UaGUgYmVzdCBhZHZpY2UgSSd2ZSBldmVyIHJlY2VpdmVkOiBLZWVwIHlvdXIgaGVhZCBkb3duLCBkbyB5b3VyIGpvYiwgYW5kIHNodXQgdXAuIDxicj48Y2l0ZT4mbWRhc2g7Umlja3kgR2VydmFpczwvY2l0ZT48L2Jsb2NrcXVvdGU+Ig0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkphbnVhcnkgMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJZb3UgRG9uJ3QgSGF2ZSBUbyBTdGF5IE9uIFRvcCBPZiBFdmVyeXRoaW5nIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSWYgeW91IHdpc2ggdG8gaW1wcm92ZSwgYmUgY29udGVudCB0byBhcHBlYXIgY2x1ZWxlc3Mgb3Igc3R1cGlkIGluIGV4dHJhbmVvdXMgbWF0dGVycyZtZGFzaDtkb24ndCB3aXNoIHRvIHNlZW0ga25vd2xlZGdlYWJsZS4gIEFuZCBpZiBzb21lIHJlZ2FyZCB5b3UgYXMgaW1wb3J0YW50LCBkaXN0cnVzdCB5b3Vyc2VsZi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJFbmNoaXJpZGlvbiwgMTNhIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPk9uZSBvZiB0aGUgbW9zdCBwb3dlcmZ1bCB0aGluZ3MgeW91IGNhbiBkbyBhcyBhIGh1bWFuIGJlaW5nIGluIG91ciBoeXBlcmNvbm5lY3RlZCwgMjQvNyBtZWRpYSB3b3JsZCBpcyBzYXk6IDxxPkkgZG9uJ3Qga25vdy48L3E+ICBPciwgbW9yZSBwcm92b2NhdGl2ZWx5OiA8cT5JIGRvbid0IGNhcmUuPC9xPiAgTW9zdCBvZiBzb2NpZXR5IHNlZW1zIHRvIGhhdmUgdGFrZW4gaXQgYXMgYSBjb21tYW5kbWVudCB0aGF0IG9uZSBtdXN0IGtub3cgYWJvdXQgZXZlcnkgc2luZ2xlIGN1cnJlbnQgZXZlbnQsIHdhdGNoIGV2ZXJ5IGVwaXNvZGUgb2YgZXZlcnkgY3JpdGljYWxseSBhY2NsYWltZWQgdGVsZXZpc2lvbiBzZXJpZXMsIGZvbGxvdyB0aGUgbmV3cyByZWxpZ2lvdXNseSwgYW5kIHByZXNlbnQgdGhlbXNlbHZlcyB0byBvdGhlcnMgYXMgYW4gaW5mb3JtZWQgYW5kIHdvcmxkbHkgaW5kaXZpZHVhbC48L3A+PHA+QnV0IHdoZXJlIGlzIHRoZSBldmlkZW5jZSB0aGF0IHRoaXMgaXMgYWN0dWFsbHkgbmVjZXNzYXJ5PyAgSXMgdGhlIG9ibGlnYXRpb24gZW5mb3JjZWQgYnkgdGhlIHBvbGljZT8gIE9yIGlzIGl0IHRoYXQgeW91J3JlIGp1c3QgYWZyYWlkIG9mIHNlZW1pbmcgc2lsbHkgYXQgYSBkaW5uZXIgcGFydHk/ICBZZXMsIHlvdSBvd2UgaXQgdG8geW91ciBjb3VudHJ5IGFuZCB5b3VyIGZhbWlseSB0byBrbm93IGdlbmVyYWxseSBhYm91dCBldmVudHMgdGhhdCBtYXkgZGlyZWN0bHkgYWZmZWN0IHRoZW0sIGJ1dCB0aGF0J3MgYWJvdXQgYWxsLjwvcD48cD5Ib3cgbXVjaCBtb3JlIHRpbWUsIGVuZXJneSwgYW5kIHB1cmUgYnJhaW5wb3dlciB3b3VsZCB5b3UgaGF2ZSBhdmFpbGFibGUgaWYgeW91IGRyYXN0aWNhbGx5IGN1dCB5b3VyIG1lZGlhIGNvbnN1bXB0aW9uPyAgSG93IG11Y2ggbW9yZSByZXN0ZWQgYW5kIHByZXNlbnQgd291bGQgeW91IGZlZWwgaWYgeW91IHdlcmUgbm8gbG9uZ2VyIGV4Y2l0ZWQgYW5kIG91dHJhZ2VkIGJ5IGV2ZXJ5IHNjYW5kYWwsIGJyZWFraW5nIHN0b3J5LCBhbmQgcG90ZW50aWFsIGNyaXNpcyAobWFueSBvZiB3aGljaCBuZXZlciBjb21lIHRvIHBhc3MgYW55d2F5KT88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKYW51YXJ5IDMxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiUGhpbG9zb3BoeSBBcyBNZWRpY2luZSBPZiBUaGUgU291bCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkRvbid0IHJldHVybiB0byBwaGlsb3NvcGh5IGFzIGEgdGFzay1tYXN0ZXIsIGJ1dCBhcyBwYXRpZW50cyBzZWVrIG91dCByZWxpZWYgaW4gYSB0cmVhdG1lbnQgb2Ygc29yZSBleWVzLCBvciBhIGRyZXNzaW5nIGZvciBhIGJ1cm4sIG9yIGZyb20gYW4gb2ludG1lbnQuICBSZWdhcmRpbmcgaXQgdGhpcyB3YXksIHlvdSdsbCBvYmV5IHJlYXNvbiB3aXRob3V0IHB1dHRpbmcgaXQgb24gZGlzcGxheSBhbmQgcmVzdCBlYXN5IGluIGl0cyBjYXJlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA1LjkiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIGJ1c2llciB3ZSBnZXQsIHRoZSBtb3JlIHdlIHdvcmsgYW5kIGxlYXJuIGFuZCByZWFkLCB0aGUgZnVydGhlciB3ZSBtYXkgZHJpZnQuICBXZSBnZXQgaW4gYSByaHl0aG0uICBXZSdyZSBtYWtpbmcgbW9uZXksIGJlaW5nIGNyZWF0aXZlLCBhbmQgd2UncmUgc3RpbXVsYXRlZCBhbmQgYnVzeS4gIEl0IHNlZW1zIGxpa2UgZXZlcnl0aGluZyBpcyBnb2luZyB3ZWxsLiAgQnV0IHdlIGRyaWZ0IGZ1cnRoZXIgYW5kIGZ1cnRoZXIgZnJvbSBwaGlsb3NvcGh5LjwvcD48cD5FdmVudHVhbGx5IHRoaXMgbmVnbGVjdCB3aWxsIGNvbnRyaWJ1dGUgdG8gYSBwcm9ibGVtJm1kYXNoO3RoZSBzdHJlc3MgYnVpbGRzIHVwLCBvdXIgbWluZCBnZXRzIGNsb3VkeSwgd2UgZm9yZ2V0IHdoYXQncyBpbXBvcnRhbnQmbWRhc2g7YW5kIHJlc3VsdCBpbiBhbiBpbmp1cnkgb2Ygc29tZSBraW5kLiAgV2hlbiB0aGF0IGhhcHBlbnMsIGl0J3MgaW1wb3J0YW50IHRoYXQgd2UgdGFwIHRoZSBicmFrZXMmbWRhc2g7cHV0IGFzaWRlIGFsbCB0aGUgbW9tZW50dW0gYW5kIHRoZSBtb21lbnQuICBSZXR1cm4gdG8gdGhlIHJlZ2ltZW4gYW5kIHByYWN0aWNlcyB0aGF0IHdlIGtub3cgYXJlIHJvb3RlZCBpbiBjbGFyaXR5LCBnb29kIGp1ZGdtZW50LCBnb29kIHByaW5jaXBsZXMsIGFuZCA8ZW0+Z29vZCBoZWFsdGguPC9lbT48L3A+PHA+U3RvaWNpc20gaXMgZGVzaWduZWQgdG8gYmUgbWVkaWNpbmUgZm9yIHRoZSBzb3VsLiAgSXQgcmVsaWV2ZXMgdXMgb2YgdGhlIHZ1bG5lcmFiaWxpdGllcyBvZiBtb2Rlcm4gbGlmZS4gIEl0IHJlc3RvcmVzIHVzIHdpdGggdmlnb3Igd2UgbmVlZCB0byB0aHJpdmUgaW4gbGlmZS4gIENoZWNrIGluIHdpdGggaXQgdG9kYXksIGFuZCBsZXQgaXQgZG8gaXRzIGhlYWxpbmcuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkZvciB0aGUgSG90LUhlYWRlZCBNYW4iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJLZWVwIHRoaXMgdGhvdWdodCBoYW5keSB3aGVuIHlvdSBmZWVsIGEgcmFnZSBjb21pbmcgb24mbWRhc2g7aXQgaXNuJ3QgbWFubHkgdG8gYmUgZW5yYWdlZC4gUmF0aGVyLCBnZW50bGVuZXNzIGFuZCBjaXZpbGl0eSBhcmUgbW9yZSBodW1hbiwgYW5kIHRoZXJlZm9yZSBtYW5saWVyLiBBIHJlYWwgbWFuIGRvZXNuJ3QgZ2l2ZSB3YXkgdG8gYW5nZXIgYW5kIGRpc2NvbnRlbnQsIGFuZCBzdWNoIGEgcGVyc29uIGhhcyBzdHJlbmd0aCwgY291cmFnZSwgYW5kIGVuZHVyYW5jZSZtZGFzaDt1bmxpa2UgdGhlIGFuZ3J5IGFuZCBjb21wbGFpbmluZy4gVGhlIG5lYXJlciBhIG1hbiBjb21lcyB0byBhIGNhbG0gbWluZCwgdGhlIGNsb3NlciBoZSBpcyB0byBzdHJlbmd0aC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgMTEuMTguNWIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+V2h5IGRvIGF0aGxldGVzIHRhbGsgdHJhc2ggdG8gZWFjaCBvdGhlcj8gV2h5IGRvIHRoZXkgZGVsaWJlcmF0ZWx5IHNheSBvZmZlbnNpdmUgYW5kIG5hc3R5IHRoaW5ncyB0byB0aGVpciBjb21wZXRpdG9ycyB3aGVuIHRoZSByZWZzIGFyZW4ndCBsb29raW5nPyBUbyBwcm92b2tlIGEgcmVhY3Rpb24uIERpc3RyYWN0aW5nIGFuZCBhbmdlcmluZyBvcHBvbmVudHMgaXMgYW4gZWFzeSB3YXkgdG8ga25vY2sgdGhlbSBvZmYgdGhlaXIgZ2FtZS48L3A+PHA+VHJ5IHRvIHJlbWVtYmVyIHRoYXQgd2hlbiB5b3UgZmluZCB5b3Vyc2VsZiBnZXR0aW5nIG1hZC4gQW5nZXIgaXMgbm90IGltcHJlc3NpdmUgb3IgdG91Z2gmaXQncyBhIG1pc3Rha2UuIEl0J3MgPGVtPndlYWtuZXNzPC9lbT4uIERlcGVuZGluZyBvbiB3aGF0IHlvdSdyZSBkb2luZywgaXQgbWlnaHQgZXZlbiBiZSBhIHRyYXAgdGhhdCBzb21lb25lIGxhaWQgZm9yIHlvdS48L3A+PHA+RmFucyBhbmQgb3Bwb25lbnRzIGNhbGxlZCBKb2UgTG91aXMgdGhlIDxxPlJpbmcgUm9ib3Q8L3E+IGJlY2F1c2UgaGUgd2FzIHV0dGVybHkgdW5lbW90aW9uYWwmbWRhc2g7aGlzIGNvbGQsIGNhbG0gZGVtZWFub3Igd2FzIGZhciBtb3JlIHRlcnJpZnlpbmcgdGhhbiBhbnkgY3JhemVkIGxvb2sgb3IgZW1vdGlvbmFsIG91dGJ1cnN0IHdvdWxkIGhhdmUgYmVlbi48L3A+PHA+U3RyZW5ndGggaXMgdGhlIGFiaWxpdHkgdG8gbWFpbnRhaW4gYSBob2xkIG9mIG9uZXNlbGYuIEl0J3MgYmVpbmcgdGhlIHBlcnNvbiB3aG8gbmV2ZXIgZ2V0cyBtYWQsIHdobyBjYW5ub3QgYmUgcmF0dGxlZCwgYmVjYXVzZSB0aGV5IGFyZSBpbiBjb250cm9sIG9mIHRoZWlyIHBhc3Npb25zJm1kYXNoO3JhdGhlciB0aGFuIGNvbnRyb2xsZWQgPGVtPmJ5PC9lbT4gdGhlaXIgcGFzc2lvbnMuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkEgUHJvcGVyIEZyYW1lIE9mIE1pbmQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJGcmFtZSB5b3VyIHRob3VnaHRzIGxpa2UgdGhpcyZtZGFzaDt5b3UgYXJlIGFuIG9sZCBwZXJzb24sIHlvdSB3b24ndCBsZXQgeW91cnNlbGYgYmUgZW5zbGF2ZWQgYnkgdGhpcyBhbnkgbG9uZ2VyLCBubyBsb25nZXIgcHVsbGVkIGxpa2UgYSBwdXBwZXQgYnkgZXZlcnkgaW1wdWxzZSwgYW5kIHlvdSdsbCBzdG9wIGNvbXBsYWluaW5nIGFib3V0IHlvdXIgcHJlc2VudCBmb3J0dW5lIG9yIGRyZWFkaW5nIHRoZSBmdXR1cmUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDIuMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5XZSByZXNlbnQgdGhlIHBlcnNvbiB3aG8gY29tZXMgaW4gYW5kIHRyaWVzIHRvIGJvc3MgdXMgYXJvdW5kLiA8ZW0+RG9uJ3QgdGVsbCBtZSBob3cgdG8gZHJlc3MsIGhvdyB0byB0aGluaywgaG93IHRvIGRvIG15IGpvYiwgaG93IHRvIGxpdmU8L2VtPi4gVGhpcyBpcyBiZWNhdXNlIHdlIGFyZSBpbmRlcGVuZGVudCwgc2VsZi1zdWZmaWNpZW50IHBlb3BsZS48L3A+PHA+T3IgYXQgbGVhc3QgdGhhdCdzIHdoYXQgd2UgdGVsbCBvdXJzZWx2ZXMuPC9wPjxwPllldCBpZiBzb21lb25lIHNheXMgc29tZXRoaW5nIHdlIGRpc2FncmVlIHdpdGgsIHNvbWV0aGluZyBpbnNpZGUgdXMgdGVsbCB1cyB3ZSA8ZW0+aGF2ZTwvZW0+IHRvIGFyZ3VlIHdpdGggdGhlbS4gSWYgdGhlcmUncyBhIHBsYXRlIG9mIGNvb2tpZXMgaW4gZnJvbnQgb2YgdXMsIHdlIDxlbT5oYXZlPC9lbT4gdG8gZWF0IHRoZW0uIElmIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgd2UgZGlzbGlrZSwgd2UgPGVtPmhhdmU8L2VtPiB0byBnZXQgbWFkIGFib3V0IGl0LiBXaGVuIHNvbWV0aGluZyBiYWQgaGFwcGVucywgd2UgPGVtPmhhdmU8L2VtPiB0byBiZSBzYWQsIGRlcHJlc3NlZCwgb3Igd29ycmllZC4gQnV0IGlzIHNvbWV0aGluZyBnb29kIGhhcHBlbnMgYSBmZXcgbWludXRlcyBsYXRlciwgYWxsIG9mIGEgc3VkZGVuIHdlJ3JlIGhhcHB5LCBleGNpdGVkLCBhbmQgd2FudCBtb3JlLjwvcD48cD5XZSB3b3VsZCBuZXZlciBsZXQgYW5vdGhlciBwZXJzb24gamVyayB1cyBhcm91bmQgdGhlIHdheSB3ZSBsZXQgb3VyIGltcHVsc2VzIGRvLiBJdCdzIHRpbWUgd2Ugc3RhcnQgc2VlaW5nIGl0IHRoYXQgd2F5Jm1kYXNoO3RoYXQgd2UncmUgbm90IHB1cHBldHMgdGhhdCBjYW4gYmUgbWFkZSB0byBkYW5jZSB0aGlzIHdheSBvciB0aGF0IHdheSBqdXN0IGJlY2F1c2Ugd2UgZmVlbCBsaWtlIGl0LiBXZSBzaG91bGQgYmUgdGhlIG9uZXMgaW4gY29udHJvbCwgbm90IG91ciBlbW90aW9ucywgYmVjYXVzZSB3ZSBhcmUgaW5kZXBlbmRlbnQsIHNlbGYtc3VmZmljaWVudCBwZW9wbGUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBTb3VyY2UgT2YgWW91ciBBbnhpZXR5IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiV2hlbiBJIHNlZSBhbiBhbnhpb3VzIHBlcnNvbiwgSSBhc2sgbXlzZWxmLCB3aGF0IGRvIHRoZXkgd2FudD8gRm9yIGlmIGEgcGVyc29uIHdhc24ndCB3YW50aW5nIHNvbWV0aGluZyBvdXRzaWRlIG9mIHRoZWlyIG93biBjb250cm9sIHdoeSB3b3VsZCB0aGV5IGJlIHN0cmlja2VuIGJ5IGFueGlldHk/IiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMi4xMy4xIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZSBhbnhpb3VzIGZhdGhlciwgd29ycmllZCBhYm91dCBoaXMgY2hpbGRyZW4uIFdoYXQgZG9lcyBoZSB3YW50PyBBIHdvcmxkIHRoYXQgaXMgYWx3YXlzIHNhZmUuIEEgZnJlbnppZWQgdHJhdmVsZXImbWRhc2g7d2hhdCBkb2VzIHNoZSB3YW50PyBGb3IgdGhlIHdlYXRoZXIgdG8gaG9sZCBhbmQgZm9yIHRyYWZmaWMgdG8gcGFydCBzbyBzaGUgY2FuIG1ha2UgaGVyIGZsaWdodC4gQSBuZXJ2b3VzIGludmVzdG9yPyBUaGF0IHRoZSBtYXJrZXQgd2lsbCB0dXJuIGFyb3VuZCBhbmQgYW4gaW52ZXN0bWVudCB3aWxsIHBheSBvZmYuPC9wPjxwPkFsbCBvZiB0aGVzZSBzY2VuYXJpb3MgaG9sZHMgdGhlIHNhbWUgdGhpbmcgaW4gY29tbW9uLiBBcyBFcGljdGV0dXMgc2F5cywgaXQncyB3YW50aW5nIHNvbWV0aGluZyBvdXRzaWRlIG91ciBjb250cm9sLiBHZXR0aW5nIHdvcmtlZCB1cCwgZ2V0dGluZyBleGNpdGVkLCBuZXJ2b3VzbHkgcGFjaW5nJm1kYXNoO3RoZXNlIGludGVuc2UsIHBhaW5lZCwgYWQgYW54aW91cyBtb21lbnRzIHNob3cgdXMgYXQgb3VyIG1vc3QgZnV0aWxlIGFuZCBzZXJ2aWxlLiBTdGFyaW5nIGF0IHRoZSBjbG9jaywgYXQgdGhlIHRpY2tlciwgYXQgdGhlIG5leHQgY2hlY2tvdXQgbGFuZSBvdmVyLCBhdCB0aGUgc2t5Jm1kYXNoO2l0J3MgYXMgaWYgd2UgYWxsIGJlbG9uZyB0byBhIHJlbGlnaW91cyBjdWx0IHRoYXQgYmVsaWV2ZXMgdGhlIGdvZHMgb2YgZmF0ZSB3aWxsIG9ubHkgZ2l2ZSB1cyB3aGF0IHdlIHdhbnQgaWYgd2Ugc2FjcmlmaWNlIG91ciBwZWFjZSBvZiBtaW5kLjwvcD48cD5Ub2RheSwgd2hlbiB5b3UgZmluZCB5b3Vyc2VsZiBnZXR0aW5nIGFueGlvdXMsIGFzayB5b3Vyc2VsZjogPGVtPldoeSBhcmUgbXkgaW5zaWRlcyB0d2lzdGVkIGludG8ga25vdHM/IEFtIEkgaW4gY29udHJvbCBoZXJlIG9yIGlzIG15IGFueGlldHk/PC9lbT4gQW5kIG1vc3QgaW1wb3J0YW50OiA8ZW0+SXMgbXkgYW54aWV0eSBkb2luZyBtZSBhbnkgZ29vZD88L2VtPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJPbiBCZWluZyBJbnZpbmNpYmxlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiV2hvIHRoZW4gaXMgaW52aW5jaWJsZT8gVGhlIG9uZSB3aG8gY2Fubm90IGJlIHVwc2V0IGJ5IGFueXRoaW5nIG91dHNpZGUgdGhlaXIgcmVhc29uZWQgY2hvaWNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDEuMTguMjEiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SGF2ZSB5b3UgZXZlciB3YXRjaGVkIGEgc2Vhc29uZWQgcHJvIGhhbmRsZSB0aGUgbWVkaWE/IE5vIHF1ZXN0aW9uIGlzIHRvbyB0b3VnaCwgbm8gdG9uZSB0b28gcG9pbnRlZCBvciBpbnN1bHRpbmcuIFRoZXkgcGFycnkgZXZlcnkgYmxvdyB3aXRoIGh1bW9yLCBwb2lzZSwgYW5kIHBhdGllbmNlLiBFdmVuIHdoZW4gc3R1bmcgb3IgcHJvdm9rZWQsIHRoZXkgPGVtPmNob29zZTwvZW0+IG5vdCB0byBmbGluY2ggb3IgcmVhY3QuIFRoZXkncmUgYWJsZSB0byBkbyB0aGlzIG5vdCBvbmx5IGJlY2F1c2Ugb2YgdHJhaW5pbmcgYW5kIGV4cGVyaWVuY2UsIGJ1dCBiZWNhdXNlIHRoZXkgdW5kZXJzdGFuZCB0aGF0IHJlYWN0aW5nIGVtb3Rpb25hbGx5IHdpbGwgb25seSBtYWtlIHRoZSBzaXR1YXRpb24gd29yc2UuIFRoZSBtZWRpYSBpcyB3YWl0aW5nIGZvciB0aGVtIHRvIHNsaXAgdXAgb3IgZ2V0IHVwc2V0LCBzbyB0byBzdWNjZXNzZnVsbHkgbmF2aWdhdGUgcHJlc3MgZXZlbnRzIHRoZXkgaGF2ZSBpbnRlcm5hbGl6ZWQgdGhlIGltcG9ydGFuY2Ugb2Yga2VlcGluZyB0aGVtc2VsdmVzIHVuZGVyIGNhbG0gY29udHJvbC48L3A+PHA+SXQncyB1bmxpa2VseSB5b3UnbGwgZmFjZSBhIGhvcmRlIG9mIHByb2JpbmcgcmVwb3J0ZXJzIGJvbWJhcmRpbmcgeW91IHdpdGggaW5zZW5zaXRpdmUgcXVlc3Rpb25zIHRvZGF5LiBCdXQgaXQgbWlnaHQgYmUgaGVscGZ1bCZtZGFzaDt3aGF0ZXZlciBzdHJlc3NlcyBvciBmcnVzdHJhdGlvbnMgb3Igb3ZlcmxvYWQgdGhhdCBkbyBjb21lIHlvdXIgd2F5Jm1kYXNoO3RvIHBpY3R1cmUgdGhhdCBpbWFnZSBhbmQgdXNlIGl0IGFzIHlvdXIgbW9kZWwgZm9yIGRlYWxpbmcgd2l0aCB0aGVtLiBPdXIgcmVhc29uZWQgY2hvaWNlJm1kYXNoOyBvdXIgPGVtPnByb2hhaXJlc2VzPC9lbT4sIGFzIHRoZSBTdG9pY3MgY2FsbGVkIGl0Jm1kYXNoO2lzIGEga2luZCBvZiBpbnZpbmNpYmlsaXR5IHRoYXQgd2UgY2FuIGN1bHRpdmF0ZS4gV2UgY2FuIHNocnVnIG9mZiBob3N0aWxlIGF0dGFja3MgYW5kIGJyZWV6ZSB0aG9yb3VnaCBwcmVzc3VyZSBvciBwcm9ibGVtcy4gQW5kLCBsaWtlIG91ciBtb2RlbCwgd2hlbiB3ZSBmaW5pc2gsIHdlIGNhbiBwb2ludCBiYWNrIGludG8gdGhlIGNyb3dkIGFuZCBzYXksIDxxPk5leHQhPC9xPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTdGVhZHkgWW91ciBJbXB1bHNlcyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkRvbid0IGJlIGJvdW5jZWQgYXJvdW5kLCBidXQgc3VibWl0IGV2ZXJ5IGltcHVsc2UgdG8gdGhlIGNsYWltcyBvZiBqdXN0aWNlLCBhbmQgcHJvdGVjdCB5b3VyIGNsZWFyIGNvbnZpY3Rpb24gaW4gZXZlcnkgYXBwZWFyYW5jZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNC4yMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGluayBvZiB0aGUgbWFuaWMgcGVvcGxlIGluIHlvdXIgbGlmZS4gIE5vdCB0aGUgb25lcyBzdWZmZXJpbmcgZnJvbSBhbiB1bmZvcnR1bmF0ZSBkaXNvcmRlciwgYnV0IHRoZSBvbmVzIHdob3NlIGxpdmVzIGFuZCBjaG9pY2VzIGFyZSA8ZW0+aW48L2VtPiBkaXNvcmRlci4gIEV2ZXJ5dGhpbmcgaXMgc29hcmluZyBoaWdocyBvciBjcnVzaGluZyBsb3dzOyB0aGUgZGF5IGlzIGVpdGhlciBhbWF6aW5nIG9yIGF3ZnVsLiAgQXJlbid0IHRob3NlIHBlb3BsZSBleGhhdXN0aW5nPyBEb24ndCB5b3Ugd2lzaCB0aGV5IGp1c3QgaGFkIGEgZmlsdGVyIHRocm91Z2ggd2hpY2ggdGhleSBjb3VsZCB0ZXN0IHRoZSBnb29kIGltcHVsc2VzIHZlcnN1cyB0aGUgYmFkIG9uZXM/PC9wPjxwPlRoZXJlIGlzIHN1Y2ggYSBmaWx0ZXIuICBKdXN0aWNlLiAgUmVhc29uLiAgUGhpbG9zb3BoeS4gIElmIHRoZXJlJ3MgYSBjZW50cmFsIG1lc3NhZ2Ugb2YgU3RvaWMgdGhvdWdodCwgaXQncyB0aGlzOiBpbXB1bHNlcyBvZiBhbGwga2luZHMgYXJlIGdvaW5nIHRvIGNvbWUsIGFuZCB5b3VyIHdvcmsgaXMgdG8gY29udHJvbCB0aGVtLCBsaWtlIGJyaW5naW5nIGEgZG9nIHRvIGhlZWwuIFB1dCBtb3JlIHNpbXBseTogdGhpbmsgYmVmb3JlIHlvdSBhY3QuICBBc2s6IDxlbT5XaG8gaXMgaW4gY29udHJvbCBoZXJlPyBXaGF0IHByaW5jaXBsZXMgYXJlIGd1aWRpbmcgbWU/PC9lbT48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSA2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgU2VlayBPdXQgU3RyaWZlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSSBkb24ndCBhZ3JlZSB3aXRoIHRob3NlIHdobyBwbHVuZ2UgaGVhZGxvbmcgaW50byB0aGUgbWlkZGxlIG9mIHRoZSBmbG9vZCBhbmQgd2hvLCBhY2NlcHRpbmcgYSB0dXJidWxlbnQgbGlmZSwgc3RydWdnbGUgZGFpbHkgaW4gZ3JlYXQgc3Bpcml0IHdpdGggZGlmZmljdWx0IGNpcmN1bXN0YW5jZXMuIFRoZSB3aXNlIHBlcnNvbiB3aWxsIGVuZHVyZSB0aGF0LCBidXQgd29uJ3QgY2hvb3NlIGl0Jm1kYXNoO2Nob29zaW5nIHRvIGJlIGF0IHBlYWNlLCByYXRoZXIgdGhhbiBhdCB3YXIuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT2VkaXB1cywgOTkyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjxxPk9ubHkgdGhlIHBhcmFub2lkIHN1cnZpdmUsPC9xPiBBbmR5IEdyb3ZlLCBhIGZvcm1lciBDRU8gb2YgSW50ZWwsIGZhbW91c2x5IHNhaWQuIEl0IG1pZ2h0IGJlIHRydWUuIEJ1dCB3ZSBhbHNvIGtub3cgdGhhdCB0aGUgcGFyYW5vaWQgb2Z0ZW4gZGVzdHJveSB0aGVtc2VsdmVzIHF1aWNrZXIgYW5kIG1vcmUgc3BlY3RhY3VsYXJseSB0aGFuIGFueSBlbmVteS4gU2VuZWNhLCB3aXRoIGhpcyBhY2Nlc3MgYW5kIGluc2lnaHQgaW50byB0aGUgbW9zdCBwb3dlcmZ1bCBlbGl0ZSBpbiBSb21lLCB3b3VsZCBoYXZlIHNlZW4gdGhpcyBkeW5hbWljIHBsYXkgb3V0IHF1aXRlIHZpdmlkbHkuIE5lcm8sIHRoZSBzdHVkZW50IHdob3NlIGV4Y2Vzc2VzIFNlbmVjYSB0cmllZCB0byBjdXJiLCBraWxsZWQgbm90IG9ubHkgaGlzIG93biBtb3RoZXIgYW5kIHdpZmUgYnV0IGV2ZW50dWFsbHkgdHVybmVkIG9uIFNlbmVjYSwgaGlzIG1lbnRvciwgdG9vLjwvcD48cD5UaGUgY29tYmluYXRpb24gb2YgcG93ZXIsIGZlYXIsIG1hbmlhIGNhbiBiZSBkZWFkbHkuIFRoZSBsZWFkZXIgY29udmluY2VkIHRoYXQgaGUgbWlnaHQgYmUgYmV0cmF5ZWQsIGFjdHMgZmlyc3QgYW5kIGJldHJheXMgb3RoZXJzIGZpcnN0LiBBZnJhaWQgdGhhdCBoZSdzIG5vdCB3ZWxsIGxpa2VkLCBoZSB3b3JrcyBzbyBoYXJkIHRvIGdldCBvdGhlcnMgdG8gbGlrZSBoaW0gdGhhdCBpdCBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdC4gQ29udmluY2VkIG9mIG1pc21hbmFnZW1lbnQsIGhlIG1pY3JvbWFuYWdlcyBhbmQgYmVjb21lcyB0aGUgc291cmNlIG9mIHRoZSBtaXNtYW5hZ2VtZW50LiBBbmQgb24gYW5kIG9uJm1kYXNoO3RoZSB0aGluZ3Mgd2UgZmVhciBvciBkcmVhZCwgd2UgYmxpbmRseSBpbmZsaWN0IG9uIG91cnNlbHZlcy48L3A+PHA+VGhlIG5leHQgdGltZSB5b3UgYXJlIGFmcmFpZCBvZiBzb21lIHN1cHBvc2VkbHkgZGlzYXN0cm91cyBvdXRjb21lLCByZW1lbWJlciB0aGF0IGlmIHlvdSBkb24ndCBjb250cm9sIHlvdXIgaW1wdWxzZXMsIGlmIHlvdSBsb3NlIHlvdXIgc2VsZi1jb250cm9sLCB5b3UgbWF5IGJlIHRoZSB2ZXJ5IHNvdXJjZSBvZiB0aGUgZGlzYXN0ZXIgeW91IHNvIGZlYXIuIEl0IGhhcyBoYXBwZW5lZCB0byBzbWFydGVyIGFuZCBtb3JlIHBvd2VyZnVsIGFuZCBtb3JlIHN1Y2Nlc3NmdWwgcGVvcGxlLiBJdCBjYW4gaGFwcGVuIHRvIHVzIHRvby48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSA3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRmVhciBJcyBBIFNlbGYtRnVsZmlsbGluZyBQcm9waGVjeSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIk1hbnkgYXJlIGhhcm1lZCBieSBmZWFyIGl0c2VsZiwgYW5kIG1hbnkgbWF5IGhhdmUgY29tZSB0byB0aGVpciBmYXRlIHdoaWxlIGRyZWFkaW5nIGZhdGUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT2VkaXB1cywgOTkyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjxxPk9ubHkgdGhlIHBhcmFub2lkIHN1cnZpdmUsPC9xPiBBbmR5IEdyb3ZlLCBhIGZvcm1lciBDRU8gb2YgSW50ZWwsIGZhbW91c2x5IHNhaWQuIEl0IG1pZ2h0IGJlIHRydWUuIEJ1dCB3ZSBhbHNvIGtub3cgdGhhdCB0aGUgcGFyYW5vaWQgb2Z0ZW4gZGVzdHJveSB0aGVtc2VsdmVzIHF1aWNrZXIgYW5kIG1vcmUgc3BlY3RhY3VsYXJseSB0aGFuIGFueSBlbmVteS4gU2VuZWNhLCB3aXRoIGhpcyBhY2Nlc3MgYW5kIGluc2lnaHQgaW50byB0aGUgbW9zdCBwb3dlcmZ1bCBlbGl0ZSBpbiBSb21lLCB3b3VsZCBoYXZlIHNlZW4gdGhpcyBkeW5hbWljIHBsYXkgb3V0IHF1aXRlIHZpdmlkbHkuIE5lcm8sIHRoZSBzdHVkZW50IHdob3NlIGV4Y2Vzc2VzIFNlbmVjYSB0cmllZCB0byBjdXJiLCBraWxsZWQgbm90IG9ubHkgaGlzIG93biBtb3RoZXIgYW5kIHdpZmUgYnV0IGV2ZW50dWFsbHkgdHVybmVkIG9uIFNlbmVjYSwgaGlzIG1lbnRvciwgdG9vLjwvcD48cD5UaGUgY29tYmluYXRpb24gb2YgcG93ZXIsIGZlYXIsIGFuZCBtYW5pYSBjYW4gYmUgZGVhZGx5LiBUaGUgbGVhZGVyLCBjb252aW5jZWQgdGhhdCBoZSBtaWdodCBiZSBiZXRyYXllZCwgYWN0cyBmaXJzdCBhbmQgYmV0cmF5cyBvdGhlcnMgZmlyc3QuIEFmcmFpZCB0aGF0IGhlJ3Mgbm90IHdlbGwgbGlrZWQsIGhlIHdvcmtzIHNvIGhhcmQgdG8gZ2V0IG90aGVycyB0byBsaWtlIGhpbSB0aGF0IGl0IGhhcyB0aGUgb3Bwb3NpdGUgZWZmZWN0LiBDb252aW5jZWQgb2YgbWlzbWFuYWdlbWVudCwgaGUgbWljcm9tYW5hZ2VzIGFuZCBiZWNvbWVzIHRoZSBzb3VyY2Ugb2YgdGhlIG1pc21hbmFnZW1lbnQuIEFuZCBvbiBhbmQgb24mbWRhc2g7dGhlIHRoaW5ncyB3ZSBmZWFyIG9yIGRyZWFkLCB3ZSBibGluZGx5IGluZmxpY3Qgb24gb3Vyc2VsdmVzLjwvcD48cD5UaGUgbmV4dCB0aW1lIHlvdSBhcmUgYWZyYWlkIG9mIHNvbWUgc3VwcG9zZWRseSBkaXNhc3Ryb3VzIG91dGNvbWUsIHJlbWVtYmVyIHRoYXQgaWYgeW91IGRvbid0IGNvbnRyb2wgeW91ciBpbXB1bHNlcywgaWYgeW91IGxvc2UgeW91ciBzZWxmLWNvbnRyb2wsIHlvdSBtYXkgYmUgdGhlIHZlcnkgc291cmNlIG9mIHRoZSBkaXNhc3RlciB5b3Ugc28gZmVhci4gSXQgaGFzIGhhcHBlbmVkIHRvIHNtYXJ0ZXIgYW5kIG1vcmUgcG93ZXJmdWwgYW5kIG1vcmUgc3VjY2Vzc2Z1bCBwZW9wbGUuIEl0IGNhbiBoYXBwZW4gdG8gdXMgdG9vLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJEaWQgVGhhdCBNYWtlIFlvdSBGZWVsIEJldHRlciIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIllvdSBjcnksICZsc3F1bztJJ20gc3VmZmVyaW5nIHNldmVyZSBwYWluISZyc3F1bzsgQXJlIHlvdSB0aGVuIHJlbGlldmVkIGZyb20gZmVlbGluZyBpdCBpZiB5b3UgYmVhciBpdCBpbiBhbiB1bm1hbmx5IHdheT8iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA3OC4xNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgbmV4dCB0aW1lIHNvbWVvbmUgZ2V0cyB1cHNldCBuZWFyIHlvdSZtZGFzaDtjcnlpbmcsIHllbGxpbmcsIGJyZWFraW5nIHNvbWV0aGluZywgYmVpbmcgcG9pbnRlZCBvciBjcnVlbCZtZGFzaDt3YXRjaCBob3cgcXVpY2tseSB0aGlzIHN0YXRlbWVudCB3aWxsIHN0b3AgdGhlbSBjb2xkOiA8cT5JIGhvcGUgdGhpcyBpcyBtYWtpbmcgeW91IGZlZWwgYmV0dGVyLjwvcT4gQmVjYXVzZSwgb2YgY291cnNlLCBpdCBpc24ndC4gT25seSBpbiB0aGUgYnViYmxlIG9mIGV4dHJlbWUgZW1vdGlvbiBjYW4gd2UganVzdGlmeSBhbnkgb2YgdGhhdCBraW5kIG9mIGJlaGF2aW9yJm1kYXNoO2FuZCB3aGVuIGNhbGxlZCB0byBhY2NvdW50IGZvciBpdCwgd2UgdXN1YWxseSBmZWVsIHNoZWVwaXNoIG9yIGVtYmFycmFzc2VkLjwvcD48cD5JdCdzIHdvcnRoIGFwcGx5aW5nIHRoYXQgc3RhbmRhcmQgdG8geW91cnNlbGYuIFRoZSBuZXh0IHRpbWUgeW91IGZpbmQgeW91cnNlbGYgaW4gdGhlIG1pZGRsZSBvZiBhIGZyZWFrb3V0LCBvciBtb2FuaW5nIGFuZCBncm9hbmluZyB3aXRoIHlvdXJzZWxmIGluIHRoZSBmbHVsaWtlIHN5bXB0b21zLCBvciBjcnlpbmcgdGVhcnMgb2YgcmVncmV0LCBqdXN0IGFzazogPGVtPklzIHRoaXMgYWN0dWFsbHkgbWFraW5nIG1lIGZlZWwgYmV0dGVyPyBJcyB0aGlzIGFjdHVhbGx5IHJlbGlldmluZyBhbnkgb2YgdGhlIHN5bXB0b21zIEkgd2lzaCB3ZXJlIGdvbmU/PC9lbT48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIjxibG9ja3F1b3RlPk90aGVycyBtYXkgaHVydCB5b3UsIGJ1dCB5b3VyIG1pbmQgY2FuIHJlbWFpbiBjYWxtLiBXaGVuIHRoZSBtaW5kIGlzIGRpc2NpcGxpbmVkLCBzdWZmZXJpbmcgY2Fubm90IGRpc3R1cmIgeW91Ljxicj48Y2l0ZT4mbWRhc2g7RGhhbW1hcGFkYSwgNjwvY2l0ZT48L2Jsb2NrcXVvdGU+PGJsb2NrcXVvdGU+SWYgdGhlcmUgaXMgYSByZW1lZHksIHRoZW4gd2hhdCBpcyB0aGUgdXNlIG9mIGZydXN0cmF0aW9uPyBJZiB0aGVyZSBpcyBubyByZW1lZHksIHRoZW4gd2hhdCBpcyB0aGUgdXNlIG9mIGZydXN0cmF0aW9uPzxicj48Y2l0ZT4mbWRhc2g7U2hhbnRpZGV2YTwvY2l0ZT48L2Jsb2NrcXVvdGU+Ig0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJZb3UgRG9uJ3QgSGF2ZSB0byBIYXZlIGFuIE9waW5pb24iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXZSBoYXZlIHRoZSBwb3dlciB0byBob2xkIG5vIG9waW5pb24gYWJvdXQgYSB0aGluZyBhbmQgdG8gbm90IGxldCBpdCB1cHNldCBvdXIgc3RhdGUgb2YgbWluZCZtZGFzaDtmb3IgdGhpbmdzIGhhdmUgbm8gbmF0dXJhbCBwb3dlciB0byBzaGFwZSBvdXIganVkZ21lbnRzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zIDYuNTIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SGVyZSdzIGEgZnVubnkgZXhlcmNpc2U6IHRoaW5rIGFib3V0IGFsbCB0aGUgdXBzZXR0aW5nIHRoaW5ncyB5b3UgPGVtPmRvbid0PC9lbT4ga25vdyBhYm91dCZtZGFzaDtzdHVmZiBwZW9wbGUgbWlnaHQgaGF2ZSBzYWlkIGFib3V0IHlvdSBiZWhpbmQgeW91ciBiYWNrLCBtaXN0YWtlcyB5b3UgbWlnaHQgaGF2ZSBtYWRlIHRoYXQgbmV2ZXIgY2FtZSB0byB5b3VyIGF0dGVudGlvbiwgdGhpbmdzIHlvdSBkcm9wcGVkIG9yIGxvc3Qgd2l0aG91dCBldmVuIHJlYWxpemluZyBpdC4gIFdoYXQncyB5b3VyIHJlYWN0aW9uPyBZb3UgZG9uJ3QgaGF2ZSBvbmUgYmVjYXVzZSB5b3UgZG9uJ3Qga25vdyBhYm91dCBpdC48L3A+PHA+SW4gb3RoZXIgd29yZHMsIGl0IDxlbT5pczwvZW0+IHBvc3NpYmxlIHRvIGhvbGQgbm8gb3BpbmlvbiBhYm91dCBhIG5lZ2F0aXZlIHRoaW5nLiAgWW91IGp1c3QgbmVlZCB0byBjdWx0aXZhdGUgdGhhdCBwb3dlciBpbnN0ZWFkIG9mIHdpZWxkaW5nIGl0IGFjY2lkZW50YWxseS4gIEVzcGVjaWFsbHkgd2hlbiBoYXZpbmcgYW4gb3BpbmlvbiBpcyBsaWtlbHkgdG8gbWFrZSB1cyBhZ2dyYXZhdGVkLiAgUHJhY3RpY2UgdGhlIGFiaWxpdHkgb2YgaGF2aW5nIGFic29sdXRlbHkgbm8gdGhvdWdodHMgYWJvdXQgc29tZXRoaW5nJm1kYXNoO2FjdCBhcyBpZiB5b3UgaGFkIG5vIGlkZWEgaXQgZXZlciBvY2N1cnJlZC4gT3IgdGhhdCB5b3UndmUgbmV2ZXIgaGVhcmQgb2YgaXQgYmVmb3JlLiAgTGV0IGl0IGJlY29tZSBpcnJlbGV2YW50IG9yIG5vbmV4aXN0ZW50IHRvIHlvdS4gIEl0J2xsIGJlIGEgbG90IGxlc3MgcG93ZXJmdWwgdGhpcyB3YXkuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICI8YmxvY2txdW90ZT5PcGluaW9ucyBhcmUgbGlrZSBuYWlsczsgdGhlIG1vcmUgeW91IGhhbW1lciB0aGVtLCB0aGUgZGVlcGVyIHRoZXkgZ28uICA8YnI+PGNpdGU+Jm1kYXNoO1Vua25vd248L2NpdGU+PC9ibG9ja3F1b3RlPjxibG9ja3F1b3RlPkRvbid0IHdhc3RlIHlvdXIgdGltZSB3aXRoIGV4cGxhbmF0aW9uczogcGVvcGxlIG9ubHkgaGVhciB3aGF0IHRoZXkgd2FudCB0byBoZWFyLiAgPGJyPjxjaXRlPiZtZGFzaDtQYXVsbyBDb2VsaG88L2NpdGU+PC9ibG9ja3F1b3RlPjxibG9ja3F1b3RlPlRob3NlIHdobyBrbm93IGRvIG5vdCBzcGVhazsgdGhvc2Ugd2hvIHNwZWFrIGRvIG5vdCBrbm93LiAgPGJyPjxjaXRlPiZtZGFzaDtMYW8gVHp1LCA8ZW0+VGFvIFRlIENoaW5nPC9lbT4sIDU2PC9jaXRlPjwvYmxvY2txdW90ZT48YmxvY2txdW90ZT5UaGUgd2lzZSBtYW4gc3BlYWtzIGJlY2F1c2UgaGUgaGFzIHNvbWV0aGluZyB0byBzYXk7IHRoZSBmb29sIHNwZWFrcyBiZWNhdXNlIGhlIGhhcyB0byBzYXkgc29tZXRoaW5nLiAgPGJyPjxjaXRlPiZtZGFzaDtQbGF0byAoYXR0cmlidXRlZCk8L2NpdGU+PC9ibG9ja3F1b3RlPjxibG9ja3F1b3RlPklmIHlvdSB3aXNoIHRvIGJlIHdpc2UsIGxlYXJuIHRvIHF1ZXN0aW9uIHJlYXNvbmFibHksIGxpc3RlbiBjYXJlZnVsbHksIHJlc3BvbmQgY2F1dGlvdXNseSwgYW5kIGtlZXAgc2lsZW50IHdoZW4geW91IGhhdmUgbm90aGluZyB0byBzYXkuICA8YnI+PGNpdGU+Jm1kYXNoO0pvaGFubiBLYXNwYXIgTGF2YXRlcjwvY2l0ZT48L2Jsb2NrcXVvdGU+PGJsb2NrcXVvdGU+QmV0dGVyIHRvIHJlbWFpbiBzaWxlbnQgYW5kIGJlIHRob3VnaHQgYSBmb29sIHRoYW4gdG8gc3BlYWsgYW5kIHJlbW92ZSBhbGwgZG91YnQuICA8YnI+PGNpdGU+Jm1kYXNoO01hcmsgVHdhaW4gKGF0dHJpYnV0ZWQpPC9jaXRlPjwvYmxvY2txdW90ZT48YmxvY2txdW90ZT5FdmVuIGZvb2xzIGFyZSB0aG91Z2h0IHdpc2UgaWYgdGhleSBrZWVwIHNpbGVudCwgYW5kIGRpc2Nlcm5pbmcgaWYgdGhleSBob2xkIHRoZWlyIHRvbmd1ZXMuICA8YnI+PGNpdGU+Jm1kYXNoO1Byb3ZlcmJzIDE3OjI4PC9jaXRlPjwvYmxvY2txdW90ZT4iDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBbmdlciBpcyBCYWQgRnVlbCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZXJlIGlzIG5vIG1vcmUgc3R1cGVmeWluZyB0aGluZyB0aGFuIGFuZ2VyLCBub3RoaW5nIG1vcmUgYmVudCBvbiBpdHMgb3duIHN0cmVuZ3RoLiBJZiBzdWNjZXNzZnVsLCBub25lIG1vcmUgYXJyb2dhbnQsIGlmIGZvaWxlZCwgbm9uZSBtb3JlIGluc2FuZSZtZGFzaDtzaW5jZSBpdCdzIG5vdCBkcml2ZW4gYmFjayBieSB3ZWFyaW5lc3MgZXZlbiBpbiBkZWZlYXQsIHdoZW4gZm9ydHVuZSByZW1vdmVzIGl0cyBhZHZlcnNhcnkgaXQgdHVybnMgaXRzIHRlZXRoIG9uIGl0c2VsZi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiBBbmdlciwgMy4xLjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+QXMgdGhlIFN0b2ljcyBoYXZlIHNhaWQgbWFueSB0aW1lcywgZ2V0dGluZyBhbmdyeSBhbG1vc3QgbmV2ZXIgc29sdmVzIGFueXRoaW5nLiAgVXN1YWxseSwgaXQgbWFrZXMgdGhpbmdzIHdvcnNlLiBXZSBnZXQgdXBzZXQsIHRoZW4gdGhlIG90aGVyIHBlcnNvbiBnZXRzIHVwc2V0Jm1kYXNoO25vdyBldmVyeW9uZSBpcyB1cHNldCwgYW5kIHRoZSBwcm9ibGVtIGlzIG5vIGNsb3NlciB0byBnZXR0aW5nIHNvbHZlZC4gPC9wPjxwPk1hbnkgc3VjY2Vzc2Z1bCBwZW9wbGUgd2lsbCB0cnkgdG8gdGVsbCB5b3UgdGhhdCBhbmdlciBpcyBhIHBvd2VyZnVsIGZ1ZWwgaW4gdGhlaXIgbGl2ZXMuICBUaGUgZGVzaXJlIHRvIDxxPnByb3ZlIHRoZW0gYWxsIHdyb25nPC9xPiBvciA8cT5zaG92ZSBpdCBpbiB0aGVpciBmYWNlczwvcT4gaGFzIG1hZGUgbWFueSBhIG1pbGxpb25haXJlLiAgVGhlIGFuZ2VyIGF0IGJlaW5nIGNhbGxlZCBmYXQgb3Igc3R1cGlkIGhhZCBjcmVhdGVkIGZpbmUgcGh5c2ljYWwgc3BlY2ltZW5zIGFuZCBicmlsbGlhbnQgbWluZHMuIFRoZSBhbmdlciBhdCBiZWluZyByZWplY3RlZCBoYXMgbW90aXZhdGVkIG1hbnkgdG8gY2FydmUgdGhlaXIgb3duIHBhdGguPC9wPjxwPkJ1dCB0aGF0J3Mgc2hvcnRzaWdodGVkLiAgU3VjaCBzdG9yaWVzIGlnbm9yZSB0aGUgcG9sbHV0aW9uIHByb2R1Y2VkIGFzIGEgc2lkZSBlZmZlY3QgYW5kIHRoZSB3ZWFyIGFuZCB0ZWFyIGl0IHB1dCBvbiB0aGUgZW5naW5lLiAgSXQgaWdub3JlcyB3aGF0IGhhcHBlbnMgd2hlbiB0aGF0IGluaXRpYWwgYW5nZXIgcnVucyBvdXQmbWRhc2g7YW5kIGhvdyBub3cgbW9yZSBhbmQgbW9yZSBtdXN0IGJlIGdlbmVyYXRlZCB0byBrZWVwIHRoZSBtYWNoaW5lIGdvaW5nICh1bnRpbCwgZXZlbnR1YWxseSwgdGhlIG9ubHkgc291cmNlIGxlZnQgaXMgYW5nZXIgYXQgb25lc2VsZikuIDxxPkhhdGUgaXMgdG9vIGdyZWF0IGEgYnVyZGVuIHRvIGJlYXIsPC9xPiBNYXJ0aW4gTHV0aGVyIEtpbmcgSnIuIHdhcm5lZCBoaXMgZmVsbG93IGNpdmlsIHJpZ2h0cyBsZWFkZXJzIGluIDE5NjcuPC9wPjxwPlRoZSBzYW1lIGlzIHRydWUgZm9yIGFuZ2VyJm1kYXNoO2luIGZhY3QsIGl0J3MgdHJ1ZSBmb3IgbW9zdCBleHRyZW1lIGVtb3Rpb25zLiBUaGV5IGFyZSB0b3hpYyBmdWVsLiBUaGVyZSdzIHBsZW50eSBvZiBpdCBvdXQgaW4gdGhlIHdvcmxkLCBubyBxdWVzdGlvbiwgYnV0IG5ldmVyIHdvcnRoIHRoZSBjb3N0cyB0aGF0IGNvbWUgYWxvbmcgd2l0aCBpdC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIldoYXQgdGhlIEJ1ZGRoYSBzYWlkIGFib3V0IGFuZ2VyPHVsPjxsaT5BbmdlciBpcyBhIGZvcm0gb2Ygc3VmZmVyaW5nLjwvbGk+PGxpPkFuZ2VyIGlzIG9uZSBvZiB0aGUgdGhyZWUgPHE+dW53aG9sZXNvbWUgcm9vdHM8L3E+IG9mIHRoZSBtaW5kLjwvbGk+PGxpPkFuZ2VyIGlzIHNlbGYtc2Fib3RhZ2luZy48L2xpPjxsaT5Ib2xkaW5nIG9udG8gYW5nZXIgaXMgbGlrZSBob2xkaW5nIGEgaG90IGNvYWwgaW4geW91ciBoYW5kLjwvbGk+PGxpPllvdSB3aWxsIGJlIHB1bmlzaGVkIGJ5IHlvdXIgYW5nZXIsIG5vdCBmb3IgaXQuPC9saT48bGk+QW5nZXIgY2FuIG5ldmVyIHJlbW92ZSBhbmdlci48L2xpPjwvdWw+PC91bD48YnI+PGJsb2NrcXVvdGU+SG9sZGluZyBvbnRvIGFuZ2VyIGlzIGxpa2UgZHJpbmtpbmcgcG9pc29uIGFuZCBleHBlY3RpbmcgdGhlIG90aGVyIHBlcnNvbiB0byBkaWUuICA8YnI+PGNpdGU+Jm1kYXNoO0J1ZGRoYSAoYXR0cmlidXRlZCk8L2NpdGU+PC9ibG9ja3F1b3RlPjxibG9ja3F1b3RlPk9uZSBzaG91bGQgZ2l2ZSB1cCBhbmdlciwgcmVub3VuY2UgcHJpZGUsIGFuZCBvdmVyY29tZSBhbGwgZmV0dGVycy4gTm8gc3VmZmVyaW5nIGJlZmFsbHMgb25lIHdobyBjbGluZ3MgdG8gbm90aGluZy4gIDxicj48Y2l0ZT4mbWRhc2g7RGhhbW1hcGFkYSwgMjIxLTIyMjwvY2l0ZT48L2Jsb2NrcXVvdGU+PGJsb2NrcXVvdGU+QSB3aXNlIG1hbiB3YXRjaGVzIGhpcyBhbmdlciBhcyBhIHRyYXZlbGVyIHdhdGNoZXMgcGFzc2luZyBjbG91ZHMmbWRhc2g7YWNrbm93bGVkZ2luZywgYnV0IG5vdCBncmFzcGluZy4gIDxicj48Y2l0ZT4mbWRhc2g7VW5rbm93bjwvY2l0ZT48L2Jsb2NrcXVvdGU+PGJsb2NrcXVvdGU+V2hhdGV2ZXIgaXMgYmVndW4gaW4gYW5nZXIgZW5kcyBpbiBzaGFtZS4gIDxicj48Y2l0ZT4mbWRhc2g7QmFuamFtaW4gRnJhbmtsaW48L2NpdGU+PC9ibG9ja3F1b3RlPiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkhlcm8gb3IgTmVybz8iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJPdXIgc291bCBpcyBzb21ldGltZXMgYSBraW5nLCBhbmQgc29tZXRpbWVzIGEgdHlyYW50LiAgQSBraW5nLCBieSBhdHRlbmRpbmcgdG8gd2hhdCBpcyBob25vcmFibGUsIHByb3RlY3RzIHRoZSBnb29kIGhlYWx0aCBvZiB0aGUgYm9keSBpbiBpdHMgY2FyZSwgYW5kIGdpdmVzIGl0IG5vIGJhc2Ugb3Igc29yZGlkIGNvbW1hbmQuICBCdXQgYW4gdW5jb250cm9sbGVkLCBkZXNpcmUtZnVlbGVkLCBvdmVyLWluZHVsZ2VkIHNvdWwgaXMgdHVybmVkIGZyb20gYSBraW5nIGludG8gdGhhdCBtb3N0IGZlYXJlZCBhbmQgZGV0ZXN0ZWQgdGhpbmcmbWRhc2g7YSB0eXJhbnQuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTW9yYWwgTGV0dGVycywgMTE0LjI0Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZXJlIGlzIHRoYXQgc2F5aW5nIHRoYXQgYWJzb2x1dGUgcG93ZXIgY29ycnVwdHMgYWJzb2x1dGVseS4gQXQgZmlyc3QgZ2xhbmNlLCB0aGF0J3MgdHJ1ZS4gIFNlbmVjYSdzIHB1cGlsLCBOZXJvLCBhbmQgaGlzIGxpdGFueSBvZiBjcmltZXMgYW5kIG11cmRlcnMgaXMgYSBwZXJmZWN0IGV4YW1wbGUuIEFub3RoZXIgZW1wZXJvciwgRG9taXRpYW4sIGFyYml0cmFyaWx5IGJhbmlzaGVkIGFsbCBwaGlsb3NvcGhlcnMgZnJvbSBSb21lIChFcGljdGV0dXMgd2FzIGZvcmNlZCB0byBmbGVlIGFzIGEgcmVzdWx0KS4gTWFueSBvZiBSb21lJ3MgZW1wZXJvcnMgd2VyZSB0eXJhbnRzLiBZZXQsIG5vdCBtYW55IHllYXJzIGxhdGVyLCBFcGljdGV0dXMgd291bGQgYmVjb21lIGEgY2xvc2UgZnJpZW5kIG9mIGFub3RoZXIgZW1wZXJvciwgSGFkcmlhbiwgd2hvIHdvdWxkIGhlbHAgTWFyY3VzIEF1cmVsaXVzIHRvIHRoZSB0aHJvbmUsIG9uZSBvZiB0aGUgdHJ1ZXN0IGV4YW1wbGVzIG9mIGEgd2lzZSBwaGlsb3NvcGhlciBraW5nLjwvcD48cD5TbywgaXQncyBub3Qgc28gY2xlYXIgdGhhdCBwb3dlciA8ZW0+YWx3YXlzPC9lbT4gY29ycnVwdHMuIEluIGZhY3QsIGl0IGxvb2tzIGxpa2UgaXQgY29tZXMgZG93biwgaW4gbWFueSB3YXlzIHRvIHRoZSBpbm5lciBzdHJlbmd0aCBhbmQgc2VsZi1hd2FyZW5lc3Mgb2YgaW5kaXZpZHVhbHMmbWRhc2g7d2hhdCB0aGV5IHZhbHVlLCB3aGF0IGRlc2lyZXMgdGhleSBrZWVwIGluIGNoZWNrLCB3aGV0aGVyIHRoZWlyIHVuZGVyc3RhbmRpbmcgb2YgZmFpcm5lc3MgYW5kIGp1c3RpY2UgY2FuIGNvdW50ZXJhY3QgdGhlIHRlbXB0YXRpb25zIG9mIHVubGltaXRlZCB3ZWFsdGggYW5kIGRlZmVyZW5jZS48L3A+PHA+VGhlIHNhbWUgaXMgdHJ1ZSBmb3IgeW91LiBCb3RoIHBlcnNvbmFsbHkgYW5kIHByb2Zlc3Npb25hbGx5LiBUeXJhbnQgb3Iga2luZz8gSGVybyBvciBOZXJvPyBXaGljaCB3aWxsIHlvdSBiZT88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlByb3RlY3QgWW91ciBQZWFjZSBvZiBNaW5kIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiS2VlcCBjb25zdGFudCBndWFyZCBvdmVyIHlvdXIgcGVyY2VwdGlvbnMsIGZvciBpdCBpcyBubyBzbWFsbCB0aGluZyB5b3UgYXJlIHByb3RlY3RpbmcsIGJ1dCB5b3VyIHJlc3BlY3QsIHRydXN0d29ydGhpbmVzcyBhbmQgc3RlYWRpbmVzcywgcGVhY2Ugb2YgbWluZCwgZnJlZWRvbSBmcm9tIHBhaW4gYW5kIGZlYXIsIGluIGEgd29yZCB5b3VyIGZyZWVkb20uIEZvciB3aGF0IHdvdWxkIHlvdSBzZWxsIHRoZXNlIHRoaW5ncz8iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCA0LjMuNmItOCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgZHlzZnVuY3Rpb25hbCBqb2IgdGhhdCBzdHJlc3NlcyB5b3Ugb3V0LCBhIGNvbnRlbnRpb3VzIHJlbGF0aW9uc2hpcCwgbGlmZSBpbiB0aGUgc3BvdGxpZ2h0LiBTdG9pY2lzbSwgYmVjYXVzZSBpcyBoZWxwcyB1cyBtYW5hZ2UgYW5kIHRoaW5rIHRocm91Z2ggb3VyIGVtb3Rpb25hbCByZWFjdGlvbnMsIGNhbiBtYWtlIHRoZXNlIGtpbmRzIG9mIHNpdHVhdGlvbnMgZWFzaWVyIHRvIGJlYXIuICBJdCBjYW4gaGVscCB5b3UgbWFuYWdlIGFuZCBtaXRpZ2F0ZSB0aGUgdHJpZ2dlcnMgdGhhdCBzZWVtIHRvIGJlIHNvIGNvbnN0YW50bHkgdHJpcHBlZC4gPC9wPjxwPkJ1dCBoZXJlJ3MgYSBxdWVzdGlvbjogV2h5IGFyZSB5b3Ugc3ViamVjdGluZyB5b3Vyc2VsZiB0byB0aGlzPyAgSXMgdGhpcyByZWFsbHkgdGhlIGVudmlyb25tZW50IHlvdSB3ZXJlIG1hZGUgZm9yPyAgVG8gYmUgcHJvdm9rZWQgYnkgbmFzdHkgZW1haWxzIGFuZCBhbiBlbmRsZXNzIHBhcmFkZSBvZiB3b3JrcGxhY2UgcHJvYmxlbXM/ICBPdXIgYWRyZW5hbCBnbGFuZHMgY2FuIGhhbmRsZSBvbmx5IHNvIG11Y2ggYmVmb3JlIHRoZXkgYmVjb21lIGV4aGF1c3RlZC4gIFNob3VsZG4ndCB5b3UgcHJlc2VydmUgdGhlbSBmb3IgbGlmZS1hbmQtZGVhdGggc2l0dWF0aW9ucz8gPC9wPjxwPlNvIHllcywgdXNlIFN0b2ljaXNtIHRvIG1hbmFnZSB0aGVzZSBkaWZmaWN1bHRpZXMuICBCdXQgZG9uJ3QgZm9yZ2UgdG8gYXNrOiA8ZW0+SXMgdGhpcyByZWFsbHkgdGhlIGxpZmUgSSB3YW50PzwvZW0+IEV2ZXJ5IHRpbWUgeW91IGdldCB1cHNldCwgYSBsaXR0bGUgYml0IG9mIGxpZmUgbGVhdmVzIHRoZSBib2R5LiBBcmUgdGhlc2UgcmVhbGx5IHRoZSB0aGluZ3Mgb24gd2hpY2ggeW91IHdhbnQgdG8gc3BlbmQgdGhhdCBwcmljZWxlc3MgcmVzb3VyY2U/IERvbid0IGJlIGFmcmFpZCB0byBtYWtlIGEgY2hhbmdlJm1kYXNoO2EgYmlnIG9uZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlBsZWFzdXJlIENhbiBCZWNvbWUgUHVuaXNobWVudCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldoZW5ldmVyIHlvdSBnZXQgYW4gaW1wcmVzc2lvbiBvZiBzb21lIHBsZWFzdXJlLCBhcyB3aXRoIGFueSBpbXByZXNzaW9uLCBndWFyZCB5b3Vyc2VsZiBmcm9tIGJlaW5nIGNhcnJpZWQgYXdheSBieSBpdCwgbGV0IGl0IGF3YWl0IHlvdXIgYWN0aW9uLCBnaXZlIHlvdXJzZWxmIGEgcGF1c2UuICBBZnRlciB0aGF0LCBicmluZyB0byBtaW5kIGJvdGggdGltZXMsIGZpcnN0IHdoZW4geW91IGhhdmUgZW5qb3llZCB0aGUgcGxlYXN1cmUgYW5kIGxhdGVyIHdoZW4geW91IHdpbGwgcmVncmV0IGl0IGFuZCBoYXRlIHlvdXJzZWxmLiAgVGhlbiBjb21wYXJlIHRvIHRob3NlIHRoZSBqb3kgYW5kIHNhdGlzZmFjdGlvbiB5b3UnZCBmZWVsIGZvciBhYnN0YWluaW5nIGFsdG9nZXRoZXIuICBIb3dldmVyLCBpZiBhIHNlZW1pbmdseSBhcHByb3ByaWF0ZSB0aW1lIGFyaXNlcyB0byBhY3Qgb24gaXQsIGRvbid0IGJlIG92ZXJjb21lIGJ5IGl0cyBjb21mb3J0LCBwbGVhc2FudG5lc3MsIGFuZCBhbGx1cmUmbWRhc2g7YnV0IGFnYWluc3QgYWxsIG9mIHRoaXMsIGhvdyBtdWNoIGJldHRlciB0aGUgY29uc2Npb3VzbmVzcyBvZiBjb25xdWVyaW5nIGl0LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkVuY2hpcmlkaW9uLCAzNCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5TZWxmLUNvbnRyb2wgaXMgYSBkaWZmaWN1bHQgdGhpbmcsIG5vIHF1ZXN0aW9uLiAgV2hpY2ggaXMgd2h5IGEgcG9wdWxhciB0cmljayBmcm9tIGRpZXRpbmcgbWlnaHQgYmUgaGVscGZ1bC4gIFNvbWUgZGlldHMgYWxsb3cgYSA8cT5jaGVhdCBkYXk8L3E+Jm1kYXNoO29uZSBkYXkgcGVyIHdlZWsgaW4gd2hpY2ggZGlldGVycyBjYW4gZWF0IGFueXRoaW5nIGFuZCBldmVyeXRoaW5nIHRoZXkgd2FudC4gIEluZGVlZCwgdGhleSdyZSBlbmNvdXJhZ2VkIHRvIHdyaXRlIGEgbGlzdCBkdXJpbmcgdGhlIHdlZWsgb2YgYWxsIHRoZSBmb29kcyB0aGV5IGNyYXZlZCBzbyB0aGV5IGNhbiBlbmpveSB0aGVtIGFsbCBhdCBvbmNlIGFzIGEgdHJlYXQgKHRoZSB0aGlua2luZyBiZWluZyB0aGF0IGlmIHlvdSdyZSBlYXRpbmcgaGVhbHRoeSBzaXggb3V0IG9mIHNldmVuIGRheXMsIHlvdSdyZSBzdGlsbCBhaGVhZCkuPC9wPjxwPkF0IGZpcnN0LCB0aGlzIHNvdW5kcyBsaWtlIGEgZHJlYW0sIGJ1dCBhbnlvbmUgd2hvIGhhcyBhY3R1YWxseSBkb25lIHRoaXMga25vd3MgdGhlIHRydXRoOiBlYWNoIGNoZWF0IGRheSB5b3UgZWF0IHlvdXJzZWxmIHNpY2sgYW5kIGhhdGUgeW91cnNlbGYgYWZ0ZXJ3YXJkLiAgU29vbiBlbm91Z2gsIHlvdSdyZSB3aWxsaW5nbHkgYWJzdGFpbmluZyBmcm9tIGNoZWF0aW5nIGF0IGFsbC4gIEJlY2F1c2UgeW91IGRvbid0IG5lZWQgaXQsIGFuZCB5b3UgZGVmaW5pdGVseSBkb24ndCB3YW50IGl0LiAgSXQncyBub3QgdW5saWtlIGEgcGFyZW50IGNhdGNoaW5nIGhlciBjaGlsZCB3aXRoIGNpZ2FyZXR0ZXMgYW5kIGZvcmNpbmcgaGltIHRvIHNtb2tlIHRoZSB3aG9sZSBwYWNrLjwvcD48cD5JdCdzIGltcG9ydGFudCB0byBjb25uZWN0IHRoZSBzby1jYWxsZWQgdGVtcHRhdGlvbiB3aXRoIGl0cyBhY3R1YWwgZWZmZWN0cy4gIE9uY2UgeW91IHVuZGVyc3RhbmQgdGhhdCBpbmR1bGdpbmcgbWlnaHQgYWN0dWFsbHkgYmUgd29yc2UgdGhhdCByZXNpc3RpbmcsIHRoZSB1cmdlIGJlZ2lucyB0byBsb3NlIGl0cyBhcHBlYWwuICBJbiB0aGlzIHdheSwgc2VsZi1jb250cm9sIGJlY29tZXMgdGhlIHJlYWwgcGxlYXN1cmUsIGFuZCB0aGUgdGVtcHRhdGlvbiBiZWNvbWVzIHRoZSByZWdyZXQuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMTQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGluayBCZWZvcmUgWW91IEFjdCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkZvciB0byBiZSB3aXNlIGlzIG9ubHkgb25lIHRoaW5nJm1kYXNoO3RvIGZpeCBvdXIgYXR0ZW50aW9uIG9uIG91ciBpbnRlbGxpZ2VuY2UsIHdoaWNoIGd1aWRlcyBhbGwgdGhpbmdzIGV2ZXJ5d2hlcmUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiSGVyYWNsaXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkxpdmVzIG9mIHRoZSBFbWluZW50IFBoaWxvc29waGVycywgOS4xIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjxlbT5XaHkgZGlkIEkgZG8gdGhhdD88L2VtPiB5b3UndmUgcHJvYmFibHkgYXNrZWQgeW91cnNlbGYuICBXZSBhbGwgaGF2ZS4gIDxlbT5Ib3cgY291bGQgSSBoYXZlIGJlZW4gc28gc3R1cGlkPyAgV2hhdCB3YXMgSSB0aGlua2luZz88L2VtPjwvcD48cD5Zb3Ugd2VyZW4ndCZtZGFzaDt0aGF0J3MgdGhlIHByb2JsZW0uICBXaXRoaW4gdGhhdCBoZWFkIG9mIHlvdXJzIGlzIGFsbCB0aGUgcmVhc29uIGFuZCBpbnRlbGxpZ2VuY2UgeW91IG5lZWQuICBJdCdzIG1ha2luZyBzdXJlIHRoYXQgaXQncyBkZWZlcnJlZCB0byBhbmQgdXRpbGl6ZWQgdGhhdCdzIHRoZSB0b3VnaCBwYXJ0LiAgSXQncyBtYWtpbmcgc3VyZSB5b3VyIG1pbmQgaXMgaW4gY2hhcmdlLCBub3QgeW91ciBlbW90aW9ucywgbm90IHlvdXIgaW1tZWRpYXRlIHBoeXNpY2FsIHNlbnNhdGlvbnMsIG5vdCB5b3VyIHN1cmdpbmcgaG9ybW9uZXMuPC9wPjxwPkZpeCB5b3VyIGF0dGVudGlvbiBvbiB5b3VyIGludGVsbGlnZW5jZS4gIExldCBpdCBkbyBpdHMgdGhpbmcuPC9wIiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIk9ubHkgQmFkIERyZWFtcyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkNsZWFyIHlvdXIgbWluZCBhbmQgZ2V0IGEgaG9sZCBvbiB5b3Vyc2VsZiBhbmQsIGFzIHdoZW4gYXdha2VuZWQgZnJvbSBzbGVlcCBhbmQgcmVhbGl6aW5nIGl0IHdhcyBvbmx5IGEgYmFkIGRyZWFtIHVwc2V0dGluZyB5b3UsIHdha2UgdXAgYW5kIHNlZSB0aGF0IHdoYXQncyB0aGVyZSBpcyBqdXN0IGxpa2UgdGhvc2UgZHJlYW1zLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zIDYuMzEiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIGF1dGhvciBSYXltb25kIENoYW5kbGVyIHdhcyBkZXNjcmliaW5nIG1vc3Qgb2YgdXMgd2hlbiBoZSB3cm90ZSBpbiBhIGxldHRlciB0byBoaXMgcHVibGlzaGVyLCA8cT5JIG5ldmVyIGxvb2tlZCBiYWNrLCBhbHRob3VnaCBJIGhhZCBtYW55IHVuZWFzeSBwZXJpb2RzIGxvb2tpbmcgZm9yd2FyZC48L3E+ICBUaG9tYXMgSmVmZmVyc29uIG9uY2Ugam9rZWQgaW4gYSBsZXR0ZXIgdG8gSm9obiBBZGFtcywgPHE+SG93IG11Y2ggcGFpbiBoYXZlIGNvc3QgdXMgdGhlIGV2aWxzIHdoaWNoIGhhdmUgbmV2ZXIgaGFwcGVuZWQhPC9xPiAgQW5kIFNlbmVjYSB3b3VsZCBwdXQgaXQgYmVzdDogPHE+VGhlcmUgaXMgbm90aGluZyBzbyBjZXJ0YWluIGluIG91ciBmZWFyIHRoYXQncyBub3QgeWV0IG1vcmUgY2VydGFpbiBpbiB0aGUgZmFjdCB0aGF0IG1vc3Qgb2Ygd2hhdCB3ZSBkcmVhZCBjb21lcyB0byBub3RoaW5nLjwvcT48L3A+PHA+TWFueSBvZiB0aGUgdGhpbmdzIHRoYXQgdXBzZXQgdXMsIHRoZSBTdG9pY3MgYmVsaWV2ZWQsIGFyZSBhIHByb2R1Y3Qgb2YgdGhlIGltYWdpbmF0aW9uLCBub3QgcmVhbGl0eS4gIExpa2UgZHJlYW1zLCB0aGV5IGFyZSB2aXZpZCBhbmQgcmVhbGlzdGljIGF0IHRoZSB0aW1lIGJ1dCBwcmVwb3N0ZXJvdXMgb25jZSB3ZSBjb21lIG91dCBvZiBpdC4gIEluIGEgZHJlYW0sIHdlIG5ldmVyIHN0b3AgdG8gdGhpbmsgYW5kIHNheTogPHE+RG9lcyB0aGlzIG1ha2UgYW55IHNlbnNlPzwvcT4gIE5vLCB3ZSBnbyBhbG9uZyB3aXRoIGl0LiAgVGhlIHNhbWUgZ29lcyB3aXRoIG91ciBmbGlnaHRzIG9mIGFuZ2VyIG9yIGZlYXIgb3Igb3RoZXIgZXh0cmVtZSBlbW90aW9ucy48L3A+PHA+R2V0dGluZyB1cHNldCBpcyBsaWtlIGNvbnRpbnVpbmcgdGhlIGRyZWFtIHdoaWxlIHlvdSdyZSBhd2FrZS4gIFRoZSB0aGluZyB0aGF0IHByb3Zva2VkIHlvdSB3YXNuJ3QgcmVhbCZtZGFzaDtidXQgeW91ciByZWFjdGlvbiB3YXMuICBBbmQgc28gZnJvbSB0aGUgZmFrZSBjb21lcyByZWFsIGNvbnNlcXVlbmNlcy4gIFdoaWNoIGlzIHdoeSB5b3UgbmVlZCB0byB3YWtlIHVwIHJpZ2h0IG5vdyBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmlnaHRtYXJlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDE2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgTWFrZSBUaGluZ3MgSGFyZGVyIFRoYW4gVGhleSBOZWVkIFRvIEJlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSWYgc29tZW9uZSBhc2tzIHlvdSBob3cgdG8gd3JpdGUgeW91ciBuYW1lLCB3b3VsZCB5b3UgYmFyayBvdXQgZWFjaCBsZXR0ZXI/ICBBbmQgaWYgdGhleSBnZXQgYW5ncnksIHdvdWxkIHlvdSB0aGVuIHJldHVybiB0aGUgYW5nZXI/ICAgV291bGRuJ3QgeW91IHJhdGhlciBnZW50bHkgc3BlbGwgb3V0IGVhY2ggbGV0dGVyIGZvciB0aGVtPyAgU28gdGhlbiwgcmVtZW1iZXIgaW4gbGlmZSB0aGF0IHlvdXIgZHV0aWVzIGFyZSB0aGUgc3VtIG9mIGluZGl2aWR1YWwgYWN0cy4gIFBheSBhdHRlbnRpb24gdG8gZWFjaCBvZiB0aGVzZSBhcyB5b3UgZG8geW91ciBkdXR5IC4gLiAuIGp1c3QgbWV0aG9kaWNhbGx5IGNvbXBsZXRlIHlvdXIgdGFzay4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucyA2LjI2Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkhlcmUncyBhIGNvbW1vbiBzY2VuYXJpby4gIFlvdSdyZSB3b3JraW5nIHdpdGggYSBmcnVzdHJhdGluZyBjb3dvcmtlciBvciBhIGRpZmZpY3VsdCBib3NzLiAgVGhleSBhc2sgeW91IHRvIGRvIHNvbWV0aGluZyBhbmQsIGJlY2F1c2UgeW91IGRpc2xpa2UgdGhlIG1lc3NlbmdlciwgeW91IGltbWVkaWF0ZWx5IG9iamVjdC4gIFRoZXJlJ3MgdGhpcyBwcm9ibGVtIG9yIHRoYXQgb25lLCBvciB0aGVpciByZXF1ZXN0IGlzIG9ibm94aW91cyBhbmQgcnVkZS4gIFNvIHlvdSB0ZWxsIHRoZW0sIDxxPk5vLCBJJ20gbm90IGdvaW5nIHRvIGRvIGl0LjwvcT4gIFRoZW4gdGhleSByZXRhbGlhdGUgYnkgbm90IGRvaW5nIHNvbWV0aGluZyB0aGF0IHlvdSBoYWQgcHJldmlvdXNseSBhc2tlZCBvZiB0aGVtLiAgQW5kIHNvIHRoZSBjb25mbGljdCBlc2NhbGF0ZXMuPC9wPjxwPk1lYW53aGlsZSwgaWYgeW91IGNvdWxkIHN0ZXAgYmFjayBhbmQgc2VlIGl0IG9iamVjdGl2ZWx5LCB5b3UnZCBwcm9iYWJseSBzZWUgdGhhdCBub3QgPGVtPmV2ZXJ5dGhpbmc8L2VtPiB0aGV5J3JlIGFza2luZyBmb3IgaXMgdW5yZWFzb25hYmxlLiAgSW4gZmFjdCwgc29tZSBvZiBpdCBpcyBwcmV0dHkgZWFzeSB0byBkbyBvciBpcywgYXQgbGVhc3QsIGFncmVlYWJsZS4gIEFuZCBpZiB5b3UgZGlkIGl0LCBpdCBtaWdodCBtYWtlIHRoZSByZXN0IG9mIHRoZSB0YXNrcyBhIGJpdCBtb3JlIHRvbGVyYWJsZSB0b28uICBQcmV0dHkgc29vbiwgeW91J3ZlIGRvbmUgdGhlIGVudGlyZSB0aGluZy48L3A+PHA+TGlmZSAoYW5kIG91ciBqb2IpIGlzIGRpZmZpY3VsdCBlbm91Z2guICBMZXQncyBub3QgbWFrZSBpdCBoYXJkZXIgYnkgZ2V0dGluZyBlbW90aW9uYWwgYWJvdXQgaW5zaWduaWZpY2FudCBtYXR0ZXJzIG9yIGRpZ2dpbmcgaW4gZm9yIGJhdHRsZXMgd2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSBhYm91dC4gIExldCdzIG5vdCBsZXQgZW1vdGlvbiBnZXQgaW4gdGhlIHdheSBvZiA8aSBsYW5nPSdlbCc+zrrOsc644b+GzrrOv869PC9pPiwgdGhlIHNpbXBsZSwgYXBwcm9wcmlhdGUgYWN0aW9ucyBvbiB0aGUgcGF0aCB0byB2aXJ0dWUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMTciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgRW5lbXkgb2YgSGFwcGluZXNzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSXQgaXMgcXVpdGUgaW1wb3NzaWJsZSB0byB1bml0ZSBoYXBwaW5lc3Mgd2l0aCBhIHllYXJuaW5nIGZvciB3aGF0IHdlIGRvbid0IGhhdmUuICBIYXBwaW5lc3MgaGFzIGFsbCB0aGF0IGl0IHdhbnRzLCBhbmQgcmVzZW1ibGluZyB0aGUgd2VsbC1mZWQsIHRoZXJlIHNob3VsZG4ndCBiZSBodW5nZXIgb3IgdGhpcnN0LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDMuMjQuMTciDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PGVtPkknbGwgYmUgaGFwcHkgd2hlbiBJIGdyYWR1YXRlPC9lbT4sIHdlIHRlbGwgb3Vyc2VsdmVzLiAgPGVtPkknbGwgYmUgaGFwcHkgd2hlbiBJIGdldCB0aGlzIHByb21vdGlvbiwgd2hlbiB0aGlzIGRpZXQgcGF5cyBvZmYsIHdoZW4gSSBoYXZlIHRoZSBtb25leSB0aGF0IG15IHBhcmVudHMgbmV2ZXIgaGFkPC9lbT4uICBDb25kaXRpb25hbCBoYXBwaW5lc3MgaXMgd2hhdCBwc3ljaG9sb2dpc3RzIGNhbGwgdGhpcyBraW5kIG9mIHRoaW5raW5nLiAgTGlrZSB0aGUgaG9yaXpvbiwgeW91IGNhbiB3YWxrIGZvciBtaWxlcyBhbmQgbWlsZXMgYW5kIG5ldmVyIHJlYWNoIGl0LiAgWW91IHdvbid0IGV2ZW4gZ2V0IGFueSBjbG9zZXIuPC9wPjxwPkVhZ2VybHkgYW50aWNpcGF0aW5nIHNvbWUgZnV0dXJlIGV2ZW50LCBwYXNzaW9uYXRlbHkgaW1hZ2luaW5nIHNvbWV0aGluZyB5b3UgZGVzaXJlLCBsb29raW5nIGZvcndhcmQgdG8gc29tZSBoYXBweSBzY2VuYXJpbyZtZGFzaDthcyBwbGVhc3VyYWJsZSBhcyB0aGVzZSBhY3Rpdml0aWVzIG1pZ2h0IHNlZW0sIHRoZXkgcnVpbiB5b3VyIGNoYW5jZSBhdCBoYXBwaW5lc3MgaGVyZSBhbmQgbm93LiAgTG9jYXRlIHRoYXQgeWVhcm5pbmcgZm9yIDxlbT5tb3JlLCBiZXR0ZXIsIHNvbWVkYXk8L2VtPiBhbmQgc2VlIGl0IGZvciB3aGF0IGl0IGlzOiB0aGUgZW5lbXkgb2YgeW91ciBjb250ZW50bWVudC4gIENob29zZSBpdCBvciB5b3VyIGhhcHBpbmVzcy4gIEFzIEVwaWN0ZXR1cyBzYXlzLCB0aGUgdHdvIGFyZSBub3QgY29tcGF0aWJsZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlByZXBhcmUgZm9yIHRoZSBTdG9ybSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoaXMgaXMgdGhlIHRydWUgYXRobGV0ZSZtZGFzaDt0aGUgcGVyc29uIGluIHJpZ29yb3VzIHRyYWluaW5nIGFnYWluc3QgZmFsc2UgaW1wcmVzc2lvbnMuICBSZW1haW4sIGZpcm0sIHlvdSB3aG8gc3VmZmVyLCBkb24ndCBiZSBraWRuYXBwZWQgYnkgeW91ciBpbXByZXNzaW9ucyEgIFRoZSBzdHJ1Z2dsZSBpcyBncmVhdCwgdGhlIHRhc2sgZGl2aW5lJm1kYXNoO3RvIGdhaW4gbWFzdGVyeSwgZnJlZWRvbSwgaGFwcGluZXNzLCBhbmQgdHJhbnF1aWxpdHkuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMi4xOC4yNy0yOCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5FcGljdGV0dXMgYWxzbyB1c2VkIHRoZSBtZXRhcGhvciBvZiBhIHN0b3JtLCBzYXlpbmcgdGhhdCBvdXIgaW1wcmVzc2lvbnMgYXJlIG5vdCB1bmxpa2UgZXh0cmVtZSB3ZWF0aGVyIHRoYXQgY2FuIGNhdGNoIHVzIGFuZCB3aGlybCB1cyBhYm91dC4gIFdoZW4gd2UgZ2V0IHdvcmtlZCB1cCBvciBwYXNzaW9uYXRlIGFib3V0IGFuIGlzc3VlLCB3ZSBjYW4gcmVsYXRlLjwvcD48cD5CdXQgbGV0J3MgdGhpbmsgYWJvdXQgdGhlIHJvbGUgb2YgdGhlIHdlYXRoZXIgaW4gbW9kZXJuIHRpbWVzLiAgVG9kYXksIHdlIGhhdmUgZm9yZWNhc3RlcnMgYW5kIGV4cGVydHMgd2hvIGNhbiBmYWlybHkgYWNjdXJhdGVseSBwcmVkaWN0IHN0b3JtIHBhdHRlcm5zLiAgVG9kYXksIHdlJ3JlIGRlZmVuc2VsZXNzIGFnYWluc3QgYSBodXJyaWNhbmUgb25seSBpZiB3ZSByZWZ1c2UgdG8gcHJlcGFyZSBvciBoZWVkIHRoZSB3YXJuaW5ncy48L3A+PHA+SWYgd2UgZG9uJ3QgaGF2ZSBhIHBsYW4sIGlmIHdlIG5ldmVyIGxlYXJuZWQgaG93IHRvIHB1dCB1cCB0aGUgc3Rvcm0gd2luZG93cywgd2Ugd2lsbCBiZSBhdCB0aGUgbWVyY3kgb2YgdGhlc2UgZXh0ZXJuYWwmbWRhc2g7YW5kIGludGVybmFsJm1kYXNoO2VsZW1lbnRzLiAgV2UncmUgc3RpbGwgcHVueSBodW1hbiBiZWluZ3MgY29tcGFyZWQgd2l0aCBvbmUtaHVuZHJlZC1taWwtcGVyLWhvdXIgd2luZHMsIGJ1dCB3ZSBoYXZlIHRoZSBhZHZhbnRhZ2Ugb2YgYmVpbmcgYWJsZSB0byBwcmVwYXJlJm1kYXNoO2JlaW5nIGFibGUgdG8gc3RydWdnbGUgYWdhaW5zdCB0aGVtIGluIGEgbmV3IHdheS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAxOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBCYW5xdWV0IG9mIExpZmUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJSZW1lbWJlciB0byBjb25kdWN0IHlvdXJzZWxmIGluIGxpZmUgYXMgaWYgYXQgYSBiYW5xdWV0LiAgQXMgc29tZXRoaW5nIGJlaW5nIHBhc3NlZCBhcm91bmQgY29tZXMgdG8geW91LCByZWFjaCBvdXQgeW91ciBoYW5kIGFuZCB0YWtlIGEgbW9kZXJhdGUgaGVscGluZy4gIERvZXMgaXQgcGFzcyB5b3UgYnk/ICBEb24ndCBzdG9wIGl0LiAgSXQgaGFzbid0IHlldCBjb21lPyAgRG9uJ3QgYnVybiBpbiBkZXNpcmUgZm9yIGl0LCBidXQgd2FpdCB1bnRpbCBpdCBhcnJpdmVzIGluIGZyb250IG9mIHlvdS4gIEFjdCB0aGlzIHdheSB3aXRoIGNoaWxkcmVuLCBhIHNwb3VzZSwgdG93YXJkIHBvc2l0aW9uLCB3aXRoIHdlYWx0aCZtZGFzaDtvbmUgZGF5IGl0IHdpbGwgbWFrZSB5b3Ugd29ydGh5IG9mIGEgYmFucXVldCB3aXRoIHRoZSBnb2RzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkVuY2hpcmlkaW9uLCAxLjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIG5leHQgdGltZSB5b3Ugc2VlIHNvbWV0aGluZyB5b3Ugd2FudCwgcmVtZW1iZXIgRXBpY3RldHVzJ3MgbWV0YXBob3Igb2YgbGlmZSdzIGJhbnF1ZXQuICBBcyB5b3UgZmluZCB5b3Vyc2VsZiBnZXR0aW5nIGV4Y2l0ZWQsIHJlYWR5IHRvIGRvIGFueXRoaW5nIGFuZCBldmVyeXRoaW5nIHRvIGdldCBpdCZtZGFzaDt0aGUgZXF1aXZhbGVudCBvZiByZWFjaGluZyBhY3Jvc3MgdGhlIHRhYmxlIGFuZCBncmFiYmluZyBhIGRpc2ggb3V0IG9mIHNvbWVvbmUncyBoYW5kcyZtZGFzaDtqdXN0IHJlbWluZCB5b3Vyc2VsZjogdGhhdCdzIGJhZCBtYW5uZXJzIGFuZCB1bm5lY2Vzc2FyeS4gIFRoZW4gd2FpdCBwYXRpZW50bHkgZm9yIHlvdXIgdHVybi48L3A+PHA+VGhpcyBtZXRhcGhvciBoYXMgb3RoZXIgaW50ZXJwcmV0YXRpb25zIHRvby4gIEZvciBpbnN0YW5jZSwgd2UgbWlnaHQgcmVmbGVjdCB0aGF0IHdlJ3JlIGx1Y2t5IHRvIGhhdmUgYmVlbiBpbnZpdGVkIHRvIHN1Y2ggYSB3b25kZXJmdWwgZmVhc3QgKGdyYXRpdHVkZSkuICBPciB0aGF0IHdlIHNob3VsZCB0YWtlIG91ciB0aW1lIGFuZCBzYXZvciB0aGUgdGFzdGUgb2Ygd2hhdCdzIG9uIG9mZmVyIChlbmpveWluZyB0aGUgcHJlc2VudCBtb21lbnQpIGJ1dCB0aGF0IHRvIHN0dWZmIG91cnNlbHZlcyBzaWNrIHdpdGggZm9vZCBhbmQgZHJpbmsgc2VydmVzIG5vIG9uZSwgbGVhc3Qgb2YgYWxsIG91ciBoZWFsdGggKGdsdXR0b255IGlzIGEgZGVhZGx5IHNpbiwgYWZ0ZXIgYWxsKS4gIFRoYXQgYXQgdGhlIGVuZCBvZiB0aGUgbWVhbCwgaXQncyBydWRlIG5vdCB0byBoZWxwIHRoZSBob3N0IGNsZWFuIHVwIGFuZCBkbyB0aGUgZGlzaGVzIChzZWxmbGVzc25lc3MpLiAgQW5kIGZpbmFsbHksIHRoZSBuZXh0IHRpbWUsIGl0J3Mgb3VyIHR1cm4gdG8gaG9zdCBhbmQgdHJlYXQgb3RoZXJzIGp1c3QgYXMgd2UgaGFkIGJlZW4gdHJlYXRlZCAoY2hhcml0eSkuPC9wPjxwPkVuam95IHRoZSBtZWFsITwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDIwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIEdyYW5kIFBhcmFkZSBvZiBEZXNpcmUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJSb2JiZXJzLCBwZXJ2ZXJ0cywga2lsbGVycywgYW5kIHR5cmFudHMmbWRhc2g7Z2F0aGVyIGZvciB5b3VyIGluc3BlY3Rpb24gdGhlaXIgc28tY2FsbGVkIHBsZWFzdXJlcyEiLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucyA2LjM0Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkl0J3MgbmV2ZXIgZ3JlYXQgdG8ganVkZ2Ugb3RoZXIgcGVvcGxlLCBidXQgaXQncyB3b3J0aCB0YWtpbmcgYSBzZWNvbmQgdG8gaW52ZXN0aWdhdGUgaG93IGEgbGlmZSBkZWRpY2F0ZWQgdG8gaW5kdWxnaW5nIGV2ZXJ5IHdoaW0gYWN0dWFsbHkgd29ya3Mgb3V0LiAgVGhlIHdyaXRlciBBbm4gTGFtb3R0IGpva2VzIGluIDxlbT5CaXJkIGJ5IEJpcmQ8L2VtPiwgPHE+RXZlciB3b25kZXIgdGhhdCBHb2QgdGhpbmtzIG9mIG1vbmV5PyBKdXN0IGxvb2sgYXQgdGhlIHBlb3BsZSBoZSBnaXZlcyBpdCB0by48L3E+ICBUaGUgc2FtZSBnb2VzIGZvciBwbGVhc3VyZS4gIExvb2sgYXQgdGhlIGRpY3RhdG9yIGFuZCBoaXMgaGFyZW0gZmlsbGVkIHdpdGggcGxvdHRpbmcsIG1hbmlwdWxhdGl2ZSBtaXN0cmVzc2VzLiAgTG9vayBob3cgcXVpY2tseSB0aGUgcGFydHlpbmcgb2YgYSB5b3VuZyBzdGFybGV0IHR1cm5zIHRvIGRydWcgYWRkaWN0aW9uIGFuZCBhIHN0YWxsZWQgY2FyZWVyLjwvcD48cD5Bc2sgeW91cnNlbGY6IDxlbT5JcyB0aGF0IHJlYWxseSB3b3J0aCBpdD8gSXMgaXQgcmVhbGx5IHRoYXQgcGxlYXN1cmFibGU/PC9lbT48L3A+PHA+Q29uc2lkZXIgdGhhdCB3aGVuIHlvdSBjcmF2ZSBzb21ldGhpbmcgb3IgY29udGVtcGxhdGUgaW5kdWxnaW5nIGluIGEgPHE+aGFybWxlc3M8L3E+IHZpY2UuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXaXNoIE5vdCwgV2FudCBOb3QiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJSZW1lbWJlciB0aGF0IGl0J3Mgbm90IG9ubHkgdGhlIGRlc2lyZSBmb3Igd2VhbHRoIGFuZCBwb3NpdGlvbiB0aGF0IGRlYmFzZXMgYW5kIHN1Ymp1Z2F0ZXMgdXMsIGJ1dCBhbHNvIHRoZSBkZXNpcmUgZm9yIHBlYWNlLCBsZWlzdXJlLCB0cmF2ZWwsIGFuZCBsZWFybmluZy4gIEl0IGRvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGV4dGVybmFsIHRoaW5nIGlzLCB0aGUgdmFsdWUgd2UgcGxhY2Ugb24gaXQgc3VianVnYXRlcyB1cyB0byBhbm90aGVyIC4gLiAuIHdoZXJlIG91ciBoZWFydCBpcyBzZXQsIHRoZXJlIG91ciBpbXBlZGltZW50IGxpZXMuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgNC40LjEtMjsgMTUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+U3VyZWx5LCBFcGljdGV0dXMgaXNuJ3Qgc2F5aW5nIHRoYXQgcGVhY2UsIGxlaXN1cmUsIHRyYXZlbCwgYW5kIGxlYXJuaW5nIGFyZSBiYWQsIGlzIGhlPyAgVGhhbmtmdWxseSwgbm8uICBCdXQgY2Vhc2VsZXNzLCBhcmRlbnQgPGVtPmRlc2lyZTwvZW0+Jm1kYXNoO2lmIG5vdCBiYWQgaW4gYW5kIG9mIGl0c2VsZiZtZGFzaDtpcyBmcmF1Z2h0IHdpdGggcG90ZW50aWFsIGNvbXBsaWNhdGlvbnMuICBXaGF0IHdlIGRlc2lyZSBtYWtlcyB1cyB2dWxuZXJhYmxlLiAgV2hldGhlciBpdCdzIGFuIG9wcG9ydHVuaXR5IHRvIHRyYXZlbCB0aGUgd29ybGQgb3IgdG8gYmUgdGhlIHByZXNpZGVudCBvciBmb3IgZml2ZSBtaW51dGVzIG9mIHBlYWNlIGFuZCBxdWlldCwgd2hlbiB3ZSBwaW5lIGZvciBzb21ldGhpbmcsIHdoZW4gd2UgaG9wZSBhZ2FpbnN0IGhvcGUsIHdlIHNldCBvdXJzZWx2ZXMgdXAgZm9yIGRpc2FwcG9pbnRtZW50LiAgQmVjYXVzZSBmYXRlIGNhbiBhbHdheXMgaW50ZXJ2ZW5lIGFuZCB0aGVuIHdlJ2xsIGxpa2VseSBsb3NlIG91ciBzZWxmLWNvbnRyb2wgaW4gcmVzcG9uc2UuPC9wPjxwPkFzIERpb2dlbmVzLCB0aGUgZmFtb3VzIEN5bmljLCBvbmNlIHNhaWQsIDxxPkl0IGlzIHRoZSBwcml2aWxlZ2Ugb2YgdGhlIGdvZHMgdG8gd2FudCBub3RoaW5nLCBhbmQgb2YgZ29kbGlrZSBtZW4gdG8gd2FudCBsaXR0bGUuPC9xPiAgVG8gd2FudCBub3RoaW5nIG1ha2Ugb25lIGludmluY2libGUmbWRhc2g7YmVjYXVzZSBub3RoaW5nIGxpZXMgb3V0c2lkZSB5b3VyIGNvbnRyb2wuICBUaGlzIGRvZXNuJ3QganVzdCBnbyBmb3Igbm90IHdhbnRpbmcgdGhlIGVhc3ktdG8tY3JpdGljaXplIHRoaW5ncyBsaWtlIHdlYWx0aCBvciBmYW1lJm1kYXNoO3RoZSBraW5kcyBvZiBmb2xseSB0aGF0IHdlIHNlZSBpbGx1c3RyYXRlZCBpbiBzb21lIG9mIG91ciBtb3N0IGNsYXNzaWMgcGxheXMgYW5kIGZhYmxlcy4gIFRoYXQgZ3JlZW4gbGlnaHQgdGhhdCBHYXRzYnkgc3Ryb3ZlIGZvciBjYW4gcmVwcmVzZW50IHNlZW1pbmdseSBnb29kIHRoaW5ncyB0b28sIGxpa2UgbG92ZSBvciBhIG5vYmxlIGNhdXNlLiAgQnV0IGl0IGNhbiB3cmVjayBzb21lb25lIGFsbCB0aGUgc2FtZS48L3A+PHA+V2hlbiBpdCBjb21lcyB0byB5b3VyIGdvYWxzIGFuZCB0aGUgdGhpbmdzIHlvdSBzdHJpdmUgZm9yLCBhc2sgeW91cnNlbGY6IDxlbT5BbSBJIGluIGNvbnRyb2wgb2YgdGhlbSBvciB0aGV5IGluIGNvbnRyb2wgb2YgbWU/PC9lbT48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAyMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIldoYXQncyBCZXR0ZXIgTGVmdCBVbnNhaWQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJDYXRvIHByYWN0aWNlZCB0aGUga2luZCBvZiBwdWJsaWMgc3BlZWNoIGNhcGFibGUgb2YgbW92aW5nIHRoZSBtYXNzZXMsIGJlbGlldmluZyBwcm9wZXIgcG9saXRpY2FsIHBoaWxvc29waHkgdGFrZXMgY2FyZSBsaWtlIGFueSBncmVhdCBjaXR5IHRvIG1haW50YWluIHRoZSB3YXJsaWtlIGVsZW1lbnQuICBCdXQgaGUgd2FzIG5ldmVyIHNlZW4gcHJhY3RpY2luZyBpbiBmcm9udCBvZiBvdGhlcnMsIGFuZCBubyBvbmUgZXZlciBoZWFyZCBoaW0gcmVoZWFyc2UgYSBzcGVlY2guICBXaGVuIGhlIHdhcyB0b2xkIHRoYXQgcGVvcGxlIGJsYW1lZCBoaW0gZm9yIGhpcyBzaWxlbmNlLCBoZSByZXBsaWVkLCA8cT5CZXR0ZXIgdGhleSBub3QgYmxhbWUgbXkgbGlmZS4gIEkgYmVnaW4gdG8gc3BlYWsgb25seSB3aGVuIEknbSBjZXJ0YWluIHdoYXQgSSdsbCBzYXkgaXNuJ3QgYmV0dGVyIGxlZnQgdW5zYWlkLjwvcT4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJQbHV0YXJjaCIsDQogICAgICAgICAgICAic291cmNlIjogIkNhdG8gdGhlIFlvdW5nZXIsIDQiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SXQncyBlYXN5IHRvIGFjdCZtZGFzaDt0byBqdXN0IGRpdmUgaW4uICBJdCdzIGhhcmRlciB0byBzdG9wLCB0byBwYXVzZSwgdG8gdGhpbms6IDxlbT5ObywgSSdtIG5vdCBzdXJlIEkgbmVlZCB0byBkbyB0aGF0IHlldC4gIEknbSBub3Qgc3VyZSBJIGFtIHJlYWR5LjwvZW0+ICBBcyBDYXRvIGVudGVyZWQgcG9saXRpY3MsIG1hbnkgZXhwZWN0ZWQgc3dpZnQgYW5kIGdyZWF0IHRoaW5ncyBmcm9tIGhpbSZtZGFzaDtzdGlycmluZyBzcGVlY2hlcywgcm9hcmluZyBjb25kZW1uYXRpb25zLCB3aXNlIGFuYWx5c2VzLiAgSGUgd2FzIGF3YXJlIG9mIHRoaXMgcHJlc3N1cmUmbWRhc2g7YSBwcmVzc3VyZSB0aGF0IGV4aXN0cyBvbiBhbGwgb2YgdXMgYXQgYWxsIHRpbWVzJm1kYXNoO2FuZCByZXNpc3RlZC4gIEl0J3MgZWFzeSB0byBwYW5kZXIgdG8gdGhlIG1vYiAoYW5kIHRvIG91ciBlZ28pLjwvcD48cD5JbnN0ZWFkLCBoZSB3YWl0ZWQgYW5kIDxlbT5wcmVwYXJlZDwvZW0+LiAgSGUgcGFyc2VkIGhpcyBvd24gdGhvdWdodHMsIG1hZGUgc3VyZSBoZSB3YXMgbm90IHJlYWN0aW5nIGVtb3Rpb25hbGx5LCBzZWxmaXNobHksIGlnbm9yYW50bHksIG9yIHByZW1hdHVyZWx5LiAgT25seSB0aGVuIHdvdWxkIGhlIHNwZWFrJm1kYXNoO3doZW4gaGUgd2FzIGNvbmZpZGVudCB0aGF0IGhpcyB3b3JkcyB3ZXJlIHdvcnRoeSBvZiBiZWluZyBoZWFyZC48L3A+PHA+VG8gZG8gdGhpcyByZXF1aXJlcyBhd2FyZW5lc3MuICBJdCByZXF1aXJlcyB1cyB0byBzdG9wIGFuZCBldmFsdWF0ZSBvdXJzZWx2ZXMgaG9uZXN0bHkuICBDYW4geW91IGRvIHRoYXQ/PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMjMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJDaXJjdW1zdGFuY2VzIEhhdmUgTm8gQ2FyZSBGb3IgT3VyIEZlZWxpbmdzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiWW91IHNob3VsZG4ndCBnaXZlIGNpcmN1bXN0YW5jZXMgdGhlIHBvd2VyIHRvIHJvdXNlIGFuZ2VyLCBmb3IgdGhleSBkb24ndCBjYXJlIGF0IGFsbC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucyA3LjM4Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkEgc2lnbmlmaWNhbnQgY2h1bmsgb2YgTWFyY3VzIEF1cmVsaXVzJ3MgPGVtPk1lZGl0YXRpb25zPC9lbT4gaXMgbWFkZSB1cCBvZiBzaG9ydCBxdW90ZXMgYW5kIHBhc3NhZ2VzIGZyb20gb3RoZXIgd3JpdGVycy4gIFRoaXMgaXMgYmVjYXVzZSBNYXJjdXMgd2Fzbid0IG5lY2Vzc2FyaWx5IHRyeWluZyB0byBwcm9kdWNlIGFuIG9yaWdpbmFsIHdvcmsmbWRhc2g7aW5zdGVhZCBoZSB3YXMgPGVtPnByYWN0aWNpbmc8L2VtPiwgcmVtaW5kaW5nIGhpbXNlbGYgaGVyZSBhbmQgdGhlcmUgb2YgaW1wb3J0YW50IGxlc3NvbnMsIGFuZCBzb21ldGltZXMgdGhlc2UgbGVzc29ucyB3ZXJlIHRoaW5ncyBoZSBoYWQgcmVhZC48L3A+PHA+VGhpcyBwYXJ0aWN1bGFyIHF1b3RlIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBjb21lcyBmcm9tIGEgcGxheSBieSBFdXJpcGlkZXMsIHdoaWNoLCBleGNlcHQgZm9yIGEgaGFuZGZ1bCBvZiBxdW90ZWQgZnJhZ21lbnRzIGxpa2UgdGhpcywgaXMgbG9zdCB0byB1cy4gIEZyb20gd2hhdCB3ZSBjYW4gZ2F0aGVyIGFib3V0IHRoZSBwbGF5LCBCZWxsZXJvcGhvbiwgdGhlIGhlcm8sIGNvbWVzIHRvIGRvdWJ0IHRoZSBleGlzdGVuY2Ugb2YgdGhlIGdvZHMuICBCdXQgaW4gdGhpcyBsaW5lLCBoZSBpcyBzYXlpbmc6IFdoeSBib3RoZXIgZ2V0dGluZyBtYWQgYXQgY2F1c2VzIGFuZCBmb3JjZXMgZmFyIGJpZ2dlciB0aGFuIHVzPyAgV2h5IGRvIHdlIHRha2UgdGhlc2UgdGhpbmdzIHBlcnNvbmFsbHk/ICBBZnRlciBhbGwsIGV4dGVybmFsIGV2ZW50cyBhbmQgbm90IHNlbnRpZW50IGJlaW5ncyZtZGFzaDt0aGV5IGNhbm5vdCByZXNwb25kIHRvIG91ciBzaG91dHMgYW5kIGNyaWVzJm1kYXNoO2FuZCBuZWl0aGVyIGNhbiB0aGUgbW9zdGx5IGluZGlmZmVyZW50IGdvZHMuPC9wPjxwPlRoYXQncyB3aGF0IE1hcmN1cyB3YXMgcmVtaW5kaW5nIGhpbXNlbGYgb2YgaGVyZTogY2lyY3Vtc3RhbmNlcyBhcmUgaW5jYXBhYmxlIG9mIGNvbnNpZGVyaW5nIG9yIGNhcnJ5aW5nIGZvciB5b3VyIGZlZWxpbmdzLCB5b3VyIGFueGlldHksIG9yIHlvdXIgZXhjaXRlbWVudC4gIFRoZXkgZG9uJ3QgY2FyZSBhYm91dCB5b3VyIHJlYWN0aW9uLiAgVGhleSBhcmUgbm90IHBlb3BsZS4gIFNvLCBzdG9wIGFjdGluZyBsaWtlIGdldHRpbmcgd29ya2VkIHVwIGlzIGhhdmluZyBhbiBpbXBhY3Qgb24gYSBnaXZlbiBzaXR1YXRpb24uICBTaXR1YXRpb25zIGRvbid0IGNhcmUgYXQgYWxsLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDI0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIFJlYWwgU291cmNlIG9mIEhhcm0iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJLZWVwIGluIG1pbmQgdGhhdCBpdCBpc24ndCB0aGUgb25lIHdobyBoYXMgaXQgaW4gZm9yIHlvdSBhbmQgdGFrZXMgYSBzd2lwZSB0aGF0IGhhcm1zIHlvdSwgYnV0IHJhdGhlciB0aGUgaGFybSBjb21lcyBmcm9tIHlvdXIgb3duIGJlbGllZiBhYm91dCB0aGUgYWJ1c2UuICBTbywgd2hlbiBzb21lb25lIGFyb3VzZXMgeW91ciBhbmdlciwga25vdyB0aGF0IGl0J3MgcmVhbGx5IHlvdXIgb3duIG9waW5pb24gZnVlbGluZyBpdC4gIEluc3RlYWQsIG1ha2UgaXQgeW91ciBmaXJzdCByZXNwb25zZSBub3QgdG8gYmUgY2FycmllZCBhd2F5IGJ5IHN1Y2ggaW1wcmVzc2lvbnMsIGZvciB3aXRoIHRpbWUgYW5kIGRpc3RhbmNlIHNlbGYtbWFzdGVyeSBpcyBtb3JlIGVhc2lseSBhY2hpZXZlZC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJFbmNoaXJpZGlvbiwgMjAiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIFN0b2ljcyByZW1pbmQgdXMgdGhhdCB0aGVyZSByZWFsbHkgaXMgbm8gc3VjaCB0aGluZyBhcyBhbiBvYmplY3RpdmVseSBnb29kIG9yIGJhZCBvY2N1cnJlbmNlLiAgV2hlbiBhIGJpbGxpb25haXJlIGxvc2VzICQxIG1pbGxpb24gaW4gbWFya2V0IGZsdWN0dWF0aW9uLCBpdCdzIG5vdCB0aGUgc2FtZSBhcyB3aGVuIHlvdSBvciBJIGxvc2UgYSBtaWxsaW9uIGRvbGxhcnMuICBDcml0aWNpc20gZnJvbSB5b3VyIHdvcnN0IGVuZW15IGlzIHJlY2VpdmVkIGRpZmZlcmVudGx5IHRoYW4gbmVnYXRpdmUgd29yZHMgZnJvbSBhIHNwb3VzZS4gIElmIHNvbWVvbmUgc2VuZHMgeW91IGFuIGFuZ3J5IGVtYWlsIGJ1dCB5b3UgbmV2ZXIgc2VlIGl0LCBkaWQgaXQgYWN0dWFsbHkgaGFwcGVuPyAgSW4gb3RoZXIgd29yZHMsIHRoZXNlIHNpdHVhdGlvbnMgcmVxdWlyZSBvdXIgcGFydGljaXBhdGlvbiwgY29udGV4dCwgYW5kIGNhdGVnb3JpemF0aW9uIGluIG9yZGVyIHRvIGJlIDxxPmJhZDwvcT4uPC9wPjxwPk91ciByZWFjdGlvbiBpcyB3aGF0IGFjdHVhbGx5IGRlY2lkZXMgd2hldGhlciBoYXJtIGhhcyBvY2N1cnJlZC4gIElmIHdlIGZlZWwgdGhhdCB3ZSd2ZSBiZWVuIHdyb25nZWQgYW5kIGdldCBhbmdyeSwgb2YgY291cnNlIHRoYXQncyBob3cgaXQgd2lsbCBzZWVtLiAgSWYgd2UgcmFpc2Ugb3VyIHZvaWNlIGJlY2F1c2Ugd2UgZmVlbCB3ZSdyZSBiZWluZyBjb25mcm9udGVkLCBuYXR1cmFsbHkgYSBjb25mcm9udGF0aW9uIHdpbGwgZW5zdWUuPC9wPjxwPkJ1dCBpZiB3ZSByZXRhaW4gY29udHJvbCBvZiBvdXJzZWx2ZXMsIHdlIGRlY2lkZSB3aGV0aGVyIHRvIGxhYmVsIHNvbWV0aGluZyBnb29kIG9yIGJhZC4gIEluIGZhY3QsIGlmIHRoYXQgc2FtZSBldmVudCBoYXBwZW5lZCB0byB1cyBhdCBkaWZmZXJlbnQgcG9pbnRzIGluIG91ciBsaWZldGltZSwgd2UgbWlnaHQgaGF2ZSB2ZXJ5IGRpZmZlcmVudCByZWFjdGlvbnMuICBTbyB3aHkgbm90IGNob29zZSBub3cgdG8gPGVtPm5vdDwvZW0+IGFwcGx5IHRoZXNlIGxhYmVscz8gIFdoeSBub3QgY2hvb3NlIDxlbT5ub3Q8L2VtPiB0byByZWFjdD88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAyNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBTbW9rZSBhbmQgRHVzdCBvZiBNeXRoIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiS2VlcCBhIGxpc3QgYmVmb3JlIHlvdXIgbWluZCBvZiB0aG9zZSB3aG8gYnVybmVkIHdpdGggYW5nZXIgYW5kIHJlc2VudG1lbnQgYWJvdXQgc29tZXRoaW5nLCBvZiBldmVuIHRoZSBtb3N0IHJlbm93bmVkIGZvciBzdWNjZXNzLCBtaXNmb3J0dW5lLCBldmlsIGRlZWRzLCBvciBhbnkgc3BlY2lhbCBkaXN0aW5jdGlvbi4gVGhlbiBhc2sgeW91cnNlbGYsIGhvdyBkaWQgdGhhdCB3b3JrIG91dD8gU21va2UgYW5kIGR1c3QsIHRoZSBzdHVmZiBvZiBzaW1wbGUgbXl0aCB0cnlpbmcgdG8gYmUgbGVnZW5kIC4gLiAuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMgMTIuMjciDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SW4gTWFyY3VzIEF1cmVsaXVzJ3Mgd3JpdGluZ3MsIGhlIGNvbnN0YW50bHkgcG9pbnRzIG91dCBob3cgdGhlIGVtcGVyb3JzIHdobyBjYW1lIGJlZm9yZSBoaW0gd2VyZSBiYXJlbHkgcmVtZW1iZXJlZCBqdXN0IGEgZmV3IHllYXJzIGxhdGVyLiBUbyBoaW0sIHRoaXMgd2FzIGEgcmVtaW5kZXIgdGhhdCBubyBtYXR0ZXIgaG93IG11Y2ggaGUgY29ucXVlcmVkLCBubyBtYXR0ZXIgaG93IG11Y2ggaGUgaW5mbGljdGVkIGhpcyB3aWxsIG9uIHRoZSB3b3JsZCwgaXQgd291bGQgYmUgbGlrZSBidWlsZGluZyBhIGNhc3RsZSBpbiB0aGUgc2FuZCZtZGFzaDtzb29uIHRvIGJlIGVyYXNlZCBieSB0aGUgd2luZHMgb2YgdGltZS48L3A+PHA+VGhlIHNhbWUgZ29lcyBmb3IgdGhvc2UgZHJpdmVuIHRvIHRoZSBoZWlnaHRzIG9mIGhhdGUgb3IgYW5nZXIgb3Igb2JzZXNzaW9uIG9yIHBlcmZlY3Rpb25pc20uIE1hcmN1cyBsaWtlZCB0byBwb2ludCBvdXQgdGhhdCBBbGV4YW5kZXIgdGhlIEdyZWF0Jm1kYXNoO29uZSBvZiB0aGUgbW9zdCBwYXNzaW9uYXRlIGFuZCBhbWJpdGlvdXMgbWVuIHdobyBldmVyIGxpdmVkJm1kYXNoO3dhcyBidXJpZWQgaW4gdGhlIHNhbWUgZ3JvdW5kIGFzIGhpcyBtdWxlIGRyaXZlci4gIEV2ZW50dWFsbHksIGFsbCBvZiB1cyB3aWxsIHBhc3MgYXdheSBhbmQgc2xvd2x5IGJlIGZvcmdvdHRlbi4gIFdlIHNob3VsZCBlbmpveSB0aGlzIGJyaWVmIHRpbWUgd2UgaGF2ZSBvbiBlYXJ0aCZtZGFzaDtub3QgYmUgZW5zbGF2ZWQgdG8gZW1vdGlvbnMgdGhhdCBtYWtlIHVzIG1pc2VyYWJsZSBhbmQgZGlzc2F0aXNmaWVkLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDI2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVG8gRWFjaCBIaXMgT3duIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQW5vdGhlciBoYXMgZG9uZSBtZSB3cm9uZz8gIExldCBoaW0gc2VlIHRvIGl0LiAgSGUgaGFzIGhpcyBvd24gdGVuZGVuY2llcywgYW5kIGhpcyBvd24gYWZmYWlycy4gIFdoYXQgSSBoYXZlIG5vdyBpcyB3aGF0IHRoZSBjb21tb24gbmF0dXJlIGhhcyB3aWxsZWQsIGFuZCB3aGF0IEkgZW5kZWF2b3IgdG8gYWNjb21wbGlzaCBub3cgaXMgd2hhdCBteSBuYXR1cmUgd2lsbHMuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMgNS4yNSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5BYnJhaGFtIExpbmNvbG4gb2NjYXNpb25hbGx5IGdvdCBmdW1pbmcgbWFkIHdpdGggYSBzdWJvcmRpbmF0ZSwgb25lIG9mIGhpcyBnZW5lcmFscywgZXZlbiBhIGZyaWVuZC4gIFJhdGhlciB0aGFuIHRha2luZyBpdCBvdXQgb24gdGhhdCBwZXJzb24gZGlyZWN0bHksIGhlJ2Qgd3JpdGUgYSBsb25nIGxldHRlciwgb3V0bGluaW5nIGhpcyBjYXNlIHdoeSB0aGV5IHdlcmUgd3JvbmcgYW5kIHdoYXQgaGUgd2FudGVkIHRoZW0gdG8ga25vdy4gIFRoZW4gTGluY29sbiB3b3VsZCBmb2xkIGl0IHVwLCBwdXQgdGhlIGxldHRlciBpbiB0aGUgZGVzayBkcmF3ZXIsIGFuZCBuZXZlciBzZW5kIGl0LiAgTWFueSBvZiB0aGVzZSBsZXR0ZXJzIHN1cnZpdmUgb25seSBieSBjaGFuY2UuPC9wPjxwPkhlIGtuZXcsIGFzIHRoZSBmb3JtZXIgZW1wZXJvciBvZiBSb21lIGtuZXcsIHRoYXQgaXQncyBlYXN5IHRvIGZpZ2h0IGJhY2suICBJdCdzIHRlbXB0aW5nIHRvIGdpdmUgdGhlbSBhIHBpZWNlIG9mIHlvdXIgbWluZC4gIEJ1dCB5b3UgYWxtb3N0IGFsd2F5cyBlbmQgdXAgd2l0aCByZWdyZXQuICBZb3UgYWxtb3N0IGFsd2F5cyB3aXNoIHlvdSA8ZW0+aGFkbid0PC9lbT4gc2VudCB0aGUgbGV0dGVyLiAgVGhpbmsgb2YgdGhlIGxhc3QgdGltZSB5b3UgZmxldyBvZmYgdGhlIGhhbmRsZS4gIFdoYXQgd2FzIHRoZSBvdXRjb21lPyAgV2FzIHRoZXJlIGFueSBiZW5lZml0PzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkZlYnJ1YXJ5IDI3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQ3VsdGl2YXRpbmcgSW5kaWZmZXJlbmNlIFdoZXJlIE90aGVycyBHcm93IFBhc3Npb24iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJPZiBhbGwgdGhlIHRoaW5ncyB0aGF0IGFyZSwgc29tZSBhcmUgZ29vZCwgb3RoZXJzIGJhZCwgYW5kIHlldCBvdGhlcnMgaW5kaWZmZXJlbnQuIFRoZSBnb29kIGFyZSB2aXJ0dWVzIGFuZCBhbGwgdGhhdCBzaGFyZSBpbiB0aGVtOyB0aGUgYmFkIGFyZSB0aGUgdmljZXMgYW5kIGFsbCB0aGF0IGluZHVsZ2UgdGhlbTsgdGhlIGluZGlmZmVyZW50IGxpZSBpbiBiZXR3ZWVuIHZpcnR1ZSBhbmQgdmljZSBhbmQgaW5jbHVkZSB3ZWFsdGgsIGhlYWx0aCwgbGlmZSwgZGVhdGgsIHBsZWFzdXJlLCBhbmQgcGFpbi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAyLjE5LjEyYi0xMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5JbWFnaW5lIHRoZSBwb3dlciB5b3UnZCBoYXZlIGluIHlvdXIgbGlmZSBhbmQgcmVsYXRpb25zaGlwcyBpZiBhbGwgdGhlIHRoaW5ncyB0aGF0IHRyb3VibGUgZXZlcnlvbmUgZWxzZSZtZGFzaDtob3cgdGhpbiB0aGV5IGFyZSwgaG93IG11Y2ggbW9uZXkgdGhleSBoYXZlLCBob3cgbG9uZyB0aGV5IGhhdmUgbGVmdCB0byBsaXZlLCBob3cgdGhleSB3aWxsIGRpZSZtZGFzaDtkaWRuJ3QgbWF0dGVyIHNvIG11Y2guICBXaGF0IGlmLCB3aGVyZSBvdGhlcnMgd2VyZSB1cHNldCwgZW52aW91cywgZXhjaXRlZCwgcG9zc2Vzc2l2ZSwgb3IgZ3JlZWR5LCB5b3Ugd2VyZSBvYmplY3RpdmUsIGNhbG0sIGFuZCBjbGVhcmhlYWRlZD8gIENhbiB5b3UgZW52aXNpb24gdGhhdD8gIEltYWdpbmUgd2hhdCBpdCB3b3VsZCBkbyBmb3IgeW91ciByZWxhdGlvbnNoaXBzIGF0IHdvcmssIG9yIGZvciB5b3VyIGxvdmUgbGlmZSwgb3IgeW91ciBmcmllbmRzaGlwcy4gPC9wPjxwPlNlbmVjYSB3YXMgYW4gaW5jcmVkaWJseSB3ZWFsdGh5LCBldmVuIGZhbW91cywgbWFuJm1kYXNoO3lldCBoZSB3YXMgYSBTdG9pYy4gSGUgaGFkIG1hbnkgbWF0ZXJpYWwgdGhpbmdzLCB5ZXQsIGFzIHRoZSBTdG9pY3Mgc2F5LCBoZSB3YXMgYWxzbyBpbmRpZmZlcmVudCB0byB0aGVtLiBIZSBlbmpveWVkIHRoZW0gd2hpbGUgdGhleSB3ZXJlIHRoZXJlLCBidXQgaGUgYWNjZXB0ZWQgdGhhdCB0aGV5IG1pZ2h0IHNvbWVkYXkgZGlzYXBwZWFyLiBXaGF0IGEgYmV0dGVyIGF0dGl0dWRlIHRoYW4gZGVzcGVyYXRlbHkgY3JhdmluZyA8ZW0+bW9yZTwvZW0+IG9yIGZlYXJmdWxseSBkcmVhZGluZyBsb3NpbmcgZXZlbiBvbmUgcGVubnkuIEluZGlmZmVyZW5jZSBpcyBzb2xpZCBtaWRkbGUgZ3JvdW5kLiA8L3A+PHA+SXQncyBub3QgYWJvdXQgYXZvaWRhbmNlIG9yIHNodW5uaW5nLCBidXQgcmF0aGVyIG5vdCBnaXZpbmcgYW55IHBvc3NpYmxlIG91dGNvbWUgbW9yZSBwb3dlciBvciBwcmVmZXJlbmNlIHRoYW4gaXMgYXBwcm9wcmlhdGUuIFRoaXMgaXMgbm90IGVhc3kgdG8gZG8sIGNlcnRhaW5seSwgYnV0IGlmIHlvdSBjb3VsZCBtYW5hZ2UsIGhvdyBtdWNoIG1vcmUgcmVsYXhlZCB3b3VsZCB5b3UgYmU/PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRmVicnVhcnkgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXaGVuIFlvdSBMb3NlIENvbnRyb2wiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgc291bCBpcyBsaWtlIGEgYm93bCBvZiB3YXRlciwgYW5kIG91ciBpbXByZXNzaW9ucyBhcmUgbGlrZSB0aGUgcmF5IG9mIGxpZ2h0IGZhbGxpbmcgdXBvbiB0aGUgd2F0ZXIuICBXaGVuIHRoZSB3YXRlciBpcyB0cm91YmxlZCwgaXQgYXBwZWFycyB0aGF0IHRoZSBsaWdodCBpdHNlbGYgaXMgbW92ZWQgdG9vLCBidXQgaXQgaXNuJ3QuICBTbywgd2hlbiBhIHBlcnNvbiBsb3NlcyB0aGVpciBjb21wb3N1cmUsIGl0IGlzbid0IHRoZWlyIHNraWxscyBhbmQgdmlydHVlcyB0aGF0IGFyZSB0cm91YmxlZCwgYnV0IHRoZSBzcGlyaXQgaW4gd2hpY2ggdGhleSBleGlzdCwgYW5kIHdoZW4gdGhhdCBzcGlyaXQgY2FsbXMgZG93biBzbyBkbyB0aG9zZSB0aGluZ3MuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy4zLjIwLTIyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPllvdSBtZXNzZWQgdXAgYSBsaXR0bGUuICBPciBtYXliZSB5b3UgbWVzc2VkIHVwIDxlbT5hIGxvdDwvZW0+LjwvcD48cD5Tbz8gVGhhdCBkb2Vzbid0IGNoYW5nZSB0aGUgcGhpbG9zb3BoeSB0aGF0IHlvdSBrbm93LiBJdCdzIG5vdCBhcyBpZiB5b3VyIHJlYXNvbmVkIGNob2ljZSBoYXMgcGVybWFuZW50bHkgYWJhbmRvbmVkIHlvdS4gIFJhdGhlciwgaXQgd2FzIHlvdSB3aG8gdGVtcG9yYXJpbHkgYWJhbmRvbmVkIGl0LjwvcD48cD5SZW1lbWJlciB0aGF0IHRoZSB0b29scyBhbmQgYWltcyBvZiBvdXIgdHJhaW5pbmcgYXJlIHVuYWZmZWN0ZWQgYnkgdGhlIHR1cmJ1bGVuY2Ugb2YgdGhlIG1vbWVudC4gIFN0b3AuICBSZWdhaW4geW91ciBjb21wb3N1cmUuICBJdCdzIHdhaXRpbmcgZm9yIHlvdS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJGZWJydWFyeSAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIllvdSBDYW4ndCBBbHdheXMgR2V0IFdoYXQgWW91IFdhbnQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXaGVuIGNoaWxkcmVuIHN0aWNrIHRoZWlyIGhhbmQgZG93biBhIG5hcnJvdyBnb29keSBqYXIgdGhleSBjYW4ndCBnZXQgdGhlaXIgZnVsbCBmaXN0IG91dCBhbmQgc3RhcnQgY3J5aW5nLiBEcm9wIGEgZmV3IHRyZWF0cyBhbmQgeW91IHdpbGwgZ2V0IGl0IG91dCEgQ3VyYiB5b3VyIGRlc2lyZSZtZGFzaDtkb24ndCBzZXQgeW91ciBoZWFydCBvbiBzbyBtYW55IHRoaW5ncyBhbmQgeW91IHdpbGwgZ2V0IHdoYXQgeW91IG5lZWQuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy45LjIyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIiA8cD48cT5XZSBjYW4gaGF2ZSBpdCBhbGw8L3E+IGlzIHRoZSBtYW50cmEgb2Ygb3VyIG1vZGVybiBsaXZlcy4gV29yaywgZmFtaWx5LCBwdXJwb3NlLCBzdWNjZXNzLCBsZWlzdXJlIHRpbWUmbWRhc2g7d2Ugd2FudCBhbGwgb2YgdGhpcywgYXQgdGhlIHNhbWUgdGltZSAocmlnaHQgbm93LCB0byBib290KS48L3A+PHA+SW4gR3JlZWNlLCB0aGUgbGVjdHVyZSBoYWxsICg8aSBsYW5nPSdlbCc+z4PPh86/zrvOtc6vzr/OvTwvaT4pIHdhcyBhIGxlaXN1cmUgY2VudGVyIHdoZXJlIHN0dWRlbnRzIGNvbnRlbXBsYXRlZCB0aGUgaGlnaGVyIHRoaW5ncyAodGhlIGdvb2QsIHRydWUsIGFuZCBiZWF1dGlmdWwpIGZvciB0aGUgcHVycG9zZSBvZiBsaXZpbmcgYSBiZXR0ZXIgbGlmZS4gSXQgd2FzIGFib3V0IHByaW9yaXRpemF0aW9uLCBhYm91dCBxdWVzdGlvbmluZyB0aGUgcHJpb3JpdGllcyBvZiB0aGUgb3V0c2lkZSB3b3JsZC4gVG9kYXksIHdlJ3JlIHRvbyBidXN5IGdldHRpbmcgdGhpbmdzLCBqdXN0IGxpa2Uga2lkcyBqYW1taW5nIHRoZWlyIGhhbmQgZG93biBhIGphciBvZiBnb29kaWVzLCB0byBkbyBtdWNoIG9mIHRoaXMgcXVlc3Rpb25pbmcuPC9wPjxwPjxxPkRvbid0IHNldCB5b3VyIGhlYXJ0IG9uIHNvIG1hbnkgdGhpbmdzLDwvcT4gc2F5cyBFcGljdGV0dXMuIEZvY3VzLiBQcmlvcml0aXplLiBUcmFpbiB5b3VyIG1pbmQgdG8gYXNrOiA8ZW0+RG8gSSBuZWVkIHRoaXMgdGhpbmc/IFdoYXQgd2lsbCBoYXBwZW4gaWYgSSBkbyBub3QgZ2V0IGl0PyBDYW4gSSBtYWtlIGRvIHdpdGhvdXQgaXQ/PC9lbT48L3A+IDxwPlRoZSBhbnN3ZXJzIHRvIHRoZXNlIHF1ZXN0aW9ucyB3aWxsIGhlbHAgeW91IHJlbGF4LCBoZWxwIHlvdSBjdXQgb3V0IGFsbCB0aGUgbmVlZGxlc3MgdGhpbmdzIHRoYXQgbWFrZSB5b3UgYnVzeSZtZGFzaDt0b28gYnVzeSB0byBiZSBiYWxhbmNlZCBvciBoYXBweS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXJjaCAxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiV2hlcmUgUGhpbG9zb3BoeSBCZWdpbnMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJBbiBpbXBvcnRhbnQgcGxhY2UgdG8gYmVnaW4gaW4gcGhpbG9zb3BoeSBpcyB0aGlzOiBhIGNsZWFyIHBlcmNlcHRpb24gb2Ygb25lJ3Mgb3duIHJ1bGluZyBwcmluY2lwbGUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMS4yNi4xNSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5QaGlsb3NvcGh5IGlzIGludGltaWRhdGluZy4gV2hlcmUgZG9lcyBvbmUgc3RhcnQ/IFdpdGggYm9va3M/IFdpdGggbGVjdHVyZXM/IFdpdGggdGhlIHNhbGUgb2YgeW91ciB3b3JsZGx5IHBvc3Nlc3Npb25zPzwvcD48cD5Ob25lIG9mIHRoZXNlIHRoaW5ncy4gRXBpY3RldHVzIGlzIHNheWluZyB0aGF0IG9uZSBiZWNvbWVzIGEgcGhpbG9zb3BoZXIgd2hlbiB0aGV5IGJlZ2luIHRvIGV4ZXJjaXNlIHRoZWlyIGd1aWRpbmcgcmVhc29uIGFuZCBzdGFydCB0byBxdWVzdGlvbiB0aGUgZW1vdGlvbnMgYW5kIGJlbGllZnMgYW5kIGV2ZW4gbGFuZ3VhZ2UgdGhhdCBvdGhlcnMgdGFrZSBmb3IgZ3JhbnRlZC4gSXQgaXMgdGhvdWdodCB0aGF0IGFuIGFuaW1hbCBoYXMgc2VsZi1hd2FyZW5lc3Mgd2hlbiBpdCBpcyBhYmxlIHRvIGZ1bGx5IHJlY29nbml6ZSBpdHNlbGYgaW4gYSBtaXJyb3IuIFBlcmhhcHMgd2UgY291bGQgc2F5IHRoYXQgd2UgYmVnaW4gb3VyIGpvdXJuZXkgaW50byBwaGlsb3NvcGh5IHdoZW4gd2UgYmVjb21lIGF3YXJlIG9mIHRoZSBhYmlsaXR5IHRvIGFuYWx5emUgb3VyIG93biBtaW5kcy48L3A+PHA+Q2FuIHlvdSBzdGFydCB3aXRoIHRoYXQgc3RlcCB0b2RheT8gV2hlbiB5b3UgZG8sIHlvdSdsbCBmaW5kIHRoYXQgZnJvbSBpdCB3ZSByZWFsbHkgY29tZSBhbGl2ZSwgdGhhdCB3ZSBsaXZlIGxpdmVzJm1kYXNoO3RvIHBhcmFwaHJhc2UgU29jcmF0ZXMmbWRhc2g7dGhhdCBhcmUgYWN0dWFsbHkgd29ydGggbGl2aW5nLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1hcmNoIDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBY2N1cmF0ZSBTZWxmLUFzc2Vzc21lbnQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJBYm92ZSBhbGwsIGl0IGlzIG5lY2Vzc2FyeSBmb3IgYSBwZXJzb24gdG8gaGF2ZSBhIHRydWUgc2VsZi1lc3RpbWF0ZSwgZm9yIHdlIGNvbW1vbmx5IHRoaW5rIHdlIGNhbiBkbyBtb3JlIHRoYW4gd2UgcmVhbGx5IGNhbi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiBUcmFucXVpbGl0eSBPZiBNaW5kLCA1LjIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+TW9zdCBwZW9wbGUgcmVzaXN0IHRoZSBpZGVhIG9mIGEgdHJ1ZSBzZWxmLWVzdGltYXRlLCBwcm9iYWJseSBiZWNhdXNlIHRoZXkgZmVhciBpdCBtaWdodCBtZWFuIDxlbT5kb3duZ3JhZGluZzwvZW0+IHNvbWUgb2YgdGhlaXIgYmVsaWVmcyBhYm91dCB3aG8gdGhleSBhcmUgYW5kIHdoYXQgdGhleSdyZSBjYXBhYmxlIG9mLiBBcyBHb2V0aGUncyBtYXhpbSBnb2VzLCBpdCBpcyBhIGdyZWF0IGZhaWxpbmcgPHE+dG8gc2VlIHlvdXJzZWxmIGFzIG1vcmUgdGhhbiB5b3UgYXJlLjwvcT4gSG93IGNvdWxkIHlvdSByZWFsbHkgYmUgY29uc2lkZXJlZCBzZWxmLWF3YXJlIGlmIHlvdSByZWZ1c2UgdG8gY29uc2lkZXIgeW91ciB3ZWFrbmVzc2VzPzwvcD48cD5Eb24ndCBmZWFyIHNlbGYtYXNzZXNzbWVudCBiZWNhdXNlIHlvdSdyZSB3b3JyaWVkIHlvdSBtaWdodCBoYXZlIHRvIGFkbWl0IHNvbWUgdGhpbmdzIGFib3V0IHlvdXJzZWxmLiBUaGUgc2Vjb25kIGhhbGYgb2YgR29ldGhlJ3MgbWF4aW0gaXMgaW1wb3J0YW50IHRvby4gSGUgc3RhdGVzIHRoYXQgaXQgaXMgZXF1YWxseSBkYW1hZ2luZyB0byA8cT52YWx1ZSB5b3Vyc2VsZiBhdCBsZXNzIHRoYW4geW91ciB0cnVlIHdvcnRoLjwvcT4gSXMgaXQgbm90IGVxdWFsbHkgY29tbW9uIHRvIGJlIHN1cnByaXNlZCBhdCBob3cgd2VsbCB3ZSdyZSBhYmxlIHRvIGhhbmRsZSBhIHByZXZpb3VzbHkgZmVhcmVkIHNjZW5hcmlvPyBUaGUgd2F5IHRoYXQgd2UncmUgYWJsZSB0byBwdXQgYXNpZGUgdGhlIGdyaWVmIGZvciBhIGxvdmVkIG9uZSBhbmQgY2FyZSBmb3Igb3RoZXJzJm1kYXNoO3Rob3VnaCB3ZSBhbHdheXMgdGhvdWdodCB3ZSdkIGJlIHdyZWNrZWQgaWYgc29tZXRoaW5nIHdlcmUgdG8gaGFwcGVuIHRvIG91ciBwYXJlbnRzIG9yIGEgc2libGluZy4gVGhlIHdheSB3ZSdyZSBhYmxlIHRvIHJpc2UgdG8gdGhlIG9jY2FzaW9uIGluIGEgc3RyZXNzZnVsIHNpdHVhdGlvbiBvciBhIGxpZmUtY2hhbmdpbmcgb3Bwb3J0dW5pdHkuPC9wPjxwPldlIHVuZGVyZXN0aW1hdGUgb3VyIGNhcGFiaWxpdGllcyBqdXN0IGFzIG11Y2ggYW5kIGp1c3QgYXMgZGFuZ2Vyb3VzbHkgYXMgd2Ugb3ZlcmVzdGltYXRlIG90aGVyIGFiaWxpdGllcy4gQ3VsdGl2YXRlIHRoZSBhYmlsaXR5IHRvIGp1ZGdlIHlvdXJzZWxmIGFjY3VyYXRlbHkgYW5kIGhvbmVzdGx5LiBMb29rIGlud2FyZCB0byBkaXNjZXJuIHdoYXQgeW91J3JlIGNhcGFibGUgb2YgYW5kIHdoYXQgaXQgd2lsbCB0YWtlIHRvIHVubG9jayB0aGF0IHBvdGVudGlhbC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXJjaCAzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiKERpcylJbnRlZ3JhdGlvbiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZXNlIHRoaW5ncyBkb24ndCBnbyB0b2dldGhlci4gIFlvdSBtdXN0IGJlIGEgdW5pZmllZCBodW1hbiBiZWluZywgZWl0aGVyIGdvb2Qgb3IgYmFkLiAgWW91IG11c3QgZGlsaWdlbnRseSB3b3JrIGVpdGhlciBvbiB5b3VyIG93biByZWFzb25pbmcgb3Igb24gdGhpbmdzIG91dCBvZiB5b3VyIGNvbnRyb2wmbWRhc2g7dGFrZSBncmVhdCBjYXJlIHdpdGggdGhlIGluc2lkZSBhbmQgbm90IHdoYXQncyBvdXRzaWRlLCB3aGljaCBpcyB0byBzYXksIHN0YW5kIHdpdGggdGhlIHBoaWxvc29waGVyLCBvciBlbHNlIHdpdGggdGhlIG1vYi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAzLjE1LjEzIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPldlJ3JlIGFsbCBjb21wbGljYXRlZCBwZW9wbGUuICBXZSBoYXZlIG11bHRpcGxlIHNpZGVzIHRvIG91cnNlbHZlcyZtZGFzaDtjb25mbGljdGluZyB3YW50cywgZGVzaXJlcywgYW5kIGZlYXJzLiAgVGhlIG91dHNpZGUgd29ybGQgaXMgbm8gbGVzcyBjb25mdXNpbmcgYW5kIGNvbnRyYWRpY3RvcnkuICBJZiB3ZSdyZSBub3QgY2FyZWZ1bCwgYWxsIHRoZXNlIGZvcmNlcyZtZGFzaDtwdXNoaW5nIGFuZCBwdWxsaW5nJm1kYXNoO3dpbGwgZXZlbnR1YWxseSB0ZWFyIHVzIGFwYXJ0LiAgV2UgY2FuJ3QgbGl2ZSBhcyBib3RoIEpla3lsbCBhbmQgSHlkZS4gIE5vdCBmb3IgbG9uZywgYW55d2F5LjwvcD48cD5XZSBoYXZlIGEgY2hvaWNlOiB0byBzdGFuZCB3aXRoIHRoZSBwaGlsb3NvcGhlciBhbmQgZm9jdXMgc3RyZW51b3VzbHkgb24gdGhlIGluc2lkZSwgb3IgdG8gYmVoYXZlIGxpa2UgYSBsZWFkZXIgb2YgYSBtb2IsIGJlY29taW5nIHdoYXRldmVyIHRoZSBjcm93ZCBuZWVkcyBhdCBhIGdpdmVuIG1vbWVudC48L3A+PHA+SWYgd2UgZG8gbm90IGZvY3VzIG9uIG91ciBpbnRlcm5hbCBpbnRlZ3JhdGlvbiZtZGFzaDtvbiBzZWxmLWF3YXJlbmVzcyZtZGFzaDt3ZSByaXNrIGV4dGVybmFsIGRpc2ludGVncmF0aW9uLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfSwNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkhhcHBpbmVzcyBIZXJlIGFuZCBOb3ciLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJdCBpcyBwb3NzaWJsZSB0byBsaXZlIGhhcHBpbHkgaW4gdGhlIGhlcmUgYW5kIG5vdy4gIFNvIG1hbnkgY29uZGl0aW9ucyBvZiBoYXBwaW5lc3MgYXJlIGF2YWlsYWJsZSZtZGFzaDttb3JlIHRoYW4gZW5vdWdoIGZvciB5b3UgdG8gYmUgaGFwcHkgcmlnaHQgbm93LiAgWW91IGRvbid0IGhhdmUgdG8gcnVuIGludG8gdGhlIGZ1dHVyZSBpbiBvcmRlciB0byBnZXQgbW9yZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJUaGljaCBOaGF0IEhhbmgiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJQZWFjZSBJcyBFdmVyeSBTdGVwOiBUaGUgUGF0aCBvZiBNaW5kZnVsbmVzcyBpbiBFdmVyeWRheSBMaWZlIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoaW5rIG9mIGhhcHBpbmVzcyBsaWtlIHN1bmxpZ2h0LiAgSXQncyBhbHdheXMgYXZhaWxhYmxlIGJ1dCBvZnRlbiBoaWRkZW4gaW4gY2xvdWRzLiAgT3VyIGNvbnN0YW50IHNlYXJjaCBmb3IgdGhlIDxxPnBlcmZlY3Q8L3E+IGZ1dHVyZSBvYnNjdXJlcyB0aGUgc2ltcGxlIHBsZWFzdXJlIGFyb3VuZCB1cy4gIFRydWUgaGFwcGluZXNzIGxpZXMgaW4gYXBwcmVjaWF0aW5nIHRoZSBwcmVzZW50IG1vbWVudCwgcmVjb2duaXppbmcgdGhlIGdvb2Qgd2UgYWxyZWFkeSBoYXZlIGluIG91ciBsaXZlcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXJjaCA0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQXdhcmVuZXNzIGlzIEZyZWVkb20iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgcGVyc29uIGlzIGZyZWUgd2hvIGxpdmVzIGFzIHRoZXkgd2lzaCwgbmVpdGhlciBjb21wZWxsZWQsIG5vciBoaW5kZXJlZCwgbm9yIGxpbWl0ZWQmbWRhc2g7d2hvc2UgY2hvaWNlcyBhcmVuJ3QgaGFtcGVyZWQsIHdob3NlIGRlc2lyZXMgc3VjY2VlZCwgYW5kIHdobyBkb24ndCBmYWxsIGludG8gd2hhdCByZXBlbHMgdGhlbS4gIFdobyB3aXNoZXMgdG8gbGl2ZSBpbiBkZWNlcHRpb24mbWRhc2g7dHJpcHBlZCB1cCwgbWlzdGFrZW4sIHVuZGlzY2lwbGluZWQsIGNvbXBsYWluaW5nLCBpbiBhIHJ1dD8gIE5vIG9uZS4gIFRoZXNlIGFyZSBiYXNlIHBlb3BsZSB3aG8gZG9uJ3QgbGl2ZSBhcyB0aGV5IHdpc2g7IGFuZCBzbywgbm8gYmFzZSBwZXJzb24gaXMgZnJlZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCA0LjEuMS0zYSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5JdCBpcyBzYWQgdG8gY29uc2lkZXIgaG93IG11Y2ggdGltZSBtYW55IHBlb3BsZSBzcGVuZCBpbiB0aGUgY291cnNlIG9mIGEgZGF5IGRvaW5nIHRoaW5ncyB0aGV5IDxxPmhhdmU8L3E+IHRvIGRvJm1kYXNoO25vdCBuZWNlc3Nhcnkgb2JsaWdhdGlvbnMgbGlrZSB3b3JrIG9yIGZhbWlseSwgYnV0IHRoZSBvYmxpZ2F0aW9ucyB3ZSBuZWVkbGVzc2x5IGFjY2VwdCBvdXQgb2YgdmFuaXR5IG9yIGlnbm9yYW5jZS4gQ29uc2lkZXIgdGhlIGFjdGlvbnMgd2UgdGFrZSBpbiBvcmRlciB0byBpbXByZXNzIG90aGVyIHBlb3BsZSBvciB0aGUgbGVuZ3RocyB3ZeKAmWxsIGdvIHRvIGZ1bGZpbGwgdXJnZXMgb3Igc2F0ZSBkZXNpcmVzIHdlIGRvbuKAmXQgZXZlbiBxdWVzdGlvbi4gSW4gb25lIG9mIGhpcyBmYW1vdXMgbGV0dGVycywgU2VuZWNhIG9ic2VydmVzIGhvdyBvZnRlbiBwb3dlcmZ1bCBwZW9wbGUgYXJlIHNsYXZlcyB0byB0aGVpciBtb25leSwgdG8gdGhlaXIgcG9zaXRpb25zLCB0byB0aGVpciBtaXN0cmVzc2VzLCBldmVuJm1kYXNoO2FzIHdhcyBsZWdhbCBpbiBSb21lJm1kYXNoO3RvIHRoZWlyIHNsYXZlcy4gPHE+Tm8gc2xhdmVyeSBpcyBtb3JlIGRpc2dyYWNlZnVsLDwvcT4gaGUgcXVpcHBlZCwgPHE+dGhhbiBvbmUgd2hpY2ggaXMgc2VsZi1pbXBvc2VkLjwvcT48L3A+PHA+V2Ugc2VlIHRoaXMgc2xhdmVyeSBhbGwgdGhlIHRpbWUmbWRhc2g7YSBjb2RlcGVuZGVudCBwZXJzb24gd2hvIGNhbuKAmXQgaGVscCBidXQgY2xlYW4gdXAgYWZ0ZXIgYSBkeXNmdW5jdGlvbmFsIGZyaWVuZCwgYSBib3NzIHdobyBtaWNyb21hbmFnZXMgZW1wbG95ZWVzIGFuZCBzd2VhdHMgZXZlcnkgcGVubnkuIFRoZSBjb3VudGxlc3MgY2F1c2VzLCBldmVudHMsIGFuZCBnZXQtdG9nZXRoZXJzIHdl4oCZcmUgdG9vIGJ1c3kgdG8gYXR0ZW5kIGJ1dCBhZ3JlZSB0byBhbnl3YXkuPC9wPjxwPlRha2UgYW4gaW52ZW50b3J5IG9mIHlvdXIgb2JsaWdhdGlvbnMgZnJvbSB0aW1lIHRvIHRpbWUuIEhvdyBtYW55IG9mIHRoZXNlIGFyZSBzZWxmLWltcG9zZWQ/IEhvdyBtYW55IG9mIHRoZW0gYXJlIHRydWx5IG5lY2Vzc2FyeT8gQXJlIHlvdSBhcyBmcmVlIGFzIHlvdSB0aGluaz88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJFbWJyYWNpbmcgdGhlIFRoaXJkIE5vYmxlIFRydXRoIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhlIFRoaXJkIE5vYmxlIFRydXRoIGlzIGEgdmVyeSBnZW50bGUgdHJ1dGguICBJdCBwb2ludHMgdG93YXJkcyB0aGUgcG9zc2liaWxpdHkgb2YgcmVsaWVmIGZyb20gc3VmZmVyaW5nLCByYXRoZXIgdGhhbiBkZWNsYXJpbmcgaXQgdW5hdm9pZGFibGUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiQWphaG4gU3VjaXR0byIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgVGhpcmQgTm9ibGUgVHJ1dGggaXMgYSBiZWFjb24gb2YgaG9wZSwgbm90IGRlc3BhaXIuICBJdCBzYXlzIHRoYXQgcmVsaWVmIGZyb20gc3VmZmVyaW5nIGlzIHBvc3NpYmxlISAgSXQncyBub3QgYWJvdXQgYSBxdWljayBmaXgsIGJ1dCBhIHByb2ZvdW5kIGpvdXJuZXkgb2YgdW5kZXJzdGFuZGluZy4gIFRocm91Z2ggY3VsdGl2YXRpbmcgbWluZGZ1bG5lc3MsIGNvbXBhc3Npb24sIGFuZCB3aXNkb20sIHdlIGNhbiBmaW5kIGlubmVyIHBlYWNlIHJlZ2FyZGxlc3Mgb2YgZXh0ZXJuYWwgY2lyY3Vtc3RhbmNlcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXJjaCA1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1hcmNoIDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXJjaCA4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1hcmNoIDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMjkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWFyY2ggMzEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBcHJpbCAyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkFwcmlsIDMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBcHJpbCA1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkFwcmlsIDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBcHJpbCA4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkFwcmlsIDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMjkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXByaWwgMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDEwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDEzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAxNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMTUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDE2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAxNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDE5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAyMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDIyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAyMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMjQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDI1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAyNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMjciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDI4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk1heSAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJNYXkgMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTWF5IDMxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSA2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSA5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDEyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAxNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDE1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAxNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDE4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAyMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDIxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAyMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDI0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAyNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDI3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bmUgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVuZSAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdW5lIDMwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSA2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSA5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDEyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAxNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDE1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAxNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDE4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAyMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDIxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAyMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDI0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAyNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDI3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiSnVseSAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJKdWx5IDMwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkp1bHkgMzEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDEwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDEzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAxNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMTUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDE2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAxNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDE5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAyMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDIyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAyMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMjQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDI1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAyNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMjciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDI4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkF1Z3VzdCAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJBdWd1c3QgMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiQXVndXN0IDMxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQSBTdHJvbmcgU291bCBpcyBCZXR0ZXIgdGhhbiBHb29kIEx1Y2siLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgcmF0aW9uYWwgc291bCBpcyBzdHJvbmdlciB0aGFuIGFueSBraW5kIG9mIGZvcnR1bmUmbWRhc2g7ZnJvbSBpdHMgb3duIHNoYXJlIGl0IGd1aWRlcyBpdHMgYWZmYWlycyBoZXJlIG9yIHRoZXJlLCBhbmQgaXMgaXRzZWxmIHRoZSBjYXVzZSBvZiBhIGhhcHB5IG9yIG1pc2VyYWJsZSBsaWZlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk1vcmFsIExldHRlcnMsIDk4LjJiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkNhdG8gdGhlIFlvdW5nZXIgaGFkIGVub3VnaCBtb25leSB0byBkcmVzcyBpbiBmaW5lIGNsb3RoaW5nLiBZZXQgaGUgb2Z0ZW4gd2Fsa2VkIGFyb3VuZCBSb21lIGJhcmVmb290LCBpbmRpZmZlcmVudCB0byBhc3N1bXB0aW9ucyBwZW9wbGUgbWFkZSBhYm91dCBoaW0gYXMgaGUgcGFzc2VkLiBIZSBjb3VsZCBoYXZlIGluZHVsZ2VkIGluIHRoZSBmaW5lc3QgZm9vZC4gSGUgY2hvc2UgaW5zdGVhZCB0byBlYXQgc2ltcGxlIGZhcmUuIFdoZXRoZXIgaXQgd2FzIHJhaW5pbmcgb3IgaW50ZW5zZWx5IGhvdCwgaGUgd2VudCBiYXJlaGVhZGVkIGJ5IGNob2ljZS48L3A+PHA+V2h5IG5vdCBpbmR1bGdlIGluIHNvbWUgZWFzeSByZWxpZWY/IEJlY2F1c2UgQ2F0byB3YXMgdHJhaW5pbmcgaGlzIHNvdWwgdG8gYmUgc3Ryb25nIGFuZCByZXNpbGllbnQuIFNwZWNpZmljYWxseSwgaGUgd2FzIGxlYXJuaW5nIGluZGlmZmVyZW5jZTogYW4gYXR0aXR1ZGUgb2YgPHE+bGV0IGNvbWUgd2hhdCBtYXk8L3E+IHRoYXQgd291bGQgc2VydmUgaGltIHdlbGwgaW4gdGhlIHRyZW5jaGVzIHdpdGggdGhlIGFybXksIGluIHRoZSBGb3J1bSBhbmQgdGhlIFNlbmF0ZSwgYW5kIGluIGhpcyBsaWZlIGFzIGEgZmF0aGVyIGFuZCBzdGF0ZXNtYW4uPC9wPjxwPkhpcyB0cmFpbmluZyBwcmVwYXJlZCBoaW0gZm9yIGFueSBjb25kaXRpb25zLCBhbnkga2luZCBvZiBsdWNrLiBJZiB3ZSB1bmRlcmdvIG91ciBvd24gdHJhaW5pbmcgYW5kIHByZXBhcmF0aW9ucywgd2UgbWlnaHQgZmluZCBvdXJzZWx2ZXMgc2ltaWxhcmx5IHN0cmVuZ3RoZW5lZC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDExIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAxMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDE0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAxNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDE3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAxOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDIwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAyMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDIzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAyNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDI2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAyNyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMjgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiU2VwdGVtYmVyIDI5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIlNlcHRlbWJlciAzMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIiIsDQogICAgICAgICAgICAic291cmNlIjogIiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJTZXB0ZW1iZXIgMzEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICIiLA0KICAgICAgICAgICAgImF1dGhvciI6ICIiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiTGV0IFZpcnR1cmUgU2hpbmUgQnJpZ2h0IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRG9lcyB0aGUgbGlnaHQgb2YgYSBsYW1wIHNoaW5lIGFuZCBrZWVwIGl0cyBnbG93IHVudGlsIGl0cyBmdWVsIGlzIHNwZW50PyBXaHkgc2hvdWxkbid0IHlvdXIgdHJ1dGgsIGp1c3RpY2UsIGFuZCBzZWxmLWNvbnRyb2wgc2hpbmUgdW50aWwgeW91IGFyZSBleHRpbmd1aXNoZWQ/IiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDEyLjE1Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlNlbmVjYSwgcmVwZWF0aW5nIEhlcmFjbGl0dXMsIHdyaXRlcyB0aGF0IDxxPndlIG1vcnRhbHMgYXJlIGxpZ2h0ZWQgYW5kIGV4dGluZ3Vpc2hlZC48L3E+IFRoZSBsaWdodCBvZiByZWFzb24gc3VmZnVzZXMgdGhlIHVuaXZlcnNlLiAgV2hldGhlciB0aGUgd2ljayBvZiB5b3VyIGxhbXAgaXMgYmVpbmcgbGl0IGZvciB0aGUgZmlyc3QgdGltZSwgYWZ0ZXIgYSBsb25nIHBlcmlvZCBvZiBkYXJrbmVzcywgb3IgZXZlbiByaWdodCBiZWZvcmUgdGhlIHByb3ZlcmJpYWwgYmlnIHNsZWVwLCBpdCBtYWtlcyBubyBkaWZmZXJlbmNlLjwvcD48cD5IZXJlIGlzIHdoZXJlIHlvdSBhcmUgbm93LCBhbmQgaXQncyBhIGdvb2QgYSBwbGFjZSBhcyBhbnkgdG8gbGV0IHZpcnR1ZSBzaGluZSBhbmQgY29udGludWUgdG8gc2hpbmUgZm9yIGFzIGxvbmcgYXMgeW91IGV4aXN0LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBNb3N0IFZhbHVhYmxlIEFzc2V0IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQnV0IHRoZSB3aXNlIHBlcnNvbiBjYW4gbG9zZSBub3RoaW5nLiBTdWNoIGEgcGVyc29uIGhhcyBldmVyeXRoaW5nIHN0b3JlZCB1cCBmb3IgdGhlbXNlbHZlcywgbGVhdmluZyBub3RoaW5nIHRvIEZvcnR1bmUsIHRoZWlyIG93biBnb29kcyBhcmUgaGVsZCBmaXJtLCBib3VuZCBpbiB2aXJ0dWUsIHdoaWNoIHJlcXVpcmVzIG5vdGhpbmcgZnJvbSBjaGFuY2UsIGFuZCB0aGVyZWZvcmUgY2FuJ3QgYmUgZWl0aGVyIGluY3JlYXNlZCBvciBkaW1pbmlzaGVkLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk9uIHRoZSBGaXJtbmVzcyBvZiB0aGUgV2lzZSwgNS40Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlNvbWUgcGVvcGxlIHB1dCB0aGVpciBtb25leSBpbiBhc3NldHMmbWRhc2g7c3RvY2tzLCBib25kcywgcHJvcGVydHkuIE90aGVycyBpbnZlc3QgaW4gcmVsYXRpb25zaGlwcyBvciBhY2NvbXBsaXNobWVudHMsIGtub3dpbmcgdGhhdCB0aGV5IGNhbiBkcmF3IG9uIHRoZXNlIHRoaW5ncyBqdXN0IGFzIGVhc2lseSBhcyBvdGhlcnMgY2FuIGRyYXcgZnVuZHMgZnJvbSBhIGJhbmsgYWNjb3VudC4gQnV0IGEgdGhpcmQgdHlwZSwgU2VuZWNhIHNheXMsIGludmVzdHMgaW4gdGhlbXNlbHZlcyZtZGFzaDtpbiBiZWluZyBhIGdvb2QgYW5kIHdpc2UgcGVyc29uLjwvcD48cD5XaGljaCBvZiB0aGVzZSBhc3NldHMgaXMgbW9zdCBpbW11bmUgdG8gbWFya2V0IGZsdWN0dWF0aW9ucyBhbmQgZGlzYXN0ZXJzPyBXaGljaCBpcyBtb3N0IHJlc2lsaWVudCBpbiB0aGUgZmFjZSBvZiB0cmlhbHMgYW5kIHRyaWJ1bGF0aW9ucz8gV2hpY2ggd2lsbCBuZXZlciBhYmFuZG9uIHlvdT8gU2VuZWNhJ3Mgb3duIGxpZmUgaXMgYW4gaW50ZXJlc3RpbmcgZXhhbXBsZS4gSGUgYmVjYW1lIHF1aXRlIHdlYWx0aHkgYXMgYSBmcmllbmQgb2YgdGhlIGVtcGVyb3IsIGJ1dCBhcyBOZXJvIGJlY2FtZSBtb3JlIGFuZCBtb3JlIGRlcmFuZ2VkLCBTZW5lY2EgcmVhbGl6ZWQgaGUgbmVlZGVkIHRvIGdldCBvdXQuIEhlIG9mZmVyZWQgTmVybyBhIGRlYWw7IGhlIHdvdWxkIGdpdmUgTmVybyBhbGwgaGlzIG1vbmV5IGFuZCByZXR1cm4gYWxsIG9mIE5lcm8ncyBnaWZ0cyBpbiBleGNoYW5nZSBmb3IgY29tcGxldGUgYW5kIHRvdGFsIGZyZWVkb20uPC9wPjxwPlVsdGltYXRlbHksIE5lcm8gcmVqZWN0ZWQgdGhpcyBvZmZlciwgYnV0IFNlbmVjYSBsZWZ0IGFueXdheSwgcmV0aXJpbmcgaW4gcmVsYXRpdmUgcGVhY2UuICBCdXQgb25lIGRheSwgdGhlIGV4ZWN1dGlvbmVycyBjYW1lIHdpdGggdGhlaXIgbW9ydGFsIGRlY3JlZS4gSW4gdGhhdCBtb21lbnQsIHdoYXQgZGlkIFNlbmVjYSByZWx5IG9uPyBJdCB3YXNuJ3QgaGlzIG1vbmV5LiBJdCB3YXNuJ3QgaGlzIGZyaWVuZHMsIHdobywgYWx0aG91Z2ggdGhleSBtZWFudCB3ZWxsLCB3ZXJlIGEgY29uc2lkZXJhYmxlIHNvdXJjZSBvZiBncmllZiBhbmQgbW91cm5pbmcuIEl0IHdhcyBoaXMgdmlydHVlIGFuZCBpbm5lciBzdHJlbmd0aC48L3A+PHA+SXQgd2FzIFNlbmVjYSdzIG1vc3QgdHJ5aW5nIG1vbWVudCZtZGFzaDtoaXMgbGFzdCBhbmQgaGlzIGZpbmVzdC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIkRvbid0IGZvcmdldCB5b3VyIHdvb2JpZXMiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQSBNYW50cmEgb2YgTXV0dWFsIEludGVyZGVwZW5kZW5jZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIk1lZGl0YXRlIG9mdGVuIG9uIHRoZSBpbnRlcmNvbm5lY3RlZG5lc3MgYW5kIG11dHVhbCBpbnRlcmRlcGVuZGVuY2Ugb2YgYWxsIHRoaW5ncyBpbiB0aGUgdW5pdmVyc2UuIEZvciBpbiBhIHNlbnNlLCBhbGwgdGhpbmdzIGFyZSBtdXR1YWxseSBpbnRlcndvdmVuIHRvZ2V0aGVyIGFuZCB0aGVyZWZvcmUgaGF2ZSBhbiBhZmZpbml0eSBmb3IgZWFjaCBvdGhlciZtZGFzaDtmb3Igb25lIHRoaW5nIGZvbGxvd3MgYWZ0ZXIgYW5vdGhlciBhY2NvcmRpbmcgdG8gdGhlaXIgdGVuc2lvbiBvZiBtb3ZlbWVudCwgdGhlaXIgc3ltcGF0aGV0aWMgc3RpcnJpbmdzLCBhbmQgdGhlIHVuaXR5IG9mIGFsbCBzdWJzdGFuY2UuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDYuMzgiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+QW5uIExhbW90dCBvbmNlIG9ic2VydmVkIHRoYXQgYWxsIHdyaXRlcnMgPGVtPmFyZSBsaXR0bGUgcml2ZXJzIHJ1bm5pbmcgaW50byBvbmUgbGFrZSw8L2VtPiBhbGwgY29udHJpYnV0aW5nIHRvIHRoZSBzYW1lIGJpZyBwcm9qZWN0LiBUaGUgc2FtZSBpcyB0cnVlIGluIG1hbnkgaW5kdXN0cmllcyZtZGFzaDt0aG91Z2ggc2FkbHksIGV2ZW4gaW5zaWRlIHRoZSBzYW1lIGNvbXBhbnksIHBlb3BsZSBzZWxmaXNobHkgZm9yZ2V0IHRoZXkncmUgd29ya2luZyB0b2dldGhlci4gQXMgaHVtYW4gYmVpbmdzIHdlIGFsbCBicmVhdGhlIHRoZSBhdG9tcyB0aGF0IG1ha2UgdXAgb3VyIGFuY2VzdG9ycyBhbmQgZmxvdyBpbnRvIHRoZSBzYW1lIGVhcnRoIHdoZW4gd2UgZGllLjwvcD48cD5PdmVyIGFuZCBvdmVyIGFnYWluLCB0aGUgU3RvaWNzIHJlbWluZGVkIHRoZW1zZWx2ZXMgb2YgdGhlIGludGVyY29ubmVjdGVkbmVzcyBvZiBsaWZlLiBQZXJoYXBzIHRoYXQgd2FzIGJlY2F1c2UgbGlmZSBpbiBHcmVlY2UgYW5kIFJvbWUgd2FzIHBhcnRpY3VsYXJseSBoYXJzaC4gQW5pbWFscyBhbmQgcGVvcGxlIHdlcmUgc2xhdWdodGVyZWQgc2Vuc2VsZXNzbHkgdG8gYW11c2UgdGhlIG1hc3NlcyBpbiB0aGUgQ29sb3NzZXVtIChldmVudHMgbGFtZW50ZWQgaW4gdGhlIFN0b2ljIHdyaXRpbmdzKS4gQ291bnRyaWVzIHdlcmUgY29ucXVlcmVkIGFuZCBpdHMgY2l0aXplbnMgc29sZCBpbnRvIHNsYXZlcnkgdG8gZXhwYW5kIHRoZSBlbXBpcmUgKHRoZSBmdXRpbGl0eSBvZiB3aGljaCB0aGUgU3RvaWNzIGFsc28gbGFtZW50ZWQpLiBUaGlzIGtpbmQgb2YgY3J1ZWx0eSBpcyBwb3NzaWJsZSBvbmx5IHdoZW4gd2UgZm9yZ2V0IGhvdyB3ZSdyZSByZWxhdGVkIHRvIG91ciBmZWxsb3cgaHVtYW4gYmVpbmdzIGFuZCB0aGUgZW52aXJvbm1lbnQuPC9wPjxwPlRvZGF5LCB0YWtlIGEgbW9tZW50IHRvIHJlbWVtYmVyIHRoYXQgd2UgYXJlIHdvdmVuIHRvZ2V0aGVyIHRoYXQgZWFjaCBvZiB1cyBwbGF5cyBhIHJvbGUgKGdvb2QsIGJhZCwgb3IgdWdseSkgaW4gdGhpcyB3b3JsZC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBbGwgRm9yIE9uZSwgT25lIEZvciBBbGwiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGF0IHdoaWNoIGlzbid0IGdvb2QgZm9yIHRoZSBoaXZlLCBpc24ndCBnb29kIGZvciB0aGUgYmVlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA2LjU0Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkluaGVyZW50IGluIHRoZSBTdG9pYyBjb25jZXB0IG9mIDxlbT5zeW1wYXRoZWlhPC9lbT4gaXMgdGhlIG5vdGlvbiBvZiBhbiBpbnRlcmNvbm5lY3RlZCBjb3Ntb3MgaW4gd2hpY2ggZXZlcnl0aGluZyBpbiB0aGUgdW5pdmVyc2UgaXMgcGFydCBvZiBhIGxhcmdlciB3aG9sZS4gTWFyY3VzIEF1cmVsaXVzIHdhcyBvbmUgb2YgdGhlIGZpcnQgd3JpdGVycyB0byBhcnRpY3VsYXRlIHRoZSBub3Rpb24gb2YgY29zbW9wb2xpdGFuaXNtICZtZGFzaDtzYXlpbmcgdGhhdCBoZSB3YXMgYSBjaXRpemVuIG9mIHRoZSB3b3JsZCwgbm90IGp1c3QgUm9tZS48L3A+PHA+VGhlIGlkZWEgdGhhdCB5b3UncmUgYSBiZWUgaW4gdGhlIGhpdmUgaXMgYSByZW1pbmRlciBvZiB0aGlzIHBlcnNwZWN0aXZlLiBNYXJjdXMgZXZlbiBzdGF0ZXMgdGhlIHJldmVyc2Ugb2YgdGhhdCBpZGVhIGxhdGVyIGluIGhpcyA8ZW0+TWVkaXRhdGlvbnM8L2VtPiwganVzdCBzbyBoZSBkb2Vzbid0IGZvcmdldDogPHE+VGhhdCB3aGljaCBkb2Vzbid0IGhhcm0gdGhlIGNvbW11bml0eSBjYW4ndCBoYXJtIHRoZSBpbmRpdmlkdWFsLjwvcT48L3A+PHA+SnVzdCBiZWNhdXNlIHNvbWV0aGluZyBpcyBiYWQgZm9yIHlvdSBkb2Vzbid0IG1lYW4gaXQncyBiYWQgZm9yIGV2ZXJ5b25lLiBKdXN0IGJlY2F1c2Ugc29tZXRoaW5nIGlzIGdvb2QgZm9yIHlvdSBkZWZpbml0ZWx5IGRvZXNuJ3QgbWVhbiBpdHMgZ29vZCBmb3IgZXZlcnlvbmUuIFRoaW5rIG9mIHRoZSBoZWRnZSBmdW5kIG1hbmFnZXJzIHdobyBiZXQgbWFzc2l2ZWx5IGFnYWluc3QgdGhlIGVjb25vbXkmbWRhc2g7dGhleSBwcm9maXRlZCBieSByb290aW5nIGZvciBlc3NlbnRpYWxseSBldmVyeW9uZSBhbmQgZXZlcnl0aGluZyBlbHNlIHRvIGZhaWwuIElzIHRoYXQgd2hvIHlvdSB3YW50IHRvIGJlPyBBIGdvb2QgU3RvaWMgdW5kZXJzdGFuZHMgdGhhdCBwcm9wZXIgaW1wdWxzZXMsIGFuZCB0aGUgcmlnaHQgYWN0aW9ucyB0aGF0IGFyaXNlIGZyb20gdGhlbSwgbmF0dXJhbGx5IGNhcnJ5IHRoZSBnb29kIG9mIHRoZSB3aG9sZSwgd2hpY2ggaXMgdGhlIHdpc2UgcGVyc29uJ3Mgb25seSBnb29kLiBDb252ZXJzZWx5LCBnb29kIGFuZCB3aXNlIGFjdGlvbnMgYnkgdGhlIHdob2xlIGFyZSB3aGF0J3MgZ29vZCBmb3IgdGhlIGluZGl2aWR1YWwuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciA1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiV29yZHMgQ2FuJ3QgQmUgVW5zYWlkIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQmV0dGVyIHRvIHRyaXAgd2l0aCB0aGUgZmVldCB0aGFuIHdpdGggdGhlIHRvbmd1ZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJaZW5vLCBRVU9URUQgSU4gRElPR0VORVMgTEFFUlRJVVMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJMaXZlcyBvZiB0aGUgRW1pbmVudCBQaGlsb3NvcGhlcnMsIDcuMS4yNiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Zb3UgY2FuIGFsd2F5cyBnZXQgdXAgYWZ0ZXIgeW91IGZhbGwgYnV0IHJlbWVtYmVyLCB3aGF0IGhhcyBiZWVuIHNhaWQgY2FuIG5ldmVyIGJlIHVuc2FpZC4gIEVzcGVjaWFsbHkgY3J1ZWwgYW5kICBodXJ0ZnVsIHRoaW5ncy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJMb29rIE91dCBmb3IgRWFjaCBPdGhlciIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkl0J3MgaW4ga2VlcGluZyB3aXRoIE5hdHVyZSB0byBzaG93IG91ciBmcmllbmRzIGFmZmVjdGlvbiBhbmQgdG8gY2VsZWJyYXRlIHRoZWlyIGFkdmFuY2VtZW50LCBhcyBpZiBpdCB3ZXJlIG91ciB2ZXJ5IG93bi4gRm9yIGlmIHdlIGRvbid0IGRvIHRoaXMsIHZpcnR1ZSwgd2hpY2ggaXMgc3RyZW5ndGhlbmVkIG9ubHkgYnkgZXhlcmNpc2luZyBvdXIgcGVyY2VwdGlvbnMsIHdpbGwgbm8gbG9uZ2VyIGVuZHVyZSBpbiB1cy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCAxMDkuMTUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+V2F0Y2hpbmcgb3RoZXIgcGVvcGxlIHN1Y2NlZWQgaXMgb25lIG9mIHRoZSB0b3VnaGVzdCB0aGluZ3MgdG8gZG8mbWRhc2g7ZXNwZWNpYWxseSBpZiB3ZSBhcmUgbm90IGRvaW5nIHdlbGwgb3Vyc2VsdmVzLiBJbiBvdXIgaHVudGVyLWdhdGhlcmVyIG1pbmRzLCB3ZSBzdXNwZWN0IHRoYXQgbGlmZSBpcyBhIHplcm8tc3VtIGdhbWUmbWRhc2g7dGhhdCBmb3Igc29tZW9uZSB0byBoYXZlIG1vcmUgbWVhbnMgdGhhdCB3ZSBtaWdodCBlbmQgdXAgd2l0aCBsZXNzLjwvcD48cD5CdXQgbGlrZSBhbGwgcGFydHMgb2YgcGhpbG9zb3BoeSwgZW1wYXRoeSBhbmQgc2VsZmxlc3NuZXNzIGFyZSBhIG1hdHRlciBvZiBwcmFjdGljZS4gQXMgU2VuZWNhIG9ic2VydmVkLCBpdCdzIHBvc3NpYmxlIHRvIGxlYXJuIHRvIDxxPnJlam9pY2UgaW4gYWxsIHRoZWlyIHN1Y2Nlc3NlcyBhbmQgYmUgbW92ZWQgYnkgdGhlaXIgZXZlcnkgZmFpbHVyZS48L3E+IFRoaXMgaXMgd2hhdCBhIHZpcnR1b3VzIHBlcnNvbiBkb2VzLjwvcD48cD5UaGV5IHRlYWNoIHRoZW1zZWx2ZXMgdG8gYWN0aXZlbHkgY2hlZXIgZm9yIG90aGVyIHBlb3BsZSZtZGFzaDtldmVuIGluIGNhc2VzIHdoZXJlIHRoYXQgbWlnaHQgY29tZSBhdCB0aGVpciBvd24gZXhwZW5zZSZtZGFzaDthbmQgdG8gcHV0IGFzaWRlIGplYWxvdXN5IGFuZCBwb3NzZXNzaXZlbmVzcy4gWW91IGNhbiBkbyB0aGF0IHRvby48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBIFNlbGZpc2ggUmVhc29uIHRvIGJlIEdvb2QiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgcGVyc29uIHdobyBkb2VzIHdyb25nLCBkb2VzIHdyb25nIHRvIHRoZW1zZWx2ZXMuIFRoZSB1bmp1c3QgcGVyc29uIGlzIHVuanVzdCB0byB0aGVtc2VsdmVzJm1kYXNoO21ha2luZyB0aGVtc2VsdmVzIGV2aWwuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDkuNCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgbmV4dCB0aW1lIHlvdSBkbyBzb21ldGhpbmcgd3JvbmcsIHRyeSB0byByZW1lbWJlciBob3cgaXQgbWFkZSB5b3UgZmVlbC4gIFJhcmVseSBkb2VzIG9uZSBzYXksIDxxPkkgZmVlbCBncmVhdCE8L3E+PC9wPjxwPlRoZXJlIGlzIGEgcmVhc29uIHRoZXJlJ3Mgb2Z0ZW4gdm9taXQgYXQgY3JpbWUgc2NlbmVzLiBJbnN0ZWFkIG9mIHRoZSBjYXRoYXJzaXMgdGhlIHBlcnNvbiB0aG91Z2h0IHRoZXknZCBmZWVsIHdoZW4gdGhleSBsZXQgdGhlbXNlbHZlcyBnZXQgb3V0IG9mIGNvbnRyb2wgb3Igd2hlbiB0aGV5IGdvdCB0aGVpciByZXZlbmdlLCB0aGV5IGVuZGVkIHVwIG1ha2luZyB0aGVtc2VsdmVzIHNpY2suIFdlIGZlZWwgYSB2ZXJzaW9uIG9mIHRoaXMgd2hlbiB3ZSBsaWUsIHdoZW4gd2UgY2hlYXQsIHdoZW4gd2Ugc2NyZXcgc29tZW9uZSBvdmVyLjwvcD48cD5TbyBpbiB0aGF0IHNwbGl0IHNlY29uZCBiZWZvcmUgeW91ciBpbGwtZ290dGVuIGdhaW5zIGtpY2sgaW4sIGFzazogPGVtPkhvdyBkbyBJIGZlZWwgYWJvdXQgbXlzZWxmPzwvZW0+IElzIHRoYXQgbW9tZW50IHdoZW4gZmVhciByaXNlcyBpbiB5b3VyIHRocm9hdCBiZWNhdXNlIHlvdSBzdXNwZWN0IHlvdSBtYXkgZ2V0IGNhdWdodCByZWFsbHkgd29ydGggaXQ/PC9wPjxwPlNlbGYtYXdhcmVuZXNzIGFuZCB3cm9uZ2RvaW5nIHJhcmVseSBnbyB0b2dldGhlci4gSWYgeW91IG5lZWQgYSBzZWxmaXNoIHJlYXNvbiB0byBub3QgZG8gd3JvbmcmbWRhc2g7cHV0IHlvdXJzZWxmIGluIHRvdWNoIHdpdGggdGhlc2UgZmVlbGluZ3MuIFRoZXkncmUgYSBwb3dlcmZ1bCBkaXNpbmNlbnRpdmUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciA4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQSBIaWdoZXIgUGxlYXN1cmUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJZZXMsIGdldHRpbmcgeW91ciB3aXNoIHdvdWxkIGhhdmUgYmVlbiBzbyBuaWNlLiBCdXQgaXNuJ3QgdGhhdCBleGFjdGx5IHdoeSBwbGVhc3VyZSB0cmlwcyB1cyB1cD8gSW5zdGVhZCwgc2VlIGlmIHRoZXNlIHRoaW5ncyBtaWdodCBiZSBldmVyIG5pY2VyJm1kYXNoO2EgZ3JlYXQgc291bCwgZnJlZWRvbSwgaG9uZXN0eSwga2luZG5lc3MsIHNhaW50bGluZXNzLiBGb3IgdGhlcmUgaXMgbm90aGluZyBzbyBwbGVhc2luZyBhcyB3aXNkb20gaXRzZWxmLCB3aGVuIHlvdSBjb25zaWRlciBob3cgc3VyZS1mb290ZWQgYW5kIGVmZm9ydGxlc3MgdGhlIHdvcmtzIG9mIHVuZGVyc3RhbmRpbmcgYW5kIGtub3dsZWRnZSBhcmUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDUuOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Ob2JvZHkgY2FuIGFyZ3VlIHRoYXQgcGxlYXN1cmUgZG9lc24ndCA8ZW0+ZmVlbDwvZW0+IGdvb2QuIFRoYXQncyBwcmV0dHkgbXVjaCB3aGF0IGl0IGRvZXMgYnkgZGVmaW5pdGlvbi48L3A+PHA+QnV0IHRvZGF5IE1hcmN1cyBBdXJlbGl1cyBpcyByZW1pbmRpbmcgeW91Jm1kYXNoO2p1c3QgYXMgaGUgcmVtaW5kZWQgaGltc2VsZiZtZGFzaDt0aGF0IHRob3NlIHBsZWFzdXJlcyBoYXJkbHkgc3RhbmQgdXAgdG8gdmlydHVlLiBUaGUgZG9wYW1pbmUgcnVzaCB0aGF0IGNvbWVzIGZyb20gc2V4IGlzIG1vbWVudGFyeS4gU28gaXMgdGhlIHByaWRlIG9mIGFuIGFjY29tcGxpc2htZW50IG9yIHRoZSBoZWFydHkgYXBwbGF1c2Ugb2YgYSBjcm93ZC4gVGhlc2UgcGxlYXN1cmVzIGFyZSBwb3dlcmZ1bCwgYnV0IHRoZXkgd2VhciBvZmYgYW5kIGxlYXZlIHVzIHdhbnRpbmcgbW9yZS4gV2hhdCBsYXN0IGxvbmdlciAoYW5kIHJlbWFpbnMgbW9yZSB3aXRoaW4gb3VyIGNpcmNsZSBvZiBjb250cm9sKT8gV2lzZG9tLCBnb29kIGNoYXJhY3Rlciwgc29icmlldHksIGFuZCBraW5kbmVzcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTZXQgdGhlIFN0YW5kYXJkcyBhbmQgVXNlIFRoZW0iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXaGVuIHRoZSBzdGFuZGFyZHMgaGF2ZSBiZWVuIHNldCwgdGhpbmdzIGFyZSB0ZXN0ZWQgYW5kIHdlaWdoZWQuIEFuZCB0aGUgd29yayBvZiBwaGlsb3NvcGh5IGlzIGp1c3QgdGhpcywgdG8gZXhhbWluZSBhbmQgdXBob2xkIHRoZSBzdGFuZGFyZHMsIGJ1dCB0aGUgd29yayBvZiBhIHRydWx5IGdvb2QgcGVyc29uIGlzIGluIHVzaW5nIHRob3NlIHN0YW5kYXJkcyB3aGVuIHRoZXkga25vdyB0aGVtLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDIuMTEuMjMtMjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+V2UgZ28gdGhyb3VnaCBvdXIgZGF5cyByZXNwb25kaW5nIGFuZCByZWFjdGluZywgYnV0IGl0J3MgcmFyZSB0byByZWFsbHkgcGF1c2UgYW5kIGFzazogPGVtPklzIHRoaXMgdGhpbmcgSSdtIGFib3V0IHRvIGRvIGNvbnNpc3RlbnQgd2l0aCB3aGF0IEkgYmVsaWV2ZT88L2VtPiBPciBiZXR0ZXI6IDxlbT5JcyB0aGlzIHRoZSBraW5kIG9mIHRoaW5nIHRoZSBwZXJzb24gSSB3b3VsZCBsaWtlIHRvIGJlIHNob3VsZCBkbz88L2VtPiA8cD5UaGUgd29yayBvZiBsaXZpbmcgaXMgdG8gc2V0IHN0YW5kYXJkcyBhbmQgdGhlbiA8ZW0+bm90PC9lbT4gY29tcHJvbWlzZSB0aGVtLiBXaGVuIHlvdSdyZSBicnVzaGluZyB5b3VyIHRlZXRoLCBjaG9vc2luZyB5b3VyIGZyaWVuZHMsIGxvc2luZyB5b3VyIHRlbXBlciwgZmFsbGluZyBpbiBsb3ZlLCBpbnN0cnVjdGluZyB5b3VyIGNoaWxkLCBvciB3YWxraW5nIHlvdXIgZG9nJm1kYXNoO2FsbCBvZiB0aGVzZSBhcmUgb3Bwb3J0dW5pdGllcy48L3A+PHA+Tm90LCA8ZW0+SSB3YW50IHRvIGRvIGdvb2Q8L2VtPiZtZGFzaDt0aGF0J3MgYW4gZXhjdXNlLiBCdXQsIDxlbT5JIHdpbGwgZG8gZ29vZCBpbiB0aGlzIHBhcnRpY3VsYXIgaW5zdGFuY2UsIHJpZ2h0IG5vdy48L2VtPiBTZXQgYSBzdGFuZGFyZDsgaG9sZCBmYXN0IHRvIGl0LiBUaGF0J3MgYWxsIHRoZXJlIGlzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJSZXZlcmVuY2UgYW5kIEp1c3RpY2UiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJMZWF2ZSB0aGUgcGFzdCwgbGV0IHRoZSBncmFuZCBkZXNpZ24gdGFrZSBjYXJlIG9mIHRoZSBmdXR1cmUsIGFuZCBpbnN0ZWFkIG9ubHkgcmlnaHRseSBndWlkIHRoZSBwcmVzZW50IHRvIHJldmVyZW5jZSBhbmQganVzdGljZS4gUmV2ZXJlbmNlIHNvIHRoYXQgeW91J2xsIGxvdmUgd2hhdCB5b3UndmUgYmVlbiBhbGxvdHRlZCwgZm9yIG5hdHVyZSBicm91Z2h0IHlvdSBib3RoIHRvIGVhY2ggb3RoZXIuIEp1c3RpY2Ugc28gdGhhdCB5b3UnbGwgc3BlYWsgdGhlIHRydXRoIGZyZWVseSBhbmQgd2l0aG91dCBldmFzaW9uLCBhbmQgc28gdGhhdCB5b3UnbGwgYWN0IG9ubHkgYXMgdGhlIGxhdyBhbmQgdmFsdWUgb2YgdGhpbmdzIHJlcXVpcmUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDEyLjEiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+QXVsdXMgR2VsbGl1cyByZWxhdGVzIHRoYXQgRXBpY3RldHVzIG9uY2Ugc2FpZCwgPHE+SWYgYW55b25lIHdvdWxkIHRha2UgdHdvIHdvcmRzIHRvIGhlYXIgYW5kIHRha2UgcGFpbnMgdG8gZ292ZXJuIGFuZCB3YXRjaCBvdmVyIHRoZW1zZWx2ZXMgYnkgdGhlbSwgdGhleSB3aWxsIGxpdmUgYW4gaW1wZWNjYWJsZSBhbmQgaW1tZW5zZWx5IHRyYW5xdWlsIGxpZmUuIFRoZSB0d28gd29yZHMgYXJlOiBwZXJzaXN0IGFuZCByZXNpc3QuPC9xPiBUaGF0J3MgZ3JlYXQgYWR2aWNlLiBCdXQgd2hhdCBwcmluY2lwbGVzIHNob3VsZCBkZXRlcm1pbmUgd2hhdCB3ZSBwZXJzaXN0IGluIGFuZCB3aGF0IG91Z2h0IHRvIHJlc2lzdD88L3A+PHA+TWFyY3VzIHN1cHBsaWVzIHRoYXQgYW5zd2VyOiByZXZlcmVuY2UgYW5kIGp1c3RpY2UuIEluIG90aGVyIHdvcmRzLCB2aXJ0dWUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkhvbmVzdHkgYXMgb3VyIERlZmF1bHQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJIb3cgcm90dGVuIGFuZCBmcmF1ZHVsZW50IHdoZW4gcGVvcGxlIHNheSB0aGV5IGludGVuZCB0byAnZ2l2ZSBpdCB0byB5b3Ugc3RyYWlnaHQuJyBXaGF0IGFyZSB5b3UgdXAgdG8sIGRlYXIgZnJpZW5kPyBJdCBzaG91bGRuJ3QgbmVlZCB5b3VyIGFubm91bmNlbWVudCwgYnV0IGJlIHJlYWRpbHkgc2VlbiwgYXMgaWYgd3JpdHRlbiBvbiB5b3VyIGZvcmVoZWFkLCBoZWFyZCBpbiB0aGUgcmluZyBvZiB5b3VyIHZvaWNlLCBhIGZsYXNoIGluIHlvdSBleWVzJm1kYXNoO2p1c3QgYXMgdGhlIGJlbG92ZWQgc2VlcyBpdCBhbGwgaW4gdGhlIGxvdmVyJ3MgZ2xhbmNlLiBJbiBzaG9ydCwgdGhlIHN0cmFpZ2h0LWZvcndhcmQgYW5kIGdvb2QgcGVyc29uIHNob3VsZCBiZSBsaWtlIGEgc21lbGx5IGdvYXQmbWRhc2g7eW91IGtub3cgd2hlbiB0aGV5IGFyZSBpbiB0aGUgcm9vbSB3aXRoIHlvdS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgMTEuMTUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+QWxsIG9mIHVzIGhhdmUgdXNlZCBwaHJhc2VzIGxpa2UgdGhhdCBiZWZvcmUuPHE+SSdtIGdvaW5nIHRvIGJlIHN0cmFpZ2h0LWZvcndhcmQgd2l0aCB5b3UgaGVyZS4uLjwvcT4gPHE+SSdsbCBiZSBob25lc3QuLi48L3E+IDxxPk5vIGRpc3Jlc3BlY3QgYnV0Li4uPC9xPiBFbXB0eSBleHByZXNzaW9ucyBvciBub3QsIHRoZXkgcHJvbXB0IHRoZSBxdWVzdGlvbjogSWYgeW91IGhhdmUgdG8gcHJlZmFjZSB5b3VyIHJlbWFya3Mgd2l0aCBpbmRpY2F0b3JzIG9mIGhvbmVzdHkgb3IgZGlyZWN0bmVzcywgd2hhdCBkb2VzIHRoYXQgc2F5IGFib3V0IGV2ZXJ5dGhpbmcgZWxzZSB5b3Ugc2F5PyBJZiB5b3Ugc2F5IHlvdSdyZSBiZWluZyBob25lc3QgPGVtPm5vdzwvZW0+LCBkb2VzIHRoYXQgbWVhbiB5b3UgdXN1YWxseSBhcmVuJ3Q/PC9wPjxwPldoYXQgaWYsIGluc3RlYWQsIHlvdSBjdWx0aXZhdGVkIGEgbGlmZSBhbmQgcmVwdXRhdGlvbiBpbiB3aGljaCBob25lc3R5IHdhcyBhcyBiYW5rYWJsZSBhcyBhIG5vdGUgZnJvbSB0aGUgVS5TLiBUcmVhc3VyeSwgYXMgZW1waGF0aWMgYW5kIGV4cGxpY2l0IGFzIGEgY29udHJhY3QsIGFzIHBlcm1hbmVudCBhcyBhIHRhdHRvbz8gTm90IG9ubHkgd291bGQgaXQgc2F2ZSB5b3UgZnJvbSBuZWVkaW5nIHRvIHVzZSB0aGUgcmVhc3N1cmFuY2VzIHRoYXQgb3RoZXIsIGxlc3Mgc2NydXB1bG91cyBwZW9wbGUgbXVzdCBlbmdhZ2UgaW4sIGl0IHdpbGwgbWFrZSB5b3UgYSBiZXR0ZXIgcGVyc29uLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBbHdheXMgTG92ZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkhlY3RvIHNheXMsIDxxPkkgY2FuIHRlYWNoIHlvdSBhIGxvdmUgcG90aW9uIG1hZGUgd2l0aG91dCBhbnkgZHJ1Z3MsIGhlcmJzLCBvciBzcGVjaWFsIHNwZWxsJm1kYXNoO2lmIHlvdSB3b3VsZCBiZSBsb3ZlZCwgbG92ZS48L3E+IiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTW9yYWwgTGV0dGVycywgOS42Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkluIDE5OTIsIEJhcmJhcmEgSm9yZGFuIGFkZHJlc3NlZCB0aGUgRGVtb2NyYXRpYyBOYXRpb25hbCBDb252ZW50aW9uIGFuZCByYWlsZWQgYWdhaW5zdCB0aGUgZ3JlZWQgYW5kIHNlbGZpc2huZXNzIGFuZCBkaXZpc2l2ZW5lc3Mgb2YgdGhlIHByZXZpb3VzIGRlY2FkZS4gUGVvcGxlIHdlcmUgcmVhZHkgZm9yIGEgY2hhbmdlLiA8cT5DaGFuZ2UgaXQgdG8gd2hhdD88L3E+IHNoZSBhc2tlZC4gPHE+Q2hhbmdlIHRoYXQgZW52aXJvbm1lbnQgb2YgdGhlIDgwcyB0byBhbiBlbnZpcm9ubWVudCB3aGljaCBpcyBjaGFyYWN0ZXJpemVkIGJ5IGEgZGV2b3Rpb24gdG8gdGhlIHB1YmxpYyBpbnRlcmVzdCwgcHVibGljIHNlcnZpY2UsIHRvbGVyYW5jZSwgYW5kIGxvdmUuIExvdmUuIExvdmUuIExvdmUuPC9xPjwvcD48cD5Mb3ZlLiBMb3ZlLiBMb3ZlLiBMb3ZlLiBXaHk/IEJlY2F1c2UsIGFzIHRoZSBCZWF0bGVzIHB1dCBpdCwgPHE+SW4gdGhlIGVuZCwgdGhlIGxvdmUgeW91IHRha2UgaXMgZXF1YWwgdG8gdGhlIGxvdmUgeW91IG1ha2UuPC9xPiBOb3QganVzdCBpbiBwb2xpdGljcywgbm90IGp1c3QgaW4gdG9sZXJhbmNlLCBidXQgaW4gb3VyIHBlcnNvbmFsIGxpdmVzLiBUaGVyZSBpcyBhbG1vc3Qgbm8gc2l0dWF0aW9uIGluIHdoaWNoIGhhdHJlZCBoZWxwcy4gWWV0IGFsbW9zdCBldmVyeSBzaXR1YXRpb24gaXMgbWFkZSBiZXR0ZXIgYnkgbG92ZSZtZGFzaDtvciBlbXBhdGh5LCB1bmRlcnN0YW5kaW5nLCBhcHByZWNpYXRpb24mbWRhc2g7ZXZlbiBzaXR1YXRpb25zIGluIHdoaWNoIHlvdSBhcmUgaW4gb3Bwb3NpdGlvbiB0byBzb21lb25lLjwvcD48cD5BbmQgd2hvIGtub3dzLCB5b3UgbWlnaHQganVzdCBnZXQgc29tZSBvZiB0aGF0IGxvdmUgYmFjay48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDEzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiUmV2ZW5nZSBpcyBhIERpc2ggQmVzdCBOb3QgU2VydmVkIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhlIGJlc3Qgd2F5IHRvIGF2ZW5nZSB5b3Vyc2VsZiBpcyB0byBub3QgYmUgbGlrZSB0aGF0LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA2LjYiDQogICAgICAgICAgfSwNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSG93IG11Y2ggYmV0dGVyIHRvIGhlYWwgdGhhbiBzZWVrIHJldmVuZ2UgZnJvbSBpbmp1cnkuIFZlbmdlYW5jZSB3YXN0ZXMgYSBsb3Qgb2YgdGltZSBhbmQgZXhwb3NlcyB5b3UgdG8gbWFueSBtb3JlIGluanVyaWVzIHRoYW4gdGhlIGZpcnN0IHRoYXQgc3BhcmtlZCBpdC4gQW5nZXIgYWx3YXlzIG91dGxhc3RzIGh1cnQuIEJlc3QgdG8gdGFrZSB0aGUgb3Bwb3NpdGUgY291cnNlLiBXb3VsZCBhbnlvbmUgdGhpbmsgaXQgbm9ybWFsIHRvIHJldHVybiBhIGtpY2sgdG8gYSBtdWxlIG9yIGEgYml0ZSB0byBhIGRvZz8iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiBBbmdlciwgMy4yNy4yIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkxldCdzIHNheSB0aGF0IHNvbWVvbmUgaGFzIHRyZWF0ZWQgeW91IHJ1ZGVseS4gTGV0J3Mgc2F5IHNvbWVvbmUgZ290IHByb21vdGVkIGFoZWFkIG9mIHlvdSBiZWNhdXNlIHRoZXkgdG9vayBjcmVkaXQgZm9yIHlvdXIgd29yayBvciBkaWQgc29tZXRoaW5nIGRpc2hvbmVzdC4gSXQncyBuYXR1cmFsIHRvIHRoaW5rOiA8ZW0+T2gsIHRoYXQncyBob3cgdGhlIHdvcmxkIHdvcmtzPC9lbT4sIG9yIDxlbT5PbmUgZGF5IGl0IHdpbGwgYmUgbXkgdHVybiB0byBiZSBsaWtlIHRoYXQ8L2VtPi4gT3IgbW9zdCBjb21tb246IDxlbT5JJ2xsIGdldCB0aGVtIGZvciB0aGlzPC9lbT4uIEV4Y2VwdCB0aGVzZSBhcmUgdGhlIHdvcnN0IHBvc3NpYmxlIHJlc3BvbnNlcyB0byBiYWQgYmVoYXZpb3IuPC9wPjxwPkFzIE1hcmN1cyBhbmQgU2VuZWNhIGJvdGggd3JvdGUsIHRoZSBwcm9wZXIgcmVzcG9uc2UmbWRhc2g7aW5kZWVkIHRoZSBiZXN0IHJldmVuZ2UmbWRhc2g7aXMgdG8gZXhhY3Qgbm8gcmV2ZW5nZSBhdCBhbGwuIElmIHNvbWVvbmUgdHJlYXRzIHlvdSBydWRlbHkgYW5kIHlvdSByZXNwb25kIHdpdGggcnVkZW5lc3MsIHlvdSBoYXZlIG5vdCBkb25lIGFueXRoaW5nIGJ1dCBwcm92ZSB0byB0aGVtIHRoYXQgdGhleSB3ZXJlIGp1c3RpZmllZCBpbiB0aGVpciBhY3Rpb25zLiBJZiB5b3UgbWVldCBvdGhlciBwZW9wbGUncyBkaXNob25lc3R5IHdpdGggZGlzaG9uZXN0eSBvZiB5b3VyIG93biwgZ3Vlc3Mgd2hhdD8gWW91J3JlIHByb3ZpbmcgdGhlbSByaWdodCZtZGFzaDtub3cgZXZlcnlvbmUgPGVtPmlzPC9lbT4gYSBsaWFyLjwvcD48cD5JbnN0ZWFkLCB0b2RheSwgbGV0J3Mgc2VlayB0byBiZSBiZXR0ZXIgdGhhbiB0aGUgdGhpbmdzIHRoYXQgZGlzYXBwb2ludCBvciBodXJ0IHVzLiBMZXQncyB0cnkgdG8gYmUgdGhlIGV4YW1wbGUgd2UnZCBsaWtlIG90aGVycyB0byBmb2xsb3cuIEl0J3MgYXdmdWwgdG8gYmUgYSBjaGVhdCwgdG8gYmUgc2VsZmlzaCwgdG8gZmVlbCB0aGUgbmVlZCB0byBpbmZsaWN0IHBhaW4gb24gb3VyIGZlbGxvdyBodW1hbiBiZWluZ3MuIE1lYW53aGlsZSwgbGl2aW5nIG1vcmFsbHkgYW5kIHdlbGwgaXMgcXVpdGUgbmljZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDE0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgR2V0IE1hZCwgSGVscCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkFyZSB5b3UgYW5ncnkgd2hlbiBzb21lb25lJ3MgYXJtcGl0cyBzdGluayBvciB3aGVuIHRoZWlyIGJyZWF0aCBpcyBiYWQ/IFdoYXQgd291bGQgYmUgdGhlIHBvaW50PyBIYXZpbmcgc3VjaCBhIG1vdXRoIGFuZCBzdWNoIGFybXBpdHMsIHRoZXJlJ3MgZ29pbmcgdG8gYmUgYSBzbWVsbCBlbWFuYXRpbmcuIFlvdSBzYXksIHRoZXkgbXVzdCBoYXZlIHNlbnNlLCBjYW4ndCB0aGV5IHRlbGwgaG93IHRoZXkgYXJlIG9mZmVuZGluZyBvdGhlcnM/IFdlbGwsIHlvdSBoYXZlIHNlbnNlIHRvbywgY29uZ3JhdHVsYXRpb25zISBTbywgdXNlIHlvdXIgbmF0dXJhbCByZWFzb24gdG8gYXdha2VuIHRoZWlycywgc2hvdyB0aGVtLCBjYWxsIGl0IG91dC4gSWYgdGhlIHBlcnNvbiB3aWxsIGxpc3RlbiwgeW91IHdpbGwgaGF2ZSBjdXJlZCB0aGVtIHdpdGhvdXQgdXNlbGVzcyBhbmdlci4gTm8gZHJhbWEgbm9yIHVuc2VlbWx5IHNob3cgcmVxdWlyZWQuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDUuMjgiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIHBlcnNvbiBzaXR0aW5nIG5leHQgdG8geW91IG9uIHRoZSBwbGFuZSwgdGhlIG9uZSB3aG8gaXMgbG91ZGx5IGNoYXR0ZXJpbmcgYW5kIGtub2NraW5nIGFyb3VuZCBpbiB5b3VyIHNwYWNlPyBUaGUgb25lIHlvdSdyZSBncmluZGluZyB5b3VyIHRlZXRoIGFib3V0LCBoYXRpbmcgZnJvbSB0aGUgZGVwdGggb2YgeW91ciBzb3VsIGJlY2F1c2UgdGhleSdyZSBydWRlLCBpZ25vcmFudCwgb2Jub3hpb3VzPyBJbiB0aGVzZSBzaXR1YXRpb25zLCB5b3UgbWlnaHQgZmVlbCBpdCB0YWtlcyBldmVyeXRoaW5nIHlvdSBoYXZlIHRvIHJlc3RyYWluIHlvdXJzZWxmIGZyb20gbXVyZGVyaW5nIHRoZW0uPC9wPjxwPkl0J3MgZnVubnkgaG93IDxlbT50aGF0PC9lbT4gdGhvdWdodCBjb21lcyBpbnRvIG91ciBoZWFkcyBiZWZvcmUsIHlvdSBrbm93LCBwb2xpdGVseSBhc2tpbmcgdGhlbSB0byBzdG9wLCBvciBtYWtpbmcgdGhlIG1pbm9yIHNjZW5lIG9mIGFza2luZyBmb3IgYW4gYXdrd2FyZCBjb252ZXJzYXRpb24gdGhhdCBtaWdodCBhY3R1YWxseSBoZWxwIHRoaXMgcGVyc29uIGFuZCBtYWtlIHRoZSB3b3JsZCBhIGJldHRlciBwbGFjZS4gV2UgZG9uJ3QganVzdCB3YW50IHBlb3BsZSB0byBiZSBiZXR0ZXIsIHdlIGV4cGVjdCBpdCB0byBtYWdpY2FsbHkgaGFwcGVuJm1kYXNoO3RoYXQgd2UgY2FuIHNpbXBseSB3aWxsIG90aGVyIHBlb3BsZSB0byBjaGFuZ2UsIGJ1cm5pbmcgaG9sZXMgaW50byB0aGVpciBza3VsbCB3aXRoIG91ciBhbmdyeSBzdGFyZS48L3A+PHA+QWx0aG91Z2ggd2hlbiB5b3UgdGhpbmsgYWJvdXQgaXQgdGhhdCB3YXksIGl0IG1ha2VzIHlvdSB3b25kZXIgd2hvIHRoZSBydWRlIG9uZSBhY3R1YWxseSBpcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDE1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiU3ByZWFkIHRoZSBXb3JkIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiU29tZSBwZW9wbGUgd2l0aCBleGNlcHRpb25hbCBtaW5kcyBxdWlja2x5IGdyYXNwIHZpcnR1ZSwgb3IgcHJvZHVjZSBpdCB3aXRoaW4gdGhlbXNlbHZlcy4gQnV0IG90aGVyIGRpbSBhbmQgbGF6eSB0eXBlcywgaGluZGVyZWQgYnkgYmFkIGhhYml0cywgbXVzdCBoYXZlIHRoZWlyIHJ1c3R5IHNvdWxzIGNvbnN0YW50bHkgc2NydWJiZWQgZG93bi4uLi4gVGhlIHdlYWtlciBzb3J0cyB3aWxsIGJlIGhlbHBlZCBhbmQgbGlmdGVkIGZyb20gdGhlaXIgYmFkIG9waW5pb25zIGlmIHdlIHB1dCB0aGVtIGluIHRoZSBjYXJlIG9mIHBoaWxvc29waHkncyBwcmluY2lwbGVzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk1vcmFsIExldHRlcnMsIDk1LjM2LTM3Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlN0b2ljaXNtIGlzIG5vdCBhbiBldmFuZ2VsaWNhbCByZWxpZ2lvbi4gWW91J3JlIG5vdCBvYmxpZ2F0ZWQgdG8gc2F2ZSBhbnlvbmUmbWRhc2g7dGhlcmUncyBubyBoZWxsIGlmIGEgc291bCByZW1haW5zIGluIGlnbm9yYW5jZSBvZiB0aGUgdGVhY2hpbmdzIG9mIEVwaWN0ZXR1cyBvciBNYXJjdXMgQXVyZWxpdXMuPC9wPjxwPkJ1dCBub3cgdGhhdCB5b3UndmUgbGVhcm5lZCBhbmQgc3R1ZGllZCBhIGJldHRlciBwYXRoLCB5b3UgY2FuIGJlIG9mIHNlcnZpY2UgdG8gb3RoZXJzLiBZb3UgY2FuIHNoYXJlIHlvdXIgd2lzZG9tIG9yIGluc2lnaHQgd2l0aCBhIGZyaWVuZCBvciBzdHJhbmdlciZtZGFzaDtyZW1lbWJlcmluZyB0aGF0IGJlaGF2aW9yIGlzIGFsd2F5cyBhIGJldHRlciBleGFtcGxlIHRoYW4gYSBsZWN0dXJlLjwvcD48cD5FdmVyeW9uZSBkZXNlcnZlcyB0byBiZW5lZml0IGZyb20gPHE+cGhpbG9zb3BoeSdzIHByaW5jaXBsZXM8L3E+IGFzIFNlbmVjYSBwdXQgaXQuIElmIHlvdSBzZWUgc29tZW9uZSB3aG8gaXMgaW4gbmVlZCBvZiBoZWxwLCBvciBoYXMgYXNrZWQgZm9yIGd1aWRhbmNlLCBwcm92aWRlIGl0LiBZb3Ugb3dlIHRoZW0gdGhhdCBtdWNoLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMTYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTcHJlYWQgdGhlIFdvcmQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJTb21lIHBlb3BsZSB3aXRoIGV4Y2VwdGlvbmFsIG1pbmRzIHF1aWNrbHkgZ3Jhc3AgdmlydHVlLCBvciBwcm9kdWNlIGl0IHdpdGhpbiB0aGVtc2VsdmVzLiBCdXQgb3RoZXIgZGltIGFuZCBsYXp5IHR5cGVzLCBoaW5kZXJlZCBieSBiYWQgaGFiaXRzLCBtdXN0IGhhdmUgdGhlaXIgcnVzdHkgc291bHMgY29uc3RhbnRseSBzY3J1YmJlZCBkb3duLi4uIFRoZSB3ZWFrZXIgc29ydHMgd2lsbCBiZSBoZWxwZWQgYW5kIGxpZnRlZCBmcm9tIHRoZWlyIGJhZCBvcGluaW9ucyBpZiB3ZSBwdXQgdGhlbSBpbiB0aGUgY2FyZSBvZiBwaGlsb3NvcGh5J3MgcHJpbmNpcGxlcy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA5NS4zNi0zNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5TdG9pY2lzbSBpcyBub3QgYW4gZXZhbmdlbGljYWwgcmVsaWdpb24uIFlvdSdyZSBub3Qgb2JsaWdhdGVkIHRvIHNhdmUgYW55b25lJm1kYXNoO3RoZXJlJ3Mgbm8gcmlzayBvZiBoZWxsIGlmIGEgc291bCByZW1haW5zIGluIGlnbm9yYW5jZSBvZiB0aGUgdGVhY2hpbmdzIG9mIEVwaWN0ZXR1cyBvciBNYXJjdXMgQXVyZWxpdXMuPC9wPjxwPkJ1dCBub3cgdGhhdCB5b3UndmUgbGVhcm5lZCBhbmQgc3R1ZGllZCBhIGJldHRlciBwYXRoLCB5b3UgY2FuIGJlIG9mIHNlcnZpY2UgdG8gb3RoZXJzLiBZb3UgY2FuIHNoYXJlIHlvdXIgd2lzZG9tIG9yIGluc2lnaHQgd2l0aCBhIGZyaWVuZCBvciBzdHJhbmdlciZtZGFzaDtyZW1lbWJlcmluZyB0aGF0IGJlaGF2aW9yIGlzIGFsd2F5cyBhIGJldHRlciBleGFtcGxlIHRoYW4gYSBsZWN0dXJlLjwvcD48cD5FdmVyeW9uZSBkZXNlcnZlcyB0byBiZW5lZml0IGZyb20gPHE+cGhpbG9zb3BoeSdzIHByaW5jaXBsZXM8L3E+IGFzIFNlbmVjYSBwdXQgaXQuIElmIHlvdSBzZWUgc29tZW9uZSB3aG8gaXMgaW4gbmVlZCBvZiBoZWxwLCBvciBoYXMgYXNrZWQgZm9yIGd1aWRhbmNlLCBwcm92aWRlIGl0LiBZb3Ugb3dlIHRoZW0gdGhhdCBtdWNoLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMTciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgQmVuZWZpdCBvZiBLaW5kbmVzcyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkEgYmVuZWZpdCBzaG91bGQgYmUga2VwdCBsaWtlIGEgYnVyaWVkIHRyZWFzdXJlLCBvbmx5IHRvIGJlIGR1ZyB1cCBpbiBuZWNlc3NpdHkuLi4uTmF0dXJlIGJpZHMgdXMgdG8gZG8gd2VsbCBieSBhbGwuLi4uV2hlcmV2ZXIgdGhlcmUgaXMgYSBodW1hbiBiZWluZywgd2UgaGF2ZSBhbiBvcHBvcnR1bml0eSBmb3Iga2luZG5lc3MuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gVGhlIEhhcHB5IExpZmUsIDI0LjItMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgZmlyc3QgcGVyc29uIHlvdSBtZWV0IHRvZGF5Jm1kYXNoO3Bhc3NpbmcgYWNxdWFpbnRhbmNlIG9yIGZyaWVuZCZtZGFzaDtubyBtYXR0ZXIgdGhlIGNvbnRleHQmbWRhc2g7cG9zaXRpdmUgb3IgbmVnYXRpdmUmbWRhc2g7aXMgYW4gb3Bwb3J0dW5pdHkgZm9yIGtpbmRuZXNzLiBPciBhcyBkaWZmZXJlbnQgdHJhbnNsYXRvcnMgaGF2ZSB0YWtlbiB0aGlzIGxpbmUgZnJvbSBTZW5lY2EgdG8gbWVhbiwgaXQgaXMgYW4gb3Bwb3J0dW5pdHkgZm9yIDxlbT5iZW5lZml0PC9lbT4uIEZvciBib3RoIG9mIHlvdS4gWW91IGNhbiBzZWVrIHRvIHVuZGVyc3RhbmQgd2hlcmUgdGhleSBhcmUgY29taW5nIGZyb20uIFlvdSBjYW4gc2VlayB0byB1bmRlcnN0YW5kIHdobyB0aGV5IGFyZSwgd2hhdCB0aGV5IG5lZWQsIGFuZCB3aGF0IGZvcmNlcyBvciBpbXB1bHNlcyBtaWdodCBiZSBhY3Rpbmcgb24gdGhlbS4gQW5kIHlvdSBjYW4gdHJlYXQgdGhlbSB3ZWxsIGFuZCBiZSBiZXR0ZXIgb2ZmIGZvciBpdC48L3A+PHA+VGhlIHNhbWUgaXMgdHJ1ZSB3aXRoIHRoZSBzZWNvbmQgcGVyc29uIHlvdSBlbmNvdW50ZXIsIGFuZCB0aGUgdGhpcmQuIE9mIGNvdXJzZSwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhleSB3aWxsIHJldHVybiB0aGUgZmF2b3IsIGJ1dCB0aGF0J3Mgbm90IG91ciBjb25jZXJuLiBBcyBhbHdheXMsIHdlJ3JlIGdvaW5nIHRvIGZvY3VzIG9uIHdoYXQgd2UgY29udHJvbDogaW4gdGhpcyBjYXNlLCB0aGUgYWJpbGl0eSB0byBjaG9vc2UgdG8gcmVzcG9uZCB3aXRoIGtpbmRuZXNzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJGcmVuZW1pZXMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGVyZSdzIG5vdGhpbmcgd29yc2UgdGhhbiBhIHdvbGYgYmVmcmllbmRpbmcgYSBzaGVlcC4gQXZvaWQgZmFsc2UgZnJpZW5kc2hpcCBhdCBhbGwgY29zdHMuIElmIHlvdSBhcmUgZ29vZCwgc3RyYWlnaHRmb3J3YXJkLCBhbmQgd2VsbCBtZWFuaW5nIGl0IHNob3VsZCBzaG93IGluIHlvdXIgZXllcyBhbmQgbm90IGVzY2FwZSBub3RpY2UuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDExLjE1Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkl0J3MgcHJldHR5IG9idmlvdXMgdGhhdCBvbmUgc2hvdWxkIGtlZXAgYXdheSBmcm9tIHRoZSB3aWNrZWQgYW5kIHR3by1mYWNlZCBhcyBtdWNoIGFzIHBvc3NpYmxlJm1kYXNoO3RoZSBqZWFsb3VzIGZyaWVuZCwgdGhlIG5hcmNpc3Npc3RpYyBwYXJlbnQsIHRoZSB1bnRydXN0d29ydGh5IHBhcnRuZXIuIEF0IGZpcnN0IGdsYW5jZSwgTWFyY3VzIEF1cmVsaXVzIGlzIHJlbWluZGluZyB1cyB0byBhdm9pZCBmYWxzZSBmcmllbmRzLjwvcD48cD5CdXQgd2hhdCBpZiB3ZSB0dXJuIGl0IGFyb3VuZD8gV2hhdCBpZiwgaW5zdGVhZCwgd2UgYXNrIGFib3V0IHRoZSB0aW1lcyB0aGF0IHdlIGhhdmUgYmVlbiBmYWxzZSB0byA8ZW0+b3VyPC9lbT4gZnJpZW5kcy48L3A+PHA+V2UndmUgYWxsIGJlZW4gYSBmcmVuZW15IGF0IG9uZSBwb2ludCBvciBhbm90aGVyLiBXZSd2ZSBiZWVuIG5pY2UgdG8gdGhlaXIgZmFjZSZtZGFzaDt1c3VhbGx5IGJlY2F1c2UgdGhlcmUgd2FzIHNvbWV0aGluZyBpbiBpdCBmb3IgdXMmbWRhc2g7YnV0IGxhdGVyLCBpbiBkaWZmZXJlbnQgY29tcGFueSwgd2Ugc2FpZCBob3cgd2UgcmVhbGx5IGZlbHQuIE9yIHdlJ3ZlIHN0cnVuZyBzb21lb25lIGFsb25nLCBjYXJlZCBvbmx5IHdoZW4gdGhpbmdzIHdlcmUgZ29pbmcgd2VsbCwgb3IgZGVjbGluZWQgdG8gaGVscCBldmVuIHRob3VnaCBzb21lb25lIHJlYWxseSBuZWVkZWQgdXMuPC9wPjxwPlRoaXMgYmVoYXZpb3IgaXMgYmVuZWF0aCB1cyZtZGFzaDthbmQgd29ydGggcmVtZW1iZXJpbmcgdGhlIG5leHQgdGltZSB3ZSBhY2N1c2Ugc29tZW9uZSBlbHNlIG9mIGJlaW5nIGEgYmFkIGZyaWVuZC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDE5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiR29vZCBIYWJpdHMgRHJpdmUgT3V0IEJhZCBIYWJpdHMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJTaW5jZSBoYWJpdCBpcyBzdWNoIGEgcG93ZXJmdWwgaW5mbHVlbmNlLCBhbmQgd2UncmUgdXNlZCB0byBwdXJzdWluZyBvdXIgaW1wdWxzZXMgdG8gZ2FpbiBhbmQgYXZvaWQgb3V0c2lkZSBvdXIgb3duIGNob2ljZSwgd2Ugc2hvdWxkIHNldCBhIGNvbnRyYXJ5IGhhYml0IGFnYWluc3QgdGhhdCwgYW5kIHdoZXJlIGFwcGVhcmFuY2VzIGFyZSByZWFsbHkgc2xpcHBlcnksIHVzZSB0aGUgY291bnRlcmZvcmNlIG9mIG91ciB0cmFpbmluZy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAzLjEyLjYiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+V2hlbiBhIGRvZyBpcyBiYXJraW5nIGxvdWRseSBiZWNhdXNlIHNvbWVvbmUgaXMgYXQgdGhlIGRvb3IsIHRoZSB3b3JzdCB0aGluZyB5b3UgY2FuIGRvIGlzIHllbGwuIFRvIHRoZSBkb2csIGl0J3MgbGlrZSB5b3UncmUgYmFya2luZyB0b28hIFdoZW4gYSBkb2cgaXMgcnVubmluZyBhd2F5LCBpdCdzIG5vdCBoZWxwZnVsIHRvIGNoYXNlIGl0Jm1kYXNoO2FnYWluLCBub3cgaXQncyBsaWtlIHlvdSdyZSBib3RoIHJ1bm5pbmcuIEEgYmV0dGVyIG9wdGlvbiBpbiBib3RoIHNjZW5hcmlvcyBpcyB0byBnaXZlIHRoZSBkb2cgc29tZXRoaW5nIGVsc2UgdG8gZG8uIFRlbGwgaXQgdG8gc2l0LiBUZWxsIGl0IHRvIGdvIHRvIGl0cyBiZWQgb3Iga2VubmVsLiBSdW4gaW4gdGhlIG90aGVyIGRpcmVjdGlvbi4gQnJlYWsgdGhlIHBhdHRlcm4sIGludGVycnVwdCB0aGUgbmVnYXRpdmUgaW1wdWxzZS48L3A+PHA+VGhlIHNhbWUgZ29lcyBmb3IgdXMuIFdoZW4gYSBiYWQgaGFiaXQgcmV2ZWFscyBpdHNlbGYsIGNvdW50ZXJhY3QgaXQgd2l0aCBhIGNvbW1pdG1lbnQgdG8gYSBjb250cmFyeSB2aXJ0dWUuIEZvciBpbnN0YW5jZSwgbGV0J3Mgc2F5IHlvdSBmaW5kIHlvdXJzZWxmIHByb2NyYXN0aW5hdGluZyB0b2RheSZtZGFzaDtkb24ndCBkaWcgaW4gYW5kIGZpZ2h0IGl0LiBHZXQgdXAgYW5kIHRha2UgYSB3YWxrIHRvIGNsZWFyIHlvdXIgaGVhZCBhbmQgcmVzZXQgaW5zdGVhZC4gSWYgeW91IGZpbmQgeW91cnNlbGYgc2F5aW5nIHNvbWV0aGluZyBuZWdhdGl2ZSBvciBuYXN0eSwgZG9uJ3Qga2ljayB5b3Vyc2VsZi4gQWRkIHNvbWV0aGluZyBwb3NpdGl2ZSBhbmQgbmljZSB0byBxdWFsaWZ5IHRoZSByZW1hcmsuPC9wPjxwPk9wcG9zZSBlc3RhYmxpc2hlZCBoYWJpdHMsIGFuZCB1c2UgdGhlIGNvdW50ZXJmb3JjZSBvZiB0cmFpbmluZyB0byBnZXQgdHJhY3Rpb24gYW5kIG1ha2UgcHJvZ3Jlc3MuIElmIHlvdSBmaW5kIHlvdXJzZWxmIGN1dHRpbmcgY29ybmVycyBkdXJpbmcgYSBhIHdvcmtvdXQgb3Igb24gYSBwcm9qZWN0LCBzYXkgdG8geW91cnNlbGY6IDxxPk9LLCBub3cgSSBhbSBnb2luZyB0byBnbyBldmVuIGZ1cnRoZXIgb3IgZG8gZXZlbiBiZXR0ZXIuPC9xPjwvcD48cD5Hb29kIGhhYml0cyBoYXZlIHRoZSBwb3dlciB0byBkcml2ZSBvdXQgYmFkIGhhYml0cy4gQW5kIGhhYml0cyBhcmUgZWFzeSB0byBwaWNrIHVwJm1kYXNoO2FzIHdlIGFsbCBrbm93LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMjAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJNYXJrcyBvZiB0aGUgR29vZCBMaWZlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiWW91IGhhdmUgcHJvb2YgaW4gdGhlIGV4dGVudCBvZiB5b3VyIHdhbmRlcmluZ3MgdGhhdCB5b3UgbmV2ZXIgZm91bmQgdGhlIGFydCBvZiBsaXZpbmcgYW55d2hlcmUmbWRhc2g7bm90IGluIGxvZ2ljLCBub3IgaW4gd2VhbHRoLCBmYW1lLCBvciBpbiBhbnkgaW5kdWxnZW5jZS4gTm93aGVyZS4gV2hlcmUgaXMgaXQgdGhlbj8gSW4gZG9pbmcgd2hhdCBodW1hbiBuYXR1cmUgZGVtYW5kcy4gSG93IGlzIGEgcGVyc29uIHRvIGRvIHRoaXM/IEJ5IGhhdmluZyBwcmluY2lwbGVzIGJlIHRoZSBzb3VyY2Ugb2YgZGVzaXJlIGFuZCBhY3Rpb24uIFdoYXQgcHJpbmNpcGxlcz8gVGhvc2UgdG8gZG8gd2l0aCBnb29kIGFuZCBldmlsLCBpbmRlZWQgaW4gdGhlIGJlbGllZiB0aGF0IHRoZXJlIGlzIG5vIGdvb2QgZm9yIGEgaHVtYW4gYmVpbmcgZXhjZXB0IHdoYXQgY3JlYXRlcyBqdXN0aWNlLCBzZWxmLWNvbnRyb2wsIGNvdXJhZ2UgYW5kIGZyZWVkb20sIGFuZCBub3RoaW5nIGV2aWwgZXhjZXB0IHdoYXQgZGVzdHJveXMgdGhlc2UgdGhpbmdzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA4LjEuKDUpIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPjxlbT5XaGF0IGlzIHRoZSBtZWFuaW5nIG9mIGxpZmU/IFdoeSB3YXMgSSBib3JuPzwvZW0+IE1vc3Qgb2YgdXMgc3RydWdnbGUgd2l0aCB0aGVzZSBxdWVzdGlvbnMmbWRhc2g7c29tZXRpbWVzIHdoZW4gd2UncmUgeW91bmcsIHNvbWV0aW1lcyBub3QgdW50aWwgd2UncmUgb2xkZXIuIFJhcmVseSBkbyB3ZSBmaW5kIG11Y2ggaW4gdGhlIHdheSBvZiBkaXJlY3Rpb24uIEJ1dCB0aGF0J3Mgc2ltcGx5IGJlY2F1c2Ugd2UgbWlzcyB0aGUgcG9pbnQuIEFzIFZpa3RvciBGcmFua2wgcG9pbnRzIG91dCBpbiA8Y2l0ZT5NYW4ncyBTZWFyY2ggZm9yIE1lYW5pbmc8L2NpdGU+LCBpdCBpcyBub3Qgb3VyIHF1ZXN0aW9uIHRvIGFzay4gSW5zdGVhZCwgaXQgaXMgPGVtPndlPC9lbT4gd2hvIGFyZSBiZWluZyBhc2tlZCB0aGUgcXVlc3Rpb24uIEl0J3Mgb3VyIGxpdmVzIHRoYXQgYXJlIHRoZSBhbnN3ZXIuPC9wPjxwPk5vIGFtb3VudCBvZiB0cmF2ZWwgb3IgcmVhZGluZyBvciBjbGV2ZXIgc2FnZXMgY2FuIHRlbGwgeW91IHdoYXQgeW91IHdhbnQgdG8ga25vdy4gSW5zdGVhZCwgaXQgaXMgPGVtPnlvdTwvZW0+IHdobyBtdXN0IGZpbmQgdGhlIGFuc3dlciBpbiB5b3VyIGFjdGlvbnMsIGluIGxpdmluZyB0aGUgZ29vZCBsaWZlJm1kYXNoO2J5IGVtYm9keWluZyB0aGUgc2VsZi1ldmlkZW50IHByaW5jaXBsZXMgb2YganVzdGljZSwgc2VsZi1jb250cm9sLCBjb3VyYWdlLCBmcmVlZG9tLCBhbmQgYWJzdGFpbmluZyBmcm9tIGV2aWwuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAyMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkhlcm9lcywgSGVyZSBhbmQgTm93IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiU3VjaCBiZWhhdmlvciEgUGVvcGxlIGRvbid0IHdhbnQgdG8gcHJhaXNlIHRoZWlyIGNvbnRlbXBvcmFyaWVzIHdob3NlIGxpdmVzIHRoZXkgYWN0dWFsbHkgc2hhcmUsIGJ1dCBob2xkIGdyZWF0IGV4cGVjdGF0aW9ucyBmb3IgdGhlIHByYWlzZSBvZiBmdXR1cmUgZ2VuZXJhdGlvbnMmbWRhc2g7cGVvcGxlIHRoZXkgaGF2ZW4ndCBtZXQgb3IgZXZlciB3aWxsISBUaGlzIGlzIGFraW4gdG8gYmVpbmcgdXBzZXQgdGhhdCBwYXN0IGdlbmVyYXRpb25zIGRpZG4ndCBwcmFpc2UgeW91LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA2LjE4Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkFsZXhhbmRyaWEsIHRoZSBjaXR5IGluIEVneXB0LCBzdGlsbCBiZWFycyB0aGUgbmFtZSBvZiBpdHMgZm91bmRlciwgQWxleGFuZGVyIHRoZSBHcmVhdCwgc29tZSAyLDMwMCB5ZWFycyBhZnRlciBoZSBzZXQgZm9vdCB0aGVyZS4gSG93IGNvb2wgd291bGQgaXQgZmVlbCB0byBoYXZlIGEgY2l0eSBuYW1lZCBhZnRlciB5b3UgZm9yIHNvIG1hbnkgY2VudHVyaWVzPyBUbyBrbm93IHRoYXQgcGVvcGxlIGFyZSBzdGlsbCBzYXlpbmcgeW91ciBuYW1lPzwvcD48cD5IZXJlJ3MgYSB0aG91Z2h0OiBpdCB3b3VsZG4ndCBiZSBjb29sLiBCZWNhdXNlLCBsaWtlIEFsZXhhbmRlciwgeW91J2xsIGJlIGRlYWQuIFlvdSdsbCBoYXZlIG5vIGlkZWEgd2hldGhlciB5b3VyIG5hbWUgbGFzdGVkIGRvd24gdGhyb3VnaCB0aGUgY2VudHVyaWVzLiBObyBvbmUgZ2V0cyB0byBlbmpveSB0aGVpciBvd24gbGVnYWN5Jm1kYXNoO2J5IGRlZmluaXRpb24uPC9wPjxwPldvcnNlLCB0aGluayBvZiBhbGwgdGhlIGhvcnJpYmxlIHRoaW5ncyBBbGV4YW5kZXIgZGlkIHRvIGFjaGlldmUgd2hhdCBoZSBkaWQuIEhlIGZvdWdodCBwb2ludGxlc3Mgd2Fycy4gSGUgaGFkIGEgdGVycmlibGUgdGVtcGVyJm1kYXNoO2V2ZW4ga2lsbGluZyBoaXMgYmVzdCBmcmllbmQgaW4gYSBkcnVua2VuIGZpZ2h0LiBIZSB3YXMgcnV0aGxlc3MgYW5kIGEgc2xhdmUgdG8gaGlzIGFtYml0aW9uLiBJcyBoZSByZWFsbHkgc28gYWRtaXJhYmxlPzwvcD48cD5JbnN0ZWFkIG9mIHdhc3RpbmcgZXZlbiBhIHNlY29uZCBjb25zaWRlcmluZyB0aGUgb3BpbmlvbnMgb2YgZnV0dXJlIHBlb3BsZSZtZGFzaDtwZW9wbGUgd2hvIGFyZSBub3QgZXZlbiBib3JuIHlldCZtZGFzaDtmb2N1cyBldmVyeSBiaXQgb2YgeW91cnNlbGYgb24gYmVpbmcgdGhlIGJlc3QgcGVyc29uIHlvdSBjYW4gYmUgaW4gdGhlIHByZXNlbnQgbW9tZW50LiBPbiBkb2luZyB0aGUgcmlnaHQsIHJpZ2h0IG5vdy4gVGhlIGRpc3RhbnQgZnV0dXJlIGlzIGlycmVsZXZhbnQuIEJlIGdvb2QgYW5kIG5vYmxlIGFuZCBpbXByZXNzaXZlIG5vdyZtZGFzaDt3aGlsZSBpcyBzdGlsbCBtYXR0ZXJzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJJdCdzIEVhc3kgdG8gR2V0IEJldHRlciwgQnV0IEJldHRlciBhdCBXaGF0PyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlNvIHNvbWVvbmUncyBnb29kIGF0IHRha2luZyBkb3duIGFuIG9wcG9uZW50LCBidXQgdGhhdCBkb2Vzbid0IG1ha2UgdGhlbSBtb3JlIGNvbW11bml0eS1taW5kZWQsIG9yIG1vZGVzdCwgb3Igd2VsbC1wcmVwYXJlZCBmb3IgYW55IGNpcmN1bXN0YW5jZSwgb3IgbW9yZSB0b2xlcmFudCBvZiB0aGUgZmF1bHRzIG9mIG90aGVycy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNy41MiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5TZWxmLWltcHJvdmVtZW50IGlzIGEgbm9ibGUgcHVyc3VpdC4gTW9zdCBwZW9wbGUgZG9uJ3QgZXZlbiBib3RoZXIuIEJ1dCBhbW9uZyB0aG9zZSB3aG8gZG8sIGl0J3MgcG9zc2libGUgZm9yIHZhbml0eSBhbmQgc3VwZXJmaWNpYWxpdHkgdG8gY29ycnVwdCB0aGUgcHJvY2Vzcy4gRG8geW91IHdhbnQgc2l4LXBhY2sgYWJzIGJlY2F1c2UgeW91IGFyZSBjaGFsbGVuZ2luZyB5b3Vyc2VsZiBhbmQgY29tbWl0dGluZyB0byBhIGRpZmZpY3VsdCBnb2FsPyBPciBpcyBpdCBiZWNhdXNlIHlvdSB3YW50IHRvIGltcHJlc3MgcGVvcGxlIHdpdGggeW91ciBzaGlydCBvZmY/IEFyZSB5b3UgcnVubmluZyB0aGF0IG1hcmF0aG9uIGJlY2F1c2UgeW91IHdhbnQgdG8gdGVzdCB5b3VyIGxpbWl0cyBvciBiZWNhdXNlIHlvdSdyZSBydW5uaW5nIGF3YXkgZnJvbSB5b3VyIHByb2JsZW1zIGF0IGhvbWU/PC9wPjxwPk91ciB3aWxsIHNob3VsZG4ndCBiZSBkaXJlY3RlZCBhdCBiZWNvbWluZyB0aGUgcGVyc29uIHdobyBpcyBpbiBwZXJmZWN0IHNoYXBlIG9yIHdobyBjYW4gc3BlYWsgbXVsdGlwbGUgbGFuZ3VhZ2VzIGJ1dCB3aG8gZG9lc24ndCBoYXZlIGEgc2Vjb25kIGZvciBvdGhlciBwZW9wbGUuIFdoYXQncyB0aGUgcG9pbnQgb2Ygd2lubmluZyBhdCBzcG9ydHMgYnV0IGxvc2luZyBpbiB0aGUgZWZmb3J0IHRvIGJlIGEgZ29vZCBodXNiYW5kLCB3aWZlLCBmYXRoZXIsIG1vdGhlciwgc29uLCBvciBkYXVnaHRlcj8gTGV0J3Mgbm90IGNvbmZ1c2UgZ2V0dGluZyBiZXR0ZXIgYXQgPGVtPnN0dWZmPC9lbT4gd2l0aCBiZWluZyBhIGJldHRlciA8ZW0+cGVyc29uPC9lbT4uIE9uZSBpcyBhIG11Y2ggYmlnZ2VyIHByaW9yaXR5IHRoYXQgdGhlIG90aGVyLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMjMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTaG93IHRoZSBRdWFsaXRpZXMgWW91IFdlcmUgTWFkZSBGb3IiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJQZW9wbGUgYXJlbid0IGluIGF3ZSBvZiB5b3VyIHNoYXJwIG1pbmQ/IFNvIGJlIGl0LiBCdXQgeW91IGhhdmUgbWFueSBvdGhlciBxdWFsaXRpZXMgeW91IGNhbid0IGNsYWltIHRvIGhhdmUgYmVlbiBkZXByaXZlZCBvZiBhdCBiaXJ0aC4gRGlzcGxheSB0aGVuIHRob3NlIHF1YWxpdGllcyBpbiB5b3VyIG93biBwb3dlcjogaG9uZXN0eSwgZGlnbml0eSwgZW5kdXJhbmNlLCBjaGFzdGl0eSwgY29udGVudG1lbnQsIGZydWdhbGl0eSwga2luZG5lc3MsIGZyZWVkb20sIHBlcnNpc3RlbmNlLCBhdm9pZGluZyBnb3NzaXAsIGFuZCBtYWduYW5pbWl0eS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucyA1LjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SXQnIGVhc3kgdG8gYmxhbWUgb3VyIGNpcmN1bXN0YW5jZXMuIE9uZSBwZXJzb24gY3Vyc2VzIHRoYXQgdGhleSB3ZXJlbid0IGJvcm4gdGFsbGVyLCBhbm90aGVyIHRoZXkncmUgbm90IHNtYXJ0ZXIsIHdpdGggYSBkaWZmZXJlbnQgY29tcGxleGlvbiwgb3IgYm9ybiBpbiBhIGRpZmZlcmVudCBjb3VudHJ5LiBJdCdkIGJlIGhhcmQgdG8gZmluZCBhIHNpbmdsZSBwZXJzb24gb24gdGhpcyBwbGFuZXQmbWRhc2g7ZnJvbSBzdXBlcm1vZGVscyBvbiBkb3duJm1kYXNoO3dobyBkb2Vzbid0IHRoaW5rIHRoZXkncmUgZGVmaWNpZW50IGluIGEgbGVhc3Qgc29tZSB3YXkuIEJ1dCB3aGF0ZXZlciB5b3VyIHBlcmNlaXZlZCBkZWZpY2l0cyBhcmUsIHJlbWVtYmVyIHRoYXQgdGhlcmUgYXJlIHBvc2l0aXZlIHF1YWxpdGllcyB0aGF0IHlvdSBjYW4gZGV2ZWxvcCB0aGF0IGRvbid0IGRlcGVuZCBvbiBnZW5ldGljIGFjY2lkZW50cy48L3A+PHA+WW91IGhhdmUgdGhlIDxlbT5jaG9pY2U8L2VtPiB0byBiZSB0cnV0aGZ1bC4gWW91IGhhdmUgdGhlIDxlbT5jaG9pY2U8L2VtPiB0byBiZSBkaWduaWZpZWQuIFlvdSBjYW4gPGVtPmNob29zZTwvZW0+IHRvIGVuZHVyZS4gWW91IGNhbiBjaG9vc2UgdG8gYmUgY2hhc3RlLiBZb3UgY2FuIGNob29zZSB0byBiZSB0aHJpZnR5LiBZb3UgY2FuIGNob29zZSB0byBiZSBraW5kIHRvIG90aGVycy4gWW91IGNhbiBjaG9vc2UgdG8gYmUgZnJlZS4gWW91IGNhbiBwZXJzaXN0IHVuZGVyIGRpZmZpY3VsdCBvZGRzLiBZb3UgY2FuIGF2b2lkIHRyYWZmaWNraW5nIGluIGdvc3NpcC4gWW91IGNhbiBjaG9vc2UgdG8gYmUgZ3JhY2lvdXMuPC9wPjxwPkFuZCBob25lc3RseSwgYXJlbid0IHRoZSB0cmFpdHMgdGhhdCBhcmUgdGhlIHJlc3VsdCBvZiBlZmZvcnQgYW5kIHNraWxsIG1vcmUgaW1wcmVzc2l2ZSBhbnl3YXk/PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAyNCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBGb3VudGFpbiBvZiBHb29kbmVzcyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkRpZyBkZWVwIHdpdGhpbiB5b3Vyc2VsZiwgZm9yIHRoZXJlIGlzIGEgZm91bnRhaW4gb2YgZ29vZG5lc3MgZXZlciByZWFkeSB0byBmbG93IGlmIHlvdSB3aWxsIGtlZXAgZGlnZ2luZy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucyA3LjU5Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRvZGF5LCB3ZSBjb3VsZCBob3BlIHRoYXQgZ29vZG5lc3MgY29tZXMgb3VyIHdheSZtZGFzaDtnb29kIG5ld3MsIGdvb2Qgd2VhdGhlciwgZ29vZCBsdWNrLiBPciB3ZSBjb3VsZCA8ZW0+ZmluZDwvZW0+IGl0IG91cnNlbHZlcywgPGVtPmluPC9lbT4gb3Vyc2VsdmVzLiBHb29kbmVzcyBpc24ndCBzb21ldGhpbmcgdGhhdCdzIGdvaW5nIHRvIGJlIGRlbGl2ZXJlZCBieSBtYWlsLiBZb3UgaGF2ZSB0byBkaWcgaXQgdXAgaW5zaWRlIHlvdXIgb3duIHNvdWwuIFlvdSBmaW5kIGl0IHdpdGhpbiB5b3VyIG93biB0aG91Z2h0cywgYW5kIHlvdSBtYWtlIGl0IHdpdGggeW91ciBvd24gYWN0aW9ucy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDI1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVHdvIFRhc2tzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiV2hhdCwgdGhlbiwgbWFrZXMgYSBwZXJzb24gZnJlZSBmcm9tIGhpbmRyYW5jZSBhbmQgc2VsZi1kZXRlcm1pbmluZz8gRm9yIHdlYWx0aCBkb2Vzbid0LCBuZWl0aGVyIGRvZXMgaGlnaC1vZmZpY2UsIHN0YXRlIG9yIGtpbmdkb20mbWRhc2g7cmF0aGVyLCBzb21ldGhpbmcgZWxzZSBtdXN0IGJlIGZvdW5kLi4uaW4gdGhlIGNhc2Ugb2YgbGl2aW5nLCBpdCBpcyB0aGUga25vd2xlZGdlIG9mIGhvdyB0byBsaXZlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDQuMS42Mi02NCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Zb3UgaGF2ZSB0d28gZXNzZW50aWFsIHRhc2tzIGluIGxpZmU6IHRvIGJlIGEgZ29vZCBwZXJzb24gYW5kIHRvIHB1cnN1ZSB0aGUgb2NjdXBhdGlvbiB0aGF0IHlvdSBsb3ZlLiBFdmVyeXRoaW5nIGVsc2UgaXMgYSB3YXN0ZSBvZiBlbmVyZ3kgYW5kIGEgc3F1YW5kZXJpbmcgb2YgeW91ciBwb3RlbnRpYWwuPC9wPjxwPkhvdyBkb2VzIG9uZSBkbyB0aGF0PyBPSywgdGhhdCdzIGEgdG91Z2hlciBxdWVzdGlvbi4gQnV0IHRoZSBwaGlsb3NvcGh5IHdlIHNlZSBmcm9tIHRoZSBTdG9pY3MgbWFrZXMgaXQgc2ltcGxlIGVub3VnaDogc2F5IG5vIHRvIGRpc3RyYWN0aW9ucywgdG8gZGVzdHJ1Y3RpdmUgZW1vdGlvbnMsIHRvIG91dHNpZGUgcHJlc3N1cmUuIEFzayB5b3Vyc2VsZjogPGVtPldoYXQgaXMgaXQgdGhhdCBvbmx5IEkgY2FuIGRvPyBXaGF0IGlzIHRoZSBiZXN0IHVzZSBvZiBteSBsaW1pdGVkIHRpbWUgb24gdGhpcyBwbGFuZXQ/PC9lbT4gVHJ5IHRvIGRvIHRoZSByaWdodCB0aGluZyB3aGVuIHRoZSBzaXR1YXRpb24gY2FsbHMgZm9yIGl0LiBUcmVhdCBvdGhlciBwZW9wbGUgdGhlIHdheSB5b3Ugd291bGQgaG9wZSB0byBiZSB0cmVhdGVkLiBBbmQgdW5kZXJzdGFuZCB0aGF0IGV2ZXJ5IHNtYWxsIGNob2ljZSBhbmQgdGlueSBtYXR0ZXIgaXMgYW4gb3Bwb3J0dW5pdHkgdG8gcHJhY3RpY2UgdGhlc2UgbGFyZ2VyIHByaW5jaXBsZXMuPC9wPjxwPlRoYXQncyBpdC4gdGhhdCdzIHdoYXQgZ29lcyBpbnRvIHRoZSBtb3N0IGltcG9ydGFudCBza2lsbCBvZiBhbGw6IGhvdyB0byBsaXZlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMjYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaHJlZSBQYXJ0cywgT25lIEFpbSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZSBiZXN0IGFuZCB0aGUgZ3JlYXRlc3QgbnVtYmVyIG9mIGF1dGhvcnMgaGF2ZSBhc3NlcnRlZCB0aGF0IHBoaWxvc29waHkgY29uc2lzdHMgb2YgdGhyZWUgcGFydHM6IHRoZSBtb3JhbCwgdGhlIG5hdHVyYWwsIGFuZCB0aGUgcmF0aW9uYWwuIFRoZSBmaXJzdCBwdXRzIHRoZSBzb3VsIGluIG9yZGVyLiBUaGUgc2Vjb25kIHRob3JvdWdobHkgZXhhbWluZXMgdGhlIG5hdHVyYWwgb3JkZXIgb2YgdGhpbmdzLiBUaGUgdGhpcmQgaW5xdWlyZXMgaW50byB0aGUgcHJvcGVyIG1lYW5pbmcgb2Ygd29yZHMsIGFuZCB0aGVpciBhcnJhbmdlbWVudHMgYW5kIHByb29mcyB3aGljaCBrZWVwIGZhbHNlaG9vZHMgZnJvbSBjcmVlcGluZyBpbiB0byBkaXNwbGFjZSB0cnV0aC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA4OS45Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZXNlIHRocmVlIHBhcnRzJm1kYXNoO3RoZSBtb3JhbCwgdGhlIG5hdHVyYWwsIGFuZCB0aGUgcmF0aW9uYWwmbWRhc2g7aGF2ZSBvbmUgYWltLiBBcyBkaWZmZXJlbnQgYXMgdGhleSBhcmUsIHRoZXkgaGF2ZSB0aGUgc2FtZSBwdXJwb3NlOiB0byBoZWxwIHlvdSBsaXZlIGEgZ29vZCBsaWZlIHJ1bGVkIGJ5IHJlYXNvbjwvcD48cD5Ob3QgaW4gdGhlIGZ1dHVyZSwgYnV0IHJpZ2h0IG5vdy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDI3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiV2UgUmVhcCBXaGF0IFdlIFNvdyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkNyaW1lcyBvZnRlbiByZXR1cm4gdG8gdGhlaXIgdGVhY2hlci4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJUaHllc3RlcywgMzExIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkl0J3MgaXJvbmljIHRoYXQgU2VuZWNhIHdvdWxkIGhhdmUgb25lIG9mIGhpcyBjaGFyYWN0ZXJzIHV0dGVyIHRoaXMgbGluZS4gQXMgd2Uga25vdywgZm9yIG1hbnkgeWVhcnMgU2VuZWNhIHNlcnZlZCBhcyB0aGUgdHV0b3IgYW5kIG1lbnRvciB0byB0aGUgZW1wZXJvciBOZXJvLiBUaGVyZSBpcyBhIGxvdCBvZiBldmlkZW5jZSB0aGF0IFNlbmVjYSB3YXMsIGluIGZhY3QsIGEgcG9zaXRpdmUgbW9yYWwgaW5mbHVlbmNlIG9uIHRoZSBkZXJhbmdlZCB5b3VuZyBtYW4sIGJ1dCBldmVuIGF0IHRoZSB0aW1lLCBTZW5lY2EncyBjb250ZW1wb3JhcmllcyBmb3VuZCBpdCBzdHJhbmdlIHRoYXQgYSBwaGlsb3NvcGhlciB3b3VsZCBzZXJ2ZSBhcyB0aGUgcmlnaHQgaGFuZCB0byBzdWNoIGFuIGV2aWwgcGVyc29uLiBUaGV5IGV2ZW4gdXNlZCB0aGUgR3JlZWsgd29yZCA8ZW0+dHlyYW5ub2RpZGFza2Fsb3M8L2VtPiZtZGFzaDt0eXJhbnQgdGVhY2hlciZtZGFzaDt0byBkZXNjcmliZSBoaW0uIEFuZCBqdXN0IGFzIFNoYWtlc3BlYXJlIG9ic2VydmVkIGluIDxjaXRlPk1hY2JldGg8L2NpdGU+LCA8cT5CbG9vZHkgaW5zdHJ1Y3Rpb25zLCB3aGljaCwgYmVpbmcgdGF1Z2h0LCByZXR1cm4gLyBUbyBwbGFndWUgdGgnaW52ZW50b3IsPC9xPiBTZW5lY2EncyBjb2xsYWJvcmF0aW9uIHdpdGggTmVybyB1bHRpbWF0ZWx5IGVuZGVkIHdpdGggdGhlIHN0dWRlbnQgbXVyZGVyaW5nIHRoZSB0ZWFjaGVyLjwvcD48cD5JdCdzIHNvbWV0aGluZyB0byB0aGluayBhYm91dCB3aGVuIHlvdSBjb25zaWRlciB3aG9tIHRvIHdvcmsgd2l0aCBhbmQgd2hvbSB0byBkbyBidXNpbmVzcyB3aXRoIGluIGxpZmUuIElmIHlvdSBzaG93IGEgY2xpZW50IGhvdyB0byBkbyBzb21ldGhpbmcgdW5ldGhpY2FsIG9yIGlsbGVnYWwsIG1pZ2h0IHRoZXkgcmV0dXJuIHRoZSBmYXZvciB0byBhbiB1bnN1c3BlY3RpbmcgeW91IGxhdGVyIG9uPyBJZiB5b3UgcHJvdmlkZSBhIGJhZCBleGFtcGxlIHRvIHlvdXIgZW1wbG95ZWVzLCB0byB5b3VyIGFzc29jaWF0ZXMsIHRvIHlvdXIgY2hpbGRyZW4sIG1pZ2h0IHRoZXkgYmV0cmF5IHlvdSBvciBodXJ0IHlvdSBkb3duIHRoZSByb2FkPyBXaGF0IGdvZXMgYXJvdW5kIGNvbWVzIGFyb3VuZCwgaXMgdGhlIHNheWluZy4gS2FybWEgaXMgYSBub3Rpb24gd2UgaGF2ZSBpbXBvcnRlZCBmcm9tIHRoZSBFYXN0LCBhbG9uZyBzaW1pbGFyIGxpbmVzLjwvcD48cD5TZW5lY2EgcGFpZCBhIHByaWNlIGZvciBoaXMgaW5zdHJ1Y3Rpb24gdG8gTmVyby4gQXMgaGFzIGJlZW4gdHJ1ZSB0aHJvdWdob3V0IHRoZSBhZ2VzLCBoaXMgaHlwb2NyaXN5Jm1kYXNoO2F2b2lkYWJsZSBvciBub3QmbWRhc2g7d2FzIGNvc3RseS4gU28gdG9vIHdpbGwgYmUgeW91cnMuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAyOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIldlIFdlcmUgTWFkZSBGb3IgRWFjaCBPdGhlciIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIllvdSdsbCBtb3JlIHF1aWNrbHkgZmluZCBhbiBlYXJseSB0aGluZyBrZXB0IGZyb20gdGhlIGVhcnRoIHRoYW4geW91IHdpbGwgYSBwZXJzb24gY3V0IG9mZiBmcm9tIG90aGVyIGh1bWFuIGJlaW5ncy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgOS45LjMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+TmF0dXJhbGx5LCBNYXJjdXMgQXVyZWxpdXMgYW5kIHRoZSByZXN0IG9mIHRoZSBTdG9pY3Mgd2VyZSBub3QgZmFtaWxpYXIgd2l0aCBOZXd0b25pYW4gcGh5c2ljcy4gQnV0IHRoZXkga25ldyB0aGF0IHdoYXQgd2VudCB1cCBtdXN0IGNvbWUgZG93bi4gVGhhdCdzIHRoZSBhbmFsb2d5IGhlJ3MgdXNpbmcgaGVyZTogb3VyIG11dHVhbCBpbnRlcmRlcGVuZGVuY2Ugd2l0aCBvdXIgZmVsbG93IGh1bWFuIGJlaW5ncyBpcyBzdHJvbmdlciB0aGFuIHRoZSBsYXcgb2YgZ3Jhdml0eS48L3A+PHA+UGhpbG9zb3BoeSBhdHRyYWN0cyBpbnRyb3ZlcnRzLiBUaGUgc3R1ZHkgb2YgaHVtYW4gbmF0dXJlIGNhbiBtYWtlIHlvdSBhd2FyZSBvZiBvdGhlciBwZW9wbGUncyBmYXVsdHMgYW5kIGNhbiBicmVlZCBjb250ZW1wdCBmb3Igb3RoZXJzLiBTbyBkbyBzdHJ1Z2dsZSBhbmQgZGlmZmljdWx0eSZtZGFzaDt0aGV5IGlzb2xhdGUgdXMgZnJvbSB0aGUgd29ybGQuPC9wPjxwPkJ1dCBub25lIG9mIHRoYXQgY2hhbmdlcyB0aGF0IHdlIGFyZSwgYXMgQXJpc3RvdGxlIHB1dCBpdCwgc29jaWFsIGFuaW1hbHMuIFdlIG5lZWQgZWFjaCBvdGhlci4gV2UgbXVzdCBiZSB0aGVyZSBmb3IgZWFjaCBvdGhlci4gV2UgbXVzdCB0YWtlIGNhcmUgb2YgZWFjaCBvdGhlciAoYW5kIHRvIGFsbG93IG90aGVycyB0byBjYXJlIGZvciB1cyBpbiByZXR1cm4pLiBUbyBwcmV0ZW5kIG90aGVyd2lzZSBpcyB0byB2aW9sYXRlIG91ciBuYXR1cmUsIHRvIGJlIG1vcmUgb3IgbGVzcyB0aGFuIHdoYXQgaXQgbWVhbnMgdG8gYmUgYSBodW1hbiBiZWluZy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJPY3RvYmVyIDI5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQ2hhcmFjdGVyIGlzIEZhdGUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJFYWNoIHBlcnNvbiBhY3F1aXJlcyB0aGVpciBvd24gY2hhcmFjdGVyLCBidXQgdGhlaXIgb2ZmaWNpYWwgcm9sZXMgYXJlIGRlc2lnbmF0ZWQgYnkgY2hhbmNlLiBZb3Ugc2hvdWxkIGludml0ZSBzb21lIHRvIHlvdXIgdGFibGUgYmVjYXVzZSB0aGV5IGFyZSBkZXNlcnZpbmcsIG90aGVycyBiZWNhdXNlIHRoZXkgbWF5IGNvbWUgdG8gZGVzZXJ2ZSBpdC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA0Ny4xNWIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SW4gdGhlIGhpcmluZyBwcm9jZXNzLCBtb3N0IGVtcGxveWVycyBsb29rIGF0IHdoZXJlIHNvbWVvbmUgd2VudCB0byBzY2hvb2wsIHdoYXQgam9icyB0aGV5J3ZlIGhlbGQgaW4gdGhlIHBhc3QuIFRoaXMgaXMgYmVjYXVzZSBwYXN0IHN1Y2Nlc3MgY2FuIGJlIGFuIGluZGljYXRvciBvZiBmdXR1cmUgc3VjY2Vzc2VzLiBCdXQgaXMgaXQgYWx3YXlzPyBUaGVyZSBhcmUgcGxlbnR5IG9mIHBlb3BsZSB3aG8gd2VyZSBzdWNjZXNzZnVsIGJlY2F1c2Ugb2YgbHVjay4gTWF5YmUgdGhleSBnb3QgaW50byBPeGZvcmQgb3IgSGFydmFyZCBiZWNhdXNlIG9mIHRoZWlyIHBhcmVudHMuIEFuZCB3aGF0IGFib3V0IGEgeW91bmcgcGVyc29uIHdobyBoYXNuJ3QgaGFkIHRpbWUgdG8gYnVpbGQgYSB0cmFjayByZWNvcmQ/IEFyZSB0aGV5IHdvcnRobGVzcz88L3A+PHA+T2YgY291cnNlIG5vdC4gVGhpcyBpcyB3aHkgPGVtPmNoYXJhY3RlcjwvZW0+IGlzIGEgZmFyIGJldHRlciBtZWFzdXJlIG9mIGEgbWFuIG9yIHdvbWFuLiBOb3QganVzdCBmb3Igam9icywgYnV0IGZvciBmcmllbmRzaGlwcywgcmVsYXRpb25zaGlwcywgZm9yIGV2ZXJ5dGhpbmcuIEhlcmFjbGl0dXMgcHV0IGl0IGFzIGEgbWF4aW06IDxxPkNoYXJhY3RlciBpcyBmYXRlLjwvcT48L3A+PHA+V2hlbiB5b3Ugc2VlayB0byBhZHZhbmNlIHlvdXIgb3duIHBvc2l0aW9uIGluIGxpZmUsIGNoYXJhY3RlciBpcyB0aGUgYmVzdCBsZXZlciZtZGFzaDtwZXJoYXBzIG5vdCBpbiB0aGUgc2hvcnQgdGVybSwgYnV0IGNlcnRhaW5seSBvdmVyIHRoZSBsb25nIHRlcm0uIEFuZCB0aGUgc2FtZSBnb2VzIGZvciB0aGUgcGVvcGxlIHlvdSBpbnZpdGUgaW50byB5b3VyIGxpZmUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiT2N0b2JlciAzMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIldobyBHZXQncyB0aGUgTGlvbidzIFNoYXJlPyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkFyZW4ndCB5b3UgYXNoYW1lZCB0byByZXNlcnZlIGZvciB5b3Vyc2VsZiBvbmx5IHRoZSByZW1uYW50cyBvZiB5b3VyIGxpZmUgYW5kIHRvIGRlZGljYXRlIHRvIHdpc2RvbSBvbmx5IHRoYXQgdGltZSBjYW4ndCBiZSBkaXJlY3RlZCB0byBidXNpbmVzcz8iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiB0aGUgQnJldml0eSBvZiBMaWZlLCAzLjViIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkluIG9uZSBvZiBoaXMgbGV0dGVycywgU2VuZWNhIHRlbGxzIHRoZSBzdG9yeSBhYm91dCBBbGV4YW5kZXIgdGhlIEdyZWF0LiBBcHBhcmVudGx5IGFzIEFsZXhhbmRlciB3YXMgY29ucXVlcmluZyB0aGUgd29ybGQsIGNlcnRhaW4gY291bnRyaWVzIHdvdWxkIG9mZmVyIGhpbSBwaWVjZXMgb2YgdGhlaXIgdGVycml0b3J5IGluIGhvcGVzIHRoYXQgaGUnZCBsZWF2ZSB0aGVtIGFsb25lIGluIGV4Y2hhbmdlLiBBbGV4YW5kZXIgd291bGQgdGVsbCB0aGVtLCB3cml0ZXMgU2VuZWNhLCB0aGF0IGhlIGhhZG4ndCBjb21lIGFsbCB0aGUgd2F5IHRvIEFzaWEgdG8gYWNjZXB0IHdoYXRldmVyIHRoZXkgd291bGQgZ2l2ZSBoaW0sIGJ1dCBpbnN0ZWFkIHRoZXkgd2VyZSBnb2luZyB0byBoYXZlIHRvIGFjY2VwdCB3aGF0ZXZlciBoZSBjaG9zZSB0byBsZWF2ZSB0aGVtLjwvcD48cD5BY2NvcmRpbmcgdG8gU2VuZWNhLCB3ZSBzaG91bGQgdHJlYXQgcGhpbG9zb3BoeSB0aGUgc2FtZSB3YXkgaW4gb3VyIGxpdmVzLiBQaGlsb3NvcGh5IHNob3VsZG4ndCBoYXZlIHRvIGFjY2VwdCB3aGF0IHRpbWUgb3IgZW5lcmd5IGlzIGxlZnQgb3ZlciBmcm9tIG90aGVyIG9jY3VwYXRpb25zIGJ1dCBpbnN0ZWFkIHdlIHNob3VsZCBncmFjaW91c2x5IG1ha2UgdGltZSBmb3IgdGhvc2Ugb3RoZXIgcHVyc3VpdHMgb25seSBvbmNlIG91ciBzdHVkeSBpcyBmaW5pc2hlZC48L3A+PHA+SWYgcmVhbCBzZWxmLWltcHJvdmVtZW50IGlzIHdoYXQgd2UncmUgYWZ0ZXIsIHdoeSBkbyB3ZSBsZWF2ZSBvdXIgcmVhZGluZyB1bnRpbCB0aG9zZSBmZXcgbWludXRlcyBiZWZvcmUgd2Ugc2h1dCBvZmYgdGhlIGxpZ2h0cyBhbmQgZ28gdG8gYmVkPyBXaHkgZG8gd2UgYmxvY2sgb2ZmIGVpZ2h0IHRvIHRlbiBob3VycyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBkYXkgdG8gYmUgYXQgdGhlIG9mZmljZSBvciB0byBnbyB0byBtZWV0aW5ncyBidXQgYmxvY2sgb3V0IG5vIHRpbWUgZm9yIHRoaW5raW5nIGFib3V0IHRoZSBiaWcgcXVlc3Rpb25zPyBUaGUgYXZlcmFnZSBwZXJzb24gc29tZWhvdyBtYW5hZ2VzIHRvIHNxdWVlemUgaW4gdHdlbnR5LWVpZ2h0IGhvdXJzIG9mIHRlbGV2aXNpb24gcGVyIHdlZWsmbWRhc2g7YnV0IGFzayB0aGVtIGlmIHRoZXkgaGFkIHRpbWUgdG8gc3R1ZHkgcGhpbG9zb3BoeSwgYW5kIHRoZXkgd2lsbCBwcm9iYWJseSB0ZWxsIHlvdSB0aGV5J3JlIHRvbyBidXN5LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk9jdG9iZXIgMzEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJZb3UgV2VyZSBCb3JuIEdvb2QiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGUgaHVtYW4gYmVpbmcgaXMgYm9ybiB3aXRoIGFuIGluY2xpbmF0aW9uIHRvd2FyZCB2aXJ0dWUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTXVzb25pdXMgUnVmdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJMZWN0dXJlcywgMi43LjEtMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgbm90aW9uIG9mIG9yaWdpbmFsIHNpbiBoYXMgd2VpZ2hlZCBkb3duIGh1bWFua2luZCBmb3IgY2VudHVyaWVzLiBJbiByZWFsaXR5LCB3ZSdyZSBtYWRlIHRvIGhlbHAgZWFjaCBvdGhlciBhbmQgYmUgZ29vZCB0byBlYWNoIG90aGVyLiBXZSB3b3VsZG4ndCBoYXZlIHN1cnZpdmVkIGFzIGEgc3BlY2llcyBvdGhlcndpc2UuPC9wPjxwPlRoZXJlIGlzIGhhcmRseSBhbiBpZGVhIGluIFN0b2ljIHBoaWxvc29waHkgdGhhdCB3b3VsZG4ndCBiZSBpbW1lZGlhdGVseSBhZ3JlZWFibGUgdG8gYSBjaGlsZCBvciB0aGF0IGRvZXNuJ3QgamliZSB3aXRoIGNvbW1vbiBzZW5zZS4gVGhlIGlkZWFzIHdpdGhpbiBpdCBnbyB0byB0aGUgY29yZSBvZiB3aG8gd2UgYXJlIGFuZCB3aGF0IHdlIGtub3cgdG8gYmUgdHJ1ZS4gVGhlIG9ubHkgdGhpbmdzIHRoZXkgY29uZmxpY3Qgd2l0aCBhcmUgdGhlIHZhcmlvdXMgaW52ZW50aW9ucyBvZiBzb2NpZXR5Jm1kYXNoO3doaWNoIHVzdWFsbHkgc2VydmUgc29tZSBzZWxmaXNoIGludGVyZXN0IG1vcmUgdGhhbiB0aGV5IGJlbmVmaXQgdGhlIGNvbW1vbiBnb29kLjwvcD48cD5Zb3Ugd2VyZSBib3JuIGdvb2QuIDxxPkFsbCBvZiB1cyBoYXZlIGJlZW4gbWFkZSBieSBuYXR1cmUsPC9xPiBSdWZ1cyBzYWlkLCA8cT5zbyB0aGF0IHdlIGNhbiBsaXZlIGZyZWUgZnJvbSBlcnJvciBhbmQgbm9ibHkmbWRhc2g7bm90IHRoYXQgb25lIGNhbiBhbmQgYW5vdGhlciBjYW4ndCwgYnV0IGFsbC48L3E+IFlvdSB3ZXJlIGJvcm4gd2l0aCBhbiBhdHRyYWN0aW9uIHRvIHZpcnR1ZSBhbmQgc2VsZi1tYXN0ZXJ5LiBJZiB5b3UndmUgZ290dGVuIGZhciBmcm9tIHRoYXQsIGl0J3Mgbm90IG91dCBvZiBzb21lIGluYm9ybiBjb3JydXB0aW9uIGJ1dCBmcm9tIGEgbnVydHVyaW5nIG9mIHRoZSB3cm9uZyB0aGluZ3MgYW5kIHRoZSB3cm9uZyBpZGVhcy4gQXMgU2VuZWNhIHBvaW50ZWQgb3V0LCBwaGlsb3NvcGh5IGlzIGEgdG9vbCB0byBzdHJpcCBpdCBhbGwgYXdheSZtZGFzaDt0byBnZXQgYmFjayB0byBvdXIgdHJ1ZSBuYXR1cmUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkFjY2VwdGluZyBXaGF0IElzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRG9uJ3Qgc2VlayBmb3IgZXZlcnl0aGluZyB0byBoYXBwZW4gYXMgeW91IHdpc2ggaXQgd291bGQsIGJ1dCByYXRoZXIgd2lzaCB0aGF0IGV2ZXJ5dGhpbmcgaGFwcGVucyBhcyBpdCBhY3R1YWxseSB3aWxsJm1kYXNoO3RoZW4geW91ciBsaWZlIHdpbGwgZmxvdyB3ZWxsLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkVuY2hpcmlkaW9uLCA4Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkl0IGlzIGVhc3kgdG8gcHJhaXNlIHByb3ZpZGVuY2UgZm9yIGFueXRoaW5nIHRoYXQgbWF5IGhhcHBlbiBpZiB5b3UgaGF2ZSB0d28gcXVhbGl0aWVzOiBhIGNvbXBsZXRlIHZpZXcgb2Ygd2hhdCBoYXMgYWN0dWFsbHkgaGFwcGVuZWQgaW4gZWFjaCBpbnN0YW5jZSBhbmQgYSBzZW5zZSBvZiBncmF0aXR1ZGUuIFdpdGhvdXQgZ3JhdGl0dWRlIHdoYXQgaXMgdGhlIHBvaW50IG9mIHNlZWluZywgYW5kIHdpdGhvdXQgc2VlaW5nIHdoYXQgaXMgdGhlIG9iamVjdCBvZiBncmF0aXR1ZGU/IiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMS42LjEtMiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Tb21ldGhpbmcgaGFwcGVuZWQgdGhhdCB3ZSB3aXNoIGhhZCBub3QuIFdoaWNoIG9mIHRoZXNlIGlzIGVhc2llc3QgdG8gY2hhbmdlOiBvdXIgb3BpbmlvbiBvciB0aGUgZXZlbnQgdGhhdCBpcyBwYXN0PzwvcD48cD5UaGUgYW5zd2VyIGlzIG9idmlvdXMuIEFjY2VwdCB3aGF0IGhhcHBlbmVkIGFuZCBjaGFuZ2UgeW91ciB3aXNoIHRoYXQgaXQgaGFkIG5vdCBoYXBwZW5lZC4gU3RvaWNpc20gY2FsbHMgdGhpcyB0aGUgPHE+YXJ0IG9mIGFjcXVpZXNjZW5jZTwvcT4mbWRhc2g7dG8gYWNjZXB0IHJhdGhlciB0aGFuIGZpZ2h0IGV2ZXJ5IGxpdHRsZSB0aGluZy48L3A+PHA+QW5kIHRoZSBtb3N0IHByYWN0aWNlZCBTdG9pY3MgdGFrZSBpdCBhIHN0ZXAgZnVydGhlci4gSW5zdGVhZCBvZiBzaW1wbHkgPGVtPmFjY2VwdGluZzwvZW0+IHdoYXQgaGFwcGVucywgdGhleSB1cmdlIHVzIHRvIGFjdHVhbGx5IDxlbT5lbmpveTwvZW0+IHdoYXQgaGFzIGhhcHBlbmVkJm1kYXNoO3doYXRldmVyIGl0IGlzLiBOaWV0enNjaGUsIG1hbnkgY2VudHVyaWVzIGxhdGVyLCBjb2luZWQgdGhlIHBlcmZlY3QgZXhwcmVzc2lvbiB0byBjYXB0dXJlIHRoaXMgaWRlYTogPGVtPmFtb3IgZmF0aTwvZW0+IChhIGxvdmUgb2YgZmF0ZSkuIEl0J3Mgbm90IGp1c3QgYWNjZXB0aW5nLCBpdCdzIDxlbT5sb3Zpbmc8L2VtPiBldmVyeXRoaW5nIHRoYXQgaGFwcGVucy48L3A+PHA+VG8gd2lzaCBmb3Igd2hhdCBoYXBwZW5lZCB0byBoYXBwZW4gaXMgYSBjbGV2ZXIgd2F5IHRvIGF2b2lkIGRpc2FwcG9pbnRtZW50IGJlY2F1c2Ugbm90aGluZyBpcyBjb250cmFyeSB0byB5b3VyIGRlc2lyZXMuIEJ1dCB0byBhY3R1YWxseSBmZWVsIGdyYXRpdHVkZSBmb3Igd2hhdCBoYXBwZW5zPyBUbyBsb3ZlIGl0PyBUaGF0J3MgYSByZWNpcGUgZm9yIGhhcHBpbmVzcyBhbmQgam95LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJCaW5kaW5nIE91ciBXaXNoZXMgdG8gV2hhdCBXaWxsIEJlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQnV0IEkgaGF2ZW4ndCBhdCBhbnkgdGltZSBiZWVuIGhpbmRlcmVkIGluIG15IHdpbGwsIG5vciBmb3JjZWQgYWdhaW5zdCBpdC4gQW5kIGhvdyBpcyB0aGlzIHBvc3NpYmxlPyBJIGhhdmUgYm91bmQgdXAgbXkgY2hvaWNlIHRvIGFjdCB3aXRoIHRoZSB3aWxsIG9mIEdvZC4gR29kIHdpbGxzIHRoYXQgSSBiZSBzaWNrLCBzdWNoIGlzIG15IHdpbGwuIEhlIHdpbGxzIHRoYXQgSSBzaG91bGQgY2hvb3NlIHNvbWV0aGluZywgc28gZG8gSS4gSGUgd2lsbHMgdGhhdCBJIHJlYWNoIGZvciBzb21ldGhpbmcsIG9yIHNvbWV0aGluZyBiZSBnaXZlbiB0byBtZSZtZGFzaDtJIHdpc2ggZm9yIHRoZSBzYW1lLiBXaGF0IEdvZCBkb2Vzbid0IHdpbGwsIEkgZG8gbm90IHdpc2ggZm9yLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDQuMS44OSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5XaGVuIEdlbmVyYWwgRHdpZ2h0IEQuIEVpc2VuaG93ZXIgd3JvdGUgdG8gaGlzIHdpZmUgb24gdGhlIGV2ZSBvZiB0aGUgaW52YXNpb24gb2YgTm9ybWFuZHksIGhlIHRvbGQgaGVyLCA8cT5FdmVyeXRoaW5nIHdlIGNvdWxkIHRoaW5rIG9mIGhhcyBiZWVuIGRvbmUsIHRoZSB0cm9vcHMgYXJlIGZpdCBldmVyeWJvZHkgaXMgZG9pbmcgaGlzIGJlc3QuIFRoZSBhbnN3ZXIgaXMgaW4gdGhlIGxhcCBvZiB0aGUgZ29kcy48L3E+IEhlJ2QgZG9uZSBldmVyeXRoaW5nIGhlIGNvdWxkJm1kYXNoO2FuZCBub3csIHdoYXQgd291bGQgaGFwcGVuIHdvdWxkIGhhcHBlbiBhbmQgYXMgRXBpY3RldHVzIG1pZ2h0IHNheSwgaGUgd2FzIHJlYWR5IHRvIGJlYXIgd2hhdGV2ZXIgdGhhdCB3YXMuIEluIGZhY3QsIEVpc2VuaG93ZXIgaGFkIHdyaXR0ZW4gYW5vdGhlciBsZXR0ZXIgdGhhdCBuaWdodCBhbmQgcHJlcGFyZWQgaXQgZm9yIHJlbGVhc2UgaW4gY2FzZSB0aGUgaW52YXNpb24gZmFpbGVkLiBJZiBmYWlsdXJlIHdhcyB3aGF0IEdvZCZtZGFzaDtvciBmYXRlIG9yIGx1Y2sgb3Igd2hhdGV2ZXIgeW91IHdhbnQgdG8gY2FsbCBpdCZtZGFzaDt3aWxsZWQsIGhlIHdhcyByZWFkeS48L3A+PHA+VGhlcmUgaXMgYSB3b25kZXJmdWwgbGVzc29uIHRoZXJlLiBUaGUgbWFuIGluIGNoYXJnZSBvZiBwZXJoYXBzIHRoZSBtb3N0IHBvd2VyZnVsIGFybXkgdGhlIHdvcmxkIGhhZCBldmVyIGFzc2VtYmxlZCwgb24gdGhlIGV2ZSBvZiB0aGUgbW9zdCBleHBlcnRseSBvcmdhbml6ZWQgYW5kIHBsYW5uZWQgaW52YXNpb24gdGhlIHdvcmxkIHdpbGwgaG9wZWZ1bGx5IGV2ZXIga25vdywgd2FzIGh1bWJsZSBlbm91Z2ggdG8ga25vdyB0aGF0IHRoZSBvdXRjb21lIHVsdGltYXRlbHkgYmVsb25nZWQgdG8gc29tZW9uZSBvciBzb21ldGhpbmcgYmlnZ2VyIHRoYW4gaGltLjwvcD48cD5BbmQgc28gaXQgZ29lcyB3aXRoIGFsbCBvdXIgdmVudHVyZXMuIE5vIG1hdHRlciBob3cgbXVjaCBwcmVwYXJhdGlvbiwgbm8gbWF0dGVyIGhvdyBza2lsbGVkIG9yIHNtYXJ0IHdlIGFyZSwgdGhlIHVsdGltYXRlIG91dGNvbWUgaXMgaW4gdGhlIGxhcCBvZiB0aGUgZ29kcy4gVGhlIHNvb25lciB3ZSBrbm93IHRoYXQsIHRoZSBiZXR0ZXIgd2Ugd2lsbCBiZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRm9sbG93aW5nIHRoZSBEb2N0b3IncyBPcmRlcnMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJKdXN0IGFzIHdlIGNvbW1vbmx5IGhlYXIgcGVvcGxlIHNheSB0aGUgZG9jdG9yIHByZXNjcmliZWQgc29tZW9uZSBwYXJ0aWN1bGFyIHJpZGluZyBleGVyY2lzZXMsIG9yIGljZSBiYXRocywgb3Igd2Fsa2luZyB3aXRob3V0IHNob2VzLCB3ZSBzaG91bGQgaW4gdGhlIHNhbWUgd2F5IHNheSB0aGF0IG5hdHVyZSBwcmVzY3JpYmVkIHNvbWVvbmUgdG8gYmUgZGlzZWFzZWQsIG9yIGRpc2FibGVkLCBvciB0byBzdWZmZXIgYW55IGtpbmQgb2YgaW1wYWlybWVudC4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRvY3RvciwgcHJlc2NyaWJlZCBtZWFucyBzb21ldGhpbmcgb3JkZXJlZCB0byBoZWxwIGFpZCBzb21lb25lJ3MgaGVhbGluZy4gQnV0IGluIHRoZSBjYXNlIG9mIG5hdHVyZSwgaXQgbWVhbnMgdGhhdCB3aGF0IGhhcHBlbnMgdG8gZWFjaCBvZiB1cyBpcyBvcmRlcmVkIHRvIGhlbHAgYWlkIG91ciBkZXN0aW55LiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA1LjgiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIFN0b2ljcyB3ZXJlIG1hc3RlcnMgYXQgYW5hbG9naWVzIGFuZCB1c2VkIHRoZW0gYXMgYSB0b29sIHRvIGhlbHAgc3RyZW5ndGhlbiB0aGVpciByZWFzb25pbmcuPC9wPjxwPkhlcmUsIE1hcmN1cyBvYnNlcnZlcyBob3cgd2lsbGluZ2x5IHdlIHdpbGwgcHV0IHVwIHdpdGggdW5wbGVhc2FudG5lc3MgaWYgY29tbWFuZGVkIHRvIGJ5IHRoZSBtYWdpYyB3b3JkcyA8cT5kb2N0b3IncyBvcmRlcnMuPC9xPiBUaGUgZG9jdG9yIHNheXMgeW91J3ZlIGdvdCB0byB0YWtlIHRoaXMgbmFzdHkgbWVkaWNpbmUsIGFuZCB5b3UnbGwgZG8gaXQuIFRoZSBkb2N0b3IgdGVsbHMgeW91IHlvdSBoYXZlIHRvIHN0YXJ0IHNsZWVwaW5nIGhhbmdpbmcgdXBzaWRlIGRvd24gbGlrZSBhIGJhdC4gWW91J2xsIGZlZWwgc2lsbHksIGJ1dCBzb29uIGVub3VnaCB5b3UnbGwgZ2V0IHRvIGRhbmdsaW5nIGJlY2F1c2UgeW91IHRoaW5rIGl0IHdpbGwgbWFrZSB5b3UgYmV0dGVyLjwvcD48cD5PbiB0aGUgb3RoZXIgaGFuZCwgd2hlbiBpdCBjb21lcyB0byBleHRlcm5hbCBldmVudHMsIHdlIGZpZ2h0IGxpa2UgaGVsbCBpZiBhbnl0aGluZyBoYXBwZW5zIGNvbnRyYXJ5IHRvIG91ciBwbGFucy4gQnV0IHdoYXQgaWYsIE1hcmN1cyBhc2tzLCBhIGRvY3RvciBoYWQgcHJlc2NyaWJlZCB0aGlzIGV4YWN0IHRoaW5nIGFzIGEgcGFydCBvZiBvdXIgdHJlYXRtZW50PyBXaGF0IGlmIHRoaXMgd2FzIGFzIGdvb2QgZm9yIHVzIGFzIG1lZGljaW5lPzwvcD48cD5XZWxsLCB3aGF0IGlmPzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJOb3QgR29vZCwgTm9yIEJhZCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZXJlIGlzIG5vIGV2aWwgaW4gdGhpbmdzIGNoYW5naW5nLCBqdXN0IGFzIHRoZXJlIGlzIG5vIGdvb2QgaW4gcGVyc2lzdGluZyBpbiBhIG5ldyBzdGF0ZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNC40MiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5XaGVuIHBlb3BsZSBzYXkgY2hhbmdlIGlzIGdvb2QsIHRoZXkncmUgdXN1YWxseSB0cnlpbmcgdG8gcmVhc3N1cmUgc29tZW9uZSAob3IgdGhlbXNlbHZlcykuIEJlY2F1c2UgaW5zdGluY3RpdmVseSB3ZSB2aWV3IGNoYW5nZSBhcyBiYWQmbWRhc2g7b3IgYXQgbGVzdCB3ZSdyZSBzdXNwaWNpb3VzIG9mIGl0LjwvcD48cD5UaGUgU3RvaWNzIHdhbnQgeW91IHRvIGRvIGF3YXkgd2l0aCB0aG9zZSBsYWJlbHMgYWx0b2dldGhlci4gQ2hhbmdlIGlzbid0IGdvb2QuIFRoZSBzdGF0dXMgcXVvIGlzbid0IGJhZC4gVGhleSBqdXN0IDxlbT5hcmU8L2VtPi48L3A+PHA+UmVtZW1iZXIsIGV2ZW50cyBhcmUgb2JqZWN0aXZlLiBJdCdzIG9ubHkgb3VyIG9waW5pb24gdGhhdCBzYXlzIHNvbWV0aGluZyBpcyBnb29kIG9yIGJhZCAoYW5kIHRodXMgd29ydGggZmlnaHRpbmcgYWdhaW5zdCBvciBmaWdodGluZyBmb3IpLiBBIGJldHRlciBhdHRpdHVkZT8gVG8gZGVjaWRlIHRvIG1ha2UgdGhlIG1vc3Qgb2YgZXZlcnl0aGluZy4gQnV0IHRvIGRvIHRoYXQgeW91IG11c3QgZmlyc3QgY2Vhc2UgZmlnaHRpbmcuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkEgSGlnaGVyIFBvd2VyIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhpcyBpcyB0aGUgdmVyeSB0aGluZyB3aGljaCBtYWtlcyB1cCB0aGUgdmlydHVlIG9mIHRoZSBoYXBweSBwZXJzb24gYW5kIGEgd2VsbC1mbG93aW5nIGxpZmUmbWRhc2g7d2hlbiB0aGUgYWZmYWlycyBvZiBsaWZlIGFyZSBpbiBldmVyeSB3YXkgdHVuZWQgdG8gdGhlIGhhcm1vbnkgYmV0d2VlbiB0aGUgaW5kaXZpZHVhbCBkaXZpbmUgc3Bpcml0IGFuZCB0aGUgd2lsbCBvZiB0aGUgZGlyZWN0b3Igb2YgdGhlIHVuaXZlcnNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkNocnlzaXBwdXMsIFF1b3RlZCBpbiBEaW9nZW5lcyBMYWVydGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkxpdmVzIG9mIHRoZSBFbWluZW50IFBoaWxvc29waGVycywgNy4xLjg4Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkluIHVuZGVyZ29pbmcgYSB0d2VsdmUtc3RlcCBwcm9ncmFtLCBtYW55IGFkZGljdHMgc3RydWdnbGUgbW9zdCB3aXRoIHN0ZXAgMjogYWNrbm93bGVkZ2luZyBhIGhpZ2hlciBwb3dlci4gQWRkaWN0cyBvZnRlbiBmaWdodCB0aGlzIG9uZS4gQXQgZmlyc3QgdGhleSBjbGFpbSBpdCdzIGJlY2F1c2UgdGhleSdyZSBhdGhlaXN0cyBvciBiZWNhdXNlIHRoZXkgZG9uJ3QgbGlrZSByZWxpZ2lvbiBvciBiZWNhdXNlIHRoZXkgZG9uJ3QgdW5kZXJzdGFuZCB3aHkgaXQgbWF0dGVycy48L3A+PHA+QnV0IHRoZXkgbGF0ZXIgcmVhbGl6ZSB0aGF0IHRoaXMgaXMganVzdCB0aGUgYWRkaWN0aW9uIHRhbGtpbmcmbWRhc2g7aXQncyBhbm90aGVyIGZvcm0gb2Ygc2VsZmlzaG5lc3MgYW5kIHNlbGYtYWJzb3JwdGlvbi4gVGhlIGFjdHVhbCBsYW5ndWFnZSBvZiB0aGUgc3RlcCBpcyBwcmV0dHkgZWFzeSB0byBzd2FsbG93OiA8cT5bV2VdIGNhbWUgdG8gYmVsaWV2ZSB0aGF0IGEgUG93ZXIgZ3JlYXRlciB0aGFuIG91cnNlbHZlcyBjb3VsZCByZXN0b3JlIHVzIHRvIHNhbml0eS48L3E+IFN1YnNlcXVlbnQgc3RlcHMgYXNrIHRoZSBhZGRpY3QgdG8gc3VibWl0IGFuZCBsZXQgZ28uIFRoZSBzZWNvbmQgc3RlcCByZWFsbHkgaGFzIGxlc3MgdG8gZG8gd2l0aCA8cT5nb2Q8L3E+IHRoYW4gdGhvc2Ugb3RoZXIgc3RlcHMmbWRhc2g7dGhlIGxldHRpbmcgZ28uIEl0J3MgYWJvdXQgYXR0dW5pbmcgdG8gdGhlIHVuaXZlcnNlIGFuZCBkaXNjYXJkaW5nIHRoZSB0b3hpYyBpZGVhIHRoYXQgd2UncmUgYXQgdGhlIGNlbnRlciBvZiBpdC48L3A+PHA+SXQncyBubyB3b25kZXIgdGhhIHRoZSBTdG9pY3MgYXJlIHBvcHVsYXIgd2l0aCB0aG9zZSBpbiB0d2VsdmUtc3RlcCBwcm9ncmFtcy4gSXQncyBhbHNvIGNsZWFyIHRoYXQgdGhpcyB3aXNkb20gaXMgYmVuZWZpY2lhbCB0byB1cyBhbGwuIFlvdSBkb24ndCBoYXZlIHRvIGJlbGlldmUgdGhlcmUgaXMgYSBnb2QgZGlyZWN0aW5nIHRoZSB1bml2ZXJzZSwgeW91IGp1c3QgbmVlZCB0byBzdG9wIGJlbGlldmluZyB0aGF0IDxlbT55b3UncmU8L2VtPiB0aGF0IGRpcmVjdG9yLiBBcyBzb29uIGFzIHlvdSBjYW4gYXR0dW5lIHlvdXIgc3Bpcml0IHRvIHRoYXQgaWRlYSwgdGhlIGVhc2llciBhbmQgaGFwcGllciB5b3VyIGxpZmUgd2lsbCBiZSwgYmVjYXVzZSB5b3Ugd2lsbCBoYXZlIGdpdmVuIHVwIHRoZSBtb3N0IHBvdGVudCBhZGRpY3Rpb24gb2YgYWxsOiBjb250cm9sPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgNiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlNvbWVvbmUgRWxzZSBpcyBTcGlubmluZyB0aGUgVGhyZWFkIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSWYgdGhlIGJyZWFraW5nIGRheSBzZWVzIHNvbWVvbmUgcHJvdWQsPGJyIC8+VGhlIGVuZGluZyBkYXkgc2VlcyB0aGVtIGJyb3VnaHQgbG93LjxiciAvPk5vIG9uZSBzaG91bGQgcHV0IHRvbyBtdWNoIHRydXN0IGluIHRyaXVtcGgsPGJyIC8+Tm8gb25lIHNob3VsZCBnaXZlIHVwIGhvcGUgb2YgdHJpYWxzIGltcHJvdmluZy48YnIgLz5DbG90aG8gbWl4ZXMgb25lIHdpdGggdGhlIG90aGVyIGFuZCBzdG9wczxiciAvPkZvcnR1bmUgZnJvbSByZXN0aW5nLCBzcGlubmluZyBldmVyeSBmYXRlIGFyb3VuZC48YnIgLz5ObyBvbmUgaGFzIGhhZCBzbyBtdWNoIGRpdmluZSBmYXZvcjxiciAvPlRoYXQgdGhleSBjb3VsZCBndWFyYW50ZWUgdGhlbXNlbHZlcyB0b21vcnJvdy48YnIgLz5Hb2Qga2VlcHMgb3VyIGxpdmVzIGh1cnRsaW5nIG9uLDxiciAvPlNwaW5uaW5nIGluIGEgd2hpcmx3aW5kLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIlRoeWVzdGVzLCA2MTMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIG5vdmVsaXN0IENvcm1hYyBNY0NhcnRoeSB3YXMgbGl2aW5nIGluIGEgbW90ZWwgcm9vbSB3aGVuIGhlIGhlYXJkIGEga25vY2sgYXQgdGhlIGRvb3IuIEl0IHdhcyBhIG1lc3NlbmdlciZtZGFzaDtoZSdkIGJlZW4gYXdhcmRlZCB0aGUgTWFjQXJ0aHVyIDxxPmdlbml1czwvcT4gZ3JhbnQgYW5kICQyNTAsMDAwLiBVbmV4cGVjdGVkIGV2ZW50cyBjYW4gYmUgZ29vZCBhcyB3ZWxsIGFzIGJhZC48L3A+PHA+V2hvIGNvdWxkIGRyZWFtIG9mIHN1Y2ggYW4gdW5leHBlY3RlZCB0d2lzdD8gV2hvIGJ1dCBDbG90aG9zLCBvbmUgb2YgdGhlIHRocmVlIEdyZWVrIGdvZGRlc3NlcyBvZiBmYXRlLCB3aG8gPHE+c3BpbnM8L3E+IHRoZSB0aHJlYWQgb2YgaHVtYW4gbGlmZT8gVG8gdGhlIGFuY2llbnRzLCBzaGUgd2FzIHRoZSBvbmUgd2hvIGRlY2lkZWQgdGhlIGNvdXJzZSBvZiB0aGUgZXZlbnRzIG9mIG91ciBsaXZlcyZtZGFzaDtzb21lIGdvb2QsIHNvbWUgYmFkLiBBcyB0aGUgcGxheXdyaWdodCBBZXNjaHlsdXMgd3JvdGUsIDxxPldoZW4gdGhlIGdvZHMgc2VuZCBldmlsLCBvbmUgY2Fubm90IGVzY2FwZSBpdC48L3E+IFRoZSBzYW1lIHdhcyB0cnVlIGZvciBncmVhdCBkZXN0aW55IGFuZCBnb29kIGZvcnR1bmUuPC9wPjxwPlRoZWlyIHJlc2lnbmVkIGF0dGl0dWRlIG1pZ2h0IHNlZW0gc3RyYW5nZSB0byB1cyB0b2RheSwgYnV0IHRoZXkgdW5kZXJzdG9vZCB3aG8gd2FzIHJlYWxseSBpbiBjb250cm9sIChub3QgdGhlbSwgbm90IHVzISkuIE5vIGFtb3VudCBvZiBwcm9zcGVyaXR5LCBubyBhbW91bnQgb2YgZGlmZmljdWx0eSwgaXMgY2VydGFpbiBvciBmb3JldmVyLiBBIHRyaXVtcGggYmVjb21lcyBhIHRyaWFsLCBhIHRyaWFsIGJlY29tZXMgYSB0cml1bXBoLiBMaWZlIGNhbiBjaGFuZ2UgaW4gYW4gaW5zdGFudC4gUmVtZW1iZXIsIHRvZGF5LCBob3cgb2Z0ZW4gaXQgZG9lcy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciA3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiSG93IHRvIGJlIFBvd2VyZnVsIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRG9uJ3QgdHJ1c3QgaW4geW91ciByZXB1dGF0aW9uLCBtb25leSwgb3IgcmVwdXRhdGlvbiwgYnV0IGluIHRoZSBzdHJlbmd0aCB0aGF0IGlzIHlvdXJzJm1kYXNoO25hbWVseSwgeW91ciBqdWRnZW1lbnRzIGFib3V0IHRoZSB0aGluZ3MgdGhhdCB5b3UgY29udHJvbCBhbmQgZG9uJ3QgY29udHJvbC4gRm9yIHRoaXMgYWxvbmUgaXMgd2hhdCBtYWtlcyB1cyBmcmVlIGFuZCB1bmZldHRlcmVkLCB0aGF0IHBpY2tzIHVzIHVwIGJ5IHRoZSBuZWNrIGZyb20gdGhlIGRlcHRocyBhbmQgbGlmdHMgdXMgZXllIHRvIGV5ZSB3aXRoIHRoZSByaWNoIGFuZCBwb3dlcmZ1bC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAzLjI2LjM0LTM1Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkluIGEgc2NlbmUgaW4gU3RldmVuIFByZXNzZmllbGQncyBjbGFzc2ljIG5vdmVsIGFib3V0IEFsZXhhbmRlciB0aGUgR3JlYXQsIDxjaXRlPlRoZSBWaXJ0dWVzIG9mIFdhcjwvY2l0ZT4sIEFsZXhhbmRlciByZWFjaGVzIGEgcml2ZXIgY3Jvc3Npbmcgb25seSB0byBiZSBjb25mcm9udGVkIGJ5IGEgcGhpbG9zb3BoZXIgd2hvIHJlZnVzZXMgdG8gbW92ZS4gPHE+VGhpcyBtYW4gaGFzIGNvbnF1ZXJlZCB0aGUgd29ybGQhPC9xPiBvbmUgb2YgQWxleGFuZGVyJ3MgbWVuIHNob3V0cy4gPHE+V2hhdCBoYXZlIHlvdSBkb25lPzwvcT4gVGhlIHBoaWxvc29waGVyIHJlc3BvbmRzLCB3aXRoIGNvbXBsZXRlIGNvbmZpZGVuY2UsIDxxPkkgaGF2ZSBjb25xdWVyZWQgdGhlIG5lZWQgdG8gY29ucXVlciB0aGUgd29ybGQuPC9xPjwvcD48cD5XZSBkbyBrbm93IHRoYXQgQWxleGFuZGVyIGRpZCBjbGFzaCB3aXRoIERpb2dlbmVzIHRoZSBDeW5pYywgYSBwaGlsb3NvcGhlciBrbm93biBmb3IgaGlzIHJlamVjdGlvbiBvZiB3aGF0IHNvY2lldHkgcHJpemVzIGFuZCwgYnkgZXh0ZW5zaW9uLCBBbGV4YW5kZXIncyBzZWxmLWltYWdlLiBKdXN0IGFzIGluIFByZXNzZmllbGQncyBmaWN0aW9uYWwgZW5jb3VudGVyLCBpbiBEaW9nZW5lcydzIHJlYWwgY29uZnJvbnRhdGlvbiB3aXRoIEFsZXhhbmRlciwgdGhlIHBoaWxvc29waGVyIHdhcyBtb3JlIHBvd2VyZnVsIHRoYW4gdGhlIG1vc3QgcG93ZXJmdWwgbWFuIGluIHRoZSB3b3JsZCZtZGFzaDtiZWNhdXNlLCB1bmxpa2UgaGltLCBEaW9nZW5lcyBoYWQgZmV3ZXIgd2FudHMuIFRoZXkgd2VyZSBhYmxlIHRvIGxvb2sgZWFjaCBvdGhlciBpbiB0aGUgZXllIGFuZCBzZWUgd2hvIHJlYWxseSBoYWQgY29udHJvbCBvdmVyIGhpbXNlbGYsIHdobyBoYWQgYWNoaWV2ZWQgdGhlIHNlbGYtbWFzdGVyeSByZXF1aXJlZCBmb3IgcmVhbCBhbmQgbGFzdGluZyBwb3dlci48L3A+PHA+WW91IGNhbiBoYXZlIHRoYXQgdG9vLiBJdCBqdXN0IG1lYW5zIGZvY3VzaW5nIGlud2FyZCBvbiBhY3F1aXJpbmcgcG93ZXIgcmF0aGVyIHRoYW4gb3V0d2FyZC4gQXMgUHVibGlsdXMgU3lydXMsIGhpbXNlbGYgYSBmb3JtZXIgc2xhdmUsIHB1dCBpdDogPHE+V291bGQgeW91IGhhdmUgYSBncmVhdCBlbXBpcmU/IFJ1bGUgb3ZlciB5b3Vyc2VsZiE8L3E+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkFjdG9ycyBpbiBhIFBsYXkiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJSZW1lbWJlciB0aGF0IHlvdSBhcmUgYW4gYWN0b3IgaW4gYSBwbGF5LCBwbGF5aW5nIGEgY2hhcmFjdGVyIGFjY29yZGluZyB0byB0aGUgd2lsbCBvZiB0aGUgcGxheXdyaWdodCZtZGFzaDtpZiBhIHNob3J0IHBsYXksIHRoZW4gaXQncyBzaG9ydDsgaWYgbG9uZywgbG9uZy4gSWYgaGUgd2lzaGVzIHlvdSB0byBwbGF5IHRoZSBiZWdnYXIsIHBsYXkgZXZlbiB0aGF0IHJvbGUgd2VsbCwganVzdCBhcyB5b3Ugd291bGQgaWYgaXQgd2VyZSBhIGNyaXBwbGUsIGEgaG9uY2hvLCBvciBhbiBldmVyeWRheSBwZXJzb24uIEZvciB0aGlzIGlzIHlvdXIgZHV0eSwgdG8gcGVyZm9ybSB3ZWxsIHRoZSBjaGFyYWN0ZXIgYXNzaWduZWQgeW91LiBUaGF0IHNlbGVjdGlvbiBiZWxvbmdzIHRvIGFub3RoZXIuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRW5jaGlyaWRpb24sIDE3Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPk1hcmN1cyBBdXJlbGl1cyBkaWRuJ3Qgd2FudCB0byBiZSBlbXBlcm9yLiBIZSB3YXNuJ3QgYSBwb2xpdGljaWFuIHdobyBzb3VnaHQgb2ZmaWNlLCBhbmQgaGUgd2Fzbid0IGEgdHJ1ZSBoZWlyIHRvIHRoZSB0aHJvbmUuIEFzIGZhciBhcyB3ZSBjYW4gdGVsbCBmcm9tIGhpcyBsZXR0ZXJzIGFuZCBmcm9tIGhpc3RvcnksIHdoYXQgaGUgcmVhbGx5IHdhbnRlZCB3YXMgdG8gYmUgYSBwaGlsb3NvcGhlci4gQnV0IHRoZSBwb3dlcmZ1bCBlbGl0ZSBpbiBSb21lLCBpbmNsdWRpbmcgdGhlIGVtcGVyb3IgSGFkcmlhbiwgc2F3IHNvbWV0aGluZyBpbiBoaW0uIEdyb29tZWQgZm9yIHBvd2VyLCBNYXJjdXMgd2FzIGFkb3B0ZWQgYW5kIHB1dCBpbiBsaW5lIGZvciB0aGUgdGhyb25lIGJlY2F1c2UgdGhleSBrbmV3IGhlIGNvdWxkIGhhbmRsZSBpdC4gTWVhbndoaWxlLCBFcGljdGV0dXMgbGl2ZWQgbXVjaCBvZiBoaXMgbGlmZSBhcyBhIHNsYXZlIGFuZCB3YXMgcGVyc2VjdXRlZCBmb3IgaGlzIHBoaWxvc29waGljYWwgdGVhY2hpbmdzLiBCb3RoIGRpZCBxdWl0ZSBhIGxvdCB3aXRoIHRoZSByb2xlcyB0aGV5IHdlcmUgYXNzaWduZWQuIDwvcD48cD5PdXIgc3RhdGlvbiBpbiBsaWZlIGNhbiBiZSBhcyByYW5kb20gYXMgYSByb2xsIG9mIHRoZSBkaWNlLiBTb21lIG9mIHVzIGFyZSBib3JuIGludG8gcHJpdmlsZWdlLCBvdGhlcnMgaW50byBhZHZlcnNpdHkuIFNvbWV0aW1lcyB3ZSdyZSBnaXZlbiBleGFjdGx5IHRoZSBvcHBvcnR1bml0aWVzIHdlIHdhbnQuIEF0IG90aGVyIHRpbWVzLCB3ZSdyZSBnaXZlbiBhIGx1Y2t5IGJyZWFrLCBidXQgdG8gdXMgaXQgZmVlbHMgbGlrZSBhIGJ1cmRlbi48L3A+PHA+VGhlIFN0b2ljcyByZW1pbmQgdXMgdGhhdCB3aGF0ZXZlciBoYXBwZW5zIHRvIHVzIHRvZGF5IG9yIG92ZXIgdGhlIGNvdXJzZSBvZiBvdXIgbGl2ZXMsIHdoZXJldmVyIHdlIGZhbGwgb24gdGhlIGludGVsbGVjdHVhbCwgc29jaWFsLCBvciBwaHlzaWNhbCBzcGVjdHJhLCBvdXIgam9iIGlzIG5vdCB0byBjb21wbGFpbiBvciBiZW1vYW4gb3VyIHBsaWdodCBidXQgdG8gZG8gdGhlIGJlc3Qgd2UgY2FuIHRvIGFjY2VwdCBpdCBhbmQgZnVsZmlsbCBpdC4gSXMgdGhlcmUgc3RpbGwgcm9vbSBmb3IgZmxleGliaWxpdHkgb3IgYW1iaXRpb24/IE9mIGNvdXJzZSEgVGhlIGhpc3Rvcnkgb2YgdGhlIHN0YWdlIGlzIGxpdHRlcmVkIHdpdGggc3RvcmllcyBvZiBiaXQgcGFydHMgdGhhdCB0dXJuZWQgaW50byBzdGFycmluZyByb2xlcyBhbmQgaW5kZWxpYmxlIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGV4cGFuZGVkIGluIGZ1dHVyZSBhZGFwdGF0aW9ucy4gQnV0IGV2ZW4gdGhpcyBiZWdpbnMgd2l0aCBhY2NlcHRhbmNlIGFuZCB1bmRlcnN0YW5kaW5nJm1kYXNoO2FuZCBhIGRlc2lyZSB0byBleGNlbCBhdCB3aGF0IHdlIGhhdmUgYmVlbiBhc3NpZ25lZC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciA5IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQWxsIGlzIEZsdWlkIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhlIHVuaXZlcnNlIGlzIGNoYW5nZS4gTGlmZSBpcyBvcGluaW9uLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA0LjMuNGIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SW4gUGx1dGFyY2gncyA8Y2l0ZT5MaWZlIG9mIFRoZXNldXM8L2NpdGU+LCBoZSBkZXNjcmliZXMgaG93IHRoZSBzaGlwIG9mIFRoZXNldXMsIGFuIEF0aGVuaWFuIGhlcm8sIHdhcyBwcmVzZXJ2ZWQgYnkgdGhlIHBlb3BsZSBvZiBBdGhlbnMgaW4gYmF0dGxlLXJlYWR5IGNvbmRpdGlvbiBmb3IgbWFueSBjZW50dXJpZXMuIEVhY2ggdGltZSBhIGJvYXJkIGRlY2F5ZWQsIGl0IHdvdWxkIGJlIHJlcGxhY2VkIHVudGlsIGV2ZW50dWFsbHkgZXZlcnkgc3RpY2sgb2Ygd29vZCBpbiBpdCBoYWQgYmVlbiByZXBsYWNlZC4gUGx1dGFyY2ggYXNrczogSXMgaXQgc3RpbGwgdGhlIHNoaXAgb2YgVGhlc2V1cywgb3IgaXMgaXQgYSBuZXcgb25lPzwvcD48cD5JbiBKYXBhbiwgYSBmYW1vdXMgU2hpbnRvIHNocmluZSBpcyByZWJ1aWx0IGV2ZXJ5IHR3ZW50eS10aHJlZSB5ZWFycy4gSXQncyBnb25lIHRocm91Z2ggbW9yZSB0aGFuIHNpeHR5IG9mIHRob3NlIGN5Y2xlcy4gSXMgaXQgb25lIHNocmluZSwgMSw0MDAgeWVhcnMgb2xkPyBPciBzaXh0eSBjb25zZWN1dGl2ZSBzaHJpbmVzPyBFdmVuIHRoZSBVLlMuIFNlbmF0ZSwgZ2l2ZW4gaXRzIHN0YWdnZXJlZCBlbGVjdGlvbnMsIGNvdWxkIGJlIHNhaWQgdG8gaGF2ZSBuZXZlciBiZWVuIGZ1bGx5IHR1cm5lZCBvdmVyLiBJcyBpdCB0aGUgc2FtZSBib2R5IGZvcm1lZCBpbiB0aGUgZGF5cyBvZiBHZW9yZ2UgV2FzaGluZ3Rvbj88L3A+PHA+T3VyIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBzb21ldGhpbmcgPGVtPmlzPC9lbT4gaXMganVzdCBhIHNuYXBzaG90Jm1kYXNoO2FuIGVwaGVtZXJhbCBvcGluaW9uLiBUaGUgdW5pdmVyc2UgaXMgaW4gYSBjb25zdGFudCBzdGF0ZSBvZiBjaGFuZ2UuIE91ciBuYWlscyBncm93IGFuZCBhcmUgY3V0IGFuZCBrZWVwIGdyb3dpbmcuIE5ldyBza2luIHJlcGxhY2VzIGRlYWQgc2tpbi4gT2xkIG1lbW9yaWVzIGFyZSByZXBsYWNlZCBieSBuZXcgbWVtb3JpZXMuIEFyZSB3ZSBzdGlsbCB0aGUgc2FtZSBwZW9wbGU/IEFyZSB0aGUgcGVvcGxlIGFyb3VuZCB1cyB0aGUgc2FtZT8gTm90aGluZyBpcyBleGVtcHQgZnJvbSB0aGlzIGZsdWlkaXR5LCBub3QgZXZlbiB0aGUgdGhpbmdzIHdlIGhvbGQgbW9zdCBzYWNyZWQuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMTAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJBbHdheXMgdGhlIFNhbWUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGluayBieSB3YXkgb2YgZXhhbXBsZSBvbiB0aGUgdGltZXMgb2YgVmVzcGFzaWFuLCBhbmQgeW91J2xsIHNlZSBhbGwgdGhlc2UgdGhpbmdzOiBtYXJyeWluZywgcmFpc2luZyBjaGlsZHJlbiwgZmFsbGluZyBpbGwsIGR5aW5nLCB3YXJzLCBob2xpZGF5IGZlYXN0cywgY29tbWVyY2UsIGZhcm1pbmcsIGZsYXR0ZXJpbmcsIHByZXRlbmRpbmcsIHN1c3BlY3RpbmcsIHNjaGVtaW5nLCBwcmF5aW5nIHRoYXQgb3RoZXJzIGRpZSwgZ3J1bWJsaW5nIG92ZXIgb25lJ3MgbG90LCBmYWxsaW5nIGluIGxvdmUsIGFtYXNzaW5nIGZvcnR1bmVzLCBsdXN0aW5nIGFmdGVyIG9mZmljZSBhbmQgcG93ZXIuIE5vdyB0aGF0IGxpZmUgb2YgdGhlaXJzIGlzIGRlYWQgYW5kIGdvbmUgLiAuIC4gdGhlIHRpbWUgb2YgVHJhamFuLCBhZ2FpbiB0aGUgc2FtZSAuIC4gLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA0LjMyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkVhcm5lc3QgSGVtaW5nd2F5IG9wZW5zIGhpcyBib29rIDxjaXRlPlRoZSBTdW4gQWxzbyBSaXNlczwvY2l0ZT4gd2l0aCBhIEJpYmxlIHZlcnNlOiA8cT5PbmUgZ2VuZXJhdGlvbiBwYXNzZXRoLCBhbmQgYW5vdGhlciBnZW5lcmF0aW9uIGNvbWV0aDsgYnV0IHRoZSBlYXJ0aCBhYmlkZXRoIGZvcmV2ZXIuIFRoZSBzdW4gYWxzbyBhcmlzZXRoLCBhbmQgdGhlIHN1biBnb2V0aCBkb3duLCBhbmQgaGFzdGV0aCB0byBoaXMgcGxhY2Ugd2hlcmUgaGUgYXJvc2UuPC9xPiBJdCB3YXMgdGhpcyBwYXNzYWdlLCBoaXMgZWRpdG9yIHdvdWxkIHNheSwgdGhhdCA8cT5jb250YWluZWQgYWxsIHRoZSB3aXNkb20gb2YgdGhlIGFuY2llbnQgd29ybGQuPC9xPjwvcD48cD5BbmQgd2hhdCB3aXNkb20gaXMgdGhhdD8gT25lIG9mIHRoZSBtb3N0IHN0cmlraW5nIHRoaW5ncyBhYm91dCBoaXN0b3J5IGlzIGp1c3QgaG93IGxvbmcgaHVtYW4gYmVpbmdzIGhhdmUgYmVlbiBkb2luZyB3aGF0IHRoZXkgZG8uIFRob3VnaCBjZXJ0YWluIGF0dGl0dWRlcyBhbmQgcHJhY3RpY2VzIGhhdmUgY29tZSBhbmQgZ29uZSwgd2hhdCdzIGxlZnQgYXJlIHBlb3BsZSZtZGFzaDtsaXZpbmcsIGR5aW5nLCBsb3ZpbmcsIGZpZ2h0aW5nLCBjcnlpbmcsIGxhdWdoaW5nLjwvcD48cD5CcmVhdGhsZXNzIG1lZGlhIHJlcG9ydHMgb3IgcG9wdWxhciBib29rcyBvZnRlbiBwZXJwZXR1YXRlIHRoZSBiZWxpZWYgdGhhdCB3ZSd2ZSByZWFjaGVkIHRoZSBhcGV4IG9mIGh1bWFuaXR5LCBvciB0aGF0IHRoaXMgdGltZSwgdGhpbmdzIDxlPnJlYWxseSBhcmUgZGlmZmVyZW50PC9lPi4gVGhlIGlyb255IGlzIHRoYXQgcGVvcGxlIGhhdmUgYmVsaWV2ZWQgdGhhdCBmb3IgY2VudHVyaWVzLjwvcD48cD5TdHJvbmcgcGVvcGxlIHJlc2lzdCB0aGlzIG5vdGlvbi4gVGhleSBrbm93IHRoYXQgd2l0aCBhIGZldyBleGNlcHRpb25zLCB0aGluZ3MgYXJlIHRoZSBzYW1lIGFzIHRoZXkndmUgYWx3YXlzIGJlZW4gYW5kIGFsd2F5cyB3aWxsIGJlLiBZb3UncmUganVzdCBsaWtlIHRoZSBwZW9wbGUgd2hvIGNhbWUgYmVmb3JlIHlvdSwgYW5kIHlvdSdyZSBidXQgYSBicmllZiBzdG9wb3ZlciB1bnRpbCB0aGUgcGVvcGxlIGp1c3QgbGlrZSB5b3Ugd2hvIHdpbGwgY29tZSBhZnRlci4gVGhlIGVhcnRoIGFiaWRlcyBmb3JldmVyLCBidXQgd2Ugd2lsbCBjb21lIGFuZCBnby48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAxMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkl0J3MgTm90IFRoZSBUaGluZywgSXQncyBXaGF0IFdlIE1ha2UgT2YgSXQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXaGVuIHlvdSBhcmUgZGlzdHJlc3NlZCBieSBhbiBleHRlcm5hbCB0aGluZywgaXQncyBub3QgdGhlIHRoaW5nIGl0c2VsZiB0aGF0IHRyb3VibGVzIHlvdSwgYnV0IG9ubHkgeW91ciBqdWRnZW1lbnQgb2YgaXQuIEFuZCB5b3UgY2FuIHdpcGUgdGhpcyBvdXQgYXQgYSBtb2VtZW50J3Mgbm90aWNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA4LjQ3Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkltYWdpbmUgeW91J3ZlIGRyZWFtZWQgb2YgYSBsaWZlIGluIHBvbGl0aWNzLiBZb3UncmUgeW91bmcsIHlvdSdyZSB2aWdvcm91cywgYW5kIHlvdSd2ZSBoZWxkIGluY3JlYXNpbmdseSBwb3dlcmZ1bCBwb3NpdGlvbnMgb3ZlciB0aGUgY291cnNlIG9mIHlvdXIgY2FyZWVyLiBUaGVuIGF0IHRoaXJ0eS1uaW5lLCB5b3Ugc3RhcnQgdG8gZmVlbCBydW4gZG93bi4gWW91ciBkb2N0b3JzIHRlbGwgeW91IHRoYXQgeW91IGhhdmUgcG9saW8gYW5kIHlvdXIgbGlmZSB3aWxsIG5ldmVyIGJlIHRoZSBzYW1lLiBZb3VyIGNhcmVlciBpcyBvdmVyJm1kYXNoO3JpZ2h0PzwvcD48cD5UaGlzIGlzIHRoZSBzdG9yeSBvZiBGcmFua2xpbiBEZWxhbm8gUm9vc2V2ZWx0LCBub3cgd2lkZWx5IHJlZ2FyZGVkIGFzIG9uZSBvZiBBbWVyaWNhJ3MgZ3JlYXRlc3QgcG9saXRpY2FsIGxlYWRlcnMuIEhlIHdhcywgYXQgbWlkZGxlIGFnZSwgZGlhZ25vc2VkIHdpdGggcG9saW8gYWZ0ZXIgc3BlbmRpbmcgeWVhcnMgcHJlcGFyaW5nIGZvciBhbmQgZHJlYW1pbmcgYWJvdXQgdGhlIHByZXNpZGVuY3kuPC9wPjxwPkl0J3MgaW1wb3NzaWJsZSB0byB1bmRlcnN0YW5kIEZEUiB3aXRob3V0IHVuZGVyc3RhbmRpbmcgdGhpcyBkaXNhYmlsaXR5LiBUaGUgPHE+ZXh0ZXJuYWwgdGhpbmc8L3E+IHdhcyB0aGF0IGhlIHdhcyBjcmlwcGxlZCZtZGFzaDt0aGlzIHdhcyBhIGxpdGVyYWwgZmFjdCZtZGFzaDtidXQgaGlzIGp1ZGdlbWVudCBvZiBpdCB3YXMgdGhhdCBpdCBkaWQgbm90IGNyaXBwbGUgaGlzIGNhcmVlciBvciBoaXMgcGVyc29uaG9vZC4gVGhvdWdoIGhlIHdhcyBjZXJ0YWlubHkgdGhlIHZpY3RpbSBvZiBhIHRoZW4gaW5jdXJhYmxlIGRpc2Vhc2UsIGhlIHdpcGVkIGF3YXkmbWRhc2g7YWxtb3N0IGltbWVkaWF0ZWx5Jm1kYXNoO3RoZSB2aWN0aW0ncyBtZW50YWxpdHkuPC9wPjxwPkxldCdzIG5vdCBjb25mdXNlIGFjY2VwdGFuY2Ugd2l0aCBwYXNzaXZpdHkuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMTIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgU3Ryb25nIEFjY2VwdCBSZXNwb25zaWJpbGl0eSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIklmIHdlIGp1ZGdlIGFzIGdvb2QgYW5kIGV2aWwgb25seSB0aGUgdGhpbmdzIGluIHRoZSBwb3dlciBvZiBvdXIgb3duIGNob2ljZSwgdGhlbiB0aGVyZSBpcyBubyByb29tIGxlZnQgZm9yIGJsYW1pbmcgZ29kcyBvciBiZWluZyBob3N0aWxlIHRvIG90aGVycy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNi40MSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5BIHNpZ24gb24gUHJlc2lkZW50IEhhcnJ5IFRydW1hbidzIGRlc2sgcmVhZCwgVEhFIEJVQ0sgU1RPUFMgSEVSRS4gQXMgcHJlc2lkZW50LCB3aXRoIG1vcmUgcG93ZXIgYW5kIGNvbnRyb2wgdGhhbiBwcmV0dHkgbXVjaCBhbnlvbmUgZWxzZSwgaGUga25ldyB0aGF0LCBnb29kIG9yIGJhZCwgdGhlcmUgd2Fzbid0IGFueW9uZSBoZSBjb3VsZCBibGFtZSBmb3Igc3R1ZmYgb3RoZXIgdGhhbiBoaW1zZWxmLiBUaGVyZSB3YXMgbm8gb25lIHRvIHBhc3MgdGhlIGJ1Y2sgdG8uIFRoZSBjaGFpbiBlbmRlZCB0aGVyZSwgaW4gdGhlIE92YWwgT2ZmaWNlLjwvcD48cD5BcyB0aGUgcHJlc2lkZW50IG9mIG91ciBvd24gbGl2ZXMmbWRhc2g7YW5kIGtub3dpbmcgdGhhdCBvdXIgcG93ZXJzIGJlZ2luIGFuZCBlbmQgd2l0aCBvdXIgcmVhc29uZWQgY2hvaWNlJm1kYXNoO3dlIHdvdWxkIGRvIHdlbGwgdG8gaW50ZXJuYWxpemUgdGhpcyBzYW1lIGF0dGl0dWRlLiBXZSBkb24ndCBjb250cm9sIHRoaW5ncyBvdXRzaWRlIHRoYXQgc3BoZXJlLCBidXQgd2UgZG8gY29udHJvbCBvdXIgYXR0aXR1ZGVzIGFuZCBvdXIgcmVzcG9uc2VzIHRvIHRob3NlIGV2ZW50cyZtZGFzaDthbmQgdGhhdCdzIHBsZW50eS4gSXQncyBlbm91Z2ggdGhhdCB3ZSBnbyBpbnRvIGVhY2ggYW5kIGV2ZXJ5IGRheSBrbm93aW5nIHRoYXQgdGhlcmUgaXMgbm8gb25lIHRvIHBhc3MgdGhlIGJ1Y2sgdG8uIEl0IGVuZHMgd2l0aCB1cy48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAxMyIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIk5ldmVyIENvbXBsYWluLCBOZXZlciBFeHBsYWluIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRG9uJ3QgYWxsb3cgeW91cnNlbGYgdG8gYmUgaGVhcmQgYW55IGxvbmdlciBncmlwaW5nIGFib3V0IHB1YmxpYyBsaWZlLCBub3QgZXZlbiB3aXRoIHlvdXIgb3duIGVhcnMhIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDguOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Ob3Qgb25seSBkbyBldmVuIHRoZSBtb3N0IGZvcnR1bmF0ZSBvZiB1cyBjb21wbGFpbiwgaXQgb2Z0ZW4gc2VlbXMgbGlrZSB0aGUgbW9yZSBmb3J0dW5hdGUgd2UgYXJlLCB0aGUgbW9yZSB0aW1lIHdlIGhhdmUgdG8gZG8gc28uIE1hcmN1cyBBdXJlbGl1cyB3YXMgYSByZWx1Y3RhbnQgY2hpZWYgZXhlY3V0aXZlJm1kYXNoO2p1c3QgYXMgeW91IG1pZ2h0IGJlIGEgcmVsdWN0YW50IGFjY291bnRhbnQsIGtpZCdzIHNvY2NlciBjb2FjaCwgb3IgbGF3eWVyLiBPciBwZXJoYXBzIHlvdSBnZW5lcmFsbHkgbGlrZSB5b3VyIGpvYiwgYnV0IHlvdSBjb3VsZCBkbyB3aXRob3V0IGEgZmV3IG9mIGl0cyBhdHRlbmRhbnQgcmVzcG9uc2liaWxpdGllcy4gV2hlcmUgZG9lcyB0aGF0IHRoaW5raW5nIGdldCB5b3U/IE5vd2hlcmUsIG90aGVyIHRoYW4gaW4gYSBuZWdhdGl2ZSBzdGF0ZSBvZiBtaW5kLjwvcD48cD5JdCBjYWxscyB0byBtaW5kIGEgbW90dG8gb2YgQnJpdGlzaCBwcmltZSBtaW5pc3RlciBCZW5qYW1pbiBEaXNyYWVsaTogPHE+TmV2ZXIgY29tcGxhaW4sIG5ldmVyIGV4cGxhaW4uPC9xPiBIZSBzYWlkIHRoaXMgYmVjYXVzZSwgbGlrZSBNYXJjdXMsIGhlIGtuZXcgdGhhdCB0aGUgYnVyZGVucyBvZiByZXNwb25zaWJpbGl0eSB3ZXJlIGltbWVuc2UuIEl0J3Mgc28gZWFzeSB0byBjb21wbGFpbiBhYm91dCB0aGlzIG9yIHRoYXQsIG9yIHRvIHRyeSB0byBtYWtlIGV4Y3VzZXMgYW5kIGp1c3RpZmljYXRpb25zIGZvciB0aGUgdGhpbmdzIHlvdSd2ZSBkb25lLiBCdXQgdGhhdCBkb2Vzbid0IGFjY29tcGxpc2ggYW55dGhpbmcmbWRhc2g7YW5kIGl0IG5ldmVyIGxpZ2h0ZW5zIHRoZSBsb2FkLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDE0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiWW91IENob29zZSBUaGUgT3V0Y29tZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkhlIHdhcyBzZW50IHRvIHByaXNvbi4gQnV0IHRoZSBvYnNlcnZhdGlvbiAmbHNxdW87aGUgaGFzIHN1ZmZlcmVkIGV2aWwsJnJzcXVvOyBpcyBhbiBhZGRpdGlvbiBjb21pbmcgZnJvbSB5b3UuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy44LjViLTZhIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoaXMgaXMgY2xhc3NpYyBTdG9pYyB0aGlua2luZywgYXMgeW91J3ZlIGdhdGhlcmVkIGJ5IG5vdy4gQW4gZXZlbnQgaXRzZWxmIGlzIG9iamVjdGl2ZS4gSG93IHdlIGRlc2NyaWJlIGl0Jm1kYXNoO3RoYXQgaXQgd2FzIHVuZmFpciwgb3IgaXQncyBhIGdyZWF0IGNhbGFtaXR5LCBvciB0aGF0IHRoZXkgZGlkIGl0IG9uIHB1cnBvc2UmbWRhc2g7aXMgb24gdXMuPC9wPjxwPk1hbGNvbSBYICh0aGVuIE1hbGNvbSBMaXR0bGUpIHdlbnQgaW50byBwcmlzb24gYSBjcmltaW5hbCwgYnV0IGhlIGxlZnQgYXMgYW4gZWR1Y2F0ZWQsIHJlbGlnaW91cywgYW5kIG1vdGl2YXRlZCBtYW4gd2hvIHdvdWxkIGhlcCBpbiB0aGUgc3RydWdnbGUgZm9yIGNpdmlsIHJpZ2h0cy4gRGlkIGhlIHN1ZmZlciBhbiBldmlsPyBPciBkaWQgaGUgY2hvb3NlIHRvIG1ha2UgaGlzIGV4cGVyaWVuY2UgYSBwb3NpdGl2ZSBvbmU/PC9wPjxwPkFjY2VwdGFuY2UgaXMgcGFzc2l2ZS4gSXQncyB0aGUgZmlyc3Qgc3RlcCBpbiBhbiBhY3RpdmUgcHJvY2VzcyB0b3dhcmQgc2VsZi1pbXByb3ZpbmcuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMTUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJFdmVyeXRoaW5nIElzIENoYW5nZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIk1lZGl0YXRlIG9mdGVuIG9uIHRoZSBzd2lmdG5lc3Mgd2l0aCB3aGljaCBhbGwgdGhhdCBleGlzdHMgYW5kIGlzIGNvbWluZyBpbnRvIGJlaW5nIGlzIHN3ZXB0IGJ5IHVzIGFuZCBjYXJyaWVkIGF3YXkuIEZvciBzdWJzdGFuY2UgaXMgbGlrZSBhIHJpdmVyJ3MgdW5lbmRpbmcgZmxvdywgaXRzIGFjdGl2aXRpZXMgY29udGludWFsbHkgY2hhbmdpbmcgYW5kIGNhdXNlcyBpbmZpbml0ZWx5IHNoaWZ0aW5nIHNvIHRoYXQgYWxtb3N0IG5vdGhpbmcgYXQgYWxsIHN0YW5kcyBzdGlsbC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNS4yMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5NYXJjdXMgYm9ycm93cyB0aGlzIHdvbmRlcmZ1bCBtZXRhcGhvciBmcm9tIEhlcmFjbGl0dXMsIHdobyBzYWlkLCA8cT5ObyBtYW4gc3RlcCBpbiB0aGUgc2FtZSByaXZlciB0d2ljZS48L3E+IEJlY2F1c2UgdGhlIHJpdmVyIGhhcyBjaGFuZ2VkLCBhbmQgc28gaGFzIHRoZSBtYW4uPC9wPjxwPkxpZmUgaXMgaW4gYSBjb25zdGFudCBzdGF0ZSBvZiBjaGFuZ2UuIEFuZCBzbyBhcmUgd2UuIFRvIGdldCB1cHNldCBieSB0aGluZ3MgaXMgdG8gd3JvbmdseSBhc3N1bWUgdGhhdCB0aGV5IHdpbGwgbGFzdC4gVG8ga2ljayBvdXJzZWx2ZXMgb3IgYmxhbWUgb3RoZXJzIGlzIGdyYWJiaW5nIGF0IHRoZSB3aW5kLiBUbyByZXNlbnQgY2hhbmdlIGlzIHRvIHdyb25nbHkgYXNzdW1lIHRoYXQgeW91IGhhdmUgYSBjaG9pY2UgaW4gdGhlIG1hdHRlci48L3A+PHA+RXZlcnl0aGluZyBpcyBjaGFuZ2UuIEVtYnJhY2UgdGhhdC4gRmxvdyB3aXRoIGl0LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDE2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiSG9wZSBBbmQgRmVhciBBcmUgVGhlIFNhbWUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJIZWNhdG8gc2F5cywg4oCYY2Vhc2UgdG8gaG9wZSBhbmQgeW91IHdpbGwgY2Vhc2UgdG8gZmVhci4nIC4gLiAuIFRoZSBwcmltYXJ5IGNhdXNlIG9mIGJvdGggdGhlc2UgaWxscyBpcyB0aGF0IGluc3RlYWQgb2YgYWRhcHRpbmcgb3Vyc2VsdmVzIHRvIHByZXNlbnQgY2lyY3Vtc3RhbmNlcyB3ZSBzZW5kIG91dCB0aG91Z2h0cyB0b28gZmFyIGFoZWFkLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk1vcmFsIExldHRlcnMsIDUuN2ItOCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Ib3BlIGlzIGdlbmVyYWxseSByZWdhcmRlZCBhcyBnb29kLiBGZWFyIGlzIGdlbmVyYWxseSByZWdhcmRlZCBhcyBiYWQuIFRvIGEgU3RvaWMgbGlrZSBIZWNhdG8gKGtub3duIGFzIEhlY2F0byBvZiBSaG9kZXMpLCB0aGV5IGFyZSB0aGUgc2FtZSZtZGFzaDtib3RoIGFyZSBwcm9qZWN0aW9ucyBpbnRvIHRoZSBmdXR1cmUgYWJvdXQgdGhpbmdzIHdlIGRvIG5vdCBjb250cm9sLiBCb3RoIGFyZSB0aGUgZW5lbXkgb2YgdGhpcyBwcmVzZW50IG1vbWVudCB0aGF0IHlvdSBhcmUgYWN0dWFsbHkgaW4uIEJvdGggbWVhbiB5b3UncmUgbGl2aW5nIGEgbGlmZSBpbiBvcHBvc2l0aW9uIHRvIDxlbT5hbW9yIGZhdGk8L2VtPi48L3A+PHA+SXQncyBub3QgYWJvdXQgb3ZlcmNvbWluZyBvdXIgZmVhcnMgYnV0IHVuZGVyc3RhbmRpbmcgdGhhdCBib3RoIGhvcGUgYW5kIGZlYXIgY29udGFpbiBhIGRhbmdlcm91cyBhbW91bnQgb2YgPGVtPndhbnQ8L2VtPiBhbmQgPGVtPndvcnJ5PC9lbT4gaW4gdGhlbS4gQW5kLCBzYWRseSwgdGhlIHdhbnQgaXMgd2hhdCBjYXVzZXMgdGhlIHdvcnJ5LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDE3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiSnVkZ2UgTm90LCBMZXN0Li4uIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiV2hlbiBwaGlsb3NvcGh5IGlzIHdpZWxkZWQgd2l0aCBhcnJvZ2FuY2UgYW5kIHN0dWJib3JubHksIGl0IGlzIHRoZSBjYXVzZSBmb3IgdGhlIHJ1aW4gb2YgbWFueS4gTGV0IHBoaWxvc29waHkgc2NyYXBlIG9mZiB5b3VyIG93biBmYXVsdHMsIHJhdGhlciB0aGFuIGJlIGEgd2F5IHRvIHJhaWwgYWdhaW5zdCB0aGUgZmF1bHRzIG9mIG90aGVycy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCAxMDMuNGItNWEiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+UmVtZW1iZXIsIHRoZSBwcm9wZXIgZGlyZWN0aW9uIG9mIHBoaWxvc29waHkmbWRhc2g7b2YgYWxsIHRoZSB0aGluZ3Mgd2UncmUgZG9pbmcgaGVyZSZtZGFzaDtpcyBmb2N1c2VkIGlud2FyZC4gVG8gbWFrZSA8ZW0+b3Vyc2VsdmVzPC9lbT4gYmV0dGVyIGFuZCB0byBsZWF2ZSBvdGhlciBwZW9wbGUgdG8gdGhhdCB0YXNrIGZvciB0aGVtc2VsdmVzIGFuZCB0aGVpciBvd24gam91cm5leS4gT3VyIGZhdWx0cyBhcmUgaW4gb3VyIGNvbnRyb2wuLCBhbmQgc28gd2UgdHVybiB0byBwaGlsb3NvcGh5IHRvIGhlbHAgc2NyYXBlIHRoZW0gb2ZmIGxpa2UgYmFybmFjbGVzIGZyb20gdGhlIGh1bGwgb2YgYSBzaGlwLiBPdGhlciBwZW9wbGUncyBmYXVsdHM/IE5vdCBzbyBtdWNoLiBUaGF0J3MgZm9yIHRoZW0gdG8gZG8uPC9wPjxwPkxlYXZlIG90aGVyIHBlb3BsZSB0byB0aGVpciBmYXVsdHMuIE5vdGhpbmcgaW4gU3RvaWMgcGhpbG9zb3BoeSBlbXBvd2VycyB5b3UgdG8ganVkZ2UgdGhlbSZtZGFzaDtvbmx5IHRvIGFjY2VwdCB0aGVtLiBFc3BlY2lhbGx5IHdoZW4gd2UgaGF2ZSBzbyBtYW55IG9mIG91ciBvd24uPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMTgiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJGb3VyIEhhYml0cyBPZiBUaGUgU3RvaWMgTWluZCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIk91ciByYXRpb25hbCBuYXR1cmUgbW92ZXMgZnJlZWx5IGZvcndhcmQgaW4gaXRzIGltcHJlc3Npb25zIHdoZW4gaXQ6PG9sPjxsaT5hY2NlcHRzIG5vdGhpbmcgZmFsc2Ugb3IgdW5jZXJ0YWluOzwvbGk+PGxpPmRpcmVjdHMgaXRzIGltcHVsc2VzIG9ubHkgdG8gYWN0cyBmb3IgdGhlIGNvbW1vbiBnb29kOzwvbGk+PGxpPmxpbWl0cyBpdHMgZGVzaXJlcyBhbmQgYXZlcnNpb25zIG9ubHkgdG8gd2hhdCdzIGluIGl0cyBvd24gcG93ZXI8L2xpPjxsaT5lbWJyYWNlcyBldmVyeXRoaW5nIG5hdHVyZSBhc3NpZ25zIGl0PC9saT48L29sPiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA4LjciDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SWYgeW91IG5vdGljZSwgTWFyY3VzIHJlcGVhdGVkbHkgcmVtaW5kcyBoaW1zZWxmIHdoYXQgU3RvaWNpc20gaXMuIFRoZXNlIGJ1bGxldCBwb2ludHMgYXJlIGhlbHBmdWwgdG8gdGhvc2Ugb2YgdXMgcmVhZGluZyB0aG91c2FuZHMgb2YgeWVhcnMgbGF0ZXIsIGJ1dCByZWFsbHkgdGhleSB3ZXJlIGludGVuZGVkIHRvIGJlIGhlbHBmdWwgdG8gaGltLiBNYXliZSB0aGF0IGRheSBoZSBoYWQgYWNjZXB0ZWQgYSBiYWQgaW1wcmVzc2lvbiBvciBoYWQgYWN0ZWQgc2VsZmlzaGx5LiBNYXliZSBoZSBoYWQgcGlubmVkIGhpcyBob3BlcyBvbiBzb21ldGhpbmcgb3V0c2lkZSBoaXMgY29udHJvbCBvciBjb21wbGFpbmVkIGFuZCBmb3VnaHQgYWdhaW5zdCBzb21ldGhpbmcgdGhhdCBoYWQgaGFwcGVuZWQuIE9yIG1heWJlIGl0IGhhZCBqdXN0IGJlZW4gYXdoaWxlIHNpbmNlIGhlJ2QgdGhvdWdodCB0aGVzZSB0aGluZ3MgYW5kIHdhbnRlZCBhIHJlbWluZGVyLjwvcD48cD5XaGF0ZXZlciBoaXMgY2FzZSB3YXMsIG9yIHdoYXRldmVyIG91cnMgaXMgdG9kYXksIGxldCdzIGFsaWduIG91ciBtaW5kcyBhbG9uZyB0aGVzZSBmb3VyIGNyaXRpY2FsIGhhYml0czogPG9sPjxsaT5BY2NlcHQgb25seSB3aGF0IGlzIHRydWUuPC9saT48bGk+V29yayBmb3IgdGhlIGNvbW1vbiBnb29kLjwvbGk+PGxpPk1hdGNoIG91ciBuZWVkcyBhbmQgd2FudHMgd2l0aCB3aGF0IGlzIGluIG91ciBjb250cm9sLjwvbGk+PGxpPkVtYnJhY2Ugd2hhdCBuYXR1cmUgaGFzIGluIHN0b3JlIGZvciB1cy48L2xpPjwvb2w+PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJNYXhpbXMgRnJvbSBUaHJlZSBXaXNlIE1lbiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkZvciBhbnkgY2hhbGxlbmdlIHdlIHNob3VsZCBob2xkIHRocmVlIHRob3VnaHRzIGF0IG91ciBjb21tYW5kOjxiciAvPidMZWFkIG9uIEdvZCBhbmQgRGVzdGlueSw8YnIgLz5UbyB0aGF0IEdvYWwgZml4ZWQgZm9yIG1lIGxvbmcgYWdvLjxiciAvPkkgd2lsbCBmb2xsb3cgYW5kIG5vdCBzdHVtYmxlOyBldmVuIGlmIG15IHdpbGw8YnIgLz5pcyB3ZWFrIEkgd2lsbCBzb2xkaWVyIG9uLiciLA0KICAgICAgICAgICAgImF1dGhvciI6ICJDbGVhbnRoZXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJFbmNoaXJpZGlvbiwgNTMiDQogICAgICAgICAgfSwNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiV2hvZXZlciBlbWJyYWNlcyBuZWNlc3NpdHkgY291bnQgYXMgd2lzZSw8YnIgLz5za2lsbGVkIGluIGRpdmluZSBtYXR0ZXJzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkV1cmlwaWRlcyIsDQogICAgICAgICAgICAic291cmNlIjogIkVuY2hpcmlkaW9uLCA1MyINCiAgICAgICAgICB9LA0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJZiBpdCBwbGVhc2VzIHRoZSBnb2RzLCBzbyBiZSBpdC4gVGhleSBtYXkgd2VsbCBraWxsIG1lLCBidXQgdGhleSBjYW4ndCBodXJ0IG1lLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlBsYXRvJ3MgQ3JpdG8gYW5kIEFwb2xvZ3kiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJFbmNoaXJpZGlvbiwgNTMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlc2UgdGhyZWUgcXVvdGVzIGNvbXBpbGVkIGJ5IEVwaWN0ZXR1cyBzaG93IHVzJm1kYXNoO2luIHdpc2RvbSBhY3Jvc3MgaGlzdG9yeSZtZGFzaDt0aGUgdGhlbWVzIG9mIHRvbGVyYW5jZSwgZmxleGliaWxpdHksIGFuZCwgdWx0aW1hdGVseSwgYWNjZXB0YW5jZS4gQ2xlYW50aGVzIGFuZCBFdXJpcGlkZXMgZXZva2UgZGVzdGlueSBhbmQgZmF0ZSBhcyBjb25jZXB0cyB0aGF0IGhlbHAgZWFzZSBhY2NlcHRhbmNlLiBXaGVuIG9uZSBoYXMgYSBiZWxpZWYgaW4gYSBncmVhdGVyIG9yIGhpZ2hlciBwb3dlciAoYmUgaXQgR29kIG9yIGdvZHMpLCB0aGVuIHRoZXJlIGlzIG5vIHN1Y2ggdGhpbmcgYXMgYW4gZXZlbnQgZ29pbmcgY29udHJhcnkgdG8gcGxhbi48L3A+PHA+RXZlbiBpZiB5b3UgZG9uJ3QgYmVsaWV2ZSBpbiBhIGRlaXR5LCB5b3UgY2FuIHRha2Ugc29tZSBjb21mb3J0IGluIHRoZSB2YXJpb3VzIGxhd3Mgb2YgdGhlIHVuaXZlcnNlIG9yIGV2ZW4gdGhlIGNpcmNsZSBvZiBsaWZlLiBXaGF0IGhhcHBlbnMgdG8gdXMgYXMgaW5kaXZpZHVhbHMgY2FuIHNlZW0gcmFuZG9tIG9yIHVwc2V0dGluZyBvciBjcnVlbCBvciBpbmV4cGxpY2FibGUsIHdoZW4gaW4gZmFjdCB0aGVzZSBldmVudHMgbWFrZSBwZXJmZWN0IHNlbnNlIHdoZW4gb3VyIHBlcnNwZWN0aXZlIGlzIHpvb21lZCBvdXQsIGV2ZW4ganVzdCBzbGlnaHRseS48L3A+PHA+TGV0J3MgcHJhY3RpY2UgdGhpcyBwZXJzcGVjdGl2ZSB0b2RheS4gUHJldGVuZCB0aGF0IGVhY2ggZXZlbnQmbWRhc2g7d2hldGhlciBkZXNpcmVkIG9yIHVuZXhwZWN0ZWQmbWRhc2g7d2FzIHdpbGxlZCB0byBoYXBwZW4sIHdpbGxlZCBzcGVjaWZpY2FsbHkgZm9yIHlvdS4gWW91IHdvdWxkbid0IGZpZ2h0IHRoYXQsIHdvdWxkIHlvdT88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAyMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkJlaG9sZCwgTm93IEFzIEV2ZXIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJZiB5b3UndmUgc2VlbiB0aGUgcHJlc2VudCwgeW91J3ZlIHNlZW4gYWxsIHRoaW5ncywgZnJvbSB0aW1lIGltbWVtb3JpYWwgaW50byBhbGwgb2YgZXRlcm5pdHkuIEZvciBldmVyeXRoaW5nIHRoYXQgaGFwcGVucyBpcyByZWxhdGVkIGFuZCB0aGUgc2FtZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNi4zNiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgZXZlbnRzIHRoYXQgd2lsbCB0cmFuc3BpcmUgdG9kYXkgYXJlIHRoZSBzYW1lIGFzIHRoZSB0aGluZ3MgdGhhdCBoYXZlIGFsd2F5cyBvY2N1cnJlZC4gUGVvcGxlIGxpdmluZyBhbmQgZHlpbmcsIGFuaW1hbHMgbGl2aW5nIGFuZCBkeWluZywgY2xvdWRzIHJvbGxpbmcgaW4gYW5kIHJvbGxpbmcgb3V0LCBhaXIgc3Vja2VkIGluIGFuZCBzdWNrZWQgb3V0LCBhcyBpdCBoYXMgZm9yIGFlb25zLiBUaGlzIG1vbWVudCByaWdodCBub3csIHRvIHBhcmFwaHJhc2UgRW1lcnNvbiwgaXMgYSBxdW90YXRpb24gb2YgdGhlIG1vbWVudHMgdGhhdCBoYXZlIGNvbWUgYmVmb3JlIGFuZCB3aWxsIGNvbWUgZXZlciBhZnRlci48L3A+PHA+VGhpcyBpZGVhIGlzIGV4cHJlc3NlZCBub3doZXJlIG1vcmUgYmVhdXRpZnVsbHkgdGhhbiBpbiB0aGUgQ2hyaXN0aWFuaXR5IGh5bW4gPGNpdGU+R2xvcmlhIFBhdHJpLjwvY2l0ZT4gPHE+QXMgaXQgd2FzIGluIHRoZSBiZWdpbm5pbmcsIGFuZCBub3csIGFuZCBhbHdheXMsIGFuZCB0byB0aGUgYWdlcyBvZiBhZ2VzLjwvcT4gVGhpcyB0aG91Z2h0IGlzIG5vdCBzdXBwb3NlZCB0byBiZSBkZXByZXNzaW5nIG9yIHVwbGlmdGluZy4gSXQncyBqdXN0IGEgZmFjdC4gSG93ZXZlciwgaXQgY2FuIGhhdmUgYSBjYWxtaW5nLCBjZW50ZXJpbmcgZWZmZWN0LiBObyBuZWVkIHRvIGdldCBleGNpdGVkLCBubyBuZWVkIHRvIHdhaXQgb24gcGlucyBhbmQgbmVlZGxlcy4gSWYgeW91IGhhdmVuJ3Qgc2VlbiB0aGlzIGJlZm9yZSwgc29tZW9uZSBlbHNlIGhhcy4gVGhhdCBjYW4gYmUgYSByZWxpZWYuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMjEiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJPbmNlIElzIEVub3VnaCwgT25jZSBJcyBGb3JldmVyIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQSBnb29kIGlzbid0IGluY3JlYXNlZCBieSB0aGUgYWRkaXRpb24gb2YgdGltZSwgYnV0IGlmIG9uZSBpcyB3aXNlIGZvciBldmVuIGEgbW9tZW50LCB0aGV5IHdpbGwgYmUgbm8gbGVzcyBoYXBweSB0aGFuIHRoZSBwZXJzb24gd2hvIGV4ZXJjaXNlcyB2aXJ0dXJlIGZvciBhbGwgdGltZSBhbmQgaGFwcGlseSBwYXNzZXMgdGhlaXIgbGlmZSBpbiBpdC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJDaHJ5c2lwcHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiUXVvdGVkIGJ5IFBsdXRhcmNoIGluIE1vcmFsaWE6IDxxPkFnYWluc3QgdGhlIFN0b2ljcyBvbiBDb21tb24gQ29uY2VwdGlvbnMsPC9xPiAxMDYyIChMb2ViLCBQLjY4MikiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+UGVyaGFwcyB3aXNkb20gYW5kIGhhcHBpbmVzcyBhcmUgbGlrZSB3aW5uaW5nIGEgbWVkYWwgaW4gdGhlIE9seW1waWNzLiBJdCBkb2Vzbid0IG1hdHRlciB3aGV0aGVyIHlvdSB3b24gYSBodW5kcmVkIHllYXJzIGFnbyBvciB0ZW4gbWludXRlcyBhZ28sIG9yIHdoZXRoZXIgeW91IHdvbiBqdXN0IG9uY2Ugb3IgaW4gbXVsdGlwbGUgZXZlbnRzLiBJdCBkb2Vzbid0IG1hdHRlciB3aGV0aGVyIHNvbWVvbmUgYmVhdHMgeW91ciB0aW1lIG9yIHNjb3JlIGRvd24gdGhlIHJvZGQsIGFuZCBpdCBkb2Vzbid0IG1hdHRlciB3aGV0aGVyIHlvdSBuZXZlciBjb21wZXRlIGFnaW4uIFlvdSdsbCBhbHdheXMgYmUgYSBtZWRhbGlzdCwgYW5kIHlvdSdsbCBhbHdheXMga25vdyB3aGF0IGlmIGZlZWxzIGxpa2UuIE5vIG9uZSBjYW4gdGFrZSB0aGF0IGF3YXkmbWRhc2g7YW5kIGl0IHdvdWxkIG5vdCBiZSBpbXBvc3NpYmxlIHRvIGZlZWwgPGVtPm1vcmU8L2VtPiBvZiB0aGF0IGZlZWxpbmcuPC9wPjxwPlRoZSBKdWxsaWFyZC10cmFpbmVkIGFjdG9yIEV2YW4gSGFuZGxlciwgd2hvIG5vdCBvbmx5IHN1cnZpdmVkIGFjdXRlIG15ZWxvaWQgbGV1a2VtaWEgYnV0IGFsc28gc2V2ZXJlIGRlcHJlc3Npb24sIGhhcyB0YWxrZWQgYWJvdXQgaGlzIGRlY2lzaW9uIHRvIHRha2UgYW50aWRlcHJlc3NhbnRzLCB3aGljaCBoZSBkaWQgZm9yIGEgZGVsaWJlcmF0ZWx5IGJyaWVmIHRpbWUuIEhlIHRvb2sgdGhlbSBiZWNhdXNlIGhlIHdhbnRlZCB0byBrbm93IHdoYXQgdHJ1ZSwgbm9ybWFsIGhhcHBpbmVzcyBmZWx0IGxpa2UuIE9uY2UgaGUgZGlkLCBoZSBrbmV3IGhlIHdvdWxkIHN0b3AuIEhlIGNvdWxkIGdvIGJhY2sgdG8gdGhlIHN0cnVnZ2xlIGxpa2UgZXZlcnlvbmUgZWxzZS4gSGUgaGFkIHRoZSBpZGVhbCBmb3IgYSBtb21lbnQgYW5kIHRoYXQgd2FzIGVub3VnaC48L3A+PHA+UGVyaGFwcyB0b2RheSB3aWxsIGJlIHRoZSBkYXkgd2hlbiB3ZSBleHBlcmllbmNlIGhhcHBpbmVzcyBvciB3aXNkb20uIERvbid0IHRyeSB0byBncmFiIHRoYXQgbW9tZW50IGFuZCBob2xkIG9uIHRvIGl0IHdpdGggYWxsIHlvdXIgbWlnaHQuIEl0J3Mgbm90IHVuZGVyIHlvdXIgY29udHJvbCBob3cgbG9uZyBpdCBsYXN0cy4gRW5qb3kgaXQsIHJlY29nbml6ZSBpdCwgcmVtZW1iZXIgaXQuIEhhdmluZyBpdCBmb3IgYSBtb21lbnQgaXMgdGhlIHNhbWUgYXMgaGF2aW5nIGl0IGZvcmV2ZXIuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMjIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgR2xhc3MgSXMgQWxyZWFkeSBCcm9rZW4iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJGb3J0dW5lIGZhbGxzIGhlYXZpbHkgb24gdGhvc2UgZm9yIHdob20gc2hlJ3MgdW5leHBlY3RlZC4gVGhlIG9uZSBhbHdheXMgb24gdGhlIGxvb2tvdXQgZWFzaWx5IGVuZHVyZXMuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gQ29uc29sYXRpb24gVG8gSGVsdmlhLCA1LjMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlcmUgaXMgYSBzdG9yeSBvZiBhIFplbiBtYXN0ZXIgd2hvIGhhZCBhIGJlYXV0aWZ1bCBwcml6ZWQgY3VwLiBUaGUgbWFzdGVyIHdvdWxkIHJlcGVhdCB0byBoaW1zZWxmLCA8cT5UaGUgZ2xhc3MgaXMgYWxyZWFkeSBicm9rZW4uPC9xPiBIZSBlbmpveWVkIHRoZSBjdXAuIEhlIHVzZWQgaXQuIEhlIHNob3dlZCBpZiBvZmYgdG8gdmlzaXRvcnMuIEJ1dCBpbiBoaXMgbWluZCwgaXQgd2FzIGFscmVhZHkgYnJva2VuLiBBbmQgc28gb25lIGRheSwgd2hlbiBpdCBkaWQgYnJlYWssIGhlIHNpbXBseSBzYWlkLCA8cT5PZiBjb3Vyc2UuPC9xPjwvcD48cD5UaGlzIGlzIGhvdyB0aGUgU3RvaWNzIHRoaW5rIHRvby4gVGhlcmUgaXMgc3VwcG9zZWRseSBhIHRydWUgc3RvcnkgYWJvdXQgRXBpY3RldHVzIGFuZCBhIGxhbXAuIEhlIG5ldmVyIGxvY2tlZCBoaXMgaG91c2UsIGFuZCBzbyBoaXMgZXhwZW5zaXZlIGxhbXAgd2FzIHN0b2xlbi4gV2hlbiBFcGljdGV0dXMgcmVwbGFjZWQgaXQsIGhlIHJlcGxhY2VkIGl0IHdpdGggYSBjaGVhcGVyIG9uZSBzbyBoZSBjb3VsZCBiZSBsZXNzIGF0dGFjaGVkIHRvIGl0IGlmIGl0IHdlcmUgc3RvbGVuIGFnYWluLjwvcD48cD5EZXZhc3RhdGlvbiZtZGFzaDt0aGF0IGZlZWxpbmcgdGhhdCB3ZSdyZSBhYnNvbHV0ZWx5IGNydXNoZWQgYW5kIHNob2NrZWQgYnkgYW4gZXZlbnQmbWRhc2g7aXMgYSBmYWN0b3Igb2YgaG93IHVubGlrZWx5IHdlIGNvbnNpZGVyZWQgdGhhdCBldmVudCBpbiB0aGUgZmlyc3QgcGxhY2UuIE5vIG9uZSBpcyA8ZW0+d3JlY2tlZDwvZW0+IGJ5IHRoZSBmYWN0IHRoYXQgaXQncyBzbm93aW5nIGluIHRoZSB3aW50ZXIsIGJlY2F1c2Ugd2UndmUgYWNjZXB0ZWQgKGFuZCBldmVuIGFudGljaXBhdGVkKSB0aGlzIHR1cm4gb2YgZXZlbnRzLiBXaGF0IGFib3V0IHRoZSBvY2N1cnJlbmNlcyB0aGF0IHN1cnByaXNlIHVzPyBXZSBtaWdodCBub3QgYmUgc28gc2hvY2tlZCBpZiB3ZSB0b29rIHRoZSB0aW1lIHRvIGNvbnNpZGVyIHRoZWlyIHBvc3NpYmlsaXR5LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDIzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQXR0YWNobWVudHMgQXJlIFRoZSBFbmVteSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkluIHNob3J0LCB5b3UgbXVzdCByZW1lbWJlciB0aGlzJm1kYXNoO3RoYXQgaWYgeW91IGhvbGQgYW55dGhpbmcgZGVhciBvdXRzaWRlIG9mIHlvdXIgb3duIHJlYXNvbmVkIGNob2ljZSwgeW91IHdpbGwgaGF2ZSBkZXN0cm95ZWQgeW91ciBjYXBhY2l0eSBmb3IgY2hvaWNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDQuNC4yMyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5BY2NvcmRpbmcgdG8gQW50aG9ueSBkZSBNZWxsbywgPHE+dGhlcmUgaXMgb25lIHRoaW5nIGFuZCBvbmx5IG9uZSB0aGluZyB0aGF0IGNhdXNlcyB1bmhhcHBpbmVzcy4gVGhlIG5hbWUgb2YgdGhhdCB0aGluZyBpcyBBdHRhY2htZW50LjwvcT4gQXR0YWNobWVudHMgdG8gYW4gaW1hZ2UgeW91IGhhdmUgb2YgYSBwZXJzb24sIGF0dGFjaG1lbnRzIHRvIHdlYWx0aCBhbmQgc3RhdHVzLCBhdHRhY2htZW50cyB0byBhIGNlcnRhaW4gcGxhY2Ugb3IgdGltZSwgYXR0YWNobWVudHMgdG8gYSBqb2Igb3IgdG8gYSBsaWZlc3R5bGUuIEFsbCBvZiB0aG9zZSB0aGluZ3MgYXJlIGRhbmdlcm91cyBmb3Igb25lIHJlYXNvbjogdGhleSBhcmUgb3V0c2lkZSBvZiBvdXIgcmVhc29uZWQgY2hvaWNlLiBIb3cgbG9uZyB3ZSBrZWVwIHRoZW0gaXMgbm90IGluIG91ciBjb250cm9sLjwvcD48cD5BcyBFcGljdGV0dXMgcmVhbGl6ZWQgc29tZSB0d28gdGhvdXNhbmQgeWVhcnMgYmVmb3JlIGRlIE1lbGxvLCBvdXIgYXR0YWNobWVudHMgYXJlIHdoYXQgbWFrZSBpdCBzbyBoYXJkIHRvIGFjY2VwdCBjaGFuZ2UuIE9uY2Ugd2UgaGF2ZSB0aGVtLCB3ZSBkb24ndCB3YW50IHRvIGxldCBnby4gV2UgYmVjb21lIHNsYXZlcyB0byBtYWludGFpbmluZyB0aGUgc3RhdHVzIHF1by4gV2UgYXJlIGxpa2UgdGhlIFJlZCBRdWVlbiBpbiA8c291cmNlPkFsaWNlIGluIFdvbmRlcmxhbmQ8L3NvdXJjZT4mbWRhc2g7cnVubmluZyBmYXN0ZXIgYW5kIGZhc3RlciB0byBzdGF5IGluIHRoZSBzYW1lIHBsYWNlLjwvcD48cD5CdXQgZXZlcnl0aGluZyBpcyBpbiBhIGNvbnN0YW50IHN0YXRlIG9mIGNoYW5nZS4gV2UgaGF2ZSBjZXJ0YWluIHRoaW5ncyBmb3IgYSB3aGlsZSBhbmQgdGhlbiBsb3NlIHRoZW0uIFRoZSBvbmx5IHBlcm1hbmVudCB0aGluZyBpcyA8ZW0+cHJvaGFpcmVzaXM8L2VtPiwgb3VyIGNhcGFjaXR5IGZvciByZWFzb25lZCBjaG9pY2UuIFRoZSB0aGluZ3Mgd2UgYXJlIGF0dGFjaGVkIHRvIGNhbiBjb21lIGFuZCBnbywgb3VyIGNob2ljZSBpcyByZXNpbGllbnQgYW5kIGFkYXB0YWJsZS4gVGhlIHNvb25lciB3ZSBiZWNvbWUgYXdhcmUgb2YgdGhpcyB0aGUgYmV0dGVyLiBUaGUgZWFzaWVyIGl0IHdpbGwgYmUgdG8gYWNjZXB0IGFuZCBhZGFwdCB0byB3aGF0IGRvZXMgaGFwcGVuLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDI0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVHJhaW4gVG8gTGV0IEdvIE9mIFdoYXQncyBOb3QgWW91cnMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJXaGVuZXZlciB5b3UgZXhwZXJpZW5jZSB0aGUgcGFuZ3Mgb2YgbG9zaW5nIHNvbWV0aGluZywgZG9uJ3QgdHJlYXQgaXQgbGlrZSBhIHBhcnQgb2YgeW91cnNlbGYgYnV0IGFzIGEgYnJlYWthYmxlIGdsYXNzLCBzbyB3aGVuIGl0IGZhbGxzIHlvdSB3aWxsIHJlbWVtYmVyIHRoYXQgYW5kIHdvbid0IGJlIHRyb3VibGVkLiBTbyB0b28sIHdoZW5ldmVyIHlvdSBraXNzIHlvdXIgY2hpbGQsIHNpYmxpbmcsIG9yIGZyaWVuZCwgZG9uJ3QgbGF5ZXIgb24gdG9wIG9mIHRoZSBleHBlcmllbmNlIGFsbCB0aGUgdGhpbmdzIHlvdSBtaWdodCB3aXNoLCBidXQgaG9sZCB0aGVtIGJhY2sgYW5kIHN0b3AgdGhlbSwganVzdCBhcyB0aG9zZSB3aG8gcmlkZSBiZWhpbmQgdHJpdW1waGFudCBnZW5lcmFscyByZW1pbmQgdGhlbSB0aGV5IGFyZSBtb3J0YWwuIEluIHRoZSBzYW1lIHdheSwgcmVtaW5kIHlvdXJzZWxmIHRoYXQgeW91ciBwcmVjaW91cyBvbmUgaXNuJ3Qgb25lIG9mIHlvdXIgcG9zc2Vzc2lvbnMsIGJ1dCBzb21ldGhpbmcgZ2l2ZW4gZm9yIG5vdywgbm90IGZvcmV2ZXIgLi4uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy4yNC44NC04NmEiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+QXQgYSBSb21hbiB0cml1bXBoLCB0aGUgbWFqb3JpdHkgb2YgdGhlIHB1YmxpYyB3b3VsZCBoYXZlIHRoZWlyIGV5ZXMgZ2x1ZWQgdG8gdGhlIHZpY3RvcmlvdXMgZ2VuZXJhbCBhdCB0aGUgZnJvbnQmbWRhc2g7b25lIG9mIHRoZSBtb3N0IGNvdmV0ZWQgc3BvdHMgZHVyaW5nIHJvbWFuIHRpbWVzLiBPbmx5IGEgZmV3IHdvdWxkIG5vdGljZSB0aGUgYWlkZSBpbiB0aGUgYmFjaywgcmlnaHQgYmVoaW5kIHRoZSBjb21tYW5kZXIsIHdoaXNwZXJpbmcgaW50byBoaXMgZWFyLCA8cT5SZW1lbWJlciwgdGhvdSBhcmUgbW9ydGFsLjwvcT4gV2hhdCBhIHJlbWluZGVyIHRvIGhlYXIgYXQgdGhlIHBlYWsgb2YgZ2xvcnkgYW5kIHZpY3RvcnkhPC9wPjxwPkluIG91ciBvd24gbGl2ZXMsIHdlIGNhbiB0cmFpbiB0byBiZSB0aGF0IHdoaXNwZXIuIFdoZW4gdGhlcmUgaXMgc29tZXRoaW5nIHdlIHByaXplJm1kYXNoO29yIHNvbWVvbmUgdGhhdCB3ZSBsb3ZlJm1kYXNoO3dlIGNhbiB3aGlzcGVyIHRvIG91cnNlbHZlcyB0aGF0IGlzIGlzIGZyYWdpbGUsIG1vcnRhbCwgYW5kIG5vdCB0cnVseSBvdXJzLiBObyBtYXR0ZXIgaG93IHN0cm9uZyBvciBpbnZpbmNpYmxlIHNvbWV0aGluZyBmZWVscywgaXQgbmV2ZXIgaXMuIFdlIG11c3QgcmVtaW5kIG91cnNlbHZlcyB0aGF0IGl0IGNhbiBicmVhaywgY2FuIGRpZSwgY2FuIGxlYXZlIHVzLjwvcD48cD5Mb3NzIGlzIG9uZSBvZiBvdXIgZGVlcGVzdCBmZWFycy4gSWdub3JhbmNlIGFuZCBwcmV0ZW5kaW5nIGRvbid0IG1ha2UgdGhpbmdzIGFueSBiZXR0ZXIuIFRoZXkganVzdCBtZWFuIHRoZSBsb3NzIHdpbGwgYmUgYWxsIHRoZSBtb3JlIGphcnJpbmcgd2hlbiBpdCBvY2N1cnMuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICJQZXIgdGhlIERoYW1tYWNha2thcHBhdmF0dGFuYSBTdXR0YSwgdGhlIDQgbm9ibGUgdHJ1dGhzIGFyZTogPG9sPjxsaT5Ob3cgdGhpcyBpcyB0aGUgbm9ibGUgdHJ1dGggb2Ygc3VmZmVyaW5nOiBiaXJ0aCBpcyBzdWZmZXJpbmcsIGFnaW5nIGlzIHN1ZmZlcmluZywgaWxsbmVzcyBpcyBzdWZmZXJpbmcsIGRlYXRoIGlzIHN1ZmZlcmluZzsgdW5pb24gd2l0aCB3aGF0IGlzIGRpc3BsZWFzaW5nIGlzIHN1ZmZlcmluZzsgc2VwYXJhdGlvbiBmcm9tIHdoYXQgaXMgcGxlYXNpbmcgaXMgc3VmZmVyaW5nOyBub3QgdG8gZ2V0IHdoYXQgb25lIHdhbnRzIGlzIHN1ZmZlcmluZzsgaW4gYnJpZWYsIHRoZSBmaXZlIGFnZ3JlZ2F0ZXMgKGJvZHksIGZlZWxpbmdzLCBwZXJjZXB0aW9ucywgbWVudGFsIGFjdGl2aXR5LCBhbmQgY29uc2Npb3VzbmVzcykgc3ViamVjdCB0byBjbGluZ2luZyBhcmUgc3VmZmVyaW5nLjwvbGk+PGxpPk5vdyB0aGlzIGlzIHRoZSBub2JsZSB0cnV0aCBvZiB0aGUgb3JpZ2luIG9mIHN1ZmZlcmluZzogaXQgaXMgdGhpcyBjcmF2aW5nIHdoaWNoIGxlYWRzIHRvIHJlLWJlY29taW5nLCBhY2NvbXBhbmllZCBieSBkZWxpZ2h0IGFuZCBsdXN0LCBzZWVraW5nIGRlbGlnaHQgaGVyZSBhbmQgdGhlcmU7IHRoYXQgaXMsIGNyYXZpbmcgZm9yIHNlbnN1YWwgcGxlYXN1cmVzLCBjcmF2aW5nIGZvciBiZWNvbWluZywgY3JhdmluZyBmb3IgZGlzYmVjb21pbmcuPC9saT48bGk+Tm93IHRoaXMgaXMgdGhlIG5vYmxlIHRydXRoIG9mIHRoZSBjZXNzYXRpb24gb2Ygc3VmZmVyaW5nOiBpdCBpcyB0aGUgcmVtYWluZGVybGVzcyBmYWRpbmcgYXdheSBhbmQgY2Vzc2F0aW9uIG9mIHRoYXQgc2FtZSBjcmF2aW5nLCB0aGUgZ2l2aW5nIHVwIGFuZCByZWxpbnF1aXNoaW5nIG9mIGl0LCBmcmVlZG9tIGZyb20gaXQsIG5vbi1yZWxpYW5jZSBvbiBpdC48L2xpPjxsaT5Ob3cgdGhpcyBpcyB0aGUgbm9ibGUgdHJ1dGggb2YgdGhlIHdheSBsZWFkaW5nIHRvIHRoZSBjZXNzYXRpb24gb2Ygc3VmZmVyaW5nOiBpdCBpcyB0aGlzIG5vYmxlIGVpZ2h0Zm9sZCBwYXRoOyB0aGF0IGlzLCByaWdodCB2aWV3LCByaWdodCBpbnRlbnRpb24sIHJpZ2h0IHNwZWVjaCwgcmlnaHQgYWN0aW9uLCByaWdodCBsaXZlbGlob29kLCByaWdodCBlZmZvcnQsIHJpZ2h0IG1pbmRmdWxuZXNzLCByaWdodCBjb25jZW50cmF0aW9uLjwvbGk+PC9vbD4iDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMjUiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJGdW5ueSBIb3cgVGhhdCBXb3JrcyBPdXQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJBcyBmb3IgbWUsIEkgd291bGQgY2hvb3NlIGJlaW5nIHNpY2sgb3ZlciBsaXZpbmcgaW4gbHV4dXJ5LCBmb3IgYmVpbmcgc2ljayBvbmx5IGhhcm1zIHRoZSBib2R5LCB3aGVyZWFzIGx1eHVyeSBkZXN0cm95cyBib3RoIHRoZSBib2R5IGFuZCB0aGUgc291bCwgY2F1c2luZyB3ZWFrbmVzcyBhbmQgaW5jYXBhY2l0eSBpbiB0aGUgYm9keSwgYW5kIGxhY2sgb2YgY29udHJvbCBhbmQgY293YXJkaWNlIGluIHRoZSBzb3VsLiBXaGF0J3MgbW9yZSwgbHV4dXJ5IGJyZWVkcyBpbmp1c3RpY2UgYmVjYXVzZSBpdCBhbHNvIGJyZWVkcyBncmVlZGluZXNzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk11c29uaXVzIFJ1ZnVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTGVjdHVyZXMsIDIwLjk1LjE0LTE3Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlN0b3JpZXMgYWJvdXQgbG90dGVyeSB3aW5uZXJzIHRlbmQgdG8gc2hhcmUgb25lIGxlc3Nvbjogc3VkZGVubHkgY29taW5nIGludG8gYSBncmVhdCBkZWFsIG9mIG1vbmV5IGlzIGEgY3Vyc2UsIG5vdCBhIGJsZXNzaW5nLiBKdXN0IGEgZmV3IHllYXJzIGFmdGVyIHRoZXkgZ2V0IHRoZWlyIGJpZyBjaGVjaywgbWFueSBsb3R0ZXJ5IHdpbm5lcnMgYXJlIGFjdHVhbGx5IGluIHdvcnNlIGZpbmFuY2lhbCBzaGFwZS4gVGhleSd2ZSBsb3N0IGZyaWVuZHMsIHRoZXkndmUgZ290dGVuIGRpdm9yY2VkLiBUaGVpciB3aG9sZSBsaXZlcyBoYXZlIGJlZW4gdHVybmVkIGludG8gYSBuaWdodG1hcmUgYXMgYSByZXN1bHQgb2YgdGhlaXIgb2JzY2VuZWx5IGdvb2QgZm9ydHVuZS48L3A+PHA+SXQncyBsaWtlIHRoYXQgTWV0YWxsaWNhIGx5cmljIChmaXR0aW5nbHkgZnJvbSBhIHNvbmcgY2FsbCA8cT5ObyBMZWFmIENsb3ZlcjwvcT4pOiA8cT5UaGVuIGl0IGNvbWVzIHRvIGJlIHRoYXQgdGhlIHNvb3RoaW5nIGxpZ2h0IGF0IHRoZSBlbmQgb2YgeW91ciB0dW5uZWwgLyBJcyBqdXN0IGEgZnJlaWdodCB0cmFpbiBjb21pbmcgeW91ciB3YXkuPC9xPjwvcD48cD5BbmQgeWV0IHRoZSBtb3N0IGNvbW1vbiByZXNwb25zZSBmcm9tIGEgY2FuY2VyIHN1cnZpdm9yLCB0aGUgcGVyc29uIHdobyB3ZW50IHRocm91Z2ggdGhlIHRoaW5nIHdlIGFsbCBkcmVhZCBhbmQgZmVhcj8gPHE+SXQgd2FzIHRoZSBiZXN0IHRoaW5nIHRoYXQgZXZlciBoYXBwZW5lZCB0byBtZS48L3E+PC9wPjxwPkZ1bm55IGhvdyB0aGF0IHdvcmtzIG91dCwgaXNuJ3QgaXQ/PC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMjYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgQWx0YXIgT2YgTm8gRGlmZmVyZW5jZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldlIGFyZSBsaWtlIG1hbnkgcGVsbGV0cyBvZiBpbmNlbnNlIGZhbGxpbmcgb24gdGhlIHNhbWUgYWx0YXIuIFNvbWUgY29sbGFwc2Ugc29vbmVyLCBvdGhlcnMgbGF0ZXIsIGJ1dCBpdCBtYWtlcyBubyBkaWZmZXJlbmNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA0LjE1Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPldoYXQncyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHlvdSBhbmQgcmljaGVzdCBwZXJzb24gaW4gdGhlIHdvcmxkPyBPbmUgaGFzIGEgbGl0dGxlIG1vcmUgbW9uZXkgdGhhbiB0aGUgb3RoZXIuIFdoYXQncyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHlvdSBhbmQgdGhlIG9sZGVzdCBwZXJzb24gaW4gdGhlIHdvcmxkPyBPbmUgaGFzIGJlZW4gYXJvdW5kIGEgbGl0dGxlIGxvbmdlciB0aGFuIHRoZSBvdGhlci4gU2FtZSBnb2VzIGZvciB0aGUgdGFsbGVzdCwgc21hcnRlc3QsIGZhc3Rlc3QsIGFuZCBvbiBkb3duIHRoZSBsaW5lLjwvcD48cD5NZWFzdXJpbmcgb3Vyc2VsdmVzIGFnYWluc3Qgb3RoZXIgcGVvcGxlIG1ha2VzIGFjY2VwdGFuY2UgZGlmZmljdWx0LCBiZWNhdXNlIHdlIHdhbnQgd2hhdCA8ZW0+dGhleTwvZW0+IGhhdmUsIG9yIHdlIHdhbnQgaG93IHRoaW5ncyA8ZW0+Y291bGQ8L2VtPiBoYXZlIGdvbmUsIG5vdCB3aGF0IHdlIGhhcHBlbiB0byBoYXZlLiBCdXQgdGhhdCBtYWtlcyBubyBkaWZmZXJlbmNlLjwvcD48cD5Tb21lIG1pZ2h0IHNlZSB0aGlzIGxpbmUgZnJvbSBNYXJjdXMgYXMgcGVzc2ltaXN0aWMsIHdoZXJlYXMgb3RoZXJzIHNlZSBpdCBhcyBvcHRpbWlzdGljLiBJdCdzIHJlYWxseSBqdXN0IDxlbT50cnV0aDwvZW0+LiBXZSdyZSBhbGwgaGVyZSBhbmQgd2UncmUgYWxsIGdvaW5nIHRvIGxlYXZlIHRoaXMgZWFydGggZXZlbnR1YWxseSwgc28gbGV0J3Mgbm90IGNvbmNlcm4gb3Vyc2VsdmVzIHdpdGggcGV0dHkgZGlmZmVyZW5jZXMgaW4gdGhlIG1lYW50aW1lLiBXZSBoYXZlIHRvbyBtdWNoIHRvIGRvLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIk5vdmVtYmVyIDI3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIFBsZWFzdXJlIE9mIFR1bmluZyBPdXQgVGhlIE5lZ2F0aXZlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSG93IHNhdGlzZnlpbmcgaXQgaXMgdG8gZGlzbWlzcyBhbmQgYmxvY2sgb3V0IGFueSB1cHNldHRpbmcgb3IgZm9yZWlnbiBpbXByZXNzaW9uLCBhbmQgaW1tZWRpYXRlbHkgdG8gaGF2ZSBwZWFjZSBpbiBhbGwgdGhpbmdzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA1LjIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIFN0b2ljcyB3ZXJlIG1lcmNpZnVsbHkgc3BhcmVkIHRoZSBpbmZvcm1hdGlvbiBvdmVybG9hZCBlbmRlbWljIHRvIHRvZGF5J3Mgc29jaWV0eS4gVGhleSBoYWQgbm8gc29jaWFsIG1lZGlhLCBubyBuZXdzcGFwZXJzLCBubyB0ZWxldmlzaW9uIGNoYXR0ZXIgdG8gcmlsZSB0aGVtIHVwLiBCdXQgZXZlbiBiYWNrIHRoZW4sIGFuIHVuZGlzY2lwbGluZWQgcGVyc29uIHdvdWxkIGhhdmUgZm91bmQgcGxlbnR5IHRvIGJlIGRpc3RyYWN0ZWQgYW5kIHVwc2V0IGJ5LjwvcD48cD5QYXJ0IG9mIHRoZSBTdG9pYyBtaW5kc2V0IHRoZW4gd2FzIGEgc29ydCBvZiBhIGN1bHRpdmF0ZWQgaWdub3JhbmNlLiBQdWJsaWxpdXMgU3lydXMncyBlcGlncmFtIGV4cHJlc3NlcyBpdCB3ZWxsOiA8cT5BbHdheXMgc2h1biB0aGF0IHdoaWNoIG1ha2VzIHlvdSBhbmdyeS48L3E+IE1lYW5pbmc6IHR1cm4geW91ciBtaW5kIGF3YXkgZnJvbSB0aGUgdGhpbmdzIHRoYXQgcHJvdm9rZSBpdC4gSWYgeW91IGZpbmQgdGhhdCBkaXNjdXNzaW5nIHBvbGl0aWNzIGF0IHRoZSBkaW5uZXIgdGFibGUgbGVhZHMgdG8gZmlnaHRpbmcsIHdoeSBkbyB5b3Uga2VlcCBicmluZ2luZyBpdCB1cD8gSWYgeW91ciBzaWJsaW5nJ3MgbGlmZSBjaG9pY2VzIGJvdGhlciB5b3UsIHdoeSBkb24ndCB5b3Ugc3RvcCBwaWNraW5nIGF0IHRoZW0gYW5kIG1ha2luZyB0aGVtIHlvdXIgY29uY2Vybj8gVGhlIHNhbWUgZ29lcyBmb3Igc28gbWFueSBvdGhlciBzb3VyY2VzIG9mIGFnZ3JhdmF0aW9uLjwvcD48cD5JdCdzIG5vdCBhIHNpZ24gb2Ygd2Vha25lc3MgdG8gc2h1dCB0aGVtIG91dC4gSW5zdGVhZCwgaXQncyBhIHNpZ24gb2Ygc3Ryb25nIHdpbGwuIFRyeSBzYXlpbmc6IDxxPkkga25vdyB0aGUgcmVhY3Rpb24gSSB0eXBpY2FsbHkgdGFrZSBpbiB0aGVzZSBzaXR1YXRpb25zLCBhbmQgSSdtIG5vdCBnb2luZyB0byBkbyBpdCB0aGlzIHRpbWUuPC9xPiBBbmQgdGhlbiBmb2xsb3cgaXQgd2l0aDogPHE+SSdtIGFsc28gZ29pbmcgdG8gcmVtb3ZlIHRoZSBzdGltdWx1cyBmcm9tIG15IGxpZmUgaW4gdGhlIGZ1dHVyZSB3YXMgd2VsbC48L3E+PC9wPjxwPkJlY2F1c2Ugd2hhdCBmb2xsb3dzIGlzIHBlYWNlIGFuZCBzZXJlbml0eS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAyOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkl0J3MgTm90IE9uIFRoZW0sIEl0J3MgT24gWW91IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSWYgc29tZW9uZSBpcyBzbGlwcGluZyB1cCwga2luZGx5IGNvcnJlY3QgdGhlbSBhbmQgcG9pbnQgb3V0IHdoYXQgdGhleSBtaXNzZWQuIEJ1dCBpZiB5b3UgY2FuJ3QsIGJsYW1lIHlvdXJzZWxmJm1kYXNoO29yIG5vIG9uZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgMTAuNCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5BIGdvb2QgdGVhY2hlciBrbm93cyB0aGF0IHdoZW4gYSBzdHVkZW50IGlzIGZhaWxpbmcsIHRoZSBibGFtZSBmYWxsIG9uIHRoZSBpbnN0cnVjdG9yLCBub3QgdGhlIHB1cGlsLiBIb3cgbXVjaCBtb3JlIGdlbmVyb3VzIGFuZCB0b2xlcmFudCB3b3VsZCB3ZSBiZSBpZiB3ZSBjb3VsZCBleHRlbmQgdGhpcyB1bmRlcnN0YW5kaW5nIHRvIG90aGVyIHNwaGVyZXMgaW4gb3VyIGxpZmU/IFRvIGJlIGFibGUgdG8gc2VlIHRoYXQgaWYgYSBmcmllbmQgaXMgdW5yZWxpYWJsZSwgbWF5YmUgaXQncyBiZWNhdXNlIHRoZXkgZG9uJ3Qga25vdyB3aGF0J3Mgd3Jvbmcgb3IgYmVjYXVzZSB3ZSBoYXZlbid0IHRyaWVkIHRvIGhlbHAgdGhlbSBmaXggdGhlaXIgZmxhdy4gSWYgYW4gZW1wbG95ZWUgaXMgdW5kZXJwZXJmb3JtaW5nLCBqdXN0IHRhbGsgdG8gdGhlbSBvciBmaWd1cmUgb3V0IGlmIHRoZXkncmUgbGFja2luZyBpbiBzdXBwb3J0LiBJZiBzb21lb25lIGlzIGJlaW5nIGFubm95aW5nLCB0cnkgdGFsa2luZyB0byB0aGVtIGFib3V0IHRoZSBwcm9ibGVtIHdpdGggdGhlaXIgYmVoYXZpb3IsIG9yIGFzayB5b3Vyc2VsZjogPGVtPldoeSBhbSBJIGJlaW5nIHNvIHNlbnNpdGl2ZT88L2VtPjwvcD48cD5BbmQgaWYgdGhpcyBkb2Vzbid0IHdvcmssIHRyeSBsZXR0aW5nIGl0IGdvLiBJdCBtaWdodCBiZSBhbiBpc29sYXRlZCBpbmNpZGVudCBhbnl3YXkuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICI8cD5MZXQncyBnZXQgYmFjayB0byBhIHRpbWUgd2hlbiBhIHN0dWRlbnQsIGdvZCBmb3JiaWQsIGNvdWxkIGFjdHVhbGx5IGJlIGJsYW1lZCBmb3IgdGhlaXIgb3duIGV4YW0gcGVyZm9ybWFuY2UuIEEgdGltZSB3aGVuIHRoZSBkZWZhdWx0IHBvc2l0aW9uIHdhcyBvbmUgb2YgdHJ1c3QgaW4gdGVhY2hlcnMgYW5kIHdoYXQgdGhleSBkby4gTGV0J3Mgc3VwcG9ydCwgcmVzcGVjdCBhbmQgbnVydHVyZSBvdXIgeW91bmcgcGVvcGxlIGJ1dCBuZXZlciBjb21wcm9taXNlIG9uIG91ciBwdXJzdWl0IG9mIGVkdWNhdGlvbmFsIHB1cml0eS4gTGV0J3MgcHJlc3MgdGhlIHJlc2V0IGJ1dHRvbiBhbmQgY3JlYXRlIGEganVzdCBlcXVpbGlicml1bSBiZXR3ZWVuIHN0dWRlbnQgcmVzcG9uc2liaWxpdHkgYW5kIHRlYWNoZXIgYWNjb3VudGFiaWxpdHkuIFRoaXMgaXMgdml0YWwgZm9yIG91ciBzb2NpZXR5IGluIHRoZSBsb25nIHJ1biwgYmVjYXVzZSBpbiBwcm9tb3RpbmcgdGhlIG1hbnRyYSB0aGF0IGZhaWx1cmUgaXMgYWx3YXlzIHNvbWVvbmUgZWxzZSdzIGZhdWx0LCB3ZSBkZXByaXZlIG91ciB5b3VuZyBwZW9wbGUgb2Ygb25lIG9mIHRoZSBrZXkgZHJpdmVycyBvZiBjaGFuZ2UgYW5kIHByb2dyZXNzOiB0aGUgcmVhbGl6YXRpb24gb2YgZmFpbHVyZS48cD48Y2l0ZT5UaG9tYXMgUm9nZXJzLCAnTGV0J3MgZ2V0IGJhY2sgdG8gYSB0aW1lIHdoZW4gc3R1ZGVudHMsIG5vdCB0ZWFjaGVycywgY291bGQgYmUgYmxhbWVkIGZvciBleGFtIHBlcmZvcm1hbmNlJywgMDQgSmFuIDIwMTY8L2NpdGU+PHA+UGVvcGxlIG1ha2UgbWlzdGFrZXMuIFdoZW4gdGhleSBkbyBtYWtlIGEgbWlzdGFrZSwgYW5kIHlvdSBmZWVsIHRoZSBuZWVkIHRvIHBvaW50IGl0IG91dCwgYXQgbGVhc3QgZG8gdGhlbSB0aGUga2luZG5lc3Mgb2Ygc2hvd2luZyB0aGVtIGhvdyB0byBhdm9pZCBpdCBuZXh0IHRpbWUuIEJ1dCBpZiB5b3UgcG9pbnQgZmluZ2VycyBhbmQgcmVmdXNlIHRvIHRlYWNoLCB0aGUgYmxhbWUgaXMgb24geW91LiBUaGF0J3MgeW91ciBmYWlsdXJlLCBub3QgdGhlaXJzLCBiZWNhdXNlIHlvdSdyZSBjaG9vc2luZyB0byBuZWdsZWN0IGFuIG9wcG9ydHVuaXR5IHRvIGRvIGdvb2QuIE9mIGNvdXJzZSwgaWYgeW91IGNhbid0IGhlbHAgdGhlbSBsZWFybiwgbm8gb25lIGlzIHRvIGJsYW1lLiBUaGUgbWlzdGFrZSB0aGV5IG1hZGUgY291bGQgaGF2ZSBlYXNpbHkgYmVlbiBtYWRlIGJ5IHlvdS48L3A+PGNpdGU+UGF0cmljayBBbGxhbiwgPGEgaHJlZj1odHRwczovL2xpZmVoYWNrZXIuY29tL2RvbnQtYmxhbWUtb3RoZXJzLWlmLXlvdS1yZWZ1c2UtdG8taGVscC10aGVtLWxlYXJuLTE4MjAyNjEyMzYgdGFyZ2V0PV9ibGFuaz5saWZlaGFja2VyPC9hPiwgMDgtTk9WLTE3PC9jaXRlPiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJOb3ZlbWJlciAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIllvdSdyZSBHb2luZyBUbyBCZSBPSyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkRvbid0IGxhbWVudCB0aGlzIGFuZCBkb24ndCBnZXQgYWdpdGF0ZWQuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDcuNDMiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlcmUncyB0aGF0IGZlZWxpbmcgd2UgZ2V0IHdoZW4gc29tZXRoaW5nIGhhcHBlbnM6IDxlbT5JdCdzIGFsbCBvdmVyIG5vdy4gQWxsIGlzIGxvc3QuPC9lbT4gV2hhdCBmb2xsb3dzIGFyZSBjb21wbGFpbnRzIGFuZCBwaXR5IGFuZCBtaXNlcnkmbWRhc2g7dGhlIGltcG90ZW50IHN0cnVnZ2xlIGFnYWluc3Qgc29tZXRoaW5nIHRoYXQncyBhbHJlYWR5IG9jY3VycmVkLjwvcD48cD5XaHkgYm90aGVyPyBXZSBoYXZlIG5vIGlkZWEgd2hhdCB0aGUgZnV0dXJlIGhvbGRzLiBXZSBoYXZlIG5vIGlkZWEgd2hhdCdzIGNvbWluZyB1cCBhcm91bmQgdGhlIGJlbmQuIEl0IGNvdWxkIGJlIG1vcmUgcHJvYmxlbXMsIG9yIHRoaXMgY291bGQgYmUgdGhlIGRhcmtuZXNzIGJlZm9yZSB0aGUgZGF3bi48L3A+PHA+SWYgd2UncmUgU3RvaWMsIHRoZXJlIGlzIG9uZSB0aGluZyB3ZSBjYW4gYmUgc3VyZSBvZjogd2hhdGV2ZXIgaGFwcGVucywgd2UncmUgZ29pbmcgdG8gYmUgT0suPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiTm92ZW1iZXIgMzAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJGb2xsb3cgVGhlIDxlbT5Mb2dvczwvZW0+IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiVGhlIHBlcnNvbiB3aG8gZm9sbG93cyByZWFzb24gaW4gYWxsIHRoaW5ncyB3aWxsIGhhdmUgYm90aCBsZWlzdXJlIGFuZCBhIHJlYWRpbmVzcyB0byBhY3QmbWRhc2g7dGhleSBhcmUgYXQgb25jZSBib3RoIGNoZWVyZnVsIGFuZCBzZWxmLWNvbXBvc2VkLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCAxMC4xMmIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIGd1aWRpbmcgcmVhc29uIG9mIHRoZSB3b3JsZCZtZGFzaDt0aGUgU3RvaWNzIGNhbGxlZCB0aGlzIHRoZSA8ZW0+bG9nb3M8L2VtPiZtZGFzaDtnaXZlcyB1cyB3aGF0IHdlIHdhbnQsIG90aGVyIHRpbWVzIGl0IGdpdmVzIHVzIHByZWNpc2VseSB3aGF0IHdlIGRvIG5vdCB3YW50LiBJbiBlaXRoZXIgY2FzZSwgdGhleSBiZWxpZXZlZCB0aGF0IHRoZSA8ZW0+bG9nb3M8L2VtPiB3YXMgYW4gYWxsLXBvd2VyZnVsIGZvcmNlIHRoYXQgZ292ZXJuZWQgdGhlIHVuaXZlcnNlLjwvcD48cD5UaGVyZSBpcyBhIGhlbHBmdWwgYW5hbG9neSB0byBleHBsYWluIHRoZSA8ZW0+bG9nb3M8L2VtPjogV2UgYXJlIGxpa2UgYSBkb2cgbGVhc2hlZCB0byBhIG1vdmluZyBjYXJ0LiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBjYXJ0IHdpbGwgZGV0ZXJtaW5lIHdoZXJlIHdlIGdvLiBEZXBlbmRpbmcgb24gdGhlIGxlbmd0aCBvZiB0aGUgbGVhc2gsIHdlIGFsc28gaGF2ZSBhIGZhaXIgYW1vdW50IG9mIHJvb20gdG8gZXhwbG9yZSBhbmQgZGV0ZXJtaW5lIHRoZSBwYWNlLCBidXQgdWx0aW1hdGVseSB3aGF0IGVhY2ggb2YgdXMgbXVzdCBjaG9vc2UgaXMgd2hldGhlciB3ZSB3aWxsIGdvIHdpbGxpbmdseSBvciBiZSBwYWluZnVsbHkgZHJhZ2dlZC4gV2hpY2ggd2lsbCBpdCBiZT88L3A+PHA+Q2hlZXJmdWwgYWNjZXB0YW5jZT8gT3IgaWdub3JhbnQgcmVmdXNhbD8gSW4gdGhlIGVuZCwgdGhleSBhbW91bnQgdG8gdGhlIHNhbWUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlByZXRlbmRpbmcgVG9kYXkgSXMgVGhlIEVuZCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkxldCB1cyBwcmVwYXJlIG91ciBtaW5kcyBhcyBpZiB3ZSdkIGNvbWUgdG8gdGhlIHZlcnkgZW5kIG9mIGxpZmUuIExldCB1cyBwb3N0cG9uZSBub3RoaW5nLiBMZXQgdXMgYmFsYW5jZSBsaWZlJ3MgYm9va3MgZWFjaCBkYXkuLi4uVGhlIG9uZSB3aG8gcHV0cyB0aGUgZmluaXNoaW5nIHRvdWNoZXMgb24gdGhlaXIgbGlmZSBlYWNoIGRheSBpcyBuZXZlciBzaG9ydCBvZiB0aW1lLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk1vcmFsIExldHRlcnMsIDEwMS43Yi04YSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD48cT5MaXZlIGVhY2ggZGF5IGFzIGlmIGl0IHdlcmUgeW91ciBsYXN0PC9xPiBpcyBhIGNsaWNoJmVhY3V0ZTsuIFBsZW50eSBzYXkgaXQsIGZldyBhY3R1YWxseSBkbyBpdC4gSG93IHJlYXNvbmFibGUgd291bGQgdGhhdCBiZSBhbnl3YXk/IFN1cmVseSBTZW5lY2EgaXNuJ3Qgc2F5aW5nIHRvIGZvcnNha2UgbGF3cyBhbmQgY29uc2lkZXJhdGlvbnMmbWRhc2g7dG8gZmluZCBzb21lIG9yZ3kgdG8gam9pbiBiZWNhdXNlIHRoZSB3b3JsZCBpcyBlbmRpbmcuPC9wPjxwPkEgYmV0dGVyIGFuYWxvZ3kgd291bGQgYmUgYSBzb2xkaWVyIGFib3V0IHRvIGxlYXZlIG9uIGRlcGxveW1lbnQuIE5vdCBrbm93aW5nIHdoZXRoZXIgdGhleSdsbCByZXR1cm4gb3Igbm90LCB3aGF0IGRvIHRoZXkgZG8/PC9wPjxwPlRoZXkgZ2V0IHRoZWlyIGFmZmFpcnMgaW4gb3JkZXIuIFRoZXkgaGFuZGxlIHRoZWlyIGJ1c2luZXNzLiBUaGV5IHRlbGwgdGhlaXIgY2hpbGRyZW4gb3IgdGhlaXIgZmFtaWx5IHRoYXQgdGhleSBsb3ZlIHRoZW0uIFRoZXkgZG9uJ3QgaGF2ZSB0aW1lIGZvciBxdWFycmVsaW5nIG9yIHBldHR5IG1hdHRlcnMuIEFuZCB0aGVuIGluIHRoZSBtb3JuaW5nIHRoZXkgYXJlIHJlYWR5IHRvIGdvJm1kYXNoO2hvcGluZyB0byBjb21lIGJhY2sgaW4gb25lIHBpZWNlIGJ1dCBwcmVwYXJlZCBmb3IgdGhlIHBvc3NpYmlsaXR5IHRoYXQgdGhleSBtaWdodCBub3QuPC9wPjxwPkxldCB1cyBsaXZlIHRvZGF5IHRoYXQgc2FtZSB3YXkuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICI8cD48c3BlYWtlcj5DYXB0LiBSb25hbGQgU3BlaXJzOjwvc3BlYWtlcj4gWW91IGtub3cgd2h5IHlvdSBoaWQgaW4gdGhhdCBkaXRjaCwgQmxpdGhlPzxiciAvPjxzcGVha2VyPlB2dC4gQWxiZXJ0IEJsaXRoZTo8L3NwZWFrZXI+IEkgd2FzIHNjYXJlZC48YnIgLz48c3BlYWtlcj5DYXB0LiBSb25hbGQgU3BlaXJzOjwvc3BlYWtlcj4gV2UncmUgYWxsIHNjYXJlZC4gWW91IGhpZCBpbiB0aGF0IGRpdGNoIGJlY2F1c2UgeW91IHRoaW5rIHRoZXJlJ3Mgc3RpbGwgaG9wZS4gQnV0IEJsaXRoZSwgdGhlIG9ubHkgaG9wZSB5b3UgaGF2ZSBpcyB0byBhY2NlcHQgdGhlIGZhY3QgdGhhdCB5b3UncmUgYWxyZWFkeSBkZWFkLCBhbmQgdGhlIHNvb25lciB5b3UgYWNjZXB0IHRoYXQsIHRoZSBzb29uZXIgeW91J2xsIGJlIGFibGUgdG8gZnVuY3Rpb24gYXMgYSBzb2xkaWVyJ3Mgc3VwcG9zZWQgdG8gZnVuY3Rpb24uIFdpdGhvdXQgbWVyY3ksIHdpdGhvdXQgY29tcGFzc2lvbiwgd2l0aG91dCByZW1vcnNlLiBBbGwgd2FyIGRlcGVuZHMgb24gaXQuPC9wPjxwPjxzcGVha2VyPk5peG9uOjwvc3BlYWtlcj4gSGFycnkuLi4gd2hhdCBleGFjdGx5IGFyZSB5b3UgZG9pbmcgd2l0aCB5b3VyIHJlc2VydmUgY2h1dGU/IFlvdSd2ZSBiZWVuIGhhdWxpbmcgdGhhdCB0aGluZyBhcm91bmQgZXZlciBzaW5jZSB3ZSBqdW1wZWQuPGJyIC8+PHNwZWFrZXI+SGFycnkgV2Vsc2g6PC9zcGVha2VyPiBHb25uYSBzZW5kIGl0IGJhY2sgdG8gS2l0dHkgd2hlbiB3ZSBnZXQgYmFjayB0byBFbmdsYW5kLiBTaWxrLiBGaWd1cmUgaXQnbGwgbWFrZSBhIGdvb2Qgd2VkZGluZyBkcmVzcywgeW91IGtub3cuIFdoYXQgd2l0aCB0aGUgcmF0aW9uaW5nIGFuZCBhbGwuPGJyIC8+PHNwZWFrZXI+Tml4b246PC9zcGVha2VyPiBbQ2h1Y2tsaW5nXSBKZWV6LCBIYXJyeSwgSSBuZXZlciB3b3VsZCBoYXZlIGd1ZXNzZWQuPGJyIC8+PHNwZWFrZXI+SGFycnkgV2Vsc2g6PC9zcGVha2VyPiBXaGF0PyBUaGF0IEknbSBzbyBzZW50aW1lbnRhbD88YnIgLz48c3BlYWtlcj5OaXhvbjo8L3NwZWFrZXI+IE5vLCB0aGF0IHlvdSB0aGluayB3ZSdyZSBnb25uYSBtYWtlIGl0IGJhY2sgdG8gRW5nbGFuZC48L3A+Ig0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDIiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJEb24ndCBNaW5kIE1lLCBJJ20gT25seSBEeWluZyBTbG93IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiTGV0IGVhY2ggdGhpbmcgeW91IHdvdWxkIGRvLCBzYXkgb3IgaW50ZW5kIGJlIGxpa2UgdGhhdCBvZiBhIGR5aW5nIHBlcnNvbi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgMi4xMS4xIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkhhdmUgeW91IGV2ZXIgaGVhcmQgc29tZW9uZSBhc2s6IDxxPldoYXQgd291bGQgeW91IGRvIGlmIHlvdSBmb3VuZCBvdXQgdG9tb3Jyb3cgdGhhdCB5b3UgaGFkIGNhbmNlcj88L3E+IFRoZSBxdWVzdGlvbiBpcyBkZXNpZ25lZCB0byBtYWtlIHlvdSBjb25zaWRlciBob3cgZGlmZmVyZW50IGxpZmUgbWlnaHQgYmUgaWYgeW91IHdlcmUgc3VkZGVubHkgZ2l2ZW4ganVzdCBhIGZldyBtb250aHMgb3Igd2Vla3MgdG8gbGl2ZS4gVGhlcmUncyBub3RoaW5nIGxpa2UgYSB0ZXJtaW5hbCBpbGxuZXNzIHRvIHdha2UgcGVvcGxlIHVwLjwvcD48cD5CdXQgaGVyZSdzIHRoZSB0aGluZzogeW91IGFscmVhZHkgaGF2ZSBhIHRlcm1pbmFsIGRpYWdub3Npcy4gV2UgYWxsIGRvISBBcyB0aGUgd3JpdGVyIEVkbXVuZCBXaWxzb24gcHV0IGl0LCA8cT5EZWF0aCBpcyBvbmUgcHJvcGhlY3kgdGhhdCBuZXZlciBmYWlscy48L3E+IEV2ZXJ5IHBlcnNvbiBpcyBib3JuIHdpdGggYSBkZWF0aCBzZW50ZW5jZS4gRWFjaCBzZWNvbmQgdGhhdCBwYXNzZXMgYnkgaXMgb25lIHlvdSdsbCBuZXZlciBnZXQgYmFjay48L3A+PHA+T25jZSB5b3UgcmVhbGl6ZSB0aGlzLCBpdCB3aWxsIGhhdmUgIHByb2ZvdW5kIGltcGFjdCBvbiB3aGF0IHlvdSBkbywgc2F5LCBhbmQgdGhpbmsuIERvbid0IGxldCBhbm90aGVyIGRheSB0aWNrIGF3YXkgaW4gaWdub3JhbmNlIG9mIHRoZSByZWFsaXR5IHRoYXQgeW91J3JlIGEgZHlpbmcgcGVyc29uLiBXZSBhbGwgYXJlLiBDYW4gdG9kYXkgYmUgdGhlIGRheSB3ZSBzdG9wIHByZXRlbmRpbmcgb3RoZXJ3aXNlPzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgUGhpbG9zb3BoZXIgQXMgQW4gQXJ0aXNhbiBPZiBMaWZlIEFuZCBEZWF0aCIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlBoaWxvc29waHkgZG9lcyBub3QgY2xhaW0gdG8gZ2V0IGEgcGVyc29uIGFuIGV4dGVybmFsIHBvc3Nlc3Npb24uIFRvIGRvIHNvIHdvdWxkIGJlIGJleW9uZCBpdHMgZmllbGQuIEFzIHdvb2QgaXMgdG8gdGhlIGNhcnBlbnRlciwgYnJvbnplIHRvIHRoZSBzY3VscHRvciwgc28gb3VyIG93biBsaXZlcyBhcmUgdGhlIHByb3BlciBtYXRlcmlhbCBpbiB0aGUgYXJ0IG9mIGxpdmluZy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJFcGljdGV0dXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJEaXNjb3Vyc2VzLCAxLjE1LjIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+UGhpbG9zb3BoeSBpcyBub3Qgc29tZSBpZGxlIHB1cnN1aXQgYXBwcm9wcmlhdGUgb25seSBmb3IgYWNhZGVtaWNzIG9yIHRoZSByaWNoLiBJbnN0ZWFkLCBpdCBpcyBvbmUgb2YgdGhlIG1vc3QgZXNzZW50aWFsIGFjdGl2aXRpZXMgdGhhdCBhIGh1bWFuIGJlaW5nIGNhbiBlbmdhZ2UgaW4uIEl0cyBwdXJwb3NlLCBhcyBIZW5yeSBEYXZpZCBUaG9yZWF1IHNhaWQgYSBmZXcgdGhvdXNhbmQgeWVhcnMgYWZ0ZXIgRXBpY3RldHVzLCBpcyB0byBoZWxwIHVzIDxxPnNvbHZlIHRoZSBwcm9ibGVtcyBvZiBsaWZlLCBub3Qgb25seSB0aGVvcmV0aWNhbGx5IGJ1dCBwcmFjdGljYWxseS48L3E+IFRoaXMgYWxpZ25zIG5pY2VseSB3aXRoIENpY2VybydzIGZhbW91cyBsaW5lOiA8cT48ZW0+VG8gcGhpbG9zb3BoaXplIGlzIHRvIGxlYXJuIGhvdyB0byBkaWUuPC9lbT48L3E+PC9wPjxwPllvdSdyZSBub3QgcmVhZGluZyB0aGVzZSBxdW90ZXMgYW5kIGRvaW5nIHRoZXNlIHRob3VnaHQgZXhlcmNpc2VzIGZvciBmdW4uIFRob3VnaCB0aGV5IG1heSBiZSBlbmpveWFibGUgYW5kIGhlbHAgeW91IGxpZ2h0ZW4gdXAsIHRoZWlyIGFpbSBpcyB0byBoZWxwIHlvdSBzY3VscHQgYW5kIGltcHJvdmUgeW91ciBsaWZlLiBBbmQgYmVjYXVzZSBhbGwgb2YgdXMgaGF2ZSBidXQgb25lIGxpZmUgYW5kIG9uZSBkZWF0aCwgd2Ugc2hvdWxkIHRyZWF0IGVhY2ggZXhwZXJpZW5jZSBsaWtlIGEgc2N1bHB0b3Igd2l0aCBoaXMgY2hpc2VscywgY2FydmluZyB1bnRpbCwgdG8gcGFyYXBocmFzZSBNaWNoZWxhbmdlbG8sIHdlIHNldCBmcmVlIHRoZSBhbmdlbCBpbiB0aGUgbWFyYmxlLjwvcD48cD5XZSBhcmUgdHJ5aW5nIHRvIGRvIHRoaXMgZGlmZmljdWx0IHRoaW5nJm1kYXNoO2xpdmluZyBhbmQgZHlpbmcmbWRhc2g7YXMgd2VsbCBhcyB3ZSBjYW4uIEFuZCB0byBkbyB0aGF0LCB3ZSBtdXN0IHJlbWVtYmVyIHdoYXQgd2UndmUgbGVhcm5lZCBhbmQgdGhlIHdpc2Ugd29yZHMgd2UndmUgYmVlbiBnaXZlbi48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciA0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiWW91IERvbid0IE93biBUaGF0IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQW55dGhpbmcgdGhhdCBjYW4gYmUgcHJldmVudGVkLCB0YWtlbiBhd2F5LCBvciBjb2VyY2VkIGlzIG5vdCBhIHBlcnNvbidzIG93biZtZGFzaDtidXQgdGhvc2UgdGhpbmdzIHRoYXQgY2FuJ3QgYmUgYmxvY2tlZCBhcmUgdGhlaXIgb3duIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy4yNC4zIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZSBjb25zZXJ2YXRpb25pc3QgRGFuaWVsIE8nQnJpZW4gaGFzIHNhaWQgdGhhdCBoZSBkb2Vzbid0IDxxPm93bjwvcT4gaGlzIHNldmVyYWwtdGhvdXNhbmQtYWNyZSBidWZmYWxvIHJhbmNoIGluIFNvdXRoIERha290YSwgaGUganVzdCBsaXZlcyB0aGVyZSB3aGlsZSB0aGUgYmFuayBsZXRzIGhpbSBtYWtlIG1vcnRnYWdlIHBheW1lbnRzIG9uIGl0LiBJdCdzIGEgam9rZSBhYm91dCB0aGUgZWNvbm9taWMgcmVhbGl0aWVzIG9mIHJhbmNoaW5nLiBCdXQgaXQgYWxzbyBoaW50cyBhdCB0aGUgaWRlYSB0aGF0IGxhbmQgZG9lc24ndCBiZWxvbmcgdG8gb25lIGluZGl2aWR1YWwsIHRoYXQgaXQgd2lsbCBmYXIgb3V0bGFzdCB1cyBhbmQgb3VyIGRlc2NlbmRhbnRzLiBNYXJjdXMgQXVyZWxpdXMgdXNlZCB0byBzYXkgdGhhdCB3ZSBkb24ndCBvd24gYW55dGhpbmcgYW5kIHRoYXQgZXZlbiBvdXIgbGl2ZXMgYXJlIGhlbGQgaW4gdHJ1c3QuPC9wPjxwPldlIG1heSBjbGF3IGFuZCBmaWdodCBhbmQgd29yayB0byBvd24gdGhpbmdzLCBidXQgdGhvc2UgdGhpbmdzIGNhbiBiZSB0YWtlbiBhd2F5IGluIGEgc2Vjb25kLiBUaGUgc2FtZSBnb2VzIGZvciBvdGhlciB0aGluZ3Mgd2UgbGlrZSB0byB0aGluayBhcmUgPHE+b3VyczwvcT4gYnV0IGFyZSBlcXVhbGx5IHByZWNhcmlvdXM6IG91ciBzdGF0dXMsIG91ciBwaHlzaWNhbCBoZWFsdGggb3Igc3RyZW5ndGgsIG91ciByZWxhdGlvbnNoaXBzLiBIb3cgY2FuIHRoZXNlIHJlYWxseSBiZSBvdXJzIGlmIHNvbWV0aGluZyBvdGhlciB0aGFuIHVzJm1kYXNoO2ZhdGUsIGJhZCBsdWNrLCBkZWF0aCwgYW5kIHNvIG9uJm1kYXNoO2NhbiBkaXNwb3NzZXNzIHVzIG9mIHRoZW0gd2l0aG91dCBub3RpY2U/PC9wPjxwPlNvIHdoYXQgZG8gd2Ugb3duPyBKdXN0IG91ciBsaXZlcyZtZGFzaDthbmQgbm90IGZvciBsb25nPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgNSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRoZSBCZW5lZml0cyBPZiBTb2JlcmluZyBUaG91Z2h0cyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIktlZXAgZGVhdGggYW5kIGV4aWxlIGJlZm9yZSB5b3VyIGV5ZXMgZWFjaCBkYXksIGFsb25nIHdpdGggZXZlcnl0aGluZyB0aGF0IHNlZW1zIHRlcnJpYmxlJm1kYXNoO2J5IGRvaW5nIHNvLCB5b3UnbGwgbmV2ZXIgaGF2ZSBhIGJhc2UgdGhvdWdodCBub3Igd2lsbCB5b3UgaGF2ZSBleGNlc3NpdmUgZGVzaXJlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkVuY2hpcmlkaW9uLCAyMSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Qb2xpdGljYWwgd2luZHMgY291bGQgY2hhbmdlIGluIGFuIGluc3RhbnQsIGRlcHJpdmluZyB5b3Ugb2YgdGhlIG1vc3QgYmFzaWMgZnJlZWRvbXMgeW91IHRha2UgZm9yIGdyYW50ZWQuIE9yLCBubyBtYXR0ZXIgd2hvIHlvdSBhcmUgb3IgaG93IHNhZmVseSB5b3UndmUgbGl2ZWQgeW91ciBsaWZlLCB0aGVyZSdzIHNvbWVvbmUgb3V0IHRoZXJlIHdobyB3b3VsZCByb2IgYW5kIGtpbGwgeW91IGZvciBhIGNvdXBsZSBvZiBkb2xsYXJzLjwvcD48cD5BcyBpdCdzIHdyaXR0ZW4gaW4gdGhlIHRpbWVsZXNzIDxjaXRlPkVwaWMgb2YgR2lsZ2FtZXNoPC9jaXRlPjxibG9ja3F1b3RlPjxxPk1hbiBpcyBzbmFwcGVkIG9mZiBsaWtlIGEgcmVlZCBpbiB0aGUgY2FuZWJyZWFrITxiciAvPlRoZSBjb21lbHkgeW91bmcgbWFuLCB0aGUgcHJldHR5IHlvdW5nIHdvbWFuJm1kYXNoOzxiciAvPkFsbCB0b28gc29vbiBpbiB0aGVpciBwcmltZSBEZWF0aCBhYmR1Y3RzIHRoZW0hPC9xPjwvYmxvY2txdW90ZT48L3A+PHA+RGVhdGggaXMgbm90IHRoZSBvbmx5IHVuZXhwZWN0ZWQgaW50ZXJydXB0aW9uIHdlIG1pZ2h0IGZhY2UmbWRhc2g7b3VyIHBsYW5zIGNhbiBiZSBkYXNoZWQgdG8gcGllY2VzIGJ5IGEgbWlsbGlvbiB0aGluZ3MuIFRvZGF5IG1pZ2h0IGJlIGEgYml0IG1vcmUgcGxlYXNhbnQgaWYgeW91IGlnbm9yZSB0aG9zZSBwb3NzaWJpbGl0aWVzLCBidXQgYXQgd2hhdCBjb3N0PzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDYiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgU3dvcmQgRGFuZ2xlcyBPdmVyIFlvdSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkRvbid0IGJlaGF2ZSBhcyBpZiB5b3UgYXJlIGRlc3RpbmUgdG8gbGl2ZSBmb3JldmVyLiBXaGF0J3MgZmF0ZWQgaGFuZ3Mgb3ZlciB5b3UuIEFzIGxvbmcgYXMgeW91IGxpdmUgYW5kIHdoaWxlIHlvdSBjYW4sIGJlY29tZSBnb29kIG5vdy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNC4xNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGVyZSBpcyBhbiBhbmNpZW50IHN0b3J5IG9mIGEgY291cmllciB3aG8gaGFkIG1hZGUgbGlnaHQgb2YgdGhlIHJlc3BvbnNpYmlsaXRpZXMgb2YgaGlzIGtpbmcuIFRvIHByb3ZlIGhlIHdhcyBtaXN0YWtlbiwgdGhlIGtpbmcgYXJyYW5nZWQgdG8gc3dpdGNoIHBsYWNlcyB3aXRoIHRoZSBjb3VydGllciBzbyBoZSBjb3VsZCBleHBlcmllbmNlIHdoYXQgaXQgd2FzIGxpa2UgdG8gYmUgYSBraW5nLiBUaGUga2luZyBtYWRlIG9uZSBvdGhlciBhZGp1c3RtZW50czogaGUgaHVuZyBhIHN3b3JkIGJ5IGEgaGFpciBvdmVyIHRoZSB0aHJvbmUgdG8gaWxsdXN0cmF0ZSB0aGUgcGVyaWwgYW5kIGJ1cmRlbiBvZiBraW5nc2hpcCBhcyB3ZWxsIGFzIHRoZSBjb25zdGFudCBmZWFyIG9mIGFzc2Fzc2luYXRpb24gV2UgY2FsbCB0aGF0IGRhbmdsaW5nIHJlbWluZGVyIG9mIGRlYXRoIGFuZCBkaWZmaWN1bHR5IHRoZSBTd29yZCBvZiBEYW1vY2xlcy48L3A+PHA+VGhlIHJlYWxpdHkgaXMgdGhhdCBhIHNpbWlsYXIgc3dvcmQgaGFuZ3Mgb3ZlciBhbGwgb2YgdXMmbWRhc2g7bGlmZSBjYW4gYmUgdGFrZW4gZnJvbSB1cyBhdCBhbnkgbW9tZW50LiBBbmQgdGhhdCB0aHJlYXQgY2FuIHNlbmQgdXMgaW4gb25lIG9mIHR3byBkaXJlY3Rpb25zOiB3ZSBjYW4gZmVhciBhbmQgZHJlYWQgaXQsIG9yIHdlIGNhbiB1c2UgaXQgdG8gbW90aXZhdGUgdXMuIFRvIGRvIGdvb2QsIHRvIGJlIGdvb2QuIEJlY2F1c2UgdGhlIHN3b3JkIGlzIGRhbmdsaW5nLCBhbmQgdGhlcmUncyBub3RoaW5nIGVsc2UgdG8gYmUgY29uY2VybmVkIHdpdGgsIHdvdWxkIHlvdSByYXRoZXIgaXQgY2F0Y2ggeW91IGluIHRoZSBtaWRkbGUgb2Ygc29tZSBzaGFtZWZ1bCwgc2VsZmlzaCBhY3Q/IFdvdWxkIHlvdSByYXRoZXIgaXQgY2F0Y2ggeW91IDxlbT53YWl0aW5nPC9lbT4gdG8gYmUgZ29vZCBpbiB0aGUgZnV0dXJlPzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJUaGUgQ2FyZHMgV2UncmUgRGVhbHQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGluayBvZiB0aGUgbGlmZSB5b3UgbGl2ZWQgdW50aWwgbm93IGFzIG92ZXIgYW5kLCBhcyBhIGRlYWQgbWFuLCBzZWUgd2hhdCdzIGxlZnQgYXMgYSBib251cyBhbmQgbGl2ZSBpdCBhY2NvcmRpbmcgdG8gTmF0dXJlLiBMb3ZlIHRoZSBoYW5kIHRoYXQgZmF0ZSBkZWFscyB5b3UgYW5kIHBsYXkgaXQgYXMgeW91ciBvd24sIGZvciB3aGF0IGNvdWxkIGJlIG1vcmUgZml0dGluZz8iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNy41Ni01NyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5XZSBoYXZlIGFuIGlycmF0aW9uYWwgZmVhciBvZiBhY2tub3dsZWRnaW5nIG91ciBvd24gbW9ydGFsaXR5LiBXZSBhdm9pZCB0aGlua2luZyBhYm91dCBpdCBiZWNhdXNlIHdlIHRoaW5rIGl0IHdpbGwgYmUgZGVwcmVzc2luZy4gSW4gZmFjdCwgcmVmbGVjdGluZyBvbiBtb3J0YWxpdHkgb2Z0ZW4gaGFzIHRoZSBvcHBvc2l0ZSBlZmZlY3QmbWRhc2g7aW52aWdvcmF0aW5nIHVzIG1vcmUgdGhhbiBzYWRkZW5pbmcgdXMuIFdoeT8gQmVjYXVzZSBpdCBnaXZlIHVzIGNsYXJpdHkuPC9wPjxwPklmIHlvdSB3ZXJlIHN1ZGRlbmx5IHRvbGQgeW91IGhhZCBidXQgYSB3ZWVrIHRvIGxpdmUsIHdoYXQgY2hhbmdlcyB3b3VsZCB5b3UgbWFrZT8gSWYgeW91IGRpZWQgYnV0IHdlcmUgcmVzdXNjaXRhdGVkLCBob3cgZGlmZmVyZW50IHdvdWxkIHlvdXIgcGVyc3BlY3RpdmUgYmU/PC9wPjxwPldoZW4sIGFzIFNoYWtlc3BlYXJlJ3MgUHJvc3Blcm8gcHV0cyBpdCwgPHE+ZXZlcnkgdGhpcmQgdGhvdWdodCBzaGFsbCBiZSBteSBncmF2ZSw8L3E+IHRoZXJlJ3Mgbm8gcmlzayBvZiBnZXR0aW5nIGNhdWdodCB1cCBpbiBwZXR0eSBtYXR0ZXJzIG9yIGRpc3RyYWN0aW9ucy4gSW5zdGVhZCBvZiBkZW55aW5nIG91ciBmZWFyIG9mIGRlYXRoLCBsZXQncyBsZXQgaXQgbWFrZSB0aGUgYmVzdCBwZW9wbGUgd2UgY2FuIGJlLjwvcD48cD5Ub2RheS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIjxwPjxzcGVha2VyPktlYXRpbmc6PC9zcGVha2VyPiA8cT5TZWl6ZSB0aGUgZGF5LiBHYXRoZXIgeWUgcm9zZWJ1ZHMgd2hpbGUgeWUgbWF5LjwvcT4gV2h5IGRvZXMgdGhlIHdyaXRlciB1c2UgdGhlc2UgbGluZXM/PGJyIC8+PHNwZWFrZXI+Q2hhcmxpZTo8L3NwZWFrZXI+IEJlY2F1c2UgaGUncyBpbiBhIGh1cnJ5LjxiciAvPjxzcGVha2VyPktlYXRpbmc6PC9zcGVha2VyPiBOby4gRGluZyEgVGhhbmsgeW91IGZvciBwbGF5aW5nIGFueXdheS4gQmVjYXVzZSB3ZSBhcmUgZm9vZCBmb3Igd29ybXMsIGxhZHMuIEJlY2F1c2UsIGJlbGlldmUgaXQgb3Igbm90LCBlYWNoIGFuZCBldmVyeSBvbmUgb2YgdXMgaW4gdGhpcyByb29tIGlzIG9uZSBkYXkgZ29pbmcgdG8gc3RvcCBicmVhdGhpbmcsIHR1cm4gY29sZCBhbmQgZGllLjxwPiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciA4IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgSGlkZSBGcm9tIFlvdXIgRmVlbGluZ3MiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJdCdzIGJldHRlciB0byBjb25xdWVyIGdyaWVmIHRoYW4gdG8gZGVjZWl2ZSBpdC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiBDb25zb2xhdGlvbiBUbyBIZWx2aWEsIDE3LjFiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPldlJ3ZlIGFsbCBsb3N0IHBlb3BsZSB3ZSB3ZXJlIGNsb3NlIHRvJm1kYXNoO2EgZnJpZW5kLCBhIGNvbGxlYWd1ZSwgYSBwYXJlbnQsIGEgZ3JhbmRwYXJlbnQuIFdoaWxlIHdlIHdlcmUgc3VmZmVyaW5nIGZyb20gb3VyIGdyaWVmLCBzb21lIHdlbGwtbWVhbmluZyBwZXJzb24gZGlkIHRoZWlyIGJlc3QgdG8gdGFrZSBvdXIgbWluZCBvZmYgaXQgb3IgbWFrZSB1cyB0aGluayBhYm91dCBzb21ldGhpbmcgZWxzZSBmb3IgYSBjb3VwbGUgaG91cnMuIEhvd2V2ZXIga2luZCwgdGhlc2UgZ2VzdHVyZXMgYXJlIG1pc2d1aWRlZC48L3A+PHA+VGhlIFN0b2ljcyBhcmUgc3RlcmVvdHlwZWQgYXMgc3VwcHJlc3NpbmcgdGhlaXIgZW1vdGlvbnMsIGJ1dCB0aGVpciBwaGlsb3NvcGh5IHdhcyBhY3R1YWxseSBpbnRlbmRlZCB0byB0ZWFjaCB1cyB0byBmYWNlLCBwcm9jZXNzLCBhbmQgZGVhbCB3aXRoIGVtb3Rpb25zIDxlbT5pbW1lZGlhdGVseTwvZW0+IGluc3RlYWQgb2YgcnVubmluZyBmcm9tIHRoZW0uIFRlbXB0aW5nIGFzIGl0IGlzIHRvIGRlY2VpdmUgeW91cnNlbGYgb3IgaGlkZSBmb3JtIGEgcG93ZXJmdWwgZW1vdGlvbiBsaWtlIGdyaWVmJm1kYXNoO2J5IHRlbGxpbmcgeW91cnNlbGYgYW5kIG90aGVyIHBlb3BsZSB0aGF0IHlvdSdyZSBmaW5lJm1kYXNoO2F3YXJlbmVzcyBhbmQgdW5kZXJzdGFuZGluZyBhcmUgYmV0dGVyLiBEaXN0cmFjdGlvbiBtaWdodCBiZSBwbGVhc2FudCBpbiB0aGUgc2hvcnQgdGVybSZtZGFzaDtieSBnb2luZyB0byBnbGFkaWF0b3JpYWwgZ2FtZXMsIGFzIGEgUm9tYW4gbWlnaHQgaGF2ZSBkb25lLCBmb3IgZXhhbXBsZS4gRm9jdXNpbmcgaXMgYmV0dGVyIGluIHRoZSBsb25nIHRlcm0uPC9wPjxwPlRoYXQgbWVhbnMgZmFjaW5nIGl0IG5vdy4gUHJvY2VzcyBhbmQgcGFyc2Ugd2hhdCB5b3UgYXJlIGZlZWxpbmcuIFJlbW92ZSB5b3VyIGV4cGVjdGF0aW9ucywgeW91ciBlbnRpdGxlbWVudHMsIHlvdXIgc2Vuc2Ugb2YgaGF2aW5nIGJlZW4gd3JvbmdlZC4gRmluZCB0aGUgcG9zaXRpdmUgaW4gdGhlIHNpdHVhdGlvbiwgYnV0IGFsc28gc2l0IHdpdGggeW91ciBwYWluIGFuZCBhY2NlcHQgaXQsIHJlbWVtYmVyaW5nIHRoYXQgaXQgaXMgYSBwYXJ0IG9mIGxpZmUuIFRoYXQncyBob3cgb25lIGNvbnF1ZXJzIGdyaWVmLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJTcGVuZHRocmlmdHMgb2YgVGltZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldlcmUgYWxsIHRoZSBnZW5pdXNlcyBvZiBoaXN0b3J5IHRvIGZvY3VzIG9uIHRoaXMgc2luZ2xlIHRoZW1lLCB0aGV5IGNvdWxkIG5ldmVyIGZ1bGx5IGV4cHJlc3MgdGhlaXIgYmFmZmxlbWVudCBhdCB0aGUgZGFya25lc3Mgb2YgdGhlIGh1bWFuIG1pbmQuIE5vIHBlcnNvbiB3b3VsZCBnaXZlIHVwIGV2ZW4gYW4gaW5jaCBvZiB0aGVpciBlc3RhdGUsIGFuZCB0aGUgc2xpZ2h0ZXN0IGRpc3B1dGUgd2l0aCBhIG5laWdoYm9yIGNhbiBtZWFuIGhlbGwgdG8gcGF5OyB5ZXQgd2UgZWFzaWx5IGxldCBvdGhlcnMgZW5jcm9hY2ggb24gb3VyIGxpdmVzJm1kYXNoO3dvcnNlLCB3ZSBvZnRlbiBwYXZlIHRoZSB3YXkgZm9yIHRob3NlIHdobyB3aWxsIHRha2UgaXQgb3Zlci4gTm8gcGVyc29uIGhhbmRzIG91dCB0aGVpciBtb25leSB0byBwYXNzZXJieSwgYnV0IHRvIGhvdyBtYW55IGRvIGVhY2ggb2YgdXMgaGFuZCBvdXQgb3VyIGxpdmVzISBXZSdyZSB0aWdodC1maXN0ZWQgd2l0aCBwcm9wZXJ0eSBhbmQgbW9uZXksIHlldCB0aGluayB0b28gbGl0dGxlIG9mIHdhc3RpbmcgdGltZSwgdGhlIG9uZSB0aGluZyBhYm91dCB3aGljaCB3ZSBzaG91bGQgYWxsIGJlIHRoZSB0b3VnaGVzdCBtaXNlcnMuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gdGhlIEJyZXZpdHkgb2YgTGlmZSwgMy4xLTIiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VG9kYXkgdGhlcmUgd2lsbCBiZSBlbmRsZXNzIGludGVycnVwdGlvbnM6IHBob25lIGNhbGxzLCBlbWFpbHMsIHZpc2l0b3JzLCB1bmV4cGVjdGVkIGV2ZW50cy4gQm9va2VyIFQuIFdhc2hpbmd0b24gb2JzZXJ2ZWQgdGhhdCA8cT50aGUgbnVtYmVyIG9mIHBlb3BsZSB3aG8gc3RhbmQgcmVhZHkgdG8gY29uc3VtZSBvbmUncyB0aW1lLCB0byBubyBwdXJwb3NlLCBpcyBhbG1vc3QgY291bnRsZXNzLjwvcT48L3A+PHA+QSBwaGlsb3NvcGhlciwgb24gdGhlIG90aGVyIGhhbmQsIGtub3dzIHRoYXQgdGhlaXIgZGVmYXVsdCBzdGF0ZSBzaG91bGQgYmUgb25lIG9mIHJlZmxlY3Rpb24gYW5kIGlubmVyIGF3YXJlbmVzcy4gVGhpcyBpcyB3aHkgdGhleSBzbyBkaWxpZ2VudGx5IHByb3RlY3QgdGhlaXIgcGVyc29uYWwgc3BhY2UgYW5kIHRob3VnaHRzIGZyb20gdGhlIGludHJ1c2lvbnMgb2YgdGhlIHdvcmxkLiBUaGV5IGtub3cgdGhhdCBhIGZldyBtaW51dGVzIG9mIGNvbnRlbXBsYXRpb24gYXJlIHdvcnRoIG1vcmUgdGhhbiBhbnkgbWVldGluZyBvciByZXBvcnQuIFRoZXkgYWxzbyBrbm93IGhvdyBsaXR0bGUgdGltZSB3ZSdyZSBhY3R1YWxseSBnaXZlbiBpbiBsaWZlJm1kYXNoO2FuZCBob3cgcXVpY2tseSBvdXIgc3RvcmVzIGNhbiBiZSBkZXBsZXRlZC48L3A+PHA+U2VuZWNhIHJlbWluZHMgdXMgdGhhdCB3aGlsZSB3ZSBtaWdodCBiZSBnb29kIGF0IHByb3RlY3Rpbmcgb3VyIHBoeXNpY2FsIHByb3BlcnR5LCB3ZSBhcmUgZmFyIHRvbyBsYXggYXQgZW5mb3JjaW5nIG91ciBtZW50YWwgYm91bmRhcmllcy4gUHJvcGVydHkgY2FuIGJlIHJlZ2FpbmVkOyB0aGVyZSBpcyBxdWl0ZSBhIGJpdCBvZiBpdCBvdXQgdGhlcmUmbWRhc2g7c29tZSBvZiBpdCBzdGlsbCB1bnRvdWNoZWQgYnkgbWFuLiBCdXQgdGltZT8gVGltZSBpcyBvdXIgbW9zdCBpcnJlcGxhY2VhYmxlIGFzc2V0Jm1kYXNoO3dlIGNhbm5vdCBidXkgbW9yZSBvZiBpdC4gV2UgY2FuIG9ubHkgc3RyaXZlIHRvIHdhc3RlIGFzIGxpdHRsZSBhcyBwb3NzaWJsZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIjxibG9ja3F1b3RlPkdhdGhlciB5ZSByb3NlYnVkcyB3aGlsZSB5ZSBtYXksPGJyIC8+T2xkIFRpbWUgaXMgc3RpbGwgYS1mbHlpbmc7PGJyIC8+QW5kIHRoaXMgc2FtZSBmbG93ZXIgdGhhdCBzbWlsZXMgdG9kYXk8YnIgLz5Uby1tb3Jyb3cgd2lsbCBiZSBkeWluZy48YnIgLz5UaGUgZ2xvcmlvdXMgbGFtcCBvZiBoZWF2ZW4sIHRoZSBzdW4sPGJyIC8+VGhlIGhpZ2hlciBoZSdzIGEtZ2V0dGluZyw8YnIgLz5UaGUgc29vbmVyIHdpbGwgaGlzIHJhY2UgYmUgcnVuLDxiciAvPkFuZCBuZWFyZXIgaGUncyB0byBzZXR0aW5nLjxiciAvPlRoYXQgYWdlIGlzIGJlc3Qgd2hpY2ggaXMgdGhlIGZpcnN0LDxiciAvPldoZW4geW91dGggYW5kIGJsb29kIGFyZSB3YXJtZXI7PGJyIC8+QnV0IGJlaW5nIHNwZW50LCB0aGUgd29yc2UsIGFuZCB3b3JzdDxiciAvPlRpbWVzIHN0aWxsIHN1Y2NlZWQgdGhlIGZvcm1lci48YnIgLz5UaGVuIGJlIG5vdCBjb3ksIGJ1dCB1c2UgeW91ciB0aW1lLDxiciAvPkFuZCwgd2hpbGUgeWUgbWF5LCBnbyBtYXJyeTo8YnIgLz5Gb3IgaGF2aW5nIGxvc3QgYnV0IG9uY2UgeW91ciBwcmltZSw8YnIgLz5Zb3UgbWF5IGZvcmV2ZXIgdGFycnkuPGJyIC8+PGJyIC8+PGNpdGU+VG8gdGhlIFZpcmdpbnMsIHRvIE1ha2UgTXVjaCBvZiBUaW1lLCBSb2JlcnQgSGVycmljazwvY2l0ZT48L2Jsb2NrcXVvdGU+Ig0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDEwIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgU2VsbCBZb3Vyc2VsZiBUb28gQ2hlYXBseSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkkgc2F5LCBsZXQgbm8gb25lIHJvYiBtZSBvZiBhIHNpbmdsZSBkYXkgd2hvIGlzbid0IGdvaW5nIHRvIG1ha2UgYSBmdWxsIHJldHVybiBvbiB0aGUgbG9zcy4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJPbiBUcmFucXVpbGl0eSBvZiBNaW5kLCAxLjExYiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5QZW9wbGUgc3BlbmQgYSBsb3QgbW9yZSBtb25leSB3aGVuIHRoZXkgdXNlIGNyZWRpdCBjYXJkcyB0aGFuIHdoZW4gdGhleSBoYXZlIHRvIHB1bGwgb3V0IGFjdHVhbCBjYXNoLiBJZiB5b3UgZXZlciB3b25kZXJlZCB3aHkgY3JlZGl0IGNhcmQgY29tcGFuaWVzIGFuZCBiYW5rcyBwdXNoIGNhcmRzIHNvIGFnZ3Jlc3NpdmVseSwgdGhpcyBpcyB3aHkuIFRoZSBtb3JlIGNyZWRpdCBjYXJkcyB5b3UgaGF2ZSwgdGhlIG1vcmUgeW91J2xsIHNwZW5kLjwvcD48cD5EbyB3ZSB0cmVhdCB0aGUgZGF5cyBvZiBvdXIgbGl2ZXMgbGlrZSB3ZSB0cmVhdCBvdXIgbW9uZXk/IEJlY2F1c2Ugd2UgZG9uJ3QgZXhhY3RseSBrbm93IGhvdyBtYW55IGRheXMgd2UnbGwgYmUgYWxpdmUsIGFuZCBiZWNhdXNlIHdlIHRyeSBvdXIgaGFyZGVzdCA8ZW0+bm90PC9lbT4gdG8gdGhpbmsgYWJvdXQgdGhlIGZhY3QgdGhhdCBzb21lZGF5IHdlJ2xsIGRpZSwgd2UncmUgcHJldHR5IGxpYmVyYWwgd2l0aCBob3cgZnJlZWx5IHdlIHNwZW5kIG91ciB0aW1lLiBXZSBsZXQgcGVvcGxlIGFuZCBvYmxpZ2F0aW9ucyBpbXBvc2Ugb24gdGhhdCB0aW1lLCBvbmx5IHJhcmVseSBhc2tpbmc6IDxlbT5XaGF0IGFtIEkgZ2V0dGluZyBpbiByZXR1cm4gaGVyZT88L2VtPjwvcD48cD5TZW5lY2EncyBtYXhpbSBpcyB0aGUgZXF1aXZhbGVudCBvZiBjdXR0aW5nIHVwIHlvdXIgY3JlZGl0IGNhcmRzIGFuZCBzd2l0Y2hpbmcgdG8gY2FzaC4gSGUgc2F5cyB0byBwdXQgcmVhbCB0aG91Z2h0IGludG8gZXZlcnkgdHJhbnNhY3Rpb246IDxlbT5BbSBJIGdldHRpbmcgbXkgbW9uZXkncyB3b3J0aCBoZXJlPyBJcyB0aGlzIGEgZmFpciB0cmFkZT88L2VtPjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDExIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRGlnbml0eSBBbmQgQnJhdmVyeSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIkFzIENpY2VybyBzYXlzLCB3ZSBoYXRlIGdsYWRpYXRvcnMgaWYgdGhleSBhcmUgcXVpY2sgdG8gc2F2ZSB0aGVpciBsaXZlcyBieSBhbnkgbWVhbnM7IHdlIGZhdm9yIHRoZW0gaWYgdGhleSBzaG93IGNvbnRlbXB0IGZvciB0aGlyIGxpdmVzLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk9uIFRyYW5xdWlsaXR5IG9mIE1pbmQsIDExLjRiIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkx5bmRvbiBKb2huc29uJ3MgY29sbGVnZSBjbGFzc21hdGVzIHVzZWQgdG8gdGVsbCBhbiBlbWJhcnJhc3Npbmcgc3RvcnkgYWJvdXQgaGltLiBKb2huc29uIGFwcGFyZW50bHkgaGFkIGEgYmlnIG1vdXRoIGFuZCBmZWx0IGhlIGhhZCB0byBjb25zdGFudGx5IGRvbWluYXRlIGFuZCBpbnRpbWlkYXRlIG90aGVycy4gWWV0IGhpcyBiaW9ncmFwaGVyLCBSb2JlcnQgQ2FybyBtYWtlcyBpdCBjbGVhciB0aGF0IHdoZW4gc29tZW9uZSBzdG9vZCB1cCB0byB5b3VuZyBMeW5kb24sIGhlIHByb3ZlZCBoaW1zZWxmIHRvIGJlIGEgY29tcGxldGUgY293YXJkLiBJbiBvbmUgaW5zdGFuY2UsIGR1cmluZyBhbiBhcmd1bWVudCBvdmVyIGEgcG9rZXIgZ2FtZSwgaW5zdGVhZCBvZiBmaWdodGluZywgSm9obnNvbiB0aHJldyBoaW1zZWxmIG9uIGEgYmVkIGFuZCA8cT5iZWdhbiBraWNraW5nIGhpcyBmZWV0IGluIHRoZSBhaXIgd2l0aCBhIGZyYW50aWMsIHdpbmRtaWxsaW5nIG1vdGlvbi4gLiAubGlrZSBhIGdpcmwuPC9xPiBIZSBzaG91dGVkLCA8cT5JZiB5b3UgaGl0IG1lLCBJJ2xsIGtpY2sgeW91ISBJZiB5b3UgaGl0IG1lLCBJJ2xsIGtpY2sgeW91ITwvcT48L3A+PHA+TGF0ZXIgaW4gaGlzIGxpZmUsIEpvaG5zb24gYWxzbyB3b3JrZWQgZXh0cmVtZWx5IGhhcmQgdG8gYXZvaWQgc2VydmluZyBpbiBXb3JsZCBXYXIgSUkgYW5kIGxpdmVkIGl0IHVwIGluIENhbGlmb3JuaWEgd2hpbGUgb3RoZXIgc29sZGllcnMgZm91Z2h0IGFuZCBkaWVkIGFicm9hZC4gSGUgbGF0ZXIgY2xhaW1lZCB0byBiZSBhIHdhciBoZXJvLiBJdCB3YXMgb25lIG9mIGhpcyBtb3N0IHNoYW1lZnVsIGxpZXMuPC9wPjxwPldlIGRvIG5vdCBuZWVkIHRvIGRpc3JlZ2FyZCBvdXIgcGh5c2ljYWwgc2FmZXR5IG9yIGVuZ2FnZSBpbiB3YW50b24gYWN0cyBvZiB2aW9sZW5jZSB0byBiZSBicmF2ZS4gQnV0IG5vYm9keSByZXNwZWN0cyBhIGNvd2FyZC4gTm9ib2R5IGxpa2UgYSBzaGlya2VyIG9mIGR1dHkuIE5vYm9keSBhZG1pcmVzIGEgcGVyc29uIHdobyBwdXRzIHRvbyBoaWdoIGEgcHJpY2Ugb24gdGhlaXIgb3duIGNvbWZvcnQgYW5kIG5lZWRzLjwvcD48cD5UaGF0J3MgdGhlIGlyb255IG9mIGNvd2FyZGljZS4gSXQncyBhaW1lZCBhdCBzZWxmLXByb3RlY3Rpb24sIGJ1dCBpdCBjcmVhdGVzIHNoYW1lZnVsIHNlY3JldHMuIFNlbGYtcHJlc2VydmF0aW9uIGlzIGhhcmRseSB3b3J0aCBpdCBiZWNhdXNlIG9mIGV2ZXJ5dGhpbmcgaXQgY29zdHMgaW4gcmV0dXJuLjwvcD48cD5CZSBicmF2ZS4gQmUgZGlnbmlmaWVkLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDEyIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiVGhlIEJlYXQgR29lcyBPbiIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIldhbGsgdGhlIGxvbmcgZ2FsbGVyeSBvZiB0aGUgcGFzdCwgb2YgZW1waXJlcywgYW5kIGtpbmdkb21zIHN1Y2NlZWRpbmcgZWFjaCBvdGhlciB3aXRob3V0IG51bWJlci4gQW5kIHlvdSBjYW4gYWxzbyBzZWUgdGhlIGZ1dHVyZSwgZm9yIHN1cmVseSBpdCB3aWxsIGJlIGV4YWN0bHkgdGhlIHNhbWUsIHVuYWJsZSB0byBkZXZpYXRlIGZyb20gdGhlIHByZXNlbnQgcmh5dGhtLiBJdCdzIGFsbCBvbmUgd2hldGhlciB3ZSd2ZSBleHBlcmllbmNlZCBmb3J0eSB5ZWFycyBvciBhbiBhZW9uLiBXaGF0IG1vcmUgaXMgdGhlcmUgdG8gc2VlPyIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA3LjQ5Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkFsbCB0aGluZ3MgZGllLiBOb3QganVzdCBwZW9wbGUgYnV0IGNvbXBhbmllcywga2luZ2RvbXMsIHJlbGlnaW9ucywgYW5kIGlkZWFzJm1kYXNoO2V2ZW50dWFsbHkuIFRoZSBSb21hbiBSZXB1YmxpYyBsYXN0ZWQgNDUwIHllYXJzLiBUaGUgUm9tYW4gRW1waXJlLCBvZiB3aGljaCBNYXJjdXMgQXVyZWxpdXMgd2FzIGNvbnNpZGVyZWQgdG8gYmUgb25lIG9mIHRoZSA8cT5maXZlIGdvb2QgZW1wZXJvcnMsPC9xPiBsYXN0ZWQgNTAwIHllYXJzLiBUaGUgbG9uZ2VzdCByZWNvcmRlZCBsaWZlIG9mIGEgaHVtYW4gYmVpbmcgaXMgMTIyIHllYXJzLiBUaGUgYXZlcmFnZSBsaWZlIGV4cGVjdGFuY3kgaW4gdGhlIFVuaXRlZCBTdGF0ZXMgaXMgYSBsaXR0bGUgb3ZlciBzZXZlbnR5LWVpZ2h0IHllYXJzLiBJbiBvdGhlciBjb3VudHJpZXMsIGluIG90aGVyIGVyYXMsIGl0IGhhcyBiZWVuIG1vcmUgYW5kIGl0IGhhcyBiZWVuIGxlc3MuIEJ1dCBpbiB0aGUgZW5kIHdlIGFsbCBzdWNjdW1iLCBhcyBNYXJjdXMgc2FpZCwgdG8gdGhlIHJoeXRobSBvZiBldmVudHMmbWRhc2g7b2Ygd2hpY2ggdGhlcmUgaXMgYWx3YXlzIGEgZmluYWwsIGRldGVybWluZWQgYmVhdC4gVGhlcmUgaXMgbm8gbmVlZCB0byBkd2VsbCBvbiB0aGlzIGZhY3QsIGJ1dCB0aGVyZSBpcyBubyBwb2ludCBpbiBpZ25vcmluZyBpdCBlaXRoZXIuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMTMiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJJdCdzIEp1c3QgQSBOdW1iZXIiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJZb3UgYXJlbid0JyBib3RoZXJlZCwgYXJlIHlvdSwgYmVjYXVzZSB5b3Ugd2VpZ2h0IGEgY2VydGFpbiBhbW91bnQgYW5kIG5vdCB0d2ljZSBhcyBtdWNoPyBTbyB3aHkgZ2V0IHdvcmtlZCB1cCB0aGF0IHlvdSd2ZSBiZWVuIGdpdmVuIGEgY2VydGFpbiBsaWZlc3BhbiBhbmQgbm90IG1vcmU/IEp1c3QgYXMgeW91IGFyZSBzYXRpc2ZpZWQgd2l0aCB5b3VyIG5vcm1hbCB3ZWlnaHQsIHNvIHlvdSBzaG91bGQgYmUgd2l0aCB0aGUgdGltZSB5b3UndmUgYmVlbiBnaXZlbi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNi40OSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGV5IHNheSBhZ2UgaXMganVzdCBhIG51bWJlciwgYnV0IHRvIHNvbWUgcGVvcGxlIGl0J3MgYSB2ZXJ5IGltcG9ydGFudCBvbmUmbWRhc2hvdGhlcndpc2UsIHdvbWVuIHdvdWxkbid0IGxpZSBhYm91dCBiZWluZyB5b3VuZ2VyLCBhbmQgYW1iaXRpb3VzIHlvdW5nIG1lbiB3b3VsZCBsaWtlIGFib3V0IGJlaW5nIG9sZGVyLiBSaWNoIHBlb3BsZSBhbmQgaGVhbHRoIG51dHMgc3BlbmQgYmlsbGlvbnMgb2YgZG9sbGFycyBpbiBhbiBlZmZvcnQgdG8gbW92ZSB0aGVpciBleHBpcmF0aW9uIGRhdGUgZnJvbSBhcm91bmQgc2V2ZW50eS1laWdodCB5ZWFycyB0byBob3BlZnVsbHkgPGVtPmZvcmV2ZXI8L2VtPi48L3A+PHA+VGhlIG51bWJlciBvZiB5ZWFycyB3ZSBtYW5hZ2UgdG8gZWtlIG91dCBkb2Vzbid0IG1hdHRlciwgb25seSB3aGF0IHRob3NlIHllYXJzIGFyZSBjb21wb3NlZCBvZi4gU2VuZWNhIHB1dCBpdCBiZXN0IHdoZW4gaGUgc2FpZCwgPHE+TGlmZSBpcyBsb25nIGlmIHlvdSBrbm93IGhvdyB0byB1c2UgaXQuPC9xPiBTYWRseSwgbW9zdCBwZW9wbGUgZG9uJ3QmbWRhc2h0aGV5IHdhc3RlIHRoZSBsaWZlIHRoZXkndmUgYmVlbiBnaXZlbi4gT25seSB3aGVuIGl0IGlzIHRvbyBsYXRlIGRvIHRoZXkgdHJ5IHRvIGNvbXBlbnNhdGUgZm9yIHRoYXQgd2FzdGUgYnkgdmFpbmx5IGhvcGluZyB0byBwdXQgbW9yZSB0aW1lIG9uIHRoZSBjbG9jay48L3A+PHA+VXNlIHRvZGF5LiBVc2UgZXZlcnkgZGF5LiBNYWtlIHlvdXJzZWxmIHNhdGlzZmllZCB3aXRoIHdoYXQgeW91IGhhdmUgYmVlbiBnaXZlbi48L3A+ICIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMTQiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJXaGF0IFdlIFNob3VsZCBLbm93IEJ5IFRoZSBFbmQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJTb29uIHlvdSB3aWxsIGRpZSwgYW5kIHN0aWxsIGFyZW4ndCBzaW5jZXJlLCB1bmRpc3R1cmJlZCwgb3IgZnJlZSBmcm9tIHN1c3BpY2lvbiB0aGF0IGV4dGVybmFsIHRoaW5ncyBjYW4gaGFybSB5b3UsIG5vciBhcmUgeW91IGdyYWNpb3VzIHRvIGFsbCwga25vd2luZyB0aGF0IHdpc2RvbSBhbmQgYWN0aW5nIGp1c3RseSBhcmUgb25lIGFuZCB0aGUgc2FtZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNC4zNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Gcm9tIHdoYXQgd2UgdW5kZXJzdGFuZCwgTWFyY3VzIHdyb3RlIG1hbnkgb2YgaGlzIG1lZGl0YXRpb25zIGxhdGVyIGluIGxpZmUsIHdoZW4gd2Ugd2FzIHN1ZmZlcmluZyBmcm9tIHNlcmlvdXMgaWxsbmVzcy4gU28gd2hlbiBoZSBzYXlzLCA8cT5Tb29uIHlvdSB3aWxsIGRpZSw8L3E+IGhlIHdhcyBzcGVha2luZyBmcmFua2x5IHRvIGhpbXNlbGYgYWJvdXQgaGlzIG93biBtb3J0YWxpdHkuIEhvdyBzY2FyeSB0aGF0IG11c3QgaGF2ZSBiZWVuLiBIZSB3YXMgc3RhcmluZyBhdCB0aGUgcmVhbCBwb3NzaWJpbGl0eSBvZiBkZWF0aCBhbmQgbm90IGxpa2luZyB3aGF0IGhlIHNhdyBpbiB0aGVzZSBsYXN0IG1pbnV0ZXMuPC9wPjxwPlN1cmUsIGhlJ3MgYWNjb21wbGlzaGVkIG1hbnkgdGhpbmdzIGluIGhpcyBsaWZlLCBidXQgaGlzIGVtb3Rpb25zIHdlcmUgc3RpbGwgdGhlIGNhdXNlIG9mIGRpc2NvbWZvcnQsIHBhaW4sIGFuZCBmcnVzdHJhdGlvbi4gSGUga25ldyB0aGF0IHdpdGggaGlzIGxpbWl0ZWQgdGltZSBsZWZ0LCBiZXR0ZXIgY2hvaWNlcyB3b3VsZCBwcm92aWRlIHJlbGllZi48L3A+PHA+SG9wZWZ1bGx5LCB5b3UgaGF2ZSBhIGxvdCBtb3JlIHRpbWUgbGVmdCZtZGFzaDtidXQgdGhhdCBtYWtlcyBpdCBldmVuIG1vcmUgaW1wb3J0YW50IHRvIG1ha2UgaGVhZHdheSB3aGlsZSB5b3Ugc3RpbGwgY2FuLiBXZSBhcmUgdW5maW5pc2hlZCBwcm9kdWN0cyB1cCB1bnRpbCB0aGUgZW5kLCBhcyBNYXJjdXMga25ldyB2ZXJ5IHdlbGwuIEJ1dCB0aGUgZWFybGllciB3ZSBsZWFybiBpdCwgdGhlIG1vcmUgd2UgY2FuIGVuam95IHRoZSBmcnVpdHMgb2YgdGhlIGxhYm9yIG9uIG91ciBjaGFyYWN0ZXImbWRhc2g7YW5kIHRoZSBzb29uZXIgd2UgY2FuIGJlIGZyZWUgKG9yIDxlbT5mcmVlcjwvZW0+KSBvZiBpbnNpbmNlcml0eSwgYW54aWV0eSwgdW5ncmFjaW91c25lc3MsIGFuZCB1bi1TdG9pYy1uZXNzLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDE1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiQSBTaW1wbGUgV2F5IFRvIE1lYXN1cmUgT3VyIERheXMiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUaGlzIGlzIHRoZSBtYXJrIG9mIHBlcmZlY3Rpb24gb2YgY2hhcmFjdGVyJm1kYXNoO3RvIHNwZW5kIGVhY2ggZGF5IGFzIGlmIGl0IHdlcmUgeW91ciBsYXN0LCB3aXRob3V0IGZyZW56eSwgbGF6aW5lc3MsIG9yIGFueSBwcmV0ZW5kaW5nLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIk1hcmN1cyBBdXJlbGl1cyIsDQogICAgICAgICAgICAic291cmNlIjogIk1lZGl0YXRpb25zLCA3LjY5Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZSBTdG9pY3MgZGlkbid0IHRoaW5rIHRoYXQgYW55b25lIGNvdWxkIGJlIHBlcmZlY3QuIFRoZSBpZGVhIG9mIGJlY29taW5nIGEgc2FnZSZtZGFzaDt0aGUgaGlnaGVzdCBhc3BpcmF0aW9uIG9mIGEgcGhpbG9zb3BoZXImbWRhc2g7d2Fzbid0IHJlYWxpc3RpYy4gVGhpcyB3YXMganVzdCB0aGVpciBQbGF0b25pYyBpZGVhbC48L3A+PHA+U3RpbGwsIHRoZXkgc3RhcnRlZCBldmVyeSBkYXkgaG9waW5nIHRvIGdldCBhIGxpdHRsZSBjbG9zZXIgdG8gdGhhdCBtYXJrLiBUaGVyZSB3YXMgbXVjaCB0byBnYWluIGluIHRoZSB0cnlpbmcuIENhbiB5b3UgYWN0dWFsbHkgbGl2ZSB0b2RheSBsaWtlIGl0IGlzIHlvdXIgbGFzdCBkYXk/IElzIGl0IGV2ZW4gcG9zc2libGUgdG8gZW1ib2R5IGNvbXBsZXRlbmVzcyBvciBwZXJmZWN0aW9uIGluIG91ciA8ZW0+ZXRob3M8L2VtPiAoY2hhcmFjdGVyKSwgZWZmb3J0bGVzc2x5IGRvaW5nIHRoZSByaWdodCB0aGluZyBmb3IgYSBmdWxsIHR3ZW50eS1mb3VyIGhvdXJzPyBJcyBpdCBwb3NzaWJsZSBmb3IgbW9yZSB0aGFuIGEgbWludXRlPzwvcD48cD5NYXliZSBub3QuIEJ1dCBpZiB0cnlpbmcgd2FzIGVub3VnaCBmb3IgdGhlIFN0b2ljcywgaXQgc2hvdWxkIGJlIGVub3VnaCBmb3IgdXMgdG9vLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDE2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRXZlcmxhc3RpbmcgR29vZCBIZWFsdGgiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJIHRlbGwgeW91LCB5b3Ugb25seSBoYXZlIHRvIGxlYXJuIHRvIGxpdmUgbGlrZSB0aGUgaGVhbHRoeSBwZXJzb24gZG9lcyAuLi4gbGl2aW5nIHdpdGggY29tcGxldGUgY29uZmlkZW5jZS4gV2hhdCBjb25maWRlbmNlPyBUaGUgb25seSBvbmUgd29ydGggaG9sZGluZywgaW4gd2hhdCBpcyB0cnVzdHdvcnRoeSwgdW5oaW5kZXJlZCwgYW5kIGNhbid0IGJlIHRha2VuIGF3YXkmbWRhc2g7eW91ciBvd24gcmVhc29uZWQgY2hvaWNlLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIkVwaWN0ZXR1cyIsDQogICAgICAgICAgICAic291cmNlIjogIkRpc2NvdXJzZXMsIDMuMjYuMjNiLTI0Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPkFzIHRoZSBTdG9pY3Mgc2F5IHJlcGVhdGVkbHksIGl0J3MgZGFuZ2Vyb3VzIHRvIGhhdmUgZmFpdGggaW4gd2hhdCB5b3UgZG8gbm90IGNvbnRyb2wuIEJ1dCB5b3VyIG93biByZWFzb25lZCBjaG9pY2U/IFdlbGwsIGZvciBub3cgdGhhdCA8ZW0+aXM8L2VtPiBpbiB5b3VyIGNvbnRyb2wuIFRoZXJlZm9yZSBpdCBpcyBvbmUgb2YgdGhlIGZldyB0aGluZ3MgeW91IGNhbiBoYXZlIGNvbmZpZGVuY2UgaW4uIEl0J3MgdGhlIG9ubHkgYXJlYSBvZiBoZWFsdGggdGhhdCBjYW4ndCBzdWRkZW5seSBiZSBnaXZlbiBhIHRlcm1pbmFsIGRpYWdub3NpcyAoZXhjZXB0IGZvciB0aGUgb25lIHdlIGFsbCBnZXQgdGhlIGRheSB3ZSdyZSBib3JuKS4gSXQncyB0aGUgb25seSBvbmUgdGhhdCByZW1haW5zIHByaXN0aW5lIGFuZCBuZXZlciB3ZWFycyBkb3duJm1kYXNoO2l0J3Mgb25seSB0aGUgdXNlciB3aG8gcXVpdHMgaXQ7IG5ldmVyIHdpbGwgaXQgcXVpdCB0aGUgdXNlci48L3A+PHA+SW4gdGhpcyBwYXNzYWdlLCBFcGljdGV0dXMgcG9pbnRzIG91dCB0aGF0IHNsYXZlcyBhbmQgd29ya2VycyBhbmQgcGhpbG9zb3BoZXJzIGFsaWtlIGNhbiBsaXZlIHRoaXMgd2F5LiBTb2NyYXRlcywgRGlvZ2VuZXMsIGFuZCBDbGVhbnRoZXMgbGl2ZWQgdGhpcyB3YXkmbWRhc2g7ZXZlbiB3aGlsZSB0aGV5IGhhZCBmYW1pbGllcyBhbmQgd2hpbGUgdGhleSB3ZXJlIHN0cnVnZ2xpbmcgc3R1ZGVudHMuPC9wPjxwPkFuZCBzbyBjYW4geW91LjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDE3IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiS25vdyBUaHlzZWxmJm1kYXNoO0JlZm9yZSBJdCdzIFRvbyBMYXRlIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRGVhdGggbGllcyBoZWF2eSB1cG9uIG1lPGJyPndobywga25vd24gZXhjZWVkaW5nbHkgd2VsbCBieSBhbGwsPGJyPmRpZXMgdW5rbm93biB0byBoaW1zZWxmLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIlRoeWVzdGVzLCA0MDAiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+U29tZSBvZiB0aGUgbW9zdCBwb3dlcmZ1bCBhbmQgaW1wb3J0YW50IHBlb3BsZSBpbiB0aGUgd29ybGQgc2VlbSB0byBoYXZlIGFsbW9zdCBubyBzZWxmLWF3YXJlbmVzcy4gQWx0aG91Z2ggdG90YWwgc3RyYW5nZXJzIGtub3cgZW5kbGVzcyBhbW91bnRzIG9mIHRyaXZpYSBhYm91dCB0aGVtLCBjZWxlYnJpdGllcyZtZGFzaDtiZWNhdXNlIHRoZXkgYXJlIHRvbyBidXN5IG9yIGJlY2F1c2UgaXQgaHVydHMgdG9vIG11Y2gmbWRhc2g7YXBwZWFyIHRvIGtub3cgdmVyeSBsaXR0bGUgYWJvdXQgdGhlbXNlbHZlcy48L3A+PHA+V2UgY2FuIGJlIGd1aWx0eSBvZiB0aGUgc2FtZSBzaW4uIFdlIGlnbm9yZSBTb2NyYXRlcydzIGRpY3R1bSB0byA8cT5rbm93IHRoeXNlbGY8L3E+Jm1kYXNoO29mdGVuIHJlYWxpemluZyB3ZSBoYXZlIGRvbmUgc28gYXQgb3VyIHBlcmlsLCB5ZWFycyBsYXRlciwgd2hlbiB3ZSB3YWtlIHVwIG9uZSBkYXkgYW5kIHJlYWxpemUgaG93IHJhcmVseSB3ZSBoYXZlIGFza2VkIG91cnNlbHZlcyBxdWVzdGlvbnMgbGlrZTogPGVtPldobyBhbSBJPyBXaGF0J3MgaW1wb3J0YW50IHRvIG1lPyBXaGF0IGRvIEkgbGlrZT8gV2hhdCBkbyBJIG5lZWQ/PC9lbT48L3A+PHA+Tm93Jm1kYXNoO3JpZ2h0IG5vdyZtZGFzaDt5b3UgaGF2ZSB0aGUgdGltZSB0byBleHBsb3JlIHlvdXJzZWxmLCB0byB1bmRlcnN0YW5kIHlvdXIgb3duIG1pbmQgYW5kIGJvZHkuIERvbid0IHdhaXQuIEtub3cgeW91cnNlbGYuIEJlZm9yZSBpdCdzIGltcG9zc2libHkgbGF0ZS48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAxOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIldoYXQgQ29tZXMgVG8gVXMgQWxsIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiQm90aCBBbGV4YW5kZXIgdGhlIEdyZWF0IGFuZCBoaXMgbXVsZS1rZWVwZXIgd2VyZSBib3RoIGJyb3VnaHQgdG8gdGhlIHNhbWUgcGxhY2UgYnkgZGVhdGgmbWRhc2g7dGhleSB3ZXJlIGVpdGhlciByZWNlaXZlZCBpbnRvIHRoZSBhbGwtZ2VuZXJhdGl2ZSByZWFzb24sIG9yIHNjYXR0ZXJlZCBhbW9uZyB0aGUgYXRvbXMuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDYuMjQiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+SW4gYSB3b3JsZCB0aGF0IGlzIGluIG1hbnkgd2F5cyBiZWNvbWluZyBtb3JlIGFuZCBtb3JlIHVuZXF1YWwsIHRoZXJlIGFyZW4ndCBtYW55IHRydWx5IGVxdWFsaXRhcmlhbiBleHBlcmllbmNlcyBsZWZ0LiBXaGVuIEJlbmphbWluIEZyYW5rbGluIG9ic2VydmVkIHRoYXQgPHE+aW4gdGhpcyB3b3JsZCBub3RoaW5nIGNhbiBiZSBzYWlkIHRvIGJlIGNlcnRhaW4sIGV4Y2VwdCBkZWF0aCBhbmQgdGF4ZXMsPC9xPiBoZSBjb3VsZG4ndCBoYXZlIGtub3duIGhvdyBnb29kIHNvbWUgcGVvcGxlIHdvdWxkIGdldCBhdCBhdm9pZGluZyB0aGVpciB0YXhlcy4gQnV0IGRlYXRoPyBUaGF0J3Mgc3RpbGwgdGhlIG9uZSB0aGluZyB0aGF0IGV2ZXJ5b25lIGV4cGVyaWVuY2VzLjwvcD48cD5XZSBhbGwgZmFjZSB0aGUgc2FtZSBlbmQuIFdoZXRoZXIgeW91IGNvbnF1ZXIgdGhlIGtub3duIHdvcmxkIG9yIHNoaW5lIHRoZSBzaG9lcyBvZiB0aGUgcGVvcGxlIHdobyBkbywgYXQgdGhlIGVuZCBkZWF0aCB3aWxsIGJlIGEgcmFkaWNhbCBlcXVhbGl6ZXImbWRhc2g7YSBsZXNzb24gaW4gYWJqZWN0IGh1bWlsaXR5LiBTaGFrZXNwZWFyZSBoYWQgSGFtbGV0IHRyYWNlIG91dCB0aGUgbG9naWMgaW4gc3RhcmsgdGVybXMgZm9yIGJvdGggQWxleGFuZGVyIGFuZCBKdWxpdXMgQ2Vhc2FyOjxibG9ja3F1b3RlPkltcGVyaW91cyBDZWFzYXIsIGRlYWQgYW5kIHR1cm4nZCB0byBjbGF5LDxicj5NaWdodCBzdG9wIGEgaG9sZSB0byBrZWVwIHRoZSB3aW5kIGF3YXk6PGJyPk8sIHRoYXQgdGhhdCBlYXJ0aCwgd2hpY2gga2VwdCB0aGUgd29ybGQgaW4gYXdlLDxicj5TaG91bGQgcGF0Y2ggYSB3YWxsIHRvIGV4cGVsIHRoZSB3aW50ZXIgZmxhdyE8L2Jsb2NrcXVvdGU+PC9wPjxwPlRoZSBuZXh0IHRpbWUgeW91IGZlZWwgeW91cnNlbGYgZ2V0dGluZyBoaWdoIGFuZCBtaWdodHkmbWRhc2g7b3IgY29udmVyc2VseSwgZmVlbGluZyBsb3cgYW5kIGluZmVyaW9yJm1kYXNoO2p1c3QgcmVtZW1iZXIsIHdlIGFsbCBlbmQgdXAgdGhlIHNhbWUgd2F5LiBJbiBkZWF0aCwgbm8gb25lIGlzIGJldHRlciwgbm8gb25lIGlzIHdvcnNlLiBBbGwgb3VyIHN0b3JpZXMgaGF2ZSB0aGUgc2FtZSBmaW5hbGUuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMTkiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJIdW1hbiBTY2FsZSIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoaW5rIG9mIHRoZSB3aG9sZSB1bml2ZXJzZSBvZiBtYXR0ZXIgYW5kIGhvdyBzbWFsbCB5b3VyIHNoYXJlLiBUaGluayBhYm91dCB0aGUgZXhwYW5zZSBvZiB0aW1lIGFuZCBob3cgYnJpZWYmbWRhc2g7YWxtb3N0IG1vbWVudGFyeSZtZGFzaDt0aGUgcGFydCBtYXJrZWQgZm9yIHlvdS4gVGhpbmsgb2YgdGhlIHdvcmtpbmdzIG9mIGZhdGUgYW5kIGhvdyBpbmZpbml0ZXNpbWFsIHlvdXIgcm9sZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNS4yNCINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGUgYW1vdW50IG9mIG1hdHRlciBpbiB0aGUgdW5pdmVyc2UgaXMgaW1tZW5zZSZtZGFzaDtvbiB0aGUgb3JkZXIgb2YgdHJpbGxpb25zIG9mIGF0b21zLiBXaGF0IHBlcmNlbnRhZ2Ugb2YgdGhhdCBtYXR0ZXIgZG9lcyBvbmUgaHVtYW4gYm9keSBjb25zdGl0dXRlPzwvcD48cD5UaGUgZWFydGgsIGFzIGZhciBhcyBzY2llbmNlIHRlbGxzIHVzLCBpcyBzb21lIDQuNSBiaWxsaW9uIHllYXJzIG9sZCBhbmQgc2hvd3Mgbm8gc2lnbiBvZiBlbmRpbmcgc29vbi4gT3VyIHRpbWUgb24gdGhlIGVhcnRoLCBvbiB0aGUgb3RoZXIgaGFuZCwgd2lsbCBiZSB3aGF0PyBTZXZlcmFsIGRlY2FkZXMsIG1heWJlPzwvcD48cD5Tb21ldGltZSB3ZSBuZWVkIHRvIGhhdmUgdGhlIGZhY3RzIGFuZCB0aGUgZmlndXJlcyBzcGVsbGVkIG91dCBpbiBmcm9udCBvZiB1cyB0byBmdWxseSByZWFsaXplIHRoZSBzY2FsZSBhdCB3aGljaCBodW1hbnMgaGFwcGVuIHRvIGV4aXN0IGluIHRoZSBiaWcgc2NoZW1lIG9mIHRoaW5ncy48L3A+PHA+Q29uc2lkZXIgdGhpcyB0aGUgbmV4dCB0aW1lIHlvdSBmZWVsIHNlbGYtaW1wb3J0YW50LCBvciBsaWtlIGV2ZXJ5dGhpbmcgcmlzZXMgYW5kIGZhbGxzIG9uIHdoYXQgeW91IGRvIG5leHQuIEl0IGRvZXNuJ3QuIFlvdSdyZSBqdXN0IG9uZSBwZXJzb24gYW1vbmcgbWFueSwgZG9pbmcgeW91ciBiZXN0IGFtb25nIG1hbnkuIFRoYXQncyBhbGwgeW91IG5lZWQgdG8gZG8uPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMjAiLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJGZWFyIFRoZSBGZWFyIE9mIERlYXRoIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRG8geW91IHBvbmRlciBob3cgdGhlIHN1cHJlbWUgb2YgaHVtYW4gZXZpbHMsIHRoZSBzdXJlc3QgbWFyayBvZiB0aGUgYmFzZSBhbmQgY293YXJkbHksIGlzIG5vdCBkZWF0aCwgYnV0IHRoZSBmZWFyIG9mIGRlYXRoPyBJIHVyZ2UgeW91IHRvIGRpc2NpcGxpbmUgeW91cnNlbGYgYWdhaW5zdCBzdWNoIGZlYXIsIGRpcmVjdCBhbGwgeW91ciB0aGlua2luZywgZXhlcmNpc2VzLCBhbmQgcmVhZGluZyB0aGlzIHdheSZtZGFzaDthbmQgeW91IHdpbGwga25vdyB0aGUgb25seSBwYXRoIHRvIGh1bWFuIGZyZWVkb20uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiRXBpY3RldHVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiRGlzY291cnNlcywgMy4yNi4zOC0zOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UbyBzdGVlbCBoaW1zZWxmIGJlZm9yZSBoZSBjb21taXR0ZWQgc3VpY2lkZSByYXRoZXIgdGhhbiBzdWJtaXQgdG8gSnVsaXVzIENlYXNhcidzIGRlc3RydWN0aW9uIG9mIHRoZSBSb21hbiBSZXB1YmxpYywgdGhlIGdyZWF0IFN0b2ljIHBoaWxvc29waGVyIENhdG8gcmVhZCBhIGJpdCBvZiBQbGF0bydzIDxjaXRlPlBoYWVkbzwvY2l0ZT4uIEluIGl0LCBQbGF0byB3cml0ZXMsIDxxPkl0IGlzIHRoZSBjaGlsZCB3aXRoaW4gdXMgdGhhdCB0cmVtYmxlcyBiZWZvcmUgZGVhdGguPC9xPiBEZWF0aCBpcyBzY2FyeSBiZWNhdXNlIGl0IGlzIHN1Y2ggYW4gdW5rbm93bi4gTm8gb25lIGNhbiBjb21lIGJhY2sgYW5kIHRlbGwgdXMgd2hhdCBpdCBpcyBsaWtlLiBXZSBhcmUgaW4gdGhlIGRhcmsgYWJvdXQgaXQuPC9wPjxwPkFzIGNoaWxkbGlrZSBhbmQgdWx0aW1hdGVseSBpZ25vcmFudCBhcyB3ZSBhcmUgYWJvdXQgZGVhdGgsIHRoZXJlIGFyZSBwbGVudHkgb2Ygd2lzZSBtZW4gYW5kIHdvbWVuIHdobyBjYW4gYXQgbGVhc3QgcHJvdmlkZSBzb21lIGd1aWRhbmNlLiBUaGVyZSdzIGEgcmVhc29uIHRoYXQgdGhlIHdvcmxkJ3Mgb2xkZXN0IHBlb3BsZSBuZXZlciBzZWVtIHRvIGJlIGFmcmFpZCBvZiBkZWF0aDogdGhleSd2ZSBoYWQgbW9yZSB0aW1lIHRvIHRoaW5rIGFib3V0IGl0IHRoYW4gd2UgaGF2ZSAoYW5kIHRoZXkgcmVhbGl6ZWQgaG93IHBvaW50bGVzcyB3b3JyeWluZyB3YXMpLiBUaGVyZSBhcmUgb3RoZXIgd29uZGVyZnVsIHJlc291cmNlczogRmxvcmlkYSBTY290dC1NYXh3ZWxsJ3MgU3RvaWMgZGlhcnkgZHVyaW5nIGhlciB0ZXJtaW5hbCBpbGxuZXNzLCA8Y2l0ZT5UaGUgTWVhc3VyZSBvZiBNeSBEYXlzPC9jaXRlPiwgaXMgb25lLiBTZW5lY2EncyBmYW1vdXMgd29yZHMgdG8gaGlzIGZhbWlseSBhbmQgZnJpZW5kcywgd2hvIGhhZCBicm9rZW4gZG93biBhbmQgYmVnZ2VkIHdpdGggaGlzIGV4ZWN1dGlvbmVycywgaXMgYW5vdGhlci4gPHE+V2hlcmUsPC9xPiBTZW5lY2EgZ2VudGx5IGNoaWRlZCB0aGVtLCA8cT5hcmUgeW91ciBtYXhpbXMgb2YgcGhpbG9zb3BoeSwgb3IgdGhlIHByZXBhcmF0aW9uIG9mIHNvIG1hbnkgeWVhcnMnIHN0dWR5IGFnYWluc3QgZXZpbHMgdG8gY29tZT88L3E+IFRocm91Z2hvdXQgcGhpbG9zb3BoeSB0aGVyZSBhcmUgaW5zcGlyaW5nLCBicmF2ZSB3b3JkcyBmcm9tIGJyYXZlIG1lbiBhbmQgd29tZW4gd2hvIGNhbiBoZWxwIHVzIGZhY2UgdGhpcyBmZWFyLjwvcD48cD5UaGVyZSBpcyBhbm90aGVyIGhlbHBmdWwgY29uc2lkZXJhdGlvbiBhYm91dCBkZWF0aCBmcm9tIHRoZSBTdG9pY3MuIElmIGRlYXRoIGlzIHRydWx5IHRoZSBlbmQsIHRoZW4gd2hhdCBpcyB0aGVyZSBleGFjdGx5IHRvIGZlYXI/IEZvciBldmVyeXRoaW5nIGZyb20geW91ciBmZWFycyB0byB5b3VyIHBhaW4gcmVjZXB0b3JzIHRvIHlvdXIgd29ycmllcyBhbmQgeW91ciByZW1haW5pbmcgd2lzaGVzLCB0aGV5IHdpbGwgcGVyaXNoIHdpdGggeW91LiBBcyBmcmlnaHRlbmluZyBhcyBkZWF0aCBtaWdodCBzZWVtLCByZW1lbWJlcjogaXQgY29udGFpbnMgd2l0aGluIGl0IHRoZSBlbmQgb2YgZmVhci48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAyMSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIldoYXQgRG8gWW91IEhhdmUgVG8gU2hvdyBGb3IgWW91ciBZZWFycz8iLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJNYW55IHRpbWVzIGFuIG9sZCBtYW4gaGFzIG5vIG90aGVyIGV2aWRlbmNlIGJlc2lkZXMgaGlzIGFnZSB0byBwcm92ZSBoZSBoYXMgbGl2ZWQgYSBsb25nIHRpbWUuIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gVHJhbnF1aWxpdHkgT2YgTWluZCwgMy44YiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5Ib3cgbG9uZyBoYXZlIHlvdSBiZWVuIGFsaXZlPyBUYWtlIHRoZSB5ZWFycywgbXVsdGlwbHkgdGhlbSBieSAzNjUsIGFuZCB0aGVuIGJ5IDI0LiBIb3cgbWFueSBob3VycyBoYXZlIHlvdSBsaXZlZD8gV2hhdCBkbyB5b3UgaGF2ZSB0byBzaG93IGZvciBhbGwgb2YgdGhlbT88L3A+PHA+VGhlIGFuc3dlciBmb3IgbWFueSBwZW9wbGUgaXM6IG5vdCBlbm91Z2guIFdlIGhhZCBzbyBtYW55IGhvdXJzIHRoYXQgd2UgdG9vayB0aGVtIGZvciBncmFudGVkLiBBbGwgd2UgaGF2ZSB0byBzaG93IGZvciBvdXIgdGltZSBvbiB0aGlzIHBsYW5ldCBhcmUgcm91bmRzIG9mIGdvbGYsIHllYXJzIHNwZW50IGF0IHRoZSBvZmZpY2UsIHRpbWUgc3BlbnQgd2F0Y2hpbmcgbWVkaW9jcmUgbW92aWVzLCBhIHN0YWNrIG9mIG1pbmRsZXNzIGJvb2tzIHdlIGhhcmRseSByZW1lbWJlciByZWFkaW5nLCBhbmQgbWF5YmUgYSBnYXJhZ2UgZnVsbCBvZiB0b3lzLiBXZSdyZSBsaWtlIHRoZSBjaGFyYWN0ZXIgaW4gUmF5bW9uZCBDaGFuZGxlcidzIDxjaXRlPlRoZSBMb25nIEdvb2RieWU6PC9jaXRlPiA8cT5Nb3N0bHksIEkganVzdCBraWxsIHRpbWUsPC9xPiBoZSBzYXlzLCA8cT5hbmQgaXQgZGllcyBoYXJkLjwvcT48L3A+PHA+T25lIGRheSwgb3VyIGhvdXJzIHdpbGwgYmVnaW4gdG8gcnVuIG91dC4gSXQgd291bGQgYmUgbmljZSB0byBiZSBhYmxlIHRvIHNheTogPHE+SGV5LCBJIHJlYWxseSBtYWRlIHRoZSBtb3N0IG9mIGl0LjwvcT4gTm90IGluIHRoZSBmb3JtIG9mIGFjaGlldmVtZW50cywgbm90IG1vbmV5LCBub3Qgc3RhdHVzJm1kYXNoO3lvdSBrbm93IHdoYXQgdGhlIFN0b2ljcyB0aGluayBvZiBhbGwgdGhhdCZtZGFzaDtidXQgaW4gd2lzZG9tLCBpbnNpZ2h0LCBhbmQgcmVhbCBwcm9ncmVzcyBpbiB0aGUgdGhpbmdzIHRoYXQgYWxsIGh1bWFucyBzdHJ1Z2dsZSBhZ2FpbnN0LjwvcD48cD5XaGF0IGlmIHlvdSBjb3VsZCBzYXkgdGhhdCB5b3UgcmVhbGx5IG1hZGUgc29tZXRoaW5nIG9mIHRoaXMgdGltZSB0aGF0IHlvdSBoYWQ/IFdoYXQgaWYgeW91IGNvdWxkIHByb3ZlIHRoYXQgeW91IHJlYWxseSBkaWQgbGl2ZSBbaW5zZXJ0IG51bWJlcl0geWVhcnM/IEFuZCBub3QganVzdCBsaXZlZCB0aGVtLCBidXQgbGl2ZWQgdGhlbSA8ZW0+ZnVsbHk8L2VtPi48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAyMiIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlN0YWtlIFlvdXIgT3duIENsYWltIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiRm9yIGl0J3MgZGlzZ3JhY2VmdWwgZm9yIGFuIG9sZCBwZXJzb24sIG9yIG9uZSBpbiBzaWdodCBvZiBvbGQgYWdlLCB0byBoYXZlIG9ubHkgdGhlIGtub3dsZWRnZSBjYXJyaWVkIGluIHRoZWlyIG5vdGVib29rcy4gWmVubyBzYWlkIHRoaXMgLiAuIC4gd2hhdCBkbyB5b3Ugc2F5PyBDbGVhbnRoZXMgc2FpZCB0aGF0IC4gLiAuIHdoYXQgZG8geW91IHNheT8gSG93IGxvbmcgd2lsbCB5b3UgYmUgY29tcGVsbGVkIGJ5IHRoZSBjbGFpbXMgb2YgYW5vdGhlcj8gVGFrZSBjaGFyZ2UgYW5kIHN0YWtlIHlvdXIgb3duIGNsYWltJm1kYXNoO3NvbWV0aGluZyBwb3N0ZXJpdHkgd2lsbCBjYXJyeSBpbiBpdHMgbm90ZWJvb2suIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTW9yYWwgTGV0dGVycywgMzMuNyINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5NdXNpbmcgaW4gaGlzIG5vdGVib29rIGFib3V0IHRoZSB0b3BpYyBvZiBpbW1vcnRhbGl0eSwgUmFscGggV2FsZG8gRW1lcnNvbiBjb21wbGFpbmVkIGhvdyB3cml0ZXJzIGRhbmNlIGFyb3VuZCBhIGRpZmZpY3VsdCB0b3BpYyBieSByZWx5aW5nIG9uIHF1b3Rlcy4gPHE+SSBoYXRlIHF1b3RhdGlvbjwvcT4sIGhlIHdyb3RlLiA8cT5UZWxsIG1lIHdoYXQgeW91IGtub3cuPC9xPjwvcD48cD5TZW5lY2Egd2FzIHRocm93aW5nIGRvd24gdGhlIHNhbWUgZ2F1bnRsZXQgc29tZSB0d2VudHkgY2VudHVyaWVzIGJlZm9yZS4gSXQncyBlYXNpZXIgdG8gcXVvdGUsIHRvIHJlbHkgb24gdGhlIHdpc2Ugd29yZHMgb2Ygb3RoZXJzLiBFc3BlY2lhbGx5IHdoZW4gdGhlIHBlb3BsZSB5b3UncmUgZGVmZXJyaW5nIHRvIGFyZSBzdWNoIHRvd2VyaW5nIGZpZ3VyZXMuPC9wPjxwPkl0J3MgaGFyZGVyIChhbmQgbW9yZSBpbnRpbWlkYXRpbmcpIHRvIHZlbnR1cmUgb3V0IG9uIHlvdXIgb3duIGFuZCBleHByZXNzIHlvdXIgb3duIHRob3VnaHRzLiBCdXQgaG93IGRvIHlvdSB0aGluayB0aG9zZSB3aXNlIGFuZCB0cnVlIHF1b3RlcyBmcm9tIHRob3NlIHRvd2VyaW5nIGZpZ3VyZXMgd2VyZSBjcmVhdGVkIGluIHRoZSBmaXJzdCBwbGFjZT88L3A+PHA+WW91ciBvd24gZXhwZXJpZW5jZXMgaGF2ZSB2YWx1ZS4gWW91IGhhdmUgYWNjdW11bGF0ZWQgeW91ciBvd24gd2lzZG9tIHRvby4gU3Rha2UgeW91ciBjbGFpbS4gUHV0IHNvbWV0aGluZyBkb3duIGZvciB0aGUgYWdlcyZtZGFzaDtpbiB3b3JkcyBhbmQgYWxzbyBpbiBleGFtcGxlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDIzIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiV2hhdCBBcmUgWW91IFNvIEFmcmFpZCBPZiBMb3Npbmc/IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiWW91IGFyZSBhZnJhaWQgb2YgZHlpbmcuIEJ1dCwgY29tZSBub3csIGhvdyBpcyB0aGlzIGxpZmUgb3IgeW91cnMgYW55dGhpbmcgYnV0IGRlYXRoLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk1vcmFsIExldHRlcnMsIDc3LjE4Ig0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlNlbmVjYSB0ZWxscyBhbiBhbWF6aW5nIHN0b3J5IGFib3V0IGFuIG9ic2NlbmVseSB3ZWFsdGh5IFJvbWFuIHdobyB3YXMgY2FycmllZCBhcm91bmQgYnkgc2xhdmVzIG9uIGEgbGl0dGVyLiBPbiBvbmUgb2NjYXNpb24sIGFmdGVyIGJlaW5nIGxpZnRlZCBvdXQgb2YgYSBiYXRoLCB0aGUgcm9tYW4gYXNrZWQsIDxxPkFtIEkgc2l0dGluZyBkb3duIHlldD88L3E+IFNlbmVjYSdzIHBvaW50IHdhcyBlc3NlbnRpYWxseTogV2hhdCBraW5kIG9mIHNhZCBwYXRoZXRpYyBsaWZlIGlzIGl0IGlmIHlvdSdyZSBzbyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgd29ybGQgdGhhdCB5b3UgZG9uJ3QgZXZlbiBrbm93IHdoZXRoZXIgeW91J3JlIG9uIHRoZSBncm91bmQ/IEhvdyBkaWQgdGhlIG1hbiBrbm93IHdoZXRoZXIgaGUgd2FzIGV2ZW4gPGVtPmFsaXZlPC9lbT4gYXQgYWxsPzwvcD48cD5Nb3N0IG9mIHVzIGFyZSBhZnJhaWQgb2YgZHlpbmcuIEJ1dCBzb21ldGltZXMgdGhpcyBmZWFyIGJlZ3MgdGhlIHF1ZXN0aW9uOiBUbyBwcm90ZWN0IHdoYXQgZXhhY3RseT8gRm9yIGEgbG90IG9mIHBlb3BsZSB0aGUgYW5zd2VyIGlzOiBob3VycyBvZiB0ZWxldmlzaW9uLCBnb3NzaXBpbmcsIGdvcmdpbmcsIHdhc3RpbmcgcG90ZW50aWFsLCByZXBvcnRpbmcgdG8gYSBib3Jpbmcgam9iLCBhbmQgb24gYW5kIG9uIGFuZCBvbi4gRXhjZXB0LCBpbiB0aGUgc3RyaWN0ZXN0IHNlbnNlLCBpcyB0aGlzIGFjdHVhbGx5IGEgbGlmZT8gSXMgdGhpcyB3b3J0aCBncmlwcGluZyBzbyB0aWdodGx5IGFuZCBiZWluZyBhZnJhaWQgb2YgbG9zaW5nPzwvcD48cD5JdCBkb2Vzbid0IHNvdW5kIGxpa2UgaXQuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICJUaGUgc2FtZSBjYW4gYmUgc2FpZCBmb3IgaWxsIHRob3VnaHRzIGFuZCBmZWVsaW5nIHRvd2FyZHMgY2lyY3Vtc3RhbmNlcyBhbmQgcGVvcGxlIFRoZXkgYXJlIG5vdCB3b3J0aHkgb2YgbXkgdGltZS4gVGhleSBhcmUgbm90IHdvcnRoeSB0byBvY2N1cHkgbXkgbWluZCBhbmQgaGVhcnQuIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDI0IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiTWVhbmluZ2xlc3MgLi4uIExpa2UgQSBGaW5lIFdpbmUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJZb3Uga25vdyB3aGF0IHdpbmUgYW5kIGxpcXVldXIgdGFzdGVzIGxpa2UuIEl0IG1ha2VzIG5vIGRpZmZlcmVuY2Ugd2hldGhlciBhIGh1bmRyZWQgb3IgYSB0aG91c2FuZCBib3R0bGVzIHBhc3MgdGhyb3VnaCB5b3VyIGJsYWRkZXImbWRhc2g7eW91IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhIGZpbHRlci4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA3Ny4xNiINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5IZXJlIHdlIGhhdmUgYW5vdGhlciBjb250ZW1wdHVvdXMgZXhwcmVzc2lvbiwgdGhpcyB0aW1lIGZyb20gU2VuZWNhLCB3aG8sIGdpdmVuIGhpcyByZXB1dGF0aW9uIGZvciBvcHVsZW5jZSwgcHJvYmFibHkgZW5qb3llZCBhIG5pY2UgZHJpbmsgZnJvbSB0aW1lIHRvIHRpbWUuIEhpcyBwb2ludCB3aWxsIHByb2JhYmx5IHJhdHRsZSBhbnlvbmUgZm9yIHdob20gc3VjY2VzcyBhbmQgYWR1bHRob29kIGhhcyB0dXJuZWQgdGhlbSBpbnRvIGEgd2luZSBzbm9iICh0aG91Z2ggdGhlIGxvZ2ljIGNhbiBiZSBhcHBsaWVkIGp1c3QgYXMgZWFzaWx5IHRvIGZvb2RpZXMsIHRlY2hpZXMsIGF1ZGlvcGhpbGVzLCBhbmQgdGhlIGxpa2UpLjwvcD48cD5BcyBmdW4gYW5kIGV4Y2l0aW5nIGFuZCBwbGVhc3VyYWJsZSBhcyB0aGVzZSBwbGVhc3VyZXMgYXJlLCBpdCdzIHdvcnRoIHB1dHRpbmcgdGhlbSBpbiB0aGVpciBwbGFjZS4gWW91IGRvbid0IGdldCBhIHByaXplIGF0IHRoZSBlbmQgb2YgeW91ciBsaWZlIGZvciBoYXZpbmcgY29uc3VtZWQgbW9yZSwgd29ya2VkIG1vcmUsIHNwZW50IG1vcmUsIGNvbGxlY3RlZCBtb3JlLCBvciBsZWFybmVkIG1vcmUgYWJvdXQgdGhlIHZhcmlvdXMgdmludGFnZXMgdGhhbiBldmVyeW9uZSBlbHNlLiBZb3UgYXJlIGp1c3QgYSBjb25kdWl0LCBhIHZlc3NlbCB0aGF0IHRlbXBvcmFyaWx5IGhlbGQgb3IgaW50ZXJhY3RlZCB3aXRoIHRoZXNlIGZhbmN5IGl0ZW1zLjwvcD48cD5JZiB5b3UgZmluZCB5b3Vyc2VsZiBsdXN0aW5nIG92ZXIgdGhlbSwgdGhpcyBtZWRpdGF0aW9uIG1pZ2h0IGhlbHAgcmVkdWNlIHRoZWlyIGx1c3RlciBqdXN0IGEgc21pZGdlLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDI1IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiRG9uJ3QgQnVybiBUaGUgQ2FuZGxlIEF0IEJvdGggRW5kcyIsDQogICAgICAgICJxdW90ZXMiOiBbDQogICAgICAgICAgew0KICAgICAgICAgICAgInF1b3RlIjogIlRoZSBtaW5kIG11c3QgYmUgZ2l2ZW4gcmVsYXhhdGlvbiZtZGFzaDtpdCB3aWxsIHJpc2UgaW1wcm92ZWQgYW5kIHNoYXJwZXIgYWZ0ZXIgYSBnb29kIGJyZWFrLiBKdXN0IGFzIHJpY2ggZmllbGRzIG11c3Qgbm90IGJlIGZvcmNlZCZtZGFzaDtmb3IgdGhleSB3aWxsIHF1aWNrbHkgbG9zZSB0aGVpciBmZXJ0aWxpdHkgaWYgbmV2ZXIgZ2l2ZW4gYSBicmVhayZtZGFzaDtzbyBjb25zdGFudCB3b3JrIG9uIHRoZSBhbnZpbCB3aWxsIGZyYWN0dXJlIHRoZSBmb3JjZSBvZiB0aGUgbWluZC4gQnV0IGl0IHJlZ2FpbnMgaXRzIHBvd2VycyBpZiBpdCBpcyBzZXQgZnJlZSBhbmQgcmVsYXhlZCBmb3IgYSB3aGlsZS4gQ29uc3RhbnQgd29yayBnaXZlcyByaXNlIHRvIGEgY2VydGFpbiBraW5kIG9mIGR1bGxuZXNzIGFuZCBmZWVibGVuZXNzIGluIHRoZSByYXRpb25hbCBzb3VsLiIsDQogICAgICAgICAgICAiYXV0aG9yIjogIlNlbmVjYSIsDQogICAgICAgICAgICAic291cmNlIjogIk9uIFRyYW5xdWlsaXR5IE9mIE1pbmQsIDE3LjUiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+T25lIGNhbid0IHJlYWQgTWFyY3VzIEF1cmVsaXVzIGFuZCBTZW5lY2EgYW5kIG5vdCBiZSBzdHJ1Y2sgYnkgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVzZSB0d28gcmFkaWNhbGx5IGRpZmZlcmVudCBwZXJzb25hbGl0aWVzLiBFYWNoIGhhZCBoaXMgb3duIHN0cmVuZ3RocyBhbmQgd2Vha25lc3Nlcy4gV2hpY2ggd291bGQgeW91IHJhdGhlciBoYXZlIGVudHJ1c3RlZCB3aXRoIHRoZSBpbW1lbnNlIHJlc3BvbnNpYmlsaXR5IG9mIGFuIGVtcGlyZT8gUHJvYmFibHkgTWFyY3VzLiBCdXQgd2hvIHdvdWxkIHlvdSByYXRoZXIgYmUgYXMgYSBwZXJzb24/IFByb2JhYmx5IFNlbmVjYS48L3A+PHA+T25lIG9mIHRoZSByZWFzb25zIGlzIHRoYXQgU2VuZWNhIHNlZW1zIHRvIGhhdmUgaGFkIHdoYXQgd2Ugd291bGQgbm93IHJlZmVyIHRvIGFzIHdvcmsvbGlmZSBiYWxhbmNlLiBXaGVyZWFzIE1hcmN1cyBjYW4gcmVhZCBhcyB0aG91Z2ggaGUncyB3b3JuIGRvd24gYW5kIHRpcmVkLCBTZW5lY2EgYWx3YXlzIGZlZWxzIGVuZXJnZXRpYywgZnJlc2gsIHJvYnVzdC4gSGlzIHBoaWxvc29waHkgb2YgcmVzdCBhbmQgcmVhbGl6YXRpb24mbWRhc2g7aW50ZXJtaXhlZCB3aXRoIGhpcyByaWdvcm91cyBzdHVkeSBhbmQgb3RoZXIgU3RvaWMgcml0dWFscyZtZGFzaDtwcm9iYWJseSBoYWQgYSBsb3QgdG8gZG8gd2l0aCBpdC48L3A+PHA+VGhlIG1pbmQgaXMgYSBtdXNjbGUsIGFuZCBsaWtlIHRoZSByZXN0LCBpdCBjYW4gYmUgc3RyYWluZWQsIG92ZXJ3b3JrZWQsIGV2ZW4gaW5qdXJlZC4gT3VyIHBoeXNpY2FsIGhlYWx0aCBpcyBhbHNvIHdvcm4gZG93biBieSBvdmVyLWNvbW1pdG1lbnQsIGEgbGFjayBvZiByZXN0LCBhbmQgYmFkIGhhYml0cy4gUmVtZW1iZXIgdGhlIHRhbGwgdGFsZSBhYm91dCBKb2huIEhlbnJ5Jm1kYXNoO3RoZSBtYW4gd2hvIGNoYWxsZW5nZWQgdGhlIG1hY2hpbmU/IEhlIGRpZWQgb2YgZXhoYXVzdGlvbiBhdCB0aGUgZW5kLiBEb24ndCBmb3JnZXQgdGhhdC48L3A+PHA+VG9kYXksIHlvdSBtYXkgZmFjZSB0aGluZ3MgdGhhdCB0cnkgeW91ciBwYXRpZW5jZSwgcmVxdWlyZSBjb25zaWRlcmFibGUgZm9jdXMgb3IgY2xhcml0eSwgb3IgZGVtYW5kIGNyZWF0aXZlIGJyZWFrdGhyb3VnaHMuIExpZmUgaXMgYSBsb25nIGhhdWwmbWRhc2g7aXQgd2lsbCBtZWFuIG1hbnkgc3VjaCBtb21lbnRzLiBBcmUgeW91IGdvaW5nIHRvIGJlIGFibGUgdG8gaGFuZGxlIHRoZW0gaWYgeW91J3ZlIGJ1cm5lZCB0aGUgY2FuZGxlIGF0IGJvdGggZW5kcz8gSWYgeW91J3ZlIGJlZW4gYWJ1c2luZyBhbmQgb3ZlcndvcmtpbmcgeW91ciBib2R5PzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDI2IiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiTGlmZSBJcyBMb25nJm1kYXNoO0lmIFlvdSBLbm93IEhvdyBUbyBVc2UgSXQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJJdCdzIG5vdCBhdCBhbGwgdGhhdCB3ZSBoYXZlIHRvbyBzaG9ydCBhIHRpbWUgdG8gbGl2ZSwgYnV0IHRoYXQgd2Ugc3F1YW5kZXIgYSBncmVhdCBkZWFsIG9mIGl0LiBMaWZlIGlzIGxvbmcgZW5vdWdoLCBhbmQgaXQncyBnaXZlbiBpbiBzdWZmaWNpZW50IG1lYXN1cmUgdG8gZG8gbWFueSBncmVhdCB0aGluZ3MgaWYgd2Ugc3BlbmQgaXQgd2VsbC4gQnV0IHdoZW4gaXQncyBwb3VyZWQgZG93biB0aGUgZHJhaW4gb2YgbHV4dXJ5IGFuZCBuZWdsZWN0LCB3aGVuIGl0J3MgZW1wbG95ZWQgdG8gbm8gZ29vZCBlbmQsIHdlJ3JlIGZpbmFsbHkgZHJpdmVuIHRvIHNlZSB0aGF0IGl0IGhhcyBwYXNzZWQgYnkgYmVmb3JlIHdlIGV2ZW4gcmVjb2duaXplZCBpdCBwYXNzaW5nLiBBbmQgc28gaXQgaXMmbWRhc2g7d2UgZG9uJ3QgcmVjZWl2ZSBhIHNob3J0IGxpZmUsIHdlIG1ha2UgaXQgc28uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiU2VuZWNhIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiT24gVGhlIEJyZXZpdHkgT2YgTGlmZSwgMS4zLTRhIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPk5vIG9uZSBrbm93cyBob3cgbG9uZyB0aGV5IGhhdmUgdG8gbGl2ZSwgYnV0IHNhZGx5LCB3ZSBjYW4gYmUgc3VyZSBvZiBvbmUgdGhpbmc6IHdlJ2xsIHdhc3RlIGZhciB0b28gbXVjaCBvZiBsaWZlLiBXYXN0aW5nIGl0IHNpdHRpbmcgYXJvdW5kLCB3YXN0ZSBpdCBjaGFzaW5nIHRoZSB3cm9uZyB0aGluZ3MsIHdhc3RlIGl0IGJ5IHJlZnVzaW5nIHRvIHRha2UgdGhlIHRpbWUgdG8gYXNrIG91cnNlbHZlcyB3aGF0J3MgYWN0dWFsbHkgaW1wb3J0YW50IHRvIHVzLiBGYXIgdG9vIG9mdGVuLCB3ZSdyZSBsaWtlIHRoZSBvdmVyY29uZmlkZW50IGFjYWRlbWljcyB0aGF0IFBldHJhcmNoIGNyaXRpY2l6ZWQgaW4gaGlzIGNsYXNzaWMgZXNzYXkgb24gaWdub3JhbmNlJm1kYXNoO3RoZSB0eXBlcyB3aG8gPHE+ZnJpdHRlciBhd2F5IHRoZWlyIHBvd2VycyBpbmNlc3NhbnRseSBpbiBjYXJpbmcgZm9yIHRoaW5ncyBvdXRzaWRlIG9mIHRoZW0gYW5kIHNlZWsgdGhlbXNlbHZlcyB0aGVyZS48L3E+IHlldCB0aGV5IGhhdmUgbm8gaWRlYSB0aGlzIGlzIHdoYXQgdGhleSdyZSBkb2luZy48L3A+PHA+U28gdG9kYXksIGlmIHlvdSBmaW5kIHlvdXJzZWxmIHJ1c2hlZCBvciB1dHRlcmluZyB0aGUgd29yZHMsIDxxPkkganVzdCBkb24ndCBoYXZlIGVub3VnaCB0aW1lLDwvcT4gc3RvcCBhbmQgdGFrZSBhIHNlY29uZC4gSXMgdGhpcyBhY3R1YWxseSB0cnVlPyBPciBoYXZlIHlvdSBqdXN0IGNvbW1pdHRlZCB0byBhIGxvdCBvZiB1bm5lY2Vzc2FyeSB0aGluZ3M/IEFyZSB5b3UgYWN0dWFsbHkgYmVpbmcgZWZmaWNpZW50LCBvciBoYXZlIHlvdSBhc3N1bWVkIGEgZ3JlYXQgZGVhbCBvZiB3YXN0ZSBpbnRvIHlvdXIgbGlmZT8gVGhlIGF2ZXJhZ2UgQW1lcmljYW4gc3BlbmRzIHNvbWV0aGluZyBsaWtlIGZvcnR5IGhvdXJzIGEgeWVhciBpbiB0cmFmZmljLiBUaGF0J3MgPGVtPm1vbnRoczwvZW0+IG92ZXIgdGhlIGNvdXJzZSBvZiBhIGxpZmUuIEFuZCBmb3IgPHE+dHJhZmZpYyw8L3E+IHlvdSBjYW4gc3Vic3RpdHV0ZSBzbyBtYW55IGFjdGl2aXRpZXMmbWRhc2g7ZnJvbSBmaWdodGluZyB3aXRoIG90aGVycyB0byB3YXRjaGluZyB0ZWxldmlzaW9uIHRvIGRheWRyZWFtaW5nLjwvcD48cD5Zb3VyIGxpZmUgaXMgcGxlbnR5IGxvbmcmbWRhc2g7anVzdCB1c2UgaXQgcHJvcGVybHkuPC9wPiIsDQogICAgICAgICJ0aG91Z2h0cyI6ICIiDQogICAgICB9DQogICAgXQ0KICB9LA0KICB7DQogICAgImRhdGUiOiAiRGVjZW1iZXIgMjciLA0KICAgICJ0b3BpY3MiOiBbDQogICAgICB7DQogICAgICAgICJ0b3BpYyI6ICJEb24ndCBMZXQgWW91ciBTb3VsIEdvIEZpcnN0IiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSXQncyBhIGRpc2dyYWNlIGluIHRoaXMgbGlmZSB3aGVuIHRoZSBzb3VsIHN1cnJlbmRlcnMgZmlyc3Qgd2hpbGUgdGhlIGJvZHkgcmVmdXNlcyB0by4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNi4yOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5EZXNwaXRlIGhpcyBwcml2aWxlZ2VzLCBNYXJjdXMgQXVyZWxpdXMgaGFkIGEgZGlmZmljdWx0IGxpZmUuIFRoZSBSb21hbiBoaXN0b3JpYW4gQ2Fzc2l1cyBEaW8gbXVzZWQgdGhhdCBNYXJjdXMgPHE+ZGlkIG5vdCBtZWV0IHdpdGggdGhlIGdvb2QgZm9ydHVuZSB0aGF0IGhlIGRlc2VydmVkLCBmb3IgaGUgd2FzIG5vdCBzdHJvbmcgaW4gYm9keSBhbmQgd2FzIGludm9sdmVkIGluIGEgbXVsdGl0dWRlIG9mIHRyb3VibGVzIHRocm91Z2hvdXQgcHJhY3RpY2FsbHkgaGlzIGVudGlyZSByZWlnbi48L3E+IEF0IG9uZSBwb2ludCwgaGUgd2FzIHNvIHNpY2sgdGhhdCBhIHJ1bW9yIHNwcmVhZCB0aGF0IGhlIGhhZCBkaWVkJm1kYXNoO2FuZCBtYXR0ZXJzIHdlcmUgbWFkZSB3b3JzZSB3aGVuIGhpcyBtb3N0IHRydXN0ZWQgZ2VuZXJhbCB1c2VkIGl0IGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlY2xhcmUgaGltc2VsZiB0aGUgbmV3IGVtcGVyb3IuPC9wPjxwPkJ1dCB0aHJvdWdob3V0IHRoZXNlIHN0cnVnZ2xlcyZtZGFzaDt0aGUgeWVhcnMgYXQgd2FyLCB0aGUgY3JpcHBsaW5nIGlsbG5lc3NlcywgaGlzIHRyb3VibGVkIHNvbiZtZGFzaDtoZSBuZXZlciBnYXZlIHVwLiBJdCdzIGFuIGluc3BpcmluZyBleGFtcGxlIGZvciB1cyB0byB0aGluayBhYm91dCB0b2RheSBpZiB3ZSBnZXQgdGlyZWQsIGZydXN0cmF0ZWQsIG9yIGhhdmUgdG8gZGVhbCB3aXRoIHNvbWUgY3Jpc2lzLiBIZXJlIHdhcyBhIGd1eSB3aG8gaGFkIGV2ZXJ5IHJlYXNvbiB0byBiZSBhbmdyeSBhbmQgYml0dGVyLCB3aG8gY291bGQgaGF2ZSBhYmFuZG9uZWQgaGlzIHByaW5jaXBsZXMgYW5kIGxpdmVkIGluIGx1eHVyeSBvciBlYXNlLCB3aG8gY291bGQgaGF2ZSBwdXQgaGlzIHJlc3BvbnNpYmlsaXRpZXMgYXNpZGUgYW5kIGZvY3VzZWQgb24gaGlzIG93biBoZWFsdGguPC9wPjxwPkJ1dCBoZSBuZXZlciBkaWQuIEhpcyBzb3VsIHN0YXllZCBzdHJvbmcgZXZlbiBhZnRlciBoaXMgYm9keSBiZWNhbWUgd2Vhay4gSGUgZGlkbid0IGdpdmUgdXAsIHJpZ2h0IHVwIHRvIHRoZSBzZWNvbmQgdW50aWwgaGlzIGJvZHkgZmluYWxseSBkaWQmbWRhc2g7d2hlbiBoZSBkaWVkIG5lYXIgVmllbm5hIGluIDE4MCBBRC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAyOCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIk9uIEJlaW5nIFJlbWVtYmVyZWQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJFdmVyeXRoaW5nIGxhc3RzIGZvciBhIGRheSwgdGhlIG9uZSB3aG8gcmVtZW1iZXJzIGFuZCB0aGUgcmVtZW1iZXJlZC4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJNYXJjdXMgQXVyZWxpdXMiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNZWRpdGF0aW9ucywgNC4zNSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UYWtlIGEgd2FsayBkb3duIEZvcnR5LWZpcnN0IFN0cmVldCB0b3dhcmQgdGhlIGJlYXV0aWZ1bCBOZXcgWW9yayBDaXR5IFB1YmxpYyBMaWJyYXJ5LCB3aXRoIGl0cyBtYWplc3RpYyBzdG9uZSBsaW9ucy4gT24geW91ciB3YXkgdXAgPHE+TGlicmFyeSBXYXksPC9xPiB5b3UnbGwgcGFzcyBhIHBsYWNhcmQgbGFpZCBpbnRvIHRoZSBjZW1lbnQsIHBhcnQgb2YgYSBzZXJpZXMgb2YgcXVvdGF0aW9ucyBmcm9tIGdyZWF0IHdyaXRlcnMgdGhyb3VnaG91dCBoaXN0b3J5LiBUaGlzIG9uZSBpcyBmcm9tIE1hcmN1cyBBdXJlbGl1czogPHE+RXZlcnl0aGluZyBpcyBvbmx5IGZvciBhIGRheSwgYm90aCB0aGF0IHdoaWNoIHJlbWVtYmVycyBhbmQgdGhhdCB3aGljaCBpcyByZW1lbWJlcmVkLjwvcT48L3A+PHA+VGhlIGxpYnJhcnkgaXRzZWxmIHdhcyBkZXNpZ25lZCBieSB0aGUgZmlybSBvZiBKb2huIE1lcnZlbiBDYXJyJmVncmF2ZTtyZSwgb25lIG9mIHRoZSB0d2VudGlldGggY2VudHVyeSdzIG1vc3QgYWNjb21wbGlzaGVkIGFyY2hpdGVjdHMuIEl0IGNvbWJpbmVzIHRoZSBjb2xsZWN0aW9ucyBvZiBzdWNoIGx1bWluYXJpZXMgYW5kIHBoaWxhbnRocm9waXN0cyBhcyBTYW11ZWwgVGlsZGVuLCBKb2huIEphY29iIEFzdG9yLCBhbmQgTGFtZXMgTGVub3gsIGFuZCB0aGVpciBuYW1lcyBhcmUgY2FydmVkIGludG8gdGhlIHN0b25lLiBUb2RheSwgdGhlIG5hbWluZyByaWdodHMgZ28gdG8gaGVkZ2UgZnVuZCBtYW5hZ2VyIFN0ZXBoZW4gQS4gU2Nod2Fyem1hbi4gVGhlIG9wZW5pbmcgb2YgdGhlIGxpYnJhcnkgaW4gMTkxMSB3YXMgYXR0ZW5kZWQgYnkgUHJlc2lkZW50IFdpbGxpYW0gSG93YXJkIFRhZnQsIEdvdmVybm9yIEpvaG4gQWxkZW4gRGl4LCBhbmQgTmV3IFlvcmsgQ2l0eSBtYXlvciBXaWxsaWFtIEpheSBHYXlub3IuIFRoZSBwbGFxdWVzIHlvdSBwYXNzIG9uIHlvdXIgd2F5IHdlcmUgZGVzaWduZWQgYnkgdGhlIGV4Y2VsbGVudCBHcmVnZyBMZUZldnJlLjwvcD48cD5NYXJjdXMncyBxdW90ZSBtYWtlcyB1cyBwb25kZXI6IEhvdyBtYW55IG9mIHRoZXNlIHBlb3BsZSBoYXZlIHdlIGV2ZW4gaGVhcmQgb2Y/IFRoZSBwZW9wbGUgaW52b2x2ZWQgaW4gdGhlIHN0b3J5IG9mIHRoZSBsaWJyYXJ5IHdlcmUgc29tZSBvZiB0aGUgbW9zdCBmYW1vdXMgbWVuIGluIHRoZSB3b3JsZC4gTWFzdGVycyBvZiB0aGVpciByZXNwZWN0aXZlIGNyYWZ0cywgcmljaCBiZXlvbmQgaW1hZ2luYXRpb24gaW4gc29tZSBjYXNlcy4gRXZlbiBhbG9uZyA8cT5MaWJyYXJ5IFdheSw8L3E+IG1hbnkgb2YgdGhlIGZhbW91cyBhdXRob3JzIGFyZSB1bmZhbWlsaWFyIHRvIHRoZSBtb2Rlcm4gcmVhZGVyLiBUaGV5IGFyZSBsb25nIGdvbmUsIGFzIGFyZSB0aGUgcGVvcGxlIHdobyByZW1lbWJlcmVkIHRoZW0uPC9wPjxwPkFsbCBvZiB1cywgaW5jbHVkaW5nIE1hcmN1cyZtZGFzaDt3aG8gaXMgcGFzc2VkIG92ZXIgYnkganVzdCBhcyBtYW55IHVuYXdhcmUgcGVkZXN0cmlhbnMmbWRhc2g7bGFzdCBmb3IganVzdCBhIGRheSwgYXQgbW9zdC48L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAyOSIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIkdpdmUgVGhhbmtzIiwNCiAgICAgICAgInF1b3RlcyI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAicXVvdGUiOiAiSW4gYWxsIHRoaW5ncyB3ZSBzaG91bGQgdHJ5IHRvIG1ha2Ugb3Vyc2VsdmVzIGJlIGFzIGdyYXRlZnVsIGFzIHBvc3NpYmxlLiBGb3IgZ3JhdGl0dWRlIGlzIGEgZ29vZCB0aGluayBmb3Igb3Vyc2VsdmVzLCBpbiBhIG1hbm5lciBpbiB3aGljaCBqdXN0aWNlLCBjb21tb25seSBoZWxkIHRvIGJlbG9uZyB0byBvdGhlcnMsIGlzIG5vdC4gR3JhdGl0dWRlIHBheXMgaXRzZWxmIGJhY2sgaW4gbGFyZ2UgbWVhc3VyZS4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJNb3JhbCBMZXR0ZXJzLCA4MS4xOSINCiAgICAgICAgICB9DQogICAgICAgIF0sDQogICAgICAgICJub3RlcyI6ICI8cD5UaGluayBvZiBhbGwgdGhlIHRoaW5ncyB5b3UgY2FuIGJlIGdyYXRlZnVsIGZvciB0b2RheS4gVGhhdCB5b3UgYXJlIGFsaXZlLCB0aGF0IHlvdSBsaXZlIGluIGEgdGltZSBwcmltYXJpbHkgb2YgcGVhY2UsIHRoYXQgeW91IGhhdmUgZW5vdWdoIGhlYWx0aCBhbmQgbGVpc3VyZSB0byByZWFkIHRoaXMgYm9vay4gV2hhdCBvZiB0aGUgbGl0dGxlIHRoaW5ncz8gVGhlIHBlcnNvbiB3aG8gc21pbGVkIGF0IHlvdSwgdGhlIHdvbWFuIHdobyBoZWxkIHRoZSBkb29yIG9wZW4sIHRoYXQgc29uZyB5b3UgbGlrZSBvbiB0aGUgcmFkaW8sIHRoZSBwbGVhc2FudCB3ZWF0aGVyLjwvcD48cD5HcmF0aXR1ZGUgaXMgaW5mZWN0aW91cy4gSXRzIHBvc2l0aXZpdHkgaXMgcmFkaWFudC48L3A+PHA+RXZlbiBpZiB0b2RheSB3YXMgeW91ciBsYXN0IGRheSBvbiB0aGUgZWFydGgmbWRhc2g7aWYgeW91IGtuZXcgaW4gYWR2YW5jZSB0aGF0IGl0IHdhcyBnb2luZyB0byBlbmQgaW4gYSBmZXcgc2hvcnQgaG91cnMmbWRhc2g7d291bGQgdGhlcmUgc3RpbGwgYmUgcGxlbnR5IHRvIGJlIGdyYXRlZnVsIGZvcj8gSG93IG11Y2ggYmV0dGVyIHdvdWxkIHlvdXIgbGlmZSBiZSBpZiB5b3Uga2lja2VkIG9mZiBldmVyeSBkYXkgbGlrZSB0aGF0PyBJZiB5b3UgbGV0IGl0IGNhcnJ5IHRocm91Z2ggZnJvbSBtb3JuaW5nIHRvIG5pZ2h0IGFuZCB0b3VjaCBldmVyeSBwYXJ0IG9mIHlvdXIgbGlmZT88L3A+IiwNCiAgICAgICAgInRob3VnaHRzIjogIiINCiAgICAgIH0NCiAgICBdDQogIH0sDQogIHsNCiAgICAiZGF0ZSI6ICJEZWNlbWJlciAzMCIsDQogICAgInRvcGljcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInRvcGljIjogIlRha2luZyBUaGUgQml0ZSBPdXQgT2YgSXQiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJUbyBiZWFyIHRyaWFscyB3aXRoIGEgY2FsbSBtaW5kPGJyPnJvYnMgbWlzZm9ydHVuZSBvZiBpdHMgc3RyZW5ndGggYW5kIGJ1cmRlbi4iLA0KICAgICAgICAgICAgImF1dGhvciI6ICJTZW5lY2EiLA0KICAgICAgICAgICAgInNvdXJjZSI6ICJIZXJjdWxlcyBPZXRhZXVzLCAyMzEtMjMyIg0KICAgICAgICAgIH0NCiAgICAgICAgXSwNCiAgICAgICAgIm5vdGVzIjogIjxwPlRoZSBwZW9wbGUgeW91IGFkbWlyZSwgdGhlIG9uZXMgd2hvIHNlZW0gdG8gYmUgYWJsZSB0byBzdWNjZXNzZnVsbHkgaGFuZGxlIGFuZCBkZWFsIHdpdGggYWR2ZXJzaXR5IGFuZCBkaWZmaWN1bHR5LCB3aGF0IGRvIHRoZXkgaGF2ZSBpbiBjb21tb24/IFRoZWlyIHNlbnNlIG9mIGVxdWlsaWJyaXVtLCB0aGVpciBvcmRlcmx5IGRpc2NpcGxpbmUuIE9uIHRoZSBvbmUteWFyZCBsaW5lLCBpbiB0aGUgbWlkc3Qgb2YgY3JpdGljaXNtLCBhZnRlciBhIGhlYXJ0YnJlYWtpbmcgdHJhZ2VkeSwgZHVyaW5nIGEgc3RyZXNzZnVsIHBlcmlvZCwgdGhleSBrZWVwIGdvaW5nLjwvcD48cD5Ob3QgYmVjYXVzZSB0aGV5IGFyZSBiZXR0ZXIgdGhhbiB5b3UuIE5vdCBiZWNhdXNlIHRoZXkncmUgc21hcnRlci4gQnV0IGJlY2F1c2UgdGhleSBoYXZlIGxlYXJuZWQgYSBsaXR0bGUgc2VjcmV0LiBZb3UgY2FuIHRha2UgdGhlIGJpdGUgb3V0IG9mIGFueSB0b3VnaCBzaXR1YXRpb24gYnkgYnJpbmdpbmcgaW4gYSBjYWxtIG1pbmQgdG8gaXQuIEJ5IGNvbnNpZGVyaW5nIGl0IGFuZCBtZWRpdGF0aW5nIG9uIGl0IGluIGFkdmFuY2UuPC9wPjxwPkFuZCB0aGlzIGlzIHRydWUgbm90IGp1c3QgZm9yIG91ciBkYXktdG8tZGF5IGFkdmVyc2l0aWVzIGJ1dCBmb3IgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IHVuYXZvaWRhYmxlIHRyaWFsIG9mIGFsbDogb3VyIG93biBldmVudHVhbCBkZWF0aC4gSXQgY291bGQgY29tZSB0b21vcnJvdywgaXQgY291bGQgY29tZSBpbiBmb3J0eSB5ZWFycy4gSXQgY291bGQgYmUgcXVpY2sgYW5kIHBhaW5sZXNzLCBvciBpdCBjb3VsZCBiZSBleGNydWNpYXRpbmcuIE91ciBncmVhdGVzdCBhc3NldCBpbiB0aGF0IG9yZGVhbCB3aWxsIG5vdCBiZSByZWxpZ2lvbiwgaXQgd2lsbCBub3QgZXZlbiBiZSB0aGUgd2lzZSB3b3JkcyBvZiB0aGUgcGhpbG9zb3BoZXJzLiBJdCB3aWxsIGJlLCBzaW1wbHksIG91ciBjYWxtIGFuZCByZWFzb25lZCBtaW5kLjwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfSwNCiAgew0KICAgICJkYXRlIjogIkRlY2VtYmVyIDMxIiwNCiAgICAidG9waWNzIjogWw0KICAgICAgew0KICAgICAgICAidG9waWMiOiAiR2V0IEFjdGl2ZSBJbiBZb3VyIE93biBSZXNjdWUiLA0KICAgICAgICAicXVvdGVzIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJxdW90ZSI6ICJTdG9wIHdhbmRlcmluZyBhYm91dCEgWW91IGFyZW4ndCBsaWtlbHkgdG8gcmVhZCB5b3VyIG93biBub3RlYm9va3MsIG9yIGFuY2llbnQgaGlzdG9yaWVzLCBvciB0aGUgYW50aG9sb2dpZXMgeW91J3ZlIGNvbGxlY3RlZCB0byBlbmpveSBpbiB5b3VyIG9sZCBhZ2UuIEdldCBidXN5IHdpdGggbGlmZSdzIHB1cnBvc2UsIHRvc3MgYXNpZGUgZW1wdHkgaG9wZXMsIGdldCBhY3RpdmUgaW4geW91ciBvd24gcmVzY3VlJm1kYXNoO2lmIHlvdSBjYXJlIGZvciB5b3Vyc2VsZiBhdCBhbGwmbWRhc2g7YW5kIGRvIGl0IHdoaWxlIHlvdSBjYW4uIiwNCiAgICAgICAgICAgICJhdXRob3IiOiAiTWFyY3VzIEF1cmVsaXVzIiwNCiAgICAgICAgICAgICJzb3VyY2UiOiAiTWVkaXRhdGlvbnMsIDMuMTQiDQogICAgICAgICAgfQ0KICAgICAgICBdLA0KICAgICAgICAibm90ZXMiOiAiPHA+VGhlIHB1cnBvc2Ugb2YgYWxsIG91ciByZWFkaW5nIGFuZCBzdHVkeWluZyBpcyB0byBhaWQgdXMgaW4gdGhlIHB1cnN1aXQgb2YgdGhlIGdvb2QgbGlmZSAoYW5kIGRlYXRoKS4gQXQgc29tZSBwb2ludCwgd2UgbXVzdCBwdXQgb3VyIGJvb2tzIGFzaWRlIGFuZCB0YWtlIGFjdGlvbi4gU28gdGhhdCwgYXMgU2VuZWNhIHB1dCBpdCwgdGhlIDxxPndvcmRzIGJlY29tZSB3b3Jrcy48L3E+IFRoZXJlIGlzIGFuIG9sZCBzYXlpbmcgdGhhdCBhIDxxPnNjaG9sYXIgbWFkZSBpcyBhIHNvbGRpZXIgc3BvaWxlZC48L3E+IFdlIHdhbnQgdG8gYmUgYm90aCBzY2hvbGFycyBhbmQgc29sZGllcnMmbWRhc2g7c29sZGllcnMgaW4gdGhlIGdvb2QgZmlnaHQuPC9wPjxwPlRoYXQncyB3aGF0J3MgbmV4dCBmb3IgeW91LiBNb3ZlIGZvcndhcmQsIG1vdmUgb253YXJkLiBBbm90aGVyIGJvb2sgaXNuJ3QgdGhlIGFuc3dlci4gVGhlIHJpZ2h0IGNob2ljZXMgYW5kIGRlY2lzaW9ucyBhcmUuIFdobyBrbm93cyBob3cgbXVjaCB0aW1lIHlvdSBoYXZlIGxlZnQsIG9yIHdoYXQgYXdhaXRzIHVzIHRvbW9ycm93PzwvcD4iLA0KICAgICAgICAidGhvdWdodHMiOiAiIg0KICAgICAgfQ0KICAgIF0NCiAgfQ0KXQ0K"
}