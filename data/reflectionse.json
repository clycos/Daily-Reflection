{
  "encoded": "[
  {
    "date": "January 1",
    "topics": [
      {
        "topic": "Control And Choice",
        "quotes": [
          {
            "quote": "The chief task in life is simply this: to identify and separate matters so that I can say clearly to myself which are externals not under my control, and which have to do with the choices I actually control.  Where then do I look for good and evil?  Not to uncontrollable externals, but within myself to the choices that are my own...",
            "author": "Epictetus",
            "source": "Discourses, 2.5.4-5"
          }
        ],
        "notes": "<p>The single most important practice in Stoic philosophy is differentiating between what we can change and what we can't.  What we have influence over and what we do not.  A flight is delayed because of weather—no amount of yelling at an airline representative will end a storm.  No amount of wishing will make you taller or shorter or born in a different country.  No matter how hard you try, you can't <em>make</em> someone like you.  And on top of that, time spent hurling yourself at these immovable objects is time not spent on the things we <em>can</em> change.</p><p>The recovery community practices something called the Serenity Prayer: <q>God, grant me the serenity to accept the things I  cannot change, the courage to change the things I can, and the wisdom to know the difference.</q> Addicts cannot change the abuse suffered in childhood.  They cannot undo the choices they have made or the hurt they have caused.  But they <em>can</em> change the future—through the power they have in the present moment.  As Epictetus said, they can control the choices they make right now.</p><p>The same is true for us today.  If we can focus on making clear what parts of our day are within our control and what parts are not, we will not only be happier, we will have a distinct advantage over other people who fail to realize they are fighting an unwinnable battle.</p>",
        "thoughts": ""
      },
      {
        "topic": "The 84<sup>th</sup> Problem",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Once upon a time, there was a person, overwhelmed by life's challenges—work stress, constant illness, family conflicts, and financial struggles seemed unending.  Seeking wisdom, they consulted a wise friend who suggested visiting the Buddha for guidance.  After a long journey filled with anticipation, they finally met the Buddha and shared their burdens.</p><p>To each problem, the Buddha responded, <q>I'm sorry, I can't help you with that,</q> leaving the person increasingly frustrated.  Finally, they exclaimed, <q>You're the Buddha!  If you can't help, what good are your teachings?</q>  The Buddha, with a calm smile, revealed, <q>Everyone has 83 problems that come and go.  My teachings won't solve those problems, but they can solve your 84<sup>th</sup> problem—and if you solve your 84<sup>th</sup> problem all your problems will go away.</q></p><p>Intrigued, the person inquired about this elusive 84<sup>th</sup> problem.  The Buddha answered, <q>Your 84<sup>th</sup> problem is that you want to have no problems at all.</q>  This insight struck the person profoundly.  They realized that their constant desire for a problem-free life was unattainable and itself a significant source of distress.  With this new understanding, they learned to accept life's inherent challenges, finding peace in embracing rather than resisting the inevitable ups and downs.</p>",
        "thoughts": ""
      },
      {
        "topic": "Beginning",
        "quotes": [
          {
            "quote": "This is the moment of embarking.<br>All auspicious signs are in place.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In the beginning, all things are hopeful.  We prepare ourselves to start anew.  Though we may be intent on the magnificent journey ahead, all things are contained in this first moment: our optimism, our faith, our resolution, our innocence.</p><p>In order to start, we must make a decision.  This decision is a commitment to daily self-cultivation.  We must make a strong connection to our inner selves.  Outside matters are superfluous.  Alone and naked, we negotiate all of life's travails.  Therefore, we alone must make something of ourselves, transforming ourselves into the instruments for experiencing the deepest spiritual essence of life.</p><p>Once we make our decision, all things will come to us.  Auspicious signs are not a superstition, but a confirmation.  They are a response.  It is said that if one chooses to pray to a rock with enough devotion, even that rock will come alive.  In the same way, once we choose to commit ourselves to spiritual practice, even the mountains and valleys will reverberate to the sound of our purpose.</p>",
        "thoughts": ""
      },
      {
        "topic": "Take Care Of The Little Things",
        "quotes": [
          {
            "quote": "What one small, specific leadership step can you take today?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When I teach at a conference or go to a book signing, people sometimes confide in me that they desire to write books too.  <q>How do I get started?</q> they ask.</p><p><q>How much writing do you do now?</q>  I ask in return.</p><p>Some tell me about articles and other pieces they are writing, and I simply encourage them; but most of the time they sheepishly respond, <q>Well, I haven't really written anything yet.</q></p><p><q>Then you need to start writing,</q> I explain.  <q>You've got to start small and work up to it.</q></p><p>Leadership is the same.  You've got to start small and work up to it.  A person who has never led before needs to try to influence one other person.  Someone who has some influence should try to build a team.  Just start with what's necessary.</p><p>St.  Francis of Assisi said, <q>Start doing what is necessary; then do what is possible; and suddenly you are doing the impossible.</q> All good leadership begins where you are.  It was Napoleon who said, <q>The only conquests which are permanent and leave no regrets are our conquests over ourselves.</q>  The small responsibilities you have before you now comprise the first great leadership conquest you must make.  Don't try to conquer the world until you've taken care of things in your own backyard.</p><p>—<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 2",
    "topics": [
      {
        "topic": "Education Is Freedom",
        "quotes": [
          {
            "quote": "What is the fruit of these teachings?  Only the most beautiful and proper harvest of the truly educated—tranquility, fearlessness, and freedom.  We should not trust the masses who say only the free can be educated, but rather the lovers of wisdom who say that only the educated are free",
            "author": "Epictetus",
            "source": "Discourses, 2.1.21-23a"
          }
        ],
        "notes": "<p>Why did you pick up this book?  Why pick up any book?  Not to seem smarter, not to pass time on the plane, not to hear what you want to hear—there are plenty of easier choices than reading.</p><p>No, you picked up this book because you are learning how to live.  Because you want to be freer, fear less, and achieve a state of peace.  Education—reading and meditating on the wisdom of great minds—is not to be done for its own sake.  It has a purpose.</p><p>Remember that imperative on the days you start to feel distracted, when watching television or having a snack seems like a better use of your time than reading or studying philosophy.  Knowledge—self-knowledge in particular—is freedom.</p>",
        "thoughts": ""
      },
      {
        "topic": "Beyond Optimism And Pessimism",
        "quotes": [
          {
            "quote": "Buddhism is neither pessimistic nor optimistic ...  It tells you exactly and objectively what you are and what the world around you is, and shows you the way to perfect freedom, peace, tranquility and happiness.",
            "author": "Walpola Rahula",
            "source": "What the Buddha Taught"
          }
        ],
        "notes": "<p>At its essence, Buddhism provides a pragmatic outlook on life and our place in the world.  Instead of dwelling on despair or false expectations, it encourages a balanced viewpoint.  Grasp this equilibrium as a fundamental step in your spiritual growth.  Buddhism teaches us to observe reality as it is—ever-changing and interconnected.  This realization frees us from the extremes of negativity and positivity, leading us towards inner peace and liberation.  Embrace these teachings to navigate life's challenges with a composed and centered mind, discovering serenity amidst life's turbulence.</p>",
        "thoughts": ""
      },
      {
        "topic": "Ablution",
        "quotes": [
          {
            "quote": "Washing at dawn:<br>Rinse away dreams.<br>Protect the gods within,<br>And clarify the inner spirit.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Purification starts all practice.  First comes cleansing of the body—not to deny the body, but so that it is refined.  Once cleansed, it can help us sense the divine.</p><p>Rinsing away dreams is a way of saying that we must not only dispel the illusions and anxieties of our sleeping moments but those of our waking ones as well.  All life is a dream, not because it isn't there, but because we all project different meanings upon it.  We must cleanse away this habit.</p><p>While cleansing, we naturally look within.  It is believed that there are 36,000 gods and goddesses in the body.  If we continually eat bad foods, intoxicate ourselves, allow filth to accumulate anywhere outside or inside of ourselves, then these gods abandon us in disgust.</p><p>Yet our concerns must ultimately go beyond these deities in the temples of our bodies to the universal One.  After we clear away the obscuring layers of dirt, bodily problems, and delusions, we must be prepared even to clear away the gods themselves so that we can reach the inner One.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Instrument Of Leadership",
        "quotes": [
          {
            "quote": "Be aware today that your communication is setting the tone with the people you lead.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>John W.  Gardner observed, <q>If I had to name a single all-purpose instrument of leadership, it would be communication.</q> Perhaps you are familiar with my books on leadership; then you know that I believe everything rises and falls on leadership.  What I haven't mentioned before is that leadership rises and falls on communication.</p><p>If you lead your team, give yourself these standards to live by as you communicate to your people:</p><ol><li><em>Be consistent.</em> Nothing frustrates team members more than leaders who can't make up their minds.  One of the things that won the team over to Gordon Bethune when he was at Continental was the consistency of his communication.  His employees always knew they could depend on him and what he said.</li><li><em>Be clear.</em> Your team cannot execute if the members don't know what you want.  Don't try to dazzle anyone with your intelligence; impress people with your straightforwardness.</li><li><em>Be courteous.</em> Everyone deserves to be shown respect, no matter what the position or what kind of history you might have with him.  By being courteous to your people, you set the tone for the entire organization.</li></ol><p>Never forget that because you are the leader, your communication sets the tone for the interaction among your people.  Teams always reflect their leaders.  And never forget that good communication is never one-way.  It should not be top-down or dictatorial.  The best leaders listen, invite, and then encourage participation.</p><p>—<cite>The 17 Indisputable Laws of Teamwork</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 3",
    "topics": [
      {
        "topic": "Be Ruthless To The Things That Don't Matter",
        "quotes": [
          {
            "quote": "How many have laid waste to your life when you weren't aware of what you were losing, how many was wasted in pointless grief, foolish joy, greedy desire, and social amusements—how little of your own was left to you.  You will realize you are dying before your time!",
            "author": "Seneca",
            "source": "On the Brevity of Life, 3.3b"
          }
        ],
        "notes": "<p>One of the hardest things to do in life is to say <q>No.</q> To invitations, to requests, to obligations, to the stuff that everyone else is doing.  Even harder is saying no to certain time-consuming emotions: anger, excitement, distraction, obsession, lust.  None of these impulses feels like a big deal by itself, but run amok, they become a commitment like anything else.</p><p>If you're not careful, these are precisely the impositions that will overwhelm and consume your life.  Do you ever wonder how you can get some of your time back, how you can feel less busy?  Start by learning the power of <q>No!</q>—as in <q>No, thank you,</q> and <q>No, I'm not going to get caught up in that,</q> and <q>No, I just can't right now.</q> It may hurt some feelings.  It may turn people off.  If may take some hard work.  But the more you say no to the things that don't matter, the more you can say yes to the things that do.  This will let you live and enjoy your life—the life that <em>you</em> want.</p>",
        "thoughts": ""
      },
      {
        "topic": "Find Peace Now",
        "quotes": [
          {
            "quote": "Do not lose yourself in the past.  Do not lose yourself in the future.  Do not get caught in your anger, worries, or fears.  Come back to the present moment, and touch life deeply.  This is mindfulness.",
            "author": "Thich Nhat Hanh",
            "source": "The Heart of the Buddha's Teaching"
          }
        ],
        "notes": "<p>In our everyday lives, it's common to get caught up in past grudges, regrets, or worries about the future.  Mindfulness serves as a remedy.  It involves being completely engaged and aware in the present moment.  This practice enables us to embrace life profoundly, moving beyond fleeting emotions and thoughts.  By focusing on the present, we nurture a sense of tranquility that influences our entire being, empowering us to tackle life's obstacles with insight rather than reacting impulsively.</p>",
        "thoughts": ""
      },
      {
        "topic": "Devotion",
        "quotes": [
          {
            "quote": "Make the crooked straight,<br>Make the straight to flow,<br>Gather water, fire, and light.<br>Bring the world to a single point.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If we have devotion—total faith and commitment to our spiritual path—our determination will naturally build momentum.  Fewer and fewer obstructions will come before us.  Our path becomes like a crooked one made straight.  No matter what tries to keep us from our purpose, we will not be deterred.</p><p>Proper devotion lies not simply in a headlong course.  It also requires fortitude.  Our bodies, our hearts, and our spirits must be totally concentrated upon what we want.  Only by uniting all our inner elements can we have full devotion.</p><p>If we see our path clearly and our personalities are completely unified, then there is no distinction between the outer world and the inner one.  Nothing is faraway anymore, nothing is not open to us.  That is why it is said that the world is like a single point: So strong is devotion that there is nothing that is not a part of it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Discernment",
        "quotes": [
          {
            "quote": "Use discernment today to position yourself and your team so that they can succeed.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Discernment can be described as the ability to find the root of the matter, and it relies on intuition as well as rational thought.  Discernment is an indispensable quality for any leader who desires to maximize effectiveness.  It helps to do several important things:</p><ol><li><em>Discover the Root Issues.</em>  Leaders of large organizations must cope with tremendous chaos and complexity every day.  They are never able to gather enough information to get a complete picture.  As a result, they have to rely on discernment to see a partial picture, fill in the missing pieces intuitively, and find the real heart of a matter.</li><li><em>Enhance Your Problem Solving.</em>  If you can see the root issue of a problem, you can solve it.  The closer a leader is to his area of gifting, the stronger his intuition and ability to see root causes.  If you want to tap into your discernment potential, work in your areas of strength.</li><li><em>Evaluate Your Options for Maximum Impact.</em>  Management consultant Robert Heller has this advice: <q>Never ignore a gut feeling, but never believe that it's enough.</q>  Discernment isn't relying on intuition alone, nor is it relying only on intellect.  Discernment enables you to use both your gut and your head to find the best option.</li><li><em>Multiply Your Opportunities.</em>  People who lack discernment are seldom in the right place at the right time.  Although great leaders often appear to be lucky to some observers, I believe leaders create their own <q>luck</q> as the result of discernment, that willingness to use their experience and follow their instincts.</li></ol><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 4",
    "topics": [
      {
        "topic": "The Big Three",
        "quotes": [
          {
            "quote": "All you need are these: certainty of judgment in the present moment;<br>action for the common good in the present moment;<br>and an attitude of gratitude in the present moment for anything that comes your way.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.6"
          }
        ],
        "notes": "<p>Perception, Action, Will.  Those are the three overlapping but critical disciplines of Stoicism.  There's more to the philosophy certainly—and we could spend all day talking about the unique beliefs of the various Stoics: <q>This is what Heraclitus thought ...</q> <q>Zeno is from Citium, a city in Cyprus, and he believed ...</q> But would such facts really help you day to day?  What clarity does trivia provide?</p><p>Instead, the following little reminder sums up the three most essential parts of Stoic philosophy worth carrying with you every day, into every decision: <ul><li>Control your perceptions.</li><li>Direct your actions properly.</li><li>Willingly accept what's outside your control.</li></ul></p><p>That's all we need to do.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Root Of Suffering",
        "quotes": [
          {
            "quote": "Craving is the cause of suffering.  When all craving ceases, then suffering ceases.",
            "author": "Gautama Buddha",
            "source": "The Dhammapada"
          }
        ],
        "notes": "<p>Longing for sensory pleasures, material goods, or intangible ideals like achievement can keep us trapped in a cycle of discontentment and distress.  Embrace mindfulness by recognizing how these desires lead to discomfort.  By engaging in meditation and living mindfully, aim to release these cravings.  As they fade, the hold of suffering will weaken, opening the path to a calmer and more fulfilling existence.</p>",
        "thoughts": ""
      },
      {
        "topic": "Reflection",
        "quotes": [
          {
            "quote": "Moon above water.<br>Sit in solitude.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If waters are placid, the moon will be mirrored perfectly.  If we still ourselves, we can mirror the divine perfectly.  But if we engage solely in the frenetic activities of our daily involvements, if we seek to impose our own schemes on the natural order, and if we allow ourselves to become absorbed in self-centered views, the surface of our waters becomes turbulent.  Then we cannot be receptive to <em>Tao</em>.</p><p>There is no effort that we can make to still ourselves.  True stillness comes naturally from moments of solitude where we allow our minds to settle.  Just as water seeks its own level, the mind will gravitate toward the holy.  Muddy water will become clear if allowed to stand undisturbed, and so too will the mind become clear if it is allowed to be still.</p><p>Neither the water nor the moon make any effort to achieve a reflection.  In the same way, meditation will be natural and immediate.</p>",
        "thoughts": ""
      },
      {
        "topic": "You Are Your Lens",
        "quotes": [
          {
            "quote": "Be aware of your <q>lens</q> today as you interact with others.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Who you are determines the way you see everything.  You cannot separate your identity from your perspective.  All that you are and every experience you've had color how you see things.  It is your lens.  Here's what I mean:</p><p>A traveler nearing a great city asked an old man seated by the road, <q>What are the people like in this city?</q></p><p><q>What were they like where you came from?</q> the man asked.</p><p><q>Horrible,</q> the traveler reported.  <q>Mean, untrustworthy, detestable in all respects.</q></p><p><q>Ah,</q> said the old man, <q>you will find them the same in the city ahead.</q>  Scarcely had the first traveler gone on his way when another stopped to inquire about the people in the city before him.  Again the old man asked about the people in the place the traveler has just left.</p><p><q>They were fine people: honest, industrious, and generous to a fault,</q> declared the second traveler.  <q>I was sorry to leave.</q></p><p>The old man responded, <q>That's exactly how you'll find the people here.</q></p><p>The way people see others is a reflection of themselves: If I am a trusting person, I will see others as trustworthy.  If I am a critical person, I will see others as critical.  If I am a caring person, I will see others as compassionate.</p><p>If you change yourself and become the kind of person you desire to be, you will begin to view others in a whole new light.  And that will change the way you interact in all of your relationships.</p><p>—<cite>Winning with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 5",
    "topics": [
      {
        "topic": "Clarify Your Intentions",
        "quotes": [
          {
            "quote": "Let all your efforts be directed to something, let it keep the end in view.  It's not activity that disturbs people, but false conceptions of things that drive them mad.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 12.5"
          }
        ],
        "notes": "<p>Law 29 of <cite>The 48 Laws of Power</cite> is: Plan All The Way To The End.  Robert Greene writes, <q>By planning to the end you will not be overwhelmed by circumstances and you will know when to stop.  Gently guide fortune and help determine the future of thinking far ahead.</q> The second habit in <cite>The 7 Habits Of Highly Successful People</cite> is: begin with an end in mind.</p><p>Having an end in mind is no guarantee that you'll reach it—no Stoic would tolerate that assumption—but not having an end in mind is a guarantee you won't.  To the Stoics, <span lang='el'><i>οἴησις</i></span> (false conceptions) are responsible not just for disturbances in the soul but for chaotic and dysfunctional lives and operations.  When your efforts are not directed at a cause or a purpose, how will you know what to do day in and day out?  How will you know what to say no to and what to say yes to?  How will you know when you've had enough, when you've reached your goal, when you've gotten off track, if you've never defined what those things are?</p><p>The answer is that you cannot.  And so you are driven into failure—or worse, into madness by the oblivion of directionlessness.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Itch You Can't Scratch",
        "quotes": [
          {
            "quote": "The first noble truth is the truth of suffering.  What is suffering?  It's the itch that you can't scratch.  It's the slow erosion of your good mood.  It's the point where it's too painful to be open.",
            "author": "Pema Chödrön",
            "source": "When Things Fall Apart: Heart Advice for Difficult Times"
          }
        ],
        "notes": "<p>Suffering, as taught by the Buddha, is an undeniable truth of human existence.  It manifests in many forms, from minor irritations to profound grief.  Recognizing and acknowledging this suffering is the first step towards overcoming it.  This understanding helps us develop compassion for ourselves and others, fostering a more empathetic world.</p>",
        "thoughts": ""
      },
      {
        "topic": "Sound",
        "quotes": [
          {
            "quote": "Wind in the cave:<br>Movement in stillness.<br>Power in silence.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In a cave, all outer sounds are smothered by rock and earth, but this makes the sounds of one's own heartbeat and breath audible.  In the same way, contemplative stillness turns us away from everyday clamor but allows us to hear the subtle in our own lives.</p><p>When listening not with the ear but with the spirit, one can perceive the subtle sound.  By entering into that sound, we enter into supreme purity.  That is why so many religious traditions pray, sing, or chant as a prelude to silence.  They understand that the repetition and absorption of sound leads to sacredness itself.</p><p>The deepest sound is silence.  This may seem paradoxical only if we regard silence as an absence of life and vibration.  But for a meditator, silence is sound unified with all of its opposites.  It is both sound and soundlessness, and it is in this confusion that the power of meditation emerges.</p>",
        "thoughts": ""
      },
      {
        "topic": "Put People In Their (Right) Place",
        "quotes": [
          {
            "quote": "Look for clues that someone on your team could be better placed.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Moving someone from a job they hate to the right job can be life changing.  One executive I interviewed said he moved a person on his staff to four different places in the organization, trying to find the right fit.  Because he'd placed her wrong so many times, he was almost ready to give up on her.  But he knew she had great potential, and she was right for the organization.  Finally, after he found the right job for her, she was a star!</p><p>Because this executive knows how important it is to have every person working in the right job, he asks his staff once a year, <q>If you could be doing anything, what would it be?</q>  From their answers, he gets clues about any people who may have been miscast in their roles.</p><p>Trying to get the right person in the right job can take a lot of time and energy.  Let's face it.  Isn't it easier for a leader to just put people where it is most convenient and get on with the work?  Once again, this is an area where leaders' desire for action works against them.  Fight against your natural tendency to make a decision and move on.  Don't be afraid to move people around if they're not shining the way you think they could.</p><p>—<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 6",
    "topics": [
      {
        "topic": "Where, Who, What, And Why",
        "quotes": [
          {
            "quote": "A person who doesn't know what the universe is, doesn't know where they are.  A person who doesn't know their purpose in life doesn't know who they are or what the universe is.  A person who doesn't know any one of these things doesn't know why they are here.  So what to make of people who seek or avoid the praise of those who have no knowledge of where or who they are?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.52"
          }
        ],
        "notes": "<p>The late comedian Mitch Hedberg had a funny story he told in his act.  Sitting down for an on-air interview, a radio DJ asked him, <q>So who are you?</q> In that moment, he had to think, <em>Is this guy really deep or did I drive to the wrong station?</em></p><p>How often are we asked a simple question like <q>Who are you?</q> or <q>What do you do?</q> or <q>Where are you from?</q> Considering it a superficial question—if we even consider it at all—we don't bother with more than a superficial answer.</p><p>But, gun to their head, most people couldn't give much in the way of a substantive answer.  Could you?  Have you taken the time to get clarity about who you are and what you stand for?  Or are you too busy chasing unimportant things, mimicking the wrong influences, and following disappointing or unfulfilling or nonexistent paths?</p>",
        "thoughts": ""
      },
      {
        "topic": "Clinging To Anything Brings Pain",
        "quotes": [
          {
            "quote": "The First Noble Truth, the essential core of the Buddha's doctrine, does not assume the form of a philosophical proposition, but that of a psychological axiom: whatever we cling to is dukkha.",
            "author": "Bhikkhu Bodhi",
            "source": "In the Buddha's Words: An Anthology of Discourses from the Pali Canon"
          }
        ],
        "notes": "<p>The core of suffering (dukkha) stems from attachments to impermanent things, leading to inevitable pain.  By letting go of attachments, embracing impermanence, and practicing mindfulness, we can cultivate gratitude, presence, resilience, and equanimity.  This transformative process allows us to embrace life fully, finding peace and fulfillment in the midst of joy and sorrow.</p>",
        "thoughts": ""
      },
      {
        "topic": "Emerging",
        "quotes": [
          {
            "quote": "Thunder and rain at night.<br>Growth comes with a shock.<br>Expression and duration<br>Appear in the first moment.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Things cannot remain in stillness forever.  Winter storms may destroy some things, but they also prepare the way for life.  If things are swept away, it is appropriate.  There must be an opportunity for new living things to emerge and begin their own cycle.</p><p>All growth comes with a shock.  When a sprout breaks its casing and forces its way to the surface of the earth, it is the climax to a long and deep accumulation of life force.  We may think that it came up suddenly, but in actuality, it emerged as the product of unseen and subtle cycles.</p><p>When the seedling appears, it carries with it the complete pattern for its growth, perhaps even the makings of an enormous tree.  Although time and the right conditions are necessary, neither of those factors adds anything to the inherent nature of the seedling.  It completely embodies its destiny.  Therefore, the growth and character of the plant—and its very life—are all present at the moment of emerging.</p>",
        "thoughts": ""
      },
      {
        "topic": "Character Is Everything",
        "quotes": [
          {
            "quote": "Cultivate the character qualities necessary to be a successful, passionate leader.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What makes people want to follow a leader?  Why do people reluctantly comply with one leader while passionately following another to the ends of the earth?  What separates leadership theorists from successful leaders who lead effectively in the real world?  The answer lies in the character qualities of the individual person.</p><p>My friend, do you know whether you have what it takes to become a great leader, the kind who attracts people and makes things happen?  I mean, if you took the time to really look at yourself deep down, would you find the qualities needed to live out your boldest dreams, the ones so big that you've never shared them with anybody?  That's a question each of us must have the courage to honestly ask—and answer—if we want to achieve our real potential.</p><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 7",
    "topics": [
      {
        "topic": "Seven Clear Functions Of The Mind",
        "quotes": [
          {
            "quote": "The proper work of the mind is the exercise of choice, refusal, yearning, repulsion, preparation, purpose, and assent.  What then can pollute and clog the mind's proper functioning?  Nothing but its own corrupt decisions.",
            "author": "Epictetus",
            "source": "Discourses, 4.11.6-7"
          }
        ],
        "notes": "<p>Let's break down each one of those tasks: <ul style=list-style-type:none><li>Choice—to do and think right</li><li>Refusal—of temptation</li><li>Yearning—to be better</li><li>Repulsion—of negativity, of bad influences, of what isn't true</li><li>Preparation—for what lies ahead or whatever may happen</li><li>Purpose—our guiding principle and highest priority</li><li>Assent—to be free of deception about what's inside and outside our control (and be ready to accept the latter)</li></ul></p><p>This is what the mind is here to do.  We must make sure that it does—and see everything else as pollution or a corruption.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Unspoken Truth",
        "quotes": [
          {
            "quote": "The truth of suffering is the first of the Four Noble Truths, and each one of us is called upon to recognize the presence of suffering and understand its nature.",
            "author": "Sharon Salzberg",
            "source": "Lovingkindness: The Revolutionary Art of Happiness"
          }
        ],
        "notes": "<p>Embarking on the journey to enlightenment starts with acknowledging the reality of suffering in our lives.  This acknowledgment is not about giving up but rather about actively participating in life.  Through comprehending the essence of suffering, we can start to untangle its roots in our lives and progress towards freedom.</p>",
        "thoughts": ""
      },
      {
        "topic": "Forbearance",
        "quotes": [
          {
            "quote": "Arctic breath coils the mountains,<br>Rattling the forests' bones.<br>Raindrops cling to branches:<br>Jewelled adornment flung to earth.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Trees in winter lose their leaves.  Some trees may even fall during storms, but most stand patiently and bear their fortune.</p><p>They endure rain, snow, wind, and cold.  They bear the adornment of glycerin raindrops, glimmering icicles, or crowns of snow without care.  They are not concerned when such lustrous splendor is dashed to the ground.  They stand, and they wait, the power of their growth apparently dormant.  But inside, a burgeoning is building imperceptibly.</p><p>Theirs is the forbearance of being true to their inner natures.  It is with this power that they withstand both the vicissitudes and adornment of life, for neither bad fortune nor good fortune will alter what they are.  We should be the same way.  We may have great fortune or bad, but we should patiently bear both.  No matter what, we must always be true to our inner selves.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Law Of Influence",
        "quotes": [
          {
            "quote": "Are people following you, or are you only taking a walk?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The true measure of leadership is influence—nothing more, nothing less.  True leadership cannot be awarded, appointed, or assigned.  It comes only from influence, and that cannot be mandated.  It must be earned.</p><p>The proof of leadership is found in the followers.  So why do some people emerge as leaders while others can't influence no matter how hard they try?  I believe that several factors come into play:</p><ol><li>Character—who they are</li><li>Relationships—who they know</li><li>Knowledge—what they know</li><li>Intuition—what they feel</li><li>Experience—where they've been</li><li>Past Success—what they've done</li><li>Ability—what they can do</li></ol><p>I love the leadership proverb that says, <q>He who thinks he leads, but has no followers, is only taking a walk.</q>  If you can't influence people, then they will not follow you.  And if people won't follow, you are not a leader.</p><p>—<cite>The 21 Irrefutable Laws of Leadership</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 8",
    "topics": [
      {
        "topic": "Seeing Our Addictions",
        "quotes": [
          {
            "quote": "We must give up many things to which we are addicted, considering them to be good.  Otherwise, courage will vanish, which should continually test itself.  Greatness of soul will be lost, which can't stand out unless it disdains as petty what the mob regards as most desirable.",
            "author": "Seneca",
            "source": "Moral Letters, 74.12b-13"
          }
        ],
        "notes": "<p>What we consider to be harmless indulgences can easily become full-blown addictions.  We start with coffee in the morning, and soon enough we can't start the day without it.  We check our email because it's part of our job, and soon enough we feel the phantom buzz of the phone in our pocket every few seconds.  Soon enough, these harmless habits are running our lives.</p><p>The little compulsions and drives we have not only chip away at our freedom and sovereignty, they cloud our clarity.  We think we're in control—but are we really?  As one addict put it, addiction is when we've <q>lost the freedom to abstain.</q> Let us reclaim that freedom.</p><p>What that addiction is for you can vary: Soda?  Drugs?  Complaining?  Gossip?  The Internet?  Biting your nails?  But you must reclaim the ability to abstain because within it is your clarity and self-control.</p>",
        "thoughts": ""
      },
      {
        "topic": "Beyond Illusion",
        "quotes": [
          {
            "quote": "The Buddha taught that suffering is the inevitable consequence of attachment and ignorance, which are themselves the very nature of the existence conditioned by karma.",
            "author": "Sogyal Rinpoche",
            "source": "The Tibetan Book of Living and Dying"
          }
        ],
        "notes": "<p>Karma, translated as <q>action</q>, shapes our lives through the consequences of our actions.  Both attachment and ignorance—desiring things to be different than they are, and not seeing the truth of our reality—create karma that leads to suffering.  By cultivating wisdom and compassion, we can mitigate the effects of negative karma, gradually leading to a more enlightened existence.</p>",
        "thoughts": ""
      },
      {
        "topic": "Work",
        "quotes": [
          {
            "quote": "The woodcutter<br>Works in all seasons.<br>Splitting wood is both<br>Action and inaction.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Even when it is snowy, the woodcutter must split wood.  Unless he does, he and his family will not stay warm, and those who depend upon him will not survive.  But the woodcutter does not work simply on a piecemeal basis.  He labors in concert with the seasons: He worked hard to store wood prior to the first cold so that he would have the luxury of merely splitting kindling now.  His work seems slight in one season, because he was industrious in the previous one.</p><p>When he splits wood, he must place the log on the block and raise his axe.  But he must strike the wood with the grain, and he must let the axe fall with its own weight.  If he tries to chop across the grain, his effort would be wasted.  If he tries to add strength to the swing of the axe, there would be no gain.</p><p>Like the woodcutter, we can all benefit from working according to seasonal circumstances.  Whether it is the time or the method, true labor is half initiative and half knowing how to let things proceed on their own.</p>",
        "thoughts": ""
      },
      {
        "topic": "Point Out People's Strengths",
        "quotes": [
          {
            "quote": "Point out a great strength of someone in your life today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>People often make a mistake in their personal development when they focus too much on their weaknesses.  As a result, they spend all their time trying to shore up those weaknesses instead of maximizing the strengths they possess.  Similarly, it's a mistake to focus on the weaknesses of others.  The self-proclaimed <q>experts</q> who spend their time telling others what's wrong with them never win with people.  Most people simply avoid them.</p><p>Instead, we need to focus on finding people's strengths and pointing them out.  Most people have strengths that they rarely get to use.  Those strengths may be job skills, knowledge, general abilities, personality characteristics, or other attributes.  I once read an interesting fact based on research, saying that every person can do at least one thing better than ten thousand other people.  Think about that!  You possess an ability that can't be matched by anyone in your town or neighborhood .  .  .  or in your college or university .  .  .  or in your company or maybe even in your industry.</p><p>Have you discovered that ability?  If so, you are probably well on your way to pursuing your life's purpose.  If you haven't, wouldn't you love it if someone came alongside you and pointed it out?  How would you feel about that person?  I bet you'd be pretty grateful.</p><p>Why not try to become that kind of person in someone else's life?  When you do, you just might be helping others to discover the thing God created them to do.</p><p>—<cite>25 Ways to Win with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 9",
    "topics": [
      {
        "topic": "What We Control And What We Don't",
        "quotes": [
          {
            "quote": "Some things are in our control, while others are not.  We control our opinion, choice, desire, aversion, and in a word, everything of our own doing.  We don't control our body, property, reputation, position, and in a word, everything not of our own doing.  Even more, the things in our control are by nature free, unhindered, and unobstructed, while those not in our control are weak, slavish, can be hindered, and are not our own.",
            "author": "Epictetus",
            "source": "Enchiridion, 1.1-2"
          }
        ],
        "notes": "<p>Today, you won't control the external events that happen.  Is that scary?  A little, but it's balanced when we see that we can control our opinion <em>about</em> those events.  You decide whether they're good or bad, whether they're fair or unfair.  You don't control the situation, but you control what you <em>think</em> about it.</p><p>See how that works?  Every single thing that is outside your control—the outside world, other people, luck, karma, whatever—still presents a corresponding area that <em>is</em> in your control.  This alone gives us plenty to manage, plenty of power.</p><p>Best of all, an honest understanding of what is within our control provides real clarity about the world: all we have is our own mind.  Remember that today when you try to extend your reach outward—that it's much better and more appropriately directed <em>inward.</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "See Deeply, Suffer Less",
        "quotes": [
          {
            "quote": "Understanding suffering is the beginning of its transcendence.  The First Noble Truth is an invitation to see deeply into the nature of our experiences.",
            "author": "Joseph Goldstein",
            "source": "Insight Meditation: The Practice of Freedom"
          }
        ],
        "notes": "<p>To transcend suffering, one must first understand it.  This deep understanding is not merely intellectual but experiential.  Through practices like meditation and mindfulness, we can observer our direct experiences of suffering and start to untangle the roots of our distress.  This insight is transformative, offering a path to a life marked by deeper peace and understanding.</p>",
        "thoughts": ""
      },
      {
        "topic": "Optimism",
        "quotes": [
          {
            "quote": "Clearing blue sky,<br>A promise in bare branches.<br>In winter, there are sunny days.<br>In adulthood, childhood can return.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In winter, all things appear dead or dormant.  The rain and snow seem incessant, the nights long.  Then one day, the sky clears to a brilliant blue.  The air warms.  A mist rises from the earth and the perfume of water, clay, and moss drifts through the air.  Gardeners are seen preparing new stock, though they are only bare branches and a gray root ball.  The people are optimistic.  They know that there will be an end to the cold.</p><p>In adulthood, we often see responsibilities as something dreadful.  Why should we dig the ground when the weather is disagreeable?  We see activities only as obligations, and we strain against our fate.  But there is a joy to working in harmony with the proper time.  When we do things at just the right occasion and those efforts bear fruit later, the gratification is tremendous.</p><p>There was an old man who began an orchard upon his retirement.  Everyone laughed at him.  Why plant trees?  They told him that he would never live to see a mature crop.  Undaunted, he planted anyway, and he has seen them blossom and has eaten their fruit.  We all need that type of optimism.  That is the innocence and hope of childhood.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Power Of Focusing",
        "quotes": [
          {
            "quote": "Set your priorities and focus on your strengths today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What does it take to have the focus required to be a truly effective leader?  The keys are priorities and concentration.  A leader who knows their priorities but lacks concentration knows what to do but never gets it done.  If they have concentration but no priorities, they have excellence without progress.  But when they harnesses both, they have the potential to achieve great things.</p><p>I frequently meet people in leadership positions who seem to major in minor things.  So the important question is, How should you focus your time and energy?</p><p>Effective leaders who reach their potential spend more time focusing on what they do well than on what they do wrong.  To be successful, focus on your strengths and develop them.  That's where you should pour your time, energy, and resources.</p><p>Growth equals change.  If you want to get better, you have to keep changing and improving.  That means stepping out into new areas.  If you dedicate time to new things related to areas of strength, then you'll grow as a leader.  Don't forget: in leadership, if you're through growing, you're through.</p><p>Nobody can entirely avoid working in areas of weakness.  The key is to minimize it as much as possible, and leaders can do it by delegating.  For example, I delegate detail work to others.  A team of people handles all the logistics of my conferences.  That way when I'm there, I stick to the things I do best, such as the actual speaking.</p><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 10",
    "topics": [
      {
        "topic": "If You Want To Be Steady",
        "quotes": [
          {
            "quote": "The essence of good is a certain kind of reasoned choice; just as the essence of evil is another kind.  What about externals, then?  They are only the raw material for our reasoned choice, which finds its own good or evil in working with them.  How will it find the good?  Not by marveling at the material!  For if judgments about the material are straight that makes our choices good, but if those judgments are twisted, our choices turn bad.",
            "author": "Epictetus",
            "source": "Discourses, 1.29.1-3"
          }
        ],
        "notes": "<p>The Stoic seek steadiness, stability, and tranquility—traits most of us aspire to but seem to experience only fleetingly.  How do they accomplish this elusive goal?  How does one embody <span lang='el'><i>εὐστάθεια</i></span> (the word Arrian used to describe this teaching of Epictetus)?</p><p>Well, it's not luck.  It's not by eliminating outside influences or turning away to quiet and solitude.  Instead, it's about filtering the outside world through the straightener of our judgment.  That's what our reason can do—it can take the crooked, confusing, and overwhelming nature of external events and make them orderly.</p><p>However, if our judgments are crooked because we don't use reason, then everything that follows will be crooked, and we will lose our ability to steady ourselves in the chaos and rush of life.  If you want to be steady, if you want clarity, proper judgment is the best way.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Universal Heartbreak",
        "quotes": [
          {
            "quote": "The first of the truths is the most basic reflection of the heart.  It acknowledges that suffering is an inherent part of the human condition.",
            "author": "Jack Kornfield",
            "source": "A Path with Heart: A Guide through the Perils and Promises of Spiritual Life"
          }
        ],
        "notes": "<p>This statement captures the essence of the Buddha's teaching on suffering—dukkha—as an intrinsic element of existence.  As you evolve with your practice, recognizing this can be profoundly liberating.  It invites us not to despair but to understand that suffering is universal, connecting us all.  By acknowledging this shared experience, we can cultivate compassion, wisdom and empathy, essential qualities on the path to enlightenment.</p>",
        "thoughts": ""
      },
      {
        "topic": "Disaster",
        "quotes": [
          {
            "quote": "Mute black night,<br>Sudden fire.<br>Destruction.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Disaster strikes at its own time.  It is so overwhelming that we can do nothing other than accept it.  It alters the course of our days, our work, our very thinking.  Although it is tempting to resent disaster, there is not much use in doing so.  We cannot say that a disaster had malice toward us, though it might have been deadly, and it's hard to say that it has <q>wrecked</q> our plans.  In one stroke it changes the very basis of the day.</p><p>Disaster is natural.  It is not the curse of the gods, it is not punishment.  Disaster results from the interplay of forces: the earthquake from pressures in the earth, the hurricane from wind and rain, even the accidental fire from a spark.  We rush to ask <q>Why?</q> in the wake of a great disaster, but we should not let superstition interfere with dispassionate acceptance.  There is no god visiting down destruction.</p><p>Disasters may well change us deeply, but they will pass.  We must keep to our deeper convictions and remember our goals.  Whether we remain ash or become the phoenix is up to us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Charting The Course",
        "quotes": [
          {
            "quote": "Have you taken the time to chart the course for the people you're leading?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Nearly anyone can steer the ship, but it takes a leader to chart the course.  Before leaders take their people on a journey, they become navigators and go through a process in order to give the trip the best chance of being a success:</p><p><em>Navigators Draw on Past Experience:</em> Most natural leaders are activists.  They tend to look forward—not backward—make decisions, and move on.  But for leaders to become good navigators, they need to take time to reflect and learn from their experiences.</p><p><em>Navigators Examine the Conditions Before Making Commitments:</em> Good navigators count the cost <em>before</em> making commitments for themselves and others.  They examine not only measurable factors such as finances, resources, and talent, but also intangibles such as timing, morale, momentum, culture, and so on.</p><p><em>Navigators Listen to What Others Have to Say:</em> No matter how good a leader you are, you yourself will not have all the answers.  That's why top-notch navigators gather information from many sources.</p><p><em>Navigators Make Sure Their Conclusions Represent Both Faith and Fact:</em> Being able to navigate for others requires a leader to possess a positive attitude.  You've got to have faith that you can take your people all the way.  On the other hand, you also have to be able to see the facts realistically.  If you don't go in with your eyes wide open, you're going to get blindsided.</p><p>—<cite>The 21 Irrefutable Laws of Leadership</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 11",
    "topics": [
      {
        "topic": "If You Want To Be Unsteady",
        "quotes": [
          {
            "quote": "For if a person shifts their caution to their own reasoned choices and the acts of those choices, they will at the same time gain the will to avoid, but if they shift their caution away from their own reasoned choices to things not under their control, seeking to avoid what is controlled by others, they will then be agitated, fearful, and unstable.",
            "author": "Epictetus",
            "source": "Discourses, 2.1.12"
          }
        ],
        "notes": "<p>The image of the Zen philosopher is the monk up in the green quiet hills, or in a beautiful temple on some rocky cliff.  The Stoics are the antithesis of this idea.  Instead, they are the man in the marketplace, the senator in the Forum, the brave wife waiting for her soldier to return from battle, the sculptor busy in her studio.  Still, the Stoic is equally at peace.</p><p>Epictetus is reminding you that serenity and stability are results of your choices and judgement, not your environment.  If you seek to avoid all disruptions to tranquility—other people, external events, stress—you will never be successful.  Your problems will follow you wherever you run and hide.  But if you seek to avoid the harmful and disruptive <em>judgments</em> that cause those problems, then you will be stable and steady wherever you happen to be.</p>",
        "thoughts": ""
      },
      {
        "topic": "Recognizing Suffering In Your Life",
        "quotes": [
          {
            "quote": "The First Noble Truth is not only suffering as an abstract concept; it is the reality of suffering in our very lives.",
            "author": "Chögyam Trungpa",
            "source": "Cutting Through Spiritual Materialism"
          }
        ],
        "notes": "<p>The First Noble Truth is not an abstract theory; it is a practical truth experienced daily.  Each of us encounters suffering, whether through loss, dissatisfaction, or the simple reality of change.  Recognizing this truth is not to dwell in negativity but to confront reality as it is.  This honest appraisal allows us to move towards a deeper understanding of our lives and develop strategies to alleviate suffering for ourselves and others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Healing",
        "quotes": [
          {
            "quote": "Fire cools.<br>Water seeks its own level.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>No matter how extreme a situation is, it will change.  It cannot continue forever.  Thus, a great forest fire is always destined to burn itself out; a turbulent sea will become calmer.  Natural events balance themselves out by seeking their opposites, and this process of balance is at the heart of all healing.</p><p>This process takes time.  If an event is not great, the balancing required is slight.  If it is momentous, then it may take days, years, even lifetimes for things to return to an even keel.  Actually, without these slight imbalances, there could be no movement in life.  It is being off balance that keeps life changing.  Total centering, total balance would only be stasis.  All life is continual destruction and healing, over and over again.</p><p>That is why, even in the midst of an extreme situation, the wise are patient.  Whether the situation is illness, calamity, or their own anger, they know that healing will follow upheaval.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Law Of Priorities",
        "quotes": [
          {
            "quote": "Today give your time only to things that pass the requirement, return, reward test.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When we are busy, we naturally believe that we are achieving.  But busyness does not equal productivity.  Activity is not necessarily accomplishment.  Prioritizing requires leaders to continually think ahead, to know what's important, to know what's next, to see how everything relates to the overall vision.</p><ul><li><em>What Is Required?</em>  What must I do that nobody can or should do for me?</li><li><em>What Gives the Greatest Return?</em>  Work in your areas of greatest strength.  Is there something you're doing that can be done 80 percent as well by someone else?  If so, delegate it.</li><li><em>What Brings the Greatest Reward?</em>  Life is too short not to do some things you love.  What energizes you and keeps you passionate?</li></ul><p>—<cite>The 21 Irrefutable Laws of Leadership</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 12",
    "topics": [
      {
        "topic": "The One Path To Serenity",
        "quotes": [
          {
            "quote": "Keep this thought at the ready at daybreak, and through the day and night—there is only one path to happiness, and that is in giving up all outside of your sphere of choice, regarding nothing else as your possession, surrendering all else to God and Fortune.",
            "author": "Epictetus",
            "source": "Discourses, 4.4.39"
          }
        ],
        "notes": "<p>This morning, remind yourself of what is in your control and what's not in your control.  Remind yourself to focus on the former and not the latter.</p><p>Before lunch, remind yourself that the only thing you truly possess is your ability to make choices (and to use reason and judgment when doing so).  This is the only thing that can never be taken from you completely.</p><p>In the afternoon, remind yourself that aside from the choices you make, your fate is not entirely up to you.  The world is spinning and we spin along with it—whichever direction, good or bad.</p><p>In the evening, remind yourself how much is outside of your control and where your choices begin and end.</p><p>As you lie in bed, remember that sleep is a form of surrender and trust and how easily it comes.  And prepare to start the whole cycle over again tomorrow.</p>",
        "thoughts": ""
      },
      {
        "topic": "Is Pleasure A Trap?",
        "quotes": [
          {
            "quote": "To understand the Buddha's way is to understand that everything is suffering.  Even pleasure is suffering because of its impermanence.",
            "author": "Suzuki Roshi",
            "source": "Zen Mind, Beginner's Mind"
          }
        ],
        "notes": "<p>This quote highlights the pervasive nature of suffering and the concept of impermanence in Buddhism.  Pleasure, while often sought as a refuge, is also a form of suffering because it is fleeting.  By recognizing the impermanent nature of all experiences, we learn to cherish the present without clinging to it, preparing ourselves for the inherent changes life brings, and thus, suffering decreases.</p>",
        "thoughts": ""
      },
      {
        "topic": "Shaping",
        "quotes": [
          {
            "quote": "Potter at the wheel.<br>From centering to finished pot,<br>Form increases as options decrease;<br>Softness goes to hardness.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When a potter begins to throw a pot, she picks up a lump of clay, shapes it into a rough sphere, and throws it onto the spinning potter's wheel.  It may land off-center, and she must carefully begin to shape it until it is a smooth cylinder.  Then she works the clay, stretching and compressing it as it turns.  First it is a tower, then it is like a squat mushroom.  Only after bringing it up and down several times does she slowly squeeze the revolving clay until its walls rise from the wheel.  She cannot go on too long, for the clay will begin to <q>tire</q> and then sag.  She gives it the form she imagines, then sets it aside.  The next day, the clay will be leather hard, and she can turn it over to shape the foot.  Some decoration may be scratched into the surface.  Eventually, the bowl will be fired, and then the only options are the colors applied to it; its shape cannot be changed.</p><p>This is how we shape all the situations in our lives.  We must give them rough shape and then throw them down into the center of our lives.  We must stretch and compress, testing the nature of things.  As we shape the situation, we must be aware of what form we want things to take.  The closer something comes to completion, the harder and more definite it becomes.  Our options become fewer, until the full impact of our creation is all that there is.  Beauty or ugliness, utility or failure, comes from the process of shaping.</p>",
        "thoughts": ""
      },
      {
        "topic": "People Need To Know They Helped",
        "quotes": [
          {
            "quote": "Tell the members of your team why they are valuable to you.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Whenever someone tells me how valuable the people on my team are to them, I encourage him to tell the individuals who were so helpful.  Why?  Because people need to know that they helped someone.</p><p><q>Good leaders make people feel that they're at the very heart of things, not at the periphery,</q> says author and leadership expert Warren Bennis.  <q>Everyone feels that he or she makes a difference to the success of the organization.  When that happens people feel centered and that gives their work meaning.</q>  Walter Shipley of Citibank says, <q>We have 68,000 employees.  With a company this size, I'm not <q>running the business.</q>  .  .  .  My job is to create the environment that enables people to leverage each other beyond their own individual capabilities.  .  .  .  I get credit for providing the leadership that got us there.  But our people did it.</q>  Shipley understands what successful leaders know: people need to know that they made an important contribution to reaching the goal.</p><p>It's not a sign of weakness to let others know you value them.  It's a sign of security and strength.  When you're honest about your need for help, specific with others about the value they add, and inclusive of others as you build a team to do something bigger than you are, everybody wins.</p><p>—<cite>25 Ways to Win with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 13",
    "topics": [
      {
        "topic": "Circle Of Control",
        "quotes": [
          {
            "quote": "We control our reasoned choice and all acts that depend on that moral will.  What's not under our control are the body and any of its parts, our possessions, parents, siblings, children, or country—anything with with we might associate.",
            "author": "Epictetus",
            "source": "Discourses, 1.22.10"
          }
        ],
        "notes": "<p>This is important enough that it bears repeating: a wise person knows what's inside their circle of control and what is outside of it.</p><p>The good news is that it's pretty easy to remember what is inside our control.  According to the Stoics, the circle of control contains just one thing: YOUR MIND.  That's right, even your physical body isn't completely within the circle.  After all, you could be struck with a physical illness or impairment at any moment.  You could be traveling in a foreign country and be thrown in jail.</p><p>But this is all good news because it drastically reduces the amount of things that you need to think about.  There is clarity in simplicity.  While everyone else is running around with a list of responsibilities a mile long—things they're not actually responsible for—you've got just that one-item list.  You've got just one thing to manage: your choices, your will, your mind.</p><p>So mind it.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Key To Freedom",
        "quotes": [
          {
            "quote": "Recognizing suffering is the first step in the path.  When we acknowledge that life's experiences are transient, we open the door to liberation.",
            "author": "Tulku Urgyen Rinpoche",
            "source": "From As It Is"
          }
        ],
        "notes": "<p>Why do we start with suffering in Buddhism?  Acknowledgment of suffering is crucial.  It is the first step that leads to a broader understanding of the Buddha's path.  Once we see the transient nature of our experiences, we can cultivate detachment and reduce our emotional reactivity.  This understanding opens the way to liberation from the cycles of suffering, leading to a more peaceful and fulfilling life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Absorption",
        "quotes": [
          {
            "quote": "Crimson light through pine shadows.<br>Setting sun settling in the ocean.<br>Night follows the setting sun,<br>Day follows the fleeing moon.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>All too often, we tend to think of absorption as a static thing: Water is absorbed into a sponge, and there it stays.  But true absorption is a total involvement in the evolution of life without hesitation or contradiction.  In nature there is no alienation.  Everything belongs.</p><p>Only human beings hold ourselves aloof from this process.  We have our civilization, our personal plans, our own petty emotions.  We divorce ourselves from process, even as we yearn for love, companionship, understanding, and communion.  We constantly defeat ourselves by questioning, asserting ourselves at the wrong times, or letting hatred and pride cloud our perceptions.  Our alienation is self-generated.</p><p>In the meantime, all of nature continues its constant flow.  We need to let ourselves go, enter freely into the process of nature, and become absorbed in it.  If we integrate ourselves with that process, we will find success.  Then the sequence of things will be as evident as the coming of the sun and the moon, and everything will be as it should be.</p>",
        "thoughts": ""
      },
      {
        "topic": "Control What's In You",
        "quotes": [
          {
            "quote": "Focus on the things you can do something about today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Former UCLA basketball coach John Wooden, one of the greatest coaches who ever lived, said, <q>Do not let what you cannot do interfere with what you can do.</q>  Wooden was known for stressing excellence to his players and encouraging them to work toward their potential.  He never made winning a championship his goal.  He focused on the journey, not the destination.  Yet his work ethic and focus on the things within his control earned his UCLA teams four undefeated seasons, an eighty-eight-game winning streak, and an incredible ten national championships.  No one had ever done that before him, and no one has done it since.</p><p>As you move forward on the success journey, you need to remember that what happens <em>in</em> you is more important than what happens <em>to</em> you.  You can control your attitudes as you travel on the journey, but you have no control over the actions of others.  You can choose what to put on your calendar, but you can't control today's circumstances.  Unfortunately, the majority of the fear and stress that people experience in life is from things they can do nothing about.  Don't let that happen to you.</p><p>—<cite>Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 14",
    "topics": [
      {
        "topic": "Cut The Strings That Pull Your Mind",
        "quotes": [
          {
            "quote": "Understand at last that you have something in you more powerful and divine than what causes the bodily passions and pulls you like a mere puppet.  What thoughts now occupy my mind?  Is it not fear, suspicion, desire, or something like that?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.19"
          }
        ],
        "notes": "<p>Think of all the interests vying for a share of your wallet or for a second of your attention.  Food scientists are engineering products to exploit your taste buds.  Silicon Valley engineers are designing applications as addictive as gambling.  The media is manufacturing stories to provoke outrage and anger.</p><p>These are just a small slice of the temptations and forces acting on us—distracting us and pulling us  away from the things that truly matter.  Marcus, thankfully, was not exposed to these extreme parts of our modern culture.  But he knew plenty of distracting sinkholes too: gossip, the endless call of work, as well as fear, suspicion, lust.  Every human being is pulled by these internal and external forces that are increasingly more powerful and harder to resist.</p><p>Philosophy is simply asking us to pay careful attention and to strive to be more than a pawn.  As Viktor Frankl puts it in <cite>The Will to Meaning</cite>, <q>Man is pushed by drives but pulled by values.</q> These values and inner awareness prevent us from being puppets.  Sure, paying attention requires work and awareness, but isn't that better than being jerked about on a string.</p>",
        "thoughts": ""
      },
      {
        "topic": "Suffering: The Spark Of Chance",
        "quotes": [
          {
            "quote": "Suffering is the starting point of the Buddha's teaching.  Without seeing suffering, we cannot aspire to cessation.",
            "author": "Ayya Khema",
            "source": "In Being Nobody, Going Nowhere"
          }
        ],
        "notes": "<p>At the core of this teaching is the call to awaken.  Suffering should be observed and understood, not shunned.  It serves as a lens that unveils the truths of our desires, fears, and attachments.  The Buddha teaches that to pursue the end of suffering, we must first recognize its existence.</p><p>Viewing suffering as the starting point entails analyzing our daily experiences.  We must question the reasons behind our suffering, what we cling to, and how our perceptions affect our reality.  Each instance of suffering offers insight into the impermanent and unsatisfactory nature of existence.  Rather than despairing, we use these insights to navigate life's complexities, guided by an enlightened awareness.</p>",
        "thoughts": ""
      },
      {
        "topic": "Positioning",
        "quotes": [
          {
            "quote": "Heron stands in the blue estuary,<br>Solitary, white, unmoving for hours.<br>A fish!  Quick avian darting;<br>The prey captured.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>People always ask how to follow <em>Tao</em>.  It is as easy and natural as the heron standing in the water.  The bird moves when it must; it does not move when stillness is appropriate.</p><p>The secret of its serenity is a type of vigilance, a contemplative state.  The heron is not in mere dumbness or sleep.  It knows a lucid stillness.  It stands unmoving in the flow of the water.  It gazes unperturbed and is aware.  When <em>Tao</em> brings it something that it needs, it seizes the opportunity without hesitation or deliberation.  Then it goes back to its quiescence without disturbing itself or its surroundings.  Unless it found the right position in the water's flow and remained patient, it would not have succeeded.</p><p>Actions in life can be reduced to two factors: positioning and timing.  If we are not in the right place at the right time, we cannot possibly take advantage of what life has to offer us.  Almost anything is appropriate if an action is in accord with the time and the place.  But we must be vigilant and prepared.  Even if the time and the place are right, we can still miss our chance if we do not notice the moment, if we act inadequately, or if we hamper ourselves with doubts and second thoughts.  When life presents an opportunity, we must be ready to seize it without hesitation or inhibition.  Position is useless without awareness.  If we have both, we make no mistakes.</p>",
        "thoughts": ""
      },
      {
        "topic": "Leaders See Within The Larger Context",
        "quotes": [
          {
            "quote": "What positive improvements can you make today based on your understanding of how you fit within your area, organization, market, and industry?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Most people evaluate events in their lives according to how they will be personally affected.  Leaders think within a broader context.  They start by asking themselves, <em>How will this impact my people?</em>  But then they also look at how something will impact those above and beside them.  They try to see everything in terms of the entire organization and beyond.</p><p>Effective leaders know the answers to the following questions:</p><ul><li>How do I fit in my area or department?</li><li>How do all the departments fit into the organization?</li><li>Where does our organization fit in the market?</li><li>How is our market related to other industries and the economy?</li></ul><p>And as industries in our economy become more global, many good leaders are thinking even more broadly!</p><p>You don't have to become a global economist to lead effectively from the middle of your organization.  The point is that 360-Degree Leaders see their area as part of the larger process and understand how the pieces of the larger puzzle fit together.  If you desire to be a better leader, then broaden your thinking and work at seeing things from a larger perspective.</p><p>—<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 15",
    "topics": [
      {
        "topic": "Peace Is In Staying The Course",
        "quotes": [
          {
            "quote": "Tranquility can't be grasped except by those who have reached an unwavering ad firm power of judgement—the rest constantly fall and rise in their decisions, wavering in a state of alternately rejecting and accepting things.  What is the cause of this back and forth?  It's because nothing is clear and they rely on the most uncertain guide—common opinion.",
            "author": "Seneca",
            "source": "Moral Letters, 95.57b-58a"
          }
        ],
        "notes": "<p>In Seneca's essay on tranquility, he used the Greek word <span lang='el'><i>εὐθυμία</i></span>, which he defines as <q>believing in yourself and trusting that you are on the right path, and not being in doubt by following the myriad footpaths of those wandering in every direction.</q> It is this state of mind, he says, that produces tranquility.</p><p>Clarity of vision allows us to have this belief.  That's not to say we're always going to be 100 percent certain of everything, or that we even should be.  Rather, it's that we can rest assured we're heading generally in the right direction—that we don't need to constantly compare ourselves with other people or change our mind every three seconds based on new information.</p><p>Instead, tranquility and peace are found in identifying <em>our</em> path and in sticking to it: staying the course—making adjustments here and there, naturally—but ignoring the distracting sirens who beckon us to turn toward the rocks.</p>",
        "thoughts": ""
      },
      {
        "topic": "Honesty Before Transformation",
        "quotes": [
          {
            "quote": "The Buddha was not being pessimistic when he declared the First Noble Truth; he was simply beginning with the honest acknowledgment of our usual experience.",
            "author": "Tenzin Palmo",
            "source": "In Reflections On A Mountain Lake"
          }
        ],
        "notes": "<p>The Buddha's approach was fundamentally realistic.  Acknowledging suffering as the starting point of his teachings is not pessimism but a clear-eyed view of our human condition.  This perspective is essential for developing the motivation to engage in the Buddhist path and apply its practices to overcome the root causes of suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "Time",
        "quotes": [
          {
            "quote": "The river, surging course,<br>Uninterrupted current.<br>Headwater, channel, mouth.<br>Can they be divided?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Each day, we all face a peculiar problem.  We must validate our past, face our present, plan for the future.</p><p>Those who believe that life was better in the <q>old days</q> sometimes are blind to the reality of the present; those who live only for the present frequently have little regard for either precedent or consequence; and those who live only for some deferred reward often strain themselves with too much denial.  Thinking of past, present, and future is a useful conceptual technique, but ultimately they must be appropriately balanced and joined.</p><p>We must understand how the past affects us, we should keep the present full of rich and satisfying experiences, and we should devote some energy each day to building for the future.  Just as a river can be said to have parts that cannot be clearly divided, so too should we consider the whole of our time when deciding how to spend our lives.</p>",
        "thoughts": ""
      },
      {
        "topic": "Be Impressed, Not Impressive",
        "quotes": [
          {
            "quote": "Spend today listening to others and letting them impress you.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Too often we think that if we can impress others, we will gain influence with them.  We want to become others' heroes—to be larger than life.  That creates a problem because we're real live human beings.  People can see us for who we really are.  If we make it our goal to impress them, we puff up our pride and end up being pretentious—and that turns people off.</p><p>If you want to influence others, don't try to impress them.  Pride is really nothing more than a form of selfishness, and pretense is only a way to keep people at arm's length so that they can't see who you really are.  Instead of impressing others, let them impress you.</p><p>It's really a matter of attitude.  The people with charisma, those who attract others to themselves, are individuals who focus on others, not themselves.  They ask questions of others.  They listen.  They don't try to be the center of attention.  And they never try to pretend they're perfect.</p><p>—<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 16",
    "topics": [
      {
        "topic": "Never Do Anything Out Of Habit",
        "quotes": [
          {
            "quote": "So in the majority of other things, we address circumstances not in accordance with the right assumptions, but mostly by following wretched habit.  Since all that I've said is the case, the person in training must seek to rise above, so as to stop seeking out pleasure and steering away from pain; to stop clinging to living and abhorring death; and in the case of property and money, to stop valuing receiving over giving.",
            "author": "Musonius Rufus",
            "source": "Lectures, 6.25.5-11"
          }
        ],
        "notes": "<p>A worker is asked: <q>Why did you do it this way?</q> The answer, <q>Because that's the way we've always done things.</q> The answer frustrates every good boss and sets the mouth of every entrepreneur watering.  The worker has stopped thinking and is mindlessly operating out of habit.  The business is ripe for disruption by a competitor, and the worker will probably get fired by any thinking boss.</p><p>We should apply the same ruthlessness to our own habits.  In fact, we are studying philosophy precisely to break ourselves of rote behavior.  Find what you do out of rote memory or routine.  Ask yourself: <i>Is this really the best way to do it?</i> Know why you do what you do—do it for the right reasons.</p>",
        "thoughts": ""
      },
      {
        "topic": "Unveiling The Deeper Layers",
        "quotes": [
          {
            "quote": "Life is filled with suffering...  birth, aging, sickness, death, not getting what you want, and getting what you don't want.  These are the inevitable realities of life.",
            "author": "Thich Nhat Hanh",
            "source": "The Heart of the Buddha's Teaching"
          }
        ],
        "notes": "<p>This quote engages deeply with the fears and anxieties that underlie our everyday lives.  From birth, we face inevitable challenges like aging, illness, and death.  These are not just physical events but shape our emotional understanding of life and our place in it.</p><p>The quote also explores the psychological impact of suffering—the distress from unmet desires and the toll of undesirable outcomes.  These emotional experiences, as pervasive as physical ones, deeply affect our hopes and expectations, highlighting the frequent mismatch between our desires and reality.</p>",
        "thoughts": ""
      },
      {
        "topic": "Ordinary",
        "quotes": [
          {
            "quote": "Umbrella, light, landscape, sky—<br>There is no language of the holy.<br>The sacred lies in the ordinary.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>No one is able to describe the spiritual except by comparing it to ordinary things.  One scripture describes the divine word as an <q>umbrella of protection.</q>  Another says a god is light.  Heaven is supposed to be in the sky, and even ascetics who have rejected sex use erotic images to describe enlightenment.  People have to resort to metaphor to state the divine.</p><p>Even esoteric languages have been invented, and they mystify the outsider.  Holy words always appear that way to the uninitiated.  After one learns to read them, their message becomes assimilated.  We no longer worry about the images, for we have found the truth that the words were indicating.</p><p>When you buy something that has assembly instructions, you follow the directions, but you do not then venerate the instructions.  Spiritual attainment is no different.  Once you've gained it, instructions become secondary.  Spirituality gained is no different than the ball game you play, the work you do, the car you drive, the love you make.  If you constantly regard <em>Tao</em> as extraordinary, then it remains unknown and outside your self—a myth, a fantasy, an unnameable quantity.  But once you know it, it is yours and part of your daily life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Manage Your Attitude Daily",
        "quotes": [
          {
            "quote": "Make the decision to have a good attitude today, then manage that decision the rest of the day.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>One of the most significant discoveries of my life was realizing that we often place too much emphasis on making decisions and too little on managing the decisions we've already made.  This discovery was so significant to me that I wrote a book about it called <cite>Today Matters</cite>.  The thesis of the book is that successful people make right decisions early and manage those decisions daily.  You can make a decision to have a good attitude, but if you don't make plans to <em>manage</em> that decision every day, then you are likely to end up right back where you started.  But here's the good news: <em>maintaining</em> the right attitude is easier than <em>regaining</em> the right attitude.</p><p>How do you do that?  A Chinese proverb I came across gives insight: <q>Assume a cheerfulness you do not feel, and shortly you feel the cheerfulness you assumed.</q>  Or as editor and publisher Elbert Hubbard says, <q>Be pleasant until 10 a.m.  and the rest of the day will take care of itself.</q>  When you get up in the morning, you need to remind yourself of the decision you've made to have a positive attitude.  You need to manage your thinking and direct your actions so that they are consistent with your decision.</p><p>If you take responsibility for your attitude—recognizing that it can change how you live, managing it every day, and cultivating and developing positive thoughts and habits—then you can make your attitude your greatest asset.  It can become the difference maker in your life, opening doors and helping you overcome great obstacles.</p><p>—<cite>The Difference Maker</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 17",
    "topics": [
      {
        "topic": "Reboot The Real Work",
        "quotes": [
          {
            "quote": "I am your teacher and you are learning in my school.  My aim is to bring you to completion, unhindered, free from compulsive behavior, unrestrained, without shame, free, flourishing, and happy, looking to God in things great and small—your aim is to learn and diligently practice all these things.  Why then don't you complete the work, if you have the right aim and I have both the right aim and right preparation?  What is missing?  ...  The work is quite feasible, and is the only thing in our power ...  Let go of the past.  We must only begin.  Believe me and you will see.",
            "author": "Epictetus",
            "source": "Discourses, 2.19.29-34"
          }
        ],
        "notes": "<p>Do you remember, in school, or early in your life, being afraid to try something because you feared you might fail at it?  Most teenagers choose to fool around rather than exert themselves.  Halfhearted, lazy effort gives them a ready-made excuse: <q>It doesn't matter.  I wasn't even trying.</q></p><p>As we get older, failure is not so inconsequential anymore.  What's at stake is not some arbitrary grade or intramural sports trophy, but the quality of your life and your ability to deal with the world around you.</p><p>Don't let that intimidate you, though.  You have the best teachers in the world: the wisest philosophers who ever lived.  And not only are you capable, the professor is asking for something very simple: just begin the work.  The rest follows.</p>",
        "thoughts": ""
      },
      {
        "topic": "Subtlety Dissatisfied",
        "quotes": [
          {
            "quote": "Suffering or dukkha in the Buddhist context is not merely about gross physical or emotional pain but includes even subtle dissatisfactions.",
            "author": "Thubten Chodron",
            "source": "Open Heart, Clear Mind"
          }
        ],
        "notes": "<p>Dukkha, often translated as suffering, encompasses more than the apparent forms like illness or grief—it includes subtle, pervasive dissatisfactions affecting our daily lives.  Recognized in Buddhism as one of the three marks of existence, alongside impermanence (anicca) and non-self (anatta), dukkha also covers the psychological and existential aspects of life.  Even in moments of happiness, the fleeting nature of these experiences can cause underlying unease.  Moreover, dukkha involves the existential dissatisfaction from incessantly chasing desires and the emptiness of material pleasures.  Buddhist teachings highlight that our usual reactions of clinging and aversion to life's situations generate dukkha, occurring whenever we wish reality to be different from what it is.</p>",
        "thoughts": ""
      },
      {
        "topic": "Cooperation",
        "quotes": [
          {
            "quote": "Cooperation with others.<br>Perception, experience, tenacity.<br>Know when to lead and when to follow.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When we become involved with a fellowship, we must gradually become an integral, organic part of that organization.  The relationship will be one of mutual influence: We must carefully influence the collective, and in turn, we will be shaped by the company we keep.</p><p>Influencing others requires perception.  We need to know when to act, when to be passive, when others are receptive to us, and when they will not listen.  This takes experience, of course, and it is necessary to take part in a great many relationships—from our families to community associations—to cultivate the proper sensitivity.  In time, there will be moments of both frustration and success, but in either case, a certain tenacity is crucial.  If we are thwarted in our initiatives, then we must persevere by either maintaining our position or changing it if a better one prevails.  If we are successful, we must not rely on charisma alone, but we must also work to fully realize what the group has resolved to do.</p><p>True leadership is a combination of initiative and humility.  The best leader remains obscure, leading but drawing no personal attention.  As long as the collective has direction, the leader is satisfied.  Credit is not to be taken, it will be awarded when the people realize that it was the subtle influence of the leader that brought them success.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Law Of Connection",
        "quotes": [
          {
            "quote": "Intentionally connect with the people you lead today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The stronger the relationship you form with followers, the greater the connection you forge—and the more likely those followers will be to want to help you.  Whether you're speaking in front of a large audience or chatting in the hallway with an individual, the guidelines are the same.</p><ol><li><em>Connect with Yourself</em>: You must know who you are and have confidence in yourself if you desire to connect with others.</li><li><em>Communicate with Openness and Sincerity</em>: Legendary NFL coach Bill Walsh said, <q>Nothing is more effective than sincere, accurate praise, and nothing is more lame than a cookie-cutter compliment.</q></li><li><em>Know Your Audience</em>: Learn people's names, find out about their histories, ask about their dreams.  Speak to what <em>they</em> care about.</li><li><em>Live Your Message</em>: Practice what you preach.  That's where credibility comes from.</li><li><em>Go to Where They Are</em>: I dislike any kind of barrier to communication.  I adapt to others; I don't expect them to adapt to me.</li><li><em>Focus on Them, Not Yourself</em>: The number one problem of inexperienced speakers and ineffective leaders is that they focus on themselves.</li><li><em>Believe in Them</em>: It's one thing to communicate to people because you believe you have something of value to say.  It's another to communicate with people because you believe they have value.</li><li><em>Offer Direction and Hope</em>: French general Napoleon Bonaparte said, <q>Leaders are dealers in hope.</q></li></ol><p>—<cite>The 21 Irrefutable Laws of Leadership</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 18",
    "topics": [
      {
        "topic": "See The World Like A Poet And An Artist",
        "quotes": [
          {
            "quote": "Pass through this brief patch of time in harmony with nature, and come to your final resting place gracefully, just as a ripened olive might drop, praising the earth that nourished it and grateful to the tree that gave it growth.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.48.2"
          }
        ],
        "notes": "<p>There are some stunningly beautiful turns of phrase in Marcus's <em>Meditations</em>—a surprising treat considering the intended audience (just himself).  In one passage, he praises the <q>charm and allure</q> of natures' process, the <q>stalks of ripe grain bending low, the frowning brow of the lion, the foam dripping from the boar's mouth.</q>  We should thank private rhetoric teacher Marcus Cornelius Fronto for the imagery in these vivid passages.  Fronto, widely considered to the Rome's best orator besides Cicero, was chosen by Marcus's adopted father to teach Marcus to think and write and speak.</p><p>More than just pretty phrases, they gave him—and now us—a powerful perspective on ordinary or seemingly <i>un</i>beautiful events.  It takes an artist's eye to see that the end of life is not unlike a ripe fruit falling from its tree.  It takes a poet to notice the way <q>baking bread splits in places and those cracks, while not intended in the baker's art, catch our eye and serve to stir our appetite</q> and find a metaphor in them.</p><p>There is clarity (and joy) in seeing what others can't see, in finding grace and harmony in places others overlook.  Isn't that far better than seeing the world as some dark place?</p>",
        "thoughts": ""
      },
      {
        "topic": "Suffering 101",
        "quotes": [
          {
            "quote": "",
            "author": "S.  N.  Goenka",
            "source": "The Discourse Summaries"
          }
        ],
        "notes": "<p>True comprehension of suffering extends far beyond simply acknowledging its existence.  It necessitates a deep and thorough exploration of its underlying causes—namely, attachment, ignorance, and aversion—and an examination of how these elements manifest in our daily lives.</p><p>Understanding the complex interplay between these roots and our experiences is essential not only for recognizing the presence of suffering but also for grasping its pervasive nature.  This profound insight is crucial for developing comprehensive and effective strategies that can mitigate suffering and improve our overall well-being.</p><p>Such strategies are instrumental in helping us navigate life's challenges more skillfully and with greater resilience, ultimately leading to a more fulfilling and less burdensome existence.</p>",
        "thoughts": ""
      },
      {
        "topic": "Spectrum",
        "quotes": [
          {
            "quote": "Pure light is all colors.<br>Therefore, it has no hue.<br>Only when singleness is scattered<br>Does color appear.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When we see pure sunlight streaming down upon us, it is a pure radiance so bright that we can discern neither details nor hues from its source.  But when light strikes the gossamer wings of a dragonfly, or when it shines through misty rain, or even when it shines on the surface of our skin, it is polarized into millions of tiny rainbows.  The world explodes with color because all the myriad surfaces and textures fracture the light into innumerable, overlapping dimensions.</p><p>The same is true of <em>Tao</em>.  In its pure state, it embodies everything.  Thus, it shows nothing.  Just as pure light has all colors yet shows no color, so too is all existence initially latent and without differentiation in <em>Tao</em>.  Only when <em>Tao</em> enters our world does it explode into myriad things.  We say that everything owes its existence to <em>Tao</em>.  But really, these things are only refractions of the great <em>Tao</em>.</p><p>Colored light, when mixed together, becomes pure, bright light again.  That is why those who follow <em>Tao</em> constantly speak of returning.  They unify all areas of their lives and unify all distinctions into a whole.  There cannot be diversity within unity.  When our consciousness rejoins the true <em>Tao</em>, there is only brightness, and all color disappears.</p>",
        "thoughts": ""
      },
      {
        "topic": "Take Time To Understand People",
        "quotes": [
          {
            "quote": "Build solid relationships with your people and the results will follow.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>How are you doing when it comes to being relational?  Do you spend a lot of time and energy building solid relationships with your teammates, or are you so focused on results that you tend to overlook (or over-run) others as you work to achieve team goals?  If the latter is true of you, think about the wise words of George Kienzle and Edward Dare in <cite>Climbing the Executive Ladder</cite>:  <q>Few things will pay you bigger dividends than the time and trouble you take to understand people.  Almost nothing will add more to your stature as an executive and a person.  Nothing will give you greater satisfaction or bring you more happiness.</q>  Becoming a highly relational person brings individual and team success.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 19",
    "topics": [
      {
        "topic": "Wherever You Go, There Your Choice Is",
        "quotes": [
          {
            "quote": "Remember to conduct yourself in life as if at a banquet.  As something being passed around comes to you, reach out your hand and take a moderate helping.  Does it pass you by?  Don't stop it.  It hasn't yet come?  Don't burn in desire for it, but wait until it arrives in front of you.  Act this way with children, a spouse, toward position, with wealth—one day it will make you worthy of a banquet with the gods.",
            "author": "Epictetus",
            "source": "Discourses, 2.6.25"
          }
        ],
        "notes": "<p>The next time you see something you want, remember Epictetus's metaphor of life's banquet.  As you find yourself getting excited, ready to do anything and everything to get it—the equivalent of reaching across the table and grabbing a dish out of someone's hands—just remind yourself: that's bad manners and unnecessary.  Then wait patiently for your turn.</p><p>This metaphor has other interpretations too.  For instance, we might reflect that we're lucky to have been invited to such a wonderful feast (gratitude).  Or that we should take our time and savor the taste of what's on offer (enjoying the present moment) but that to stuff ourselves sick with food and drink serves no one, least of all our health (gluttony is a deadly sin, after all).  That at the end of the meal, it's rude not to help the host clean up and do the dishes (selflessness).  And finally, that next time, it's our turn to host and treat others just as we had been treated (charity).</p><p>Enjoy the meal!</p>",
        "thoughts": ""
      },
      {
        "topic": "Acing Hardships Head-On",
        "quotes": [
          {
            "quote": "Buddhism doesn't start with something exotic; it starts with the difficult realities of life, encapsulated in the idea of suffering.",
            "author": "Brad Warner",
            "source": "Hardcore Zen"
          }
        ],
        "notes": "Buddhism is grounded in the simple realities of human existence.  It begins by addressing the most fundamental and universal aspect of life—suffering.  This approach is meant to resonate with everyone, providing a relatable foundation for spiritual development.",
        "thoughts": ""
      },
      {
        "topic": "Initiative",
        "quotes": [
          {
            "quote": "Let us not be confused<br>With kaleidoscopic reality.<br>Using wisdom and courage to act,<br>Let us not add to the confusion.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The world is a storm of myriad realities, yet we cannot allow ourselves to be swept into the vortex.  To do so is to be lost and to lose the true center where all understanding will come.  We must act, but in the right way.</p><p>Action must be guided by both intellect and experience.  We learn from teachers, elders, and others.  But we must also test what we learn in the world.  It is not enough to simply meditate, and it is not enough just to have theoretical knowledge.  We need both in order to be wise.</p><p>Only when wisdom, courage, timing, and perseverance are combined can one have a sound basis for initiative.  The action must be complete.  It must burn clean; it cannot leave any bad ramifications or lingering traces.  An act that leaves destruction, resentment, or untidiness in its wake is a poor one.  Then initiative is insufficient, and <em>Tao</em> has not been attained.</p>",
        "thoughts": ""
      },
      {
        "topic": "The 30-Second Rule",
        "quotes": [
          {
            "quote": "Take thirty seconds with each person you meet today to add value to them.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When most people meet others, they search for ways to make themselves look good.  The key to the 30-Second Rule is reversing this practice.  When you make contact with people, instead of focusing on yourself, search for ways to make <em>them</em> look good.</p><p>Every day before I meet with people, I pause to think about something encouraging I can tell them.  What I say can be one of many things: I might thank them for something they've done for me or for a friend.  I might tell others about one of their accomplishments.  I might praise them for a personal quality they exhibit.  Or I might simply compliment their appearance.  The practice isn't complicated, but it does take some time, effort, and discipline.  The reward for practicing it is huge, because it really makes a positive impact on people.</p><p>—<cite>25 Ways to Win with People</cite>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 20",
    "topics": [
      {
        "topic": "Reignite Your Thoughts",
        "quotes": [
          {
            "quote": "Your principles can't be extinguished unless you snuff out the thoughts that feed them, for it's continually in your power to reignite new ones ...  It's possible to start living again!  See things anew as you once did—that is how to restart life!",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.2"
          }
        ],
        "notes": "<p>Have you had a bad couple of weeks?  Have you been drifting away from the principles and beliefs that you hold dear?  It's perfectly fine.  It happens to all of us.</p><p>In fact, it probably happened to Marcus—that may be why he scribbled this note to himself.  Perhaps he'd been dealing with difficult senators or having difficulties with his troubled son.  Perhaps in these scenarios he'd lost his temper, became depressed, or stopped checking in with himself.  Who wouldn't?</p><p>But the reminder here is that no matter what happens, no matter how disappointing our behavior has been in the past, the principles themselves remain unchanged.  We can return and embrace them at any moment.  What happened yesterday—what happened five minutes ago—is the past.  We can reignite and restart whenever we like.</p><p>Why not do it right now?</p>",
        "thoughts": ""
      },
      {
        "topic": "The Seed Of True Growth",
        "quotes": [
          {
            "quote": "Buddha's insight into suffering is direct and profound, opening the way for a realistic engagement with life's inevitable hardships.",
            "author": "Robert Thurman",
            "source": "In Inner Revolution"
          }
        ],
        "notes": "<p>The Buddha's teachings on suffering are not abstract but are meant to equip us with practical wisdom.  By understanding suffering profoundly, we can engage more effectively with life's challenges, transforming our experiences into opportunities for growth and liberation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Happiness",
        "quotes": [
          {
            "quote": "Let us not follow vulgar leaders<br>Who exploit the fear of death,<br>And promise the bliss of salvation.<br>If we are truly happy,<br>They will have nothing to offer.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Some leaders use threats to win adherents.  They invoke death to force good behavior and to herd people toward paradise.</p><p>Others woo with grand promises.  If you have no satisfaction, they offer bliss.  If you feel inadequate, they offer success.  If you are lonely, they offer acceptance.</p><p>But if we do not fear death and are happy, what will such leaders have to offer?  Spirituality is an organic part of daily life, not something dispensed by a professional.  True spirituality is liberation, not just from the delusions of reality but from the delusions of religion as well.  If we attain freedom from the fear of death, a sound way of health, and a path of understanding through life, there is happiness and no need for false leaders.</p>",
        "thoughts": ""
      },
      {
        "topic": "Develop Relationships Before Starting Out",
        "quotes": [
          {
            "quote": "Get out of your normal environment today with someone you lead.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Leaders often make the common mistake of trying to lead others before developing relationships with them.  As you prepare to develop other people, take time to get to know each other.  Ask them to share their story with you—their journey so far.  Find out what makes them tick, their strengths and weaknesses, their temperaments.  And spend some time with them outside the environment where you typically see them.  If you work together, then play sports together.  If you know each other from church, meet with them at their workplace.  If you go to school together, then spend some time together at home.  You can even use this principle with your family.  For example, if you spend time with your children outside your everyday environment, you'll learn a lot more about them.  It will develop your relationship in ways it hasn't before, and it will help you grow.</p><p><cite>—Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 21",
    "topics": [
      {
        "topic": "A Morning Ritual",
        "quotes": [
          {
            "quote": "Ask yourself the following first thing in the morning:<ul><li>What am I lacking in attaining freedom from passion?</li><li>What for tranquility?</li><li>What am I?  A mere body, estate-holder, or reputation?  None of these things.</li><li>What, then?  A rational being.</li> <li>What then is demanded of me?  Meditate on your actions.</li><li>How did I steer away from serenity?</li><li>What did I do that was unfriendly, unsocial, or uncaring?</li><li>What did I fail to do in all these things?</li></ul>",
            "author": "Epictetus",
            "source": "Discourses, 4.6.34-35"
          }
        ],
        "notes": "<p>Many successful people have a morning ritual.  For some, it's meditation.  For others, it's exercise.  For many, it's journaling—just a few pages where they write down their thoughts, fears, hopes.  In these cases, the point is not so much the activity itself as it is the ritualized reflection.  The idea is to take some time to look inward and examine.</p><p>Taking that time is what Stoics advocated more than almost anything else.  We don't know whether Marcus Aurelius wrote his <em>Meditations</em> in the morning or at night, but we know he carved out moments of quiet alone time—and that he wrote for himself, not for anyone else.  If you're looking for a place to start your own ritual, you could do worse than Marcus's example and Epictetus's checklist.</p><p>Every day, starting today, ask yourself these same tough questions.  Let philosophy and hard work guide you to better answers, one morning at a time, over the course of a life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Illusion Vs.  Reality",
        "quotes": [
          {
            "quote": "The acknowledgment of suffering is the first mark of spiritual and emotional maturity.  It is the ground from which genuine joy can eventually spring.",
            "author": "Norman Fischer",
            "source": "Taking Our Places"
          }
        ],
        "notes": "<p>Recognizing and accepting suffering is a sign of maturity.  This acknowledgment allow us to move beyond superficial happiness to discover a deeper, more enduring joy that arises from understanding and transcending life's inherent challenges.</p>",
        "thoughts": ""
      },
      {
        "topic": "Skills",
        "quotes": [
          {
            "quote": "Zither, chess, book, painting, sword.<br>These symbolize classical skills.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There was once a wanderer who cared nothing for fame.  Although he had many chances for position, he continued to search for teachers who could help him master five things: zither, chess, book, painting, and sword.</p><p>The zither gave him music, which expressed the soul.  Chess cultivated strategy and a response to the actions of another.  Books gave him academic education.  Painting was the exercise of beauty and sensitivity.  Sword was a means for health and defense.</p><p>One day a little boy asked the wanderer what he would do if he lost his five things.  At first the wanderer was frightened, but he soon realized that his zither could not play itself, the chess board was nothing without players, a book needed a reader, brush and ink could not move on their own accord, and a sword could not be unsheathed without a hand.  He realized that his cultivation was not merely for the acquisition of skills.  It was a path to the innermost part of his being.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Value Of Time",
        "quotes": [
          {
            "quote": "Are the tasks on today's agenda worthy of your life?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Time is valuable.  Psychiatrist and author M.  Scott Peck said, <q>Until you value yourself, you won't value your time.  Until you value your time, you will not do anything with it.</q></p><p>In <cite>What to Do Between Birth and Death</cite>, Charles Spezzano says that people don't pay for things with money; they pay for them with time.  If you say to yourself, <em>In five years, I'll have put enough away to buy that vacation house</em>, then what you are really saying is that the house will cost you five years—one-twelfth of your adult life.  <q>The phrase <em>spending your time</em> is not a metaphor,</q> said Spezzano.  <q>It's how life works.</q></p><p>Instead of thinking about what you do and what you buy in terms of money, think about them in terms of time.  Think about it.  What is worth spending your life on?  Seeing your work in that light just may change the way you manage your time.</p><p><cite>—The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 22",
    "topics": [
      {
        "topic": "The Day In Review",
        "quotes": [
          {
            "quote": "I will keep constant watch over myself and—most usefully—will put each day up for review.  For this is what makes us evil—that none of us looks back upon our own lives.  We reflect upon only that which we are about to do.  And yet our plans for the future descend from the past.",
            "author": "Seneca",
            "source": "Moral Letters, 83.2"
          }
        ],
        "notes": "<p>In a letter to his older brother Novatus, Seneca describes a beneficial exercise he borrowed from another prominent philosopher.  At the end of each day he would ask himself variations of the following questions: <em>What bad habit did I curb today?  How am I better?  Were my actions just?  How can I improve?</em></p><p>At the beginning or end of each day, the Stoic sits down with his journal and reviews: what he did, what he thought, what could be improved.  It's for this reason that Marcus Aurelius's <em>Meditations</em> is a somewhat inscrutable book—it was for personal clarity and not public benefit.  Writing down Stoic exercises was and is also a form of practicing them, just as repeating a prayer or hymn might be.</p><p>Keep your own journal, whether it's saved on a computer or in a little notebook.  Take time to consciously recall the events of the previous day.  Be unflinching in your assessments.  Notice what contributed to your happiness and what detracted from it.  Write down what you'd like to work on or quotes that you like.  By making the effort to record such thoughts, you're less likely to forget them.  An added bonus: you'll have a running tally to track your progress too.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Pain Paradox",
        "quotes": [
          {
            "quote": "The human condition is to want more.  We strive for happiness, but when we get it, it never seems to be enough, and it always ends.",
            "author": "Ajahn Brahm",
            "source": "Mindfulness, Bliss, and Beyond"
          }
        ],
        "notes": "<p>This quote highlights the endless cycle of desire and dissatisfaction that characterizes human life.  By recognizing this pattern, we can begin to let go of unrealistic expectations and find contentment in what is present.</p>",
        "thoughts": "We still need <em>Right Effort</em>.  Strive without ego, but with clarity and contentment.  Recognize the balance between acceptance and aspiration.  Try wisely.  Try without illusion.  Try without chaining your peace to the outcome."
      },
      {
        "topic": "Communication",
        "quotes": [
          {
            "quote": "Movement, objects, speech, and words:<br>We communicate through gross symbols.<br>We call them <q>objective,</q><br>But we cannot escape our point of view.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>We cannot communicate directly from mind to mind, and so misinterpretation is a perennial problem.  Motions, signs, talking, and the written word are all encumbered by miscommunication.  A dozen eyewitnesses to the same event cannot agree on a single account.  We may each see something different in cards set up by a circus magician.  Therefore, we are forever imprisoned by our subjectivity.</p><p>Followers of <em>Tao</em> assert that we know no absolute truth in the world, only varying degrees of ambiguity.  Some call this poetry; some call this art.  The fact remains that all communication is relative.  Those who follow <em>Tao</em> are practical.  They know that words are imperfect and therefore give them limited importance: The symbol is not the same as the reality.</p>",
        "thoughts": ""
      },
      {
        "topic": "Enlarging Others",
        "quotes": [
          {
            "quote": "Take some specific steps to enlarge your teammates today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Team members always love and admire a player who is able to help them go to another level, someone who enlarges them and empowers them to be successful.</p><p>Players who enlarge their teammates have several things in common:</p><p><em>1.  Enlargers Value Their Teammates:</em>  Your teammates can tell whether you believe in them.  People's performances usually reflect the expectations of those they respect.</p><p><em>2.  Enlargers Value What Their Teammates Value:</em>  Players who enlarge others listen to discover what their teammates talk about and watch to see what they spend their money on.  That kind of knowledge, along with a desire to relate to their fellow players, creates a strong connection.</p><p><em>3.  Enlargers Add Value to Their Teammates:</em>  Adding value is really the essence of enlarging others.  It's finding ways to help others improve their abilities and attitudes.  An enlarger looks for the gifts, talents, and uniqueness in other people, and then helps them to increase those abilities.</p><p><em>4.  Enlargers Make Themselves More Valuable:</em>  Enlargers work to make themselves better, not only because it benefits them personally, but also because it helps them to help others.  If you want to increase the ability of a teammate, make yourself better.</p><p>How do your teammates see you?  Are you an enlarger?  Do you make them better than they are alone through your inspiration and contribution?  Do you know what your teammates value?  Do you capitalize on those things by adding value to them in those areas?</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 23",
    "topics": [
      {
        "topic": "The Truth About Money",
        "quotes": [
          {
            "quote": "Let's pass over to the really rich—how often the occasions they look just like the poor!  When they travel abroad they must restrict their baggage, and when haste is necessary, they dismiss their entourage.  And those who are in the army, how few of their possessions they get to keep ...",
            "author": "Seneca",
            "source": "On Consolation To Helvia, 12.1.b-2"
          }
        ],
        "notes": "<p>The author F.  Scott Fitzgerald, who often glamorized the lifestyles of the rich and famous in books like <cite>The Great Gatsby</cite>, opens one of his short stories with the now classic lines: <q>Let me tell you about the very rich.  They are different from you and me.</q>  A few years after this story was published, his friend Ernest Hemingway teased Fitzgerald by writing, <q>Yes, they have more money.</q></p><p>That's what Seneca is reminding us.  As someone who was one of the richest men in Rome, he knew firsthand that money only marginally changes life.  It doesn't solve the problems that people without it seem to think it will.  In fact, no material possession will.  External things can't fix internal issues.</p><p>We constantly forget this—and it causes us so much confusion and pain.  As Hemingway would later write of Fitzgerald, <q>He thought [the rich] were a special glamorous race and when he found they weren't, it wrecked him as much as any other thing that wrecked him.</q>  Without a change the same will be true for us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Taking Things Personally",
        "quotes": [
          {
            "quote": "All form, therefore, is like a dream, And who will be attached to it, who thus investigates?  The body, in this way, has no existence; What, therefore, is male and what is female?",
            "author": "Shantideva",
            "source": "The Bodhicharyavatara (A Guide to the Bodhisattva's Way of Life)"
          }
        ],
        "notes": "<p>This metaphorical description from Buddhist teachings encourages reflection on the insubstantial nature of all experiences.  Understanding the impermanence and emptiness of phenomena helps in reducing attachment and suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "Renewal",
        "quotes": [
          {
            "quote": "City on a hill.<br>Untouched land beyond.<br>A fallow field is<br>The secret of fertility.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In the city, we see millions of lives represented in the windows, doors, and many floors of each building.  We see excitement and the glories of civilization.  But no matter how much those who follow <em>Tao</em> may enjoy the city, they understand the need for retreat into nature.</p><p>In the countryside, they find the nurturing quality of freedom.  They can see new possibilities and can wander without societal impositions.  In the past, pioneers saw the open prairies and were filled with dreams of dominating nature with the glories of man.  Now we know different: We must preserve the wilds for our very survival.</p><p>We need time to lie fallow.  If you cannot leave the city, just find a little quiet time each day to withdraw into yourself.  If you are able to walk in fields or in the hills, so much the better.  But none of us can maintain the fertility of our beings without renewal.</p>",
        "thoughts": ""
      },
      {
        "topic": "Overcoming Barriers To Empowerment",
        "quotes": [
          {
            "quote": "Are you willing to give your power away to enlarge others?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Leading well is not about enriching yourself—it's about empowering others.  Only empowered people can reach their potential.  When a leader can't or won't empower others, he creates barriers within the organization that followers cannot overcome.</p><p>When leaders fail to empower others, it is usually due to three main reasons:</p><ol><li>Desire for Job Security</li><li>Resistance to Change</li><li>Lack of Self-Worth</li></ol><p>The truth is that empowerment is powerful—not only for the person being developed, but also for the mentor.  Enlarging others makes you larger.  It is an impact you can experience as a leader as long as you are willing to believe in people and give your power away.</p><p><cite>—The 21 Irrefutable Laws of Leadership</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 24",
    "topics": [
      {
        "topic": "Push For Deep Understanding",
        "quotes": [
          {
            "quote": "From Rusticus ...  I learned to read carefully and not be satisfied with a rough understanding of the whole, and not to agree too quickly with those who have a lot to say about something.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 1.7.3"
          }
        ],
        "notes": "<p>The first book of Marcus Aurelius's <em>Meditations</em> begins with a catalog of gratitude.  He thanks, one by one, the leading influences in his life.  One of the people he thanks is Quintus Junius Rusticus, a teacher who developed in his student a love of deep clarity and understanding—a desire to not just stop at the surface when it comes to learning.</p><p>It was also from Rusticus that Marcus was introduced to Epictetus.  In fact, Rusticus loaned Marcus his personal copy of Epictetus's lectures.  Marcus clearly wasn't satisfied with just getting the gist of these lectures and didn't simply accept them on his teacher's recommendation.  Paul Johnson once joked that Edmund Wilson read books <q>as though the author was on trial for his life.</q>  That's how Marcus read Epictetus—and when the lessons passed muster, he <em>absorbed</em> them.  They became part of his DNA as a human being.  He quoted them at length over the course of his life, finding real clarity and strength in words, even amid the immense luxury and power he would come to possess.</p><p>That's the kind of deep reading and study we need to cultivate as well, which is why we're reading just one page a day instead of a chapter at a time.  So we can take the time to read attentively and deeply.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Pain Paradox",
        "quotes": [
          {
            "quote": "The basic problem is not that we have pain; it's that we resist having pain.",
            "author": "Jack Kornfield",
            "source": "The Path of Insight Meditation"
          }
        ],
        "notes": "<p>Resistance to pain amplifies suffering, binding us to its relentless grip.  By accepting pain as an inevitable thread in life's rich tapestry, we can loosen its hold and reduce the suffering born from our struggle against it.  Embracing this reality allows us to find clarity amidst discomfort, fostering the resilience needed to not merely endure pain, but to transform it into a source of wisdom and strength.</p>",
        "thoughts": ""
      },
      {
        "topic": "Laughter",
        "quotes": [
          {
            "quote": "Hilly village lanes,<br>Whitewashed sunlit walls.<br>Cerulean sea.<br>The laughter of children.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>No matter where in the world you go, no matter how many languages are spoken, and no matter how many times cultures and governments clash, the laughter of children is universally uplifting.  The mirth of adults can be variously jealous, insecure, sadistic, cruel, or absurd, but the sound of playing children evokes the ideal of a simple and pure act.  There are no concepts, no ideologies—only the innocent pleasure of life.</p><p>We as adults dwell upon our grizzled complexities, our existential anxieties, and our preoccupations with responsibilities.  We hear the merriment of children and may sigh over our lost childhoods.  Although we can no longer fit into our old clothes and become young again, we can take comfort in the optimism of children.  Their rejoicing can gladden us all.</p><p>We are too often in a rush for our children to grow up.  It is far better for them to fully live each year of their lives.  Let them learn what is appropriate to their time, let them play.  And when their childhood is spent at adolescence, help them in a gentle transition.  Then their laughter will continue to resonate with cheer and hope for us all.</p>",
        "thoughts": ""
      },
      {
        "topic": "Leaders Cannot Rise Above The Limitations Of Their Character",
        "quotes": [
          {
            "quote": "Examine the condition of your character, and make sure your words and actions match up.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Have you ever seen highly talented people suddenly fall apart when they achieved a certain level of success?  Steven Berglas, a psychologist at Harvard Medical School and author of <cite>The Success Syndrome</cite>, says that people who achieve great heights but lack the bedrock character to sustain them through the stress are headed for disaster.  He believes they are destined for one or more of the four A's: <em>arrogance</em>, painful feelings of <em>aloneness</em>, destructive <em>adventure-seeking</em>, or <em>adultery</em>.  Each is a terrible price to pay for weak character.</p><p>If you've found yourself being sucked in by one of the four A's that Berglas identifies, do what you must to step away from some of the stress of your success, and seek professional help.  Don't think that the valley you're in will pass with time, more money, or increased prestige.  Unaddressed cracks in character only get deeper and more destructive with time.</p><p>If you're not struggling in any of these four areas, you should still examine the condition of your character.  Ask yourself whether your words and actions match—all the time.  When you say you'll finish an assignment, do you always follow through?  If you tell your children that you'll make it to their recital or ball game, are you there for it?</p><p>As you lead others, recognize that your character is your most important asset.  G.  Alan Bernard, president of Mid Park, Inc., stated, <q>The respect that leadership must have requires that one's ethics be without question.  A leader not only stays above the line between right and wrong, he stays well clear of the <q>gray areas.</q></q></p><p><cite>—The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 25",
    "topics": [
      {
        "topic": "The Only Prize",
        "quotes": [
          {
            "quote": "What's left to be prized?  This, I think—to limit our action or inaction to only what's in keeping with the needs of our own preparation ...  it's what the exertions of education and teaching are all about—here is the thing to be prized!  If you hold this firmly, you'll stop trying to get yourself all the other things ...  If you don't, you won't be free, self-sufficient, or liberated from passion, but necessarily full of envy, jealousy, and suspicion for any who have the power to take them, and you'll plot against those who do have what you prize ...  But by having some self-respect for your own mind and prizing it, you will please yourself and be in better harmony with your fellow human beings, and more in tune with the gods—praising everything they have set in order and allotted you.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.16.2b-4a"
          }
        ],
        "notes": "<p>Warren Buffett, whose net worth is approximately $65 billion, lives in the same house he bought in 1958 for $31,500.  John Urschel, a lineman for the Baltimore Ravens, makes millions but manages to live on $25,000 a year.  San Antonio Spurs star Kawhi Leonard gets around in the 1997 Chevy Tahoe he's had since he was a teenager, even with a contract worth some $94 million.  Why?  It's not because these men are cheap.  It's because the things <em>that matter to them are cheap</em>.  </p><p>Neither Buffett nor Urschel nor Leonard ended up this way by accident.  Their lifestyle is the result of prioritizing.  They cultivate interests that are decidedly below their financial means, and as a result, <em>any</em> income would allow them freedom to pursue the things they most care about.  It just happens that they became wealthy beyond any expectation.  This kind of clarity—about what they love most in the world—means they can enjoy their lives.  It means they'd still be happy even if the markets were to turn or their careers were cut short by injury.  </p><p>The more things we desire and the more we have to do to earn or attain those achievements, the less we actually enjoy our lives—and the less free we are.</p>",
        "thoughts": ""
      },
      {
        "topic": "Source Of Your Suffering",
        "quotes": [
          {
            "quote": "Much of our suffering comes from the fact that we take things too personally.",
            "author": "Dalai Lama XIV",
            "source": "The Art of Happiness"
          }
        ],
        "notes": "<p>When we personalize every experience, weaving it tightly into the fabric of our identity, we become vulnerable to unnecessary suffering.  By cultivating a degree of detachment from our experiences, recognizing them as transient event rather than defining reflections of our self, we can navigate life's inevitable ups and downs with less distress and greater equanimity.</p>",
        "thoughts": ""
      },
      {
        "topic": "Uselessness",
        "quotes": [
          {
            "quote": "An ancient gnarled tree:<br>Too fibrous for a logger's saw,<br>Too twisted to fit a carpenter's square,<br>Outlasts the whole forest.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Loggers delight in straight-grained, strong, fragrant wood.  If the timber is too difficult to cut, too twisted to be made straight, too foul-odored for cabinets, and too spongy for firewood, it is left alone.  Useful trees are cut down.  Useless ones survive.</p><p>The same is true of people.  The strong are conscripted.  The beautiful are exploited.  Those who are too plain to be noticed are the ones who survive.  They are left alone and safe.</p><p>But what if we ourselves are among such plain persons?  Though others may neglect us, we should not think of ourselves as being without value.  We must not accept the judgment of others as the measure of our own self-worth.  Instead, we should live our lives in simplicity.  Surely, we will have flaws, but we must take stock in them according to our own judgment and then use them as a measure of self-improvement.  Since we need not expend energy in putting on airs or maintaining a position, we are actually free to cultivate the best parts of our personalities.  Thus, to be considered useless is not a reason for despair, but an opportunity.  It is the chance to live without interference and to express one's own individuality.</p>",
        "thoughts": ""
      },
      {
        "topic": "Vision",
        "quotes": [
          {
            "quote": "Find your vision, and let it guide you in all that you do.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>One of the great dreamers of the twentieth century was Walt Disney.  Back when Walt's two daughters were young, he used to take them to an amusement park in the Los Angeles area on Saturday mornings.  Walt was especially captivated by the carousel.  As he approached it, he saw a blur of bright images racing around to the tune of energetic calliope music.  But when he got closer and the carousel stopped, he could see that his eye had been fooled.  He observed shabby horses with cracked and chipped paint.  And he noticed that only the horses on the outside row moved up and down.  The others stood lifeless, bolted to the floor.  The cartoonist's disappointment inspired him with a grand vision: Disneyland and Walt Disney World.</p><p>Vision is everything for a leader.  It is utterly indispensable.  Why?  Because vision leads the leader.  It paints the target.  It sparks and fuels the fire within, and draws him forward.  It is also the fire lighter for others who follow that leader.  Show me a leader without vision, and I'll show you someone who isn't going anywhere.  At best, he is traveling in circles.</p><p>If you lack vision, look inside yourself.  Draw on your natural gifts and desires.  Look to your calling if you have one.  And if you still don't sense a vision of your own, then consider hooking up with a leader whose vision resonates with you.  Become his partner.  That's what Walt Disney's brother, Roy, did.  He was a good businessman and leader who could make things happen, but Walt was the one who provided the vision.  Together, they made an incredible team.</p><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 26",
    "topics": [
      {
        "topic": "The Power Of A Mantra",
        "quotes": [
          {
            "quote": "Erase the false impressions from your mind by constantly saying to yourself, I have it in my soul to keep out any evil, desire or any kind of disturbance—instead, seeing the true nature of things, I will give them only their due.  Always remember this power that nature gave you.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.29"
          }
        ],
        "notes": "<p>Anyone who has taken a yoga class or been exposed to Hindu or Buddhist thought has probably heard of the concept of a mantra.  In Sanskrit, it means <q>sacred utterance</q>—essentially a word, a phrase, a thought, even a sound—intended to provide clarity or spiritual guidance.  A mantra can be especially helpful in the meditative process because it allows us to block out everything else while we focus.</p><p>It's fitting, then, that Marcus Aurelius would suggest this Stoic mantra—a reminder or watch phrase to use when we feel false impressions, distractions, or the crush of everyday life upon us.  It says, essentially, <q>I have the power within me to keep that out.  I can see the truth.</q></p><p>Change the wording as you like.  That part is up to you.  But have a mantra and use it to find the clarity you crave.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Path To True Joy",
        "quotes": [
          {
            "quote": "If you want to be happy, you have to let go of everything.  You have to let go of wanting to be happy.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>This paradoxical wisdom suggests that our relentless pursuit of happiness can become the very obstacle that prevents it.  It's in the act of letting go of this forced pursuit, of relinquishing our rigid expectations of how happiness should manifest, that we create the space for it to arise naturally, unburdened by the weight of our own desires and demands.</p>",
        "thoughts": ""
      },
      {
        "topic": "Adoration",
        "quotes": [
          {
            "quote": "Images on the altar,<br>Or imagined within:<br>We pray to them,<br>But do they answer?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The wise tell us how important adoration is.  So we kneel before altars, give offerings, and make sacrifices.  In our meditations, we are taught to see gods within ourselves and to make supplications to receive power and knowledge.  This we do with great sincerity, until the masters say that there are no gods.  Then we are confused.</p><p>The statue on the altar is mere wood and gold leaf, but our need to be reverent is real.  The god within may be nothing but visualization, but our need for concentration is real.  The attributes of heaven are utopian conjectures, but the essence of these parables is real.  The gods, then, represent certain philosophies and extraordinary facets of the human mind.  When we devote ourselves to gods, we establish communion with these deeper aspects.</p><p>The thought that we are worshiping symbolism may make us uncomfortable.  We are educated to accept only the tangible, the scientific, and the material.  We doubt the efficacy of adoring the merely symbolic, and we are confused when such reverence brings about genuine personal transformation.  But worship does affect our feelings and thoughts.  When the wise say that there are no gods, they mean that the key to understanding all things is within ourselves.  External worship is merely a means to point within to the true source of salvation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Everyone Influences Someone",
        "quotes": [
          {
            "quote": "Who is the real leader in your workplace, and how will that impact the way you lead?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Sociologists tell us that even the most introverted individual will influence ten thousand other people during his or her lifetime!  This amazing statistic was shared with me by my associate Tim Elmore.  Tim and I concluded that each one of us is both influencing and being influenced by others.  That means that all of us are leading in some areas, while in other areas we are being led.  No one is excluded from being a leader or a follower.  Realizing your potential as a leader is your responsibility.  In any given situation with any given group, there is a prominent influencer.</p><p>The prominent leader of any group is quite easily discovered.  Just observe the people as they gather.  If an issue is to be decided, who is the person whose opinion seems most valuable?  Who is the one others watch the most when the issue is being discussed?  Who is the one with whom people quickly agree?  Most importantly, who is the one the others follow?  Answers to these questions will help you discern who the real leader is in a particular group.</p><p>—<cite>Developing the Leader Within You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 27",
    "topics": [
      {
        "topic": "The Three Areas Of Training",
        "quotes": [
          {
            "quote": "There are three areas in which the person who would be wise and good must be trained.  The first has to do with desires and aversions—that a person may never miss the mark in desires nor fall into what repels them.  The second has to do with impulses to act and not to act—and more broadly, with duty—that a person may act deliberately for good reasons and not carelessly.  The third has to do with freedom from deception and composure and the whole area of judgment, the assent our mind gives to its perceptions.  Of these areas, the chief and most urgent is the first which has to do with the passions, for strong emotions arise only when we fail in our desires and aversions.",
            "author": "Epictetus",
            "source": "Discourses, 3.2.1-3a"
          }
        ],
        "notes": "<p>Today, let's focus on the three areas of training that Epictetus laid out for us.</p><p>First, we must consider what we should desire and what we should be averse to.  Why?  So that we want what is good and avoid what is bad.  It's not enough to just listen to your body—because our attractions often lead us astray.</p><p>Next, we must examine our impulses to act—that is, our <em>motivations</em>.  Are we doing things for the right reasons?  Or do we act because we haven't stopped to think?  Or do we believe that we <em>have</em> to do something?</p><p>Finally, there is our judgment.  Our ability to see things clearly and properly comes when we use our great gift from nature: <em>reason</em>.</p><p>These are three distinct areas of training, but in practice they are inextricably intertwined.  Our judgment affects what we desire, our desires affect how we act, just as our judgment determines how we act.  But we can't just expect this to happen.  We must put real thought and energy into each area of our lives.  If we do, we'll find real clarity and success.</p>",
        "thoughts": ""
      },
      {
        "topic": "Befriending Discomfort",
        "quotes": [
          {
            "quote": "We can learn to be with the discomfort of life, the uncertainty, the pain, the fear, without freaking out.",
            "author": "Sharon Salzberg",
            "source": "Lovingkindness and the Roots of Happiness"
          }
        ],
        "notes": "<p>Buddhist practice cultivates a cornerstone skill: the ability to remain centered and composed in the face of life's inevitable challenges.  This inner steadiness isn't simply about gritting one's teeth and bearing hardship.  It's about nurturing a deep well of calmness that allows us to navigate life's uncertainties with grace, wisdom, and a clear mind.  By remaining unruffled by external circumstances, we gain the perspective to make wise decisions and respond to difficulties with skillful action, rather than impulsive reaction.</p>",
        "thoughts": ""
      },
      {
        "topic": "Feasting",
        "quotes": [
          {
            "quote": "Feasting is the flame in mid-winter<br>That kindles the fire of friendship<br>And strengthens the community.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In the past, feasting was a way to bind the community closer together.  The same is true today.  Whether they are cultural gatherings, times of group worship, or even special dinners with friends, we all need moments where we come together and reaffirm the importance of our group.</p><p>The cheer that we feel is essential both to the collective and the individuals involved.  The affirmation of the group should not be a sublimation of the individual but rather a framework for involvement.  A good gathering requires participation—the efforts of organization, work, and attendance—and in turn gives back sustenance for body and soul, a sense of belonging, and the accomplishment of something that could not be done by the individuals alone.</p><p>Like any other human endeavor, the feast is vulnerable to manipulation and politics, the selfish maneuvering of cynical individuals.  This is difficult to avoid completely, for it is impossible for any group to truly be united.  The only way to mitigate this is for the collective to keep its intentions strictly on its purpose, to select its leaders wisely, and for those leaders to be as enlightened as possible.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Heart Of Leadership",
        "quotes": [
          {
            "quote": "Examine your motivation for leading others today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Where is your heart when it comes to serving others?  Do you desire to become a leader for the perks and benefits?  Or are you motivated by a desire to help others?</p><p>If you really want to become the kind of leader that people want to follow, you will have to settle the issue of servanthood.  If your attitude is to be served rather than to serve, you may be headed for trouble.  If this is an issue in your life, then heed this advice:</p><ul><li>Stop lording over people, and start listening to them.</li><li>Stop role-playing for advancement, and start risking for others' benefit.</li><li>Stop seeking your own way, and start serving others.</li></ul><p>It is true that those who would be great must be like the least and the servant of all.</p><p>Albert Schweitzer wisely stated, <q>I don't know what your destiny will be, but one thing I know: The ones among you who will be really happy are those who have sought and found how to serve.</q>  If you want to lead on the highest level, be willing to serve on the lowest.</p><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 28",
    "topics": [
      {
        "topic": "Watching The Wise",
        "quotes": [
          {
            "quote": "Take a good hard look at people's ruling principle, especially of the wise, what they run away from and what they seek out.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.38"
          }
        ],
        "notes": "<p>Seneca has said, <q>Without a ruler to do it against, you can't make crooked straight.</q>  That is the role of wise people in our lives—to serve as model and inspiration.  To bounce our ideas off and test our presumptions.</p><p>Who that person will be for you is up to you.  Perhaps it's your father or your mother, or both combined.  Maybe it's a philosopher or a writer or a thinker.  Perhaps WWBD (What would Buddha do?) or WWLD (What would Laozi do?) is the right model for you.</p><p>But pick someone, watch what they do (and what they <em>don't</em> do), and do your best to do the same ...  so you can be that wise person for others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Beyond The Senses",
        "quotes": [
          {
            "quote": "The mind cannot find lasting happiness in any object of the senses.",
            "author": "Yuttadhammo Bhikkhu",
            "source": ""
          }
        ],
        "notes": "<p>The fleeting nature of sensory pleasures offers a profound teaching: the relentless pursuit of external stimuli can never lead to lasting happiness.  True contentment, the kind that endures even amidst life's inevitable changes, springs from a cultivated inner peace and the clarity of spiritual insight.  It's by turning our gaze inward that we discover a wellspring of fulfillment that transcends the temporary highs and inevitable disappointments of the material world.</p>",
        "thoughts": ""
      },
      {
        "topic": "Accountability",
        "quotes": [
          {
            "quote": "A father without a father<br>Has difficulty balancing.<br>A master without a master<br>Is dangerous.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>We look up to our parents, our teachers, and our leaders with trust and expectation.  Their responsibility is to guide us, educate us, and even make judgments on our behalf when circumstances are uncertain.  Ultimately, they are to bring us to the point where we can make our own decisions, based on the wisdom that they have helped us develop.</p><p>But the potential for abuse and mistakes is very great.  What person can be right all the time?  A simple lapse at the wrong time can cause confusion, psychological scars, and even great disaster.  Harsh words during a child's impressionable moments can engender years of problems.  That is why we need a parent for the parent, a master for the master, and leaders for the leaders.  This prevents errors of power.  In the past, even kings had wise advisers.  Every person who would be a leader should have such assistance.</p><p>Eventually, someone has to be at the top.  And who will that person turn to?  Let us invoke not deities but pragmatism.  It is experience that is the ultimate teacher.  That is why wise people travel constantly and test themselves against the flux of circumstance.  It is only in this way that they can truly confirm their thoughts and compensate for their shortcomings.</p>",
        "thoughts": ""
      },
      {
        "topic": "Act Yourself Into Changing",
        "quotes": [
          {
            "quote": "Act your way into feeling positive today as you face adversity.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The quality of your life and the duration of your success depend on your attitude, and you are the only person in this world with the power to make it better.  Dr.  William Glasser maintained, <q>If you want to change attitudes, start with a change in behavior.  In other words, begin to act the part, as well as you can, of the person you would rather be, the person you most want to become.  Gradually, the old, fearful person will fade away.</q></p><p>Change requires action.  Most people wait until they feel like it to change their attitudes.  But that only causes them to keep waiting because they have the whole process backward.  If you wait until you <em>feel like it</em> to try to change your attitude, you will never change.  You have to <em>act</em> yourself into changing.</p><blockquote><p>An act of your will<br>Will lead you to action;<br>And your positive action<br>Will lead to a positive attitude!</p></blockquote><p>According to Henry Ford, <q>Whether you think you can or think you can't—you are right.</q>  The mind, more than anything else, determines how far you can go on the success journey.</p><p>—<cite>Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 29",
    "topics": [
      {
        "topic": "Keep It Simple",
        "quotes": [
          {
            "quote": "At every moment keep a sturdy mind on the task at hand, as a Roman and human being, doing it with strict and simple dignity, affection, freedom, and justice—giving yourself a break from all other considerations.  You can do this if you approach each task as if it is your last, giving up every distraction, emotional subversion of reason, and all drama, vanity, and complaint over your fair share.  You can see how mastery over a few things makes it possible to live an abundant and devout life—for, if you keep watch over things, the gods won't ask for more.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 2.5"
          }
        ],
        "notes": "<p>Each day presents the chance to overthink things.  What should I wear?  Do they like me?  Am I eating well enough?  What's next for me in life?  Is my boss happy with my work?</p><p>Today, let's focus just on what's in front of us.  We'll follow the dictum that President Truman gave, <q>Do your job and do it right.</q>  Like a Roman, like a good soldier, like a master of our craft.  We don't need to get lost in a thousand other distractions or in other people's business.</p><p>Marcus says to approach each task as if it were your last, because it very well could be.  And even if it isn't, botching what's right in front of you doesn't help anything.  Find clarity in the simplicity of doing your job today.</p>",
        "thoughts": "<blockquote>Nobody cares.  Work harder.  <br><cite>—Bill Burr</cite></blockquote><blockquote>The best advice I've ever received: Keep your head down, do your job, and shut up.  <br><cite>—Ricky Gervais</cite></blockquote>"
      },
      {
        "topic": "Is There Suffering Now?",
        "quotes": [
          {
            "quote": "Pay attention to the present moment.  Is there anything wrong right now?  Is there any suffering right now?",
            "author": "Joseph Goldstein",
            "source": "Mindfulness: A Practical Guide"
          }
        ],
        "notes": "<p>This question isn't about denying challenges or ignoring real pain.  It's a call to presence.  So often, our suffering spirals out of control because we get lost in worries about the future or dragged down by regrets about the past.  In this very moment, is there truly something wrong?  Can you find a breath of peace, a glimmer of stillness?  This present moment holds possibilities untouched by future anxieties or past wounds.  Learning to inhabit this present moment is the root of deep serenity.</p>",
        "thoughts": ""
      },
      {
        "topic": "Scars",
        "quotes": [
          {
            "quote": "Markings in dry clay disappear<br>Only when the clay is soft again.<br>Scars upon the self disappear.<br>Only when one becomes soft within.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Throughout our life, but especially during our youth, many scars are inflicted upon us.  Some of them are the results of violence, abuse, rape, or warfare.  Others arise from bad education.  A few come from humiliation and failure.  Others are caused by our own misadventures.  Unless we recover from these injuries, the scars mar us forever.</p><p>Classical scriptures urge us to withdraw from our own lusts and sins.  But scars that have happened through no fault of our own may also bar us from spiritual success.  Unfortunately, it is often easier to give up a bad habit than to recover from the incisions of others' violence.  The only way is through self-cultivation.  Doctors and priests can only do so much.  The true course of healing is up to us alone.  To do this, we must acquire many methods, travel widely, struggle to overcome our personal phobias, and perhaps most importantly of all, try to acquire as few new problems as possible.  Unless we do, each one of them will bar us from true communion with <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Let People you Need Them",
        "quotes": [
          {
            "quote": "Take time today to let the people around you know how much you need and appreciate them.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The day that I realized I could no longer do everything myself was a major step in my development as a person and a leader.  I've always had vision, plenty of ideas, and vast amounts of energy.  But when the vision gets bigger than you, you really only have two choices: give up on the vision or get help.  I chose the latter.</p><p>No matter how successful you are, no matter how important or accomplished, you <em>do</em> need people.  That's why you need to let them know that you cannot win without them.  President Woodrow Wilson said, <q>We should not only use all the brains we have—but all that we can borrow.</q>  Why stop with just their brains?  Enlist people's hands and hearts too!  Another president, Lyndon Johnson, was right when he said, <q>There are no problems we cannot solve together, and very few that we can solve by ourselves.</q></p><p>—<cite>25 Ways to Win with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 30",
    "topics": [
      {
        "topic": "You Don't Have To Stay On Top Of Everything",
        "quotes": [
          {
            "quote": "If you wish to improve, be content to appear clueless or stupid in extraneous matters—don't wish to seem knowledgeable.  And if some regard you as important, distrust yourself.",
            "author": "Epictetus",
            "source": "Enchiridion, 13a"
          }
        ],
        "notes": "<p>One of the most powerful things you can do as a human being in our hyperconnected, 24/7 media world is say: <q>I don't know.</q>  Or, more provocatively: <q>I don't care.</q>  Most of society seems to have taken it as a commandment that one must know about every single current event, watch every episode of every critically acclaimed television series, follow the news religiously, and present themselves to others as an informed and worldly individual.</p><p>But where is the evidence that this is actually necessary?  Is the obligation enforced by the police?  Or is it that you're just afraid of seeming silly at a dinner party?  Yes, you owe it to your country and your family to know generally about events that may directly affect them, but that's about all.</p><p>How much more time, energy, and pure brainpower would you have available if you drastically cut your media consumption?  How much more rested and present would you feel if you were no longer excited and outraged by every scandal, breaking story, and potential crisis (many of which never come to pass anyway)?</p>",
        "thoughts": ""
      },
      {
        "topic": "Opening To Pain, Opening To Life",
        "quotes": [
          {
            "quote": "When we open our hearts to the pain of the world, we open our hearts to the totality of life, and that includes joy.",
            "author": "Sogyal Rinpoche",
            "source": "The Tibetan Book of Living and Dying"
          }
        ],
        "notes": "<p>Many of us recoil from suffering, fearing vulnerability.  But to truly live, we cannot shut out pain, whether our own or that of others.  Opening to this pain does not mean drowning in it.  Instead, it's about cultivating a compassionate, open heart that holds both joy and sorrow.  Our ability to feel deeply is what allows us to experience the full depth of love, gratitude, and the boundless beauty of life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Lovemaking",
        "quotes": [
          {
            "quote": "Nocturnal downpour<br>Wakes the lovers,<br>Flood the valley.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Making love is natural.  Why be ashamed of it?</p><p>That seems simple, but it is actually a great challenge in these complex times.  Too many other layers of meaning have been imposed upon sex.  Religions straightjacket it, ascetics deny it, romantics glorify it, intellectuals theorize about it, obsessives pervert it.  These actions have nothing to do with lovemaking.  They come from fanaticism and compulsive behavior.  Can we actually master the challenge of having lovemaking be open and healthy?</p><p>Sex should not be used as leverage, manipulation, selfishness, or abuse.  It should not be a ground for our personal compulsions and delusions.</p><p>Sexuality is an honest reflection of our innermost personalities, and we should ensure that its expression is healthy.  Making love is something mysterious, sacred, and often the most profound interaction between people.  Whether what is created is a relationship or pregnancy, the legacy of both partners will be inherent in their creation.  What we put into love determines what we get out of it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Steer A Course",
        "quotes": [
          {
            "quote": "What specific destination are you steering your life toward?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If you could go anywhere, where would you like to go?  Not in terms of vacations, but in your life.  Your answer to that question does a lot to determine whether or not you're successful.  You see, we're all on a journey, whether we know it or not.  We are traveling inevitably toward the ends of our lives.  So the real question for us is whether we're going to select a destination and steer a course for it, or allow ourselves to be swept along with the tide, letting others determine where we'll end up.  The choice is entirely up to us.</p><p>—<cite>Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "January 31",
    "topics": [
      {
        "topic": "Philosophy As Medicine Of The Soul",
        "quotes": [
          {
            "quote": "Don't return to philosophy as a task-master, but as patients seek out relief in a treatment of sore eyes, or a dressing for a burn, or from an ointment.  Regarding it this way, you'll obey reason without putting it on display and rest easy in its care.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.9"
          }
        ],
        "notes": "<p>The busier we get, the more we work and learn and read, the further we may drift.  We get in a rhythm.  We're making money, being creative, and we're stimulated and busy.  It seems like everything is going well.  But we drift further and further from philosophy.</p><p>Eventually this neglect will contribute to a problem—the stress builds up, our mind gets cloudy, we forget what's important—and result in an injury of some kind.  When that happens, it's important that we tap the brakes—put aside all the momentum and the moment.  Return to the regimen and practices that we know are rooted in clarity, good judgment, good principles, and <em>good health.</em></p><p>Stoicism is designed to be medicine for the soul.  It relieves us of the vulnerabilities of modern life.  It restores us with vigor we need to thrive in life.  Check in with it today, and let it do its healing.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Key To Inner Peace",
        "quotes": [
          {
            "quote": "We can't control the big stuff - life, death, taxes, illness.  But we can learn to befriend the small, prickly emotions that come up all the time.  If we can befriend them, we can start to relax a little bit.",
            "author": "Pema Chödrön",
            "source": "The Places that Scare You: A Guide to Fearlessness in Difficult Times"
          }
        ],
        "notes": "<p>Life throws curveballs beyond our control.  Yet, daily existence is often filled with small annoyances, nagging anxieties, flashes of anger — the <q>prickly</q> stuff.  We push these feelings down, adding layers to our tension.  Can we instead pause with curiosity, letting the small pains simply be without judgment?  This simple act of befriending, rather than fighting, our internal discomforts can create an astonishing lightness in our lives.</p>",
        "thoughts": ""
      },
      {
        "topic": "Orientation",
        "quotes": [
          {
            "quote": "Planets orbit the sun.<br>Forms orbit the mind.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Most of us embody disparate aspects in our personalities; these are our forms, the way we take shape.  If we aren't careful, we can become confused by such complexity.  We should not deny any part of ourselves.  We should arrange them.  All elements are valid—they must simply be placed in the right context.</p><p>Those who follow <em>Tao</em> understand that a diverse personality is problematic only if some aspects dominate to the exclusion of the others.  This is unbalanced.  If there is constant alteration between all aspects, then equilibrium is possible.  Like the planets, feelings, instincts, and emotions must be kept in a constantly rotating order.  Then all things have their place and the problems of excess are avoided.</p><p>Just as the sun is at the center of our solar system, so too must the mind of wisdom be the center of our diverse personalities.  If our minds are strong, then the various parts of our lives will be held firmly to their proper courses, and there will be no chance of deviation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Growing To Your Potential",
        "quotes": [
          {
            "quote": "Are you focused on the one trade that will set you apart?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Novelist H.  G.  Wells held that wealth, notoriety, place, and power are no measures of success whatsoever.  The only true measure of success is the ratio between what we might have been and what we have become.  In other words, success comes as the result of growing to our potential.</p><p>It's been said that our potential is God's gift to us, and what we do with it is our gift to him.  But at the same time, our potential is probably our greatest untapped resource.  Henry Ford observed, <q>There is no man living who isn't capable of doing more than he thinks he can do.</q></p><p>We have nearly limitless potential, yet too few ever try to reach it.  Why?  The answer lies in this: We can do <em>anything</em>, but we can't do <em>everything</em>.  Many people let everyone around them decide their agenda in life.  As a result, they never really dedicate themselves to <em>their</em> purpose in life.  They become a jack-of-all-trades, master of none—rather than a jack-of-few-trades, focused on one.</p><p>If that describes you more than you'd like, you're probably ready to take steps to make a change.  There are four principles to put you on the road to growing toward your potential:</p><ol><li>Concentrate on one main goal.</li><li>Concentrate on continual improvement.</li><li>Forget the past.</li><li>Focus on the future.</li></ol><p>When you know your purpose in life and are growing to reach your maximum potential, you're well on your way to being a success.</p><p>—<cite>Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 1",
    "topics": [
      {
        "topic": "For the Hot-Headed Man",
        "quotes": [
          {
            "quote": "Keep this thought handy when you feel a rage coming on—it isn't manly to be enraged.  Rather, gentleness and civility are more human, and therefore manlier.  A real man doesn't give way to anger and discontent, and such a person has strength, courage, and endurance—unlike the angry and complaining.  The nearer a man comes to a calm mind, the closer he is to strength.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.18.5b"
          }
        ],
        "notes": "<p>Why do athletes talk trash to each other?  Why do they deliberately say offensive and nasty things to their competitors when the refs aren't looking?  To provoke a reaction.  Distracting and angering opponents is an easy way to knock them off their game.</p><p>Try to remember that when you find yourself getting mad.  Anger is not impressive or tough&it's a mistake.  It's <em>weakness</em>.  Depending on what you're doing, it might even be a trap that someone laid for you.</p><p>Fans and opponents called Joe Louis the <q>Ring Robot</q> because he was utterly unemotional—his cold, calm demeanor was far more terrifying than any crazed look or emotional outburst would have been.</p><p>Strength is the ability to maintain a hold of oneself.  It's being the person who never gets mad, who cannot be rattled, because they are in control of their passions—rather than controlled <em>by</em> their passions.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 2",
    "topics": [
      {
        "topic": "A Proper Frame Of Mind",
        "quotes": [
          {
            "quote": "Frame your thoughts like this—you are an old person, you won't let yourself be enslaved by this any longer, no longer pulled like a puppet by every impulse, and you'll stop complaining about your present fortune or dreading the future.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 2.2"
          }
        ],
        "notes": "<p>We resent the person who comes in and tries to boss us around.  <em>Don't tell me how to dress, how to think, how to do my job, how to live</em>.  This is because we are independent, self-sufficient people.</p><p>Or at least that's what we tell ourselves.</p><p>Yet if someone says something we disagree with, something inside us tell us we <em>have</em> to argue with them.  If there's a plate of cookies in front of us, we <em>have</em> to eat them.  If someone does something we dislike, we <em>have</em> to get mad about it.  When something bad happens, we <em>have</em> to be sad, depressed, or worried.  But is something good happens a few minutes later, all of a sudden we're happy, excited, and want more.</p><p>We would never let another person jerk us around the way we let our impulses do.  It's time we start seeing it that way—that we're not puppets that can be made to dance this way or that way just because we feel like it.  We should be the ones in control, not our emotions, because we are independent, self-sufficient people.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 3",
    "topics": [
      {
        "topic": "The Source Of Your Anxiety",
        "quotes": [
          {
            "quote": "When I see an anxious person, I ask myself, what do they want?  For if a person wasn't wanting something outside of their own control why would they be stricken by anxiety?",
            "author": "Epictetus",
            "source": "Discourses, 2.13.1"
          }
        ],
        "notes": "<p>The anxious father, worried about his children.  What does he want?  A world that is always safe.  A frenzied traveler—what does she want?  For the weather to hold and for traffic to part so she can make her flight.  A nervous investor?  That the market will turn around and an investment will pay off.</p><p>All of these scenarios holds the same thing in common.  As Epictetus says, it's wanting something outside our control.  Getting worked up, getting excited, nervously pacing—these intense, pained, ad anxious moments show us at our most futile and servile.  Staring at the clock, at the ticker, at the next checkout lane over, at the sky—it's as if we all belong to a religious cult that believes the gods of fate will only give us what we want if we sacrifice our peace of mind.</p><p>Today, when you find yourself getting anxious, ask yourself: <em>Why are my insides twisted into knots?  Am I in control here or is my anxiety?</em> And most important: <em>Is my anxiety doing me any good?</em></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 4",
    "topics": [
      {
        "topic": "On Being Invincible",
        "quotes": [
          {
            "quote": "Who then is invincible?  The one who cannot be upset by anything outside their reasoned choice.",
            "author": "Epictetus",
            "source": "Discourses, 1.18.21"
          }
        ],
        "notes": "<p>Have you ever watched a seasoned pro handle the media?  No question is too tough, no tone too pointed or insulting.  They parry every blow with humor, poise, and patience.  Even when stung or provoked, they <em>choose</em> not to flinch or react.  They're able to do this not only because of training and experience, but because they understand that reacting emotionally will only make the situation worse.  The media is waiting for them to slip up or get upset, so to successfully navigate press events they have internalized the importance of keeping themselves under calm control.</p><p>It's unlikely you'll face a horde of probing reporters bombarding you with insensitive questions today.  But it might be helpful—whatever stresses or frustrations or overload that do come your way—to picture that image and use it as your model for dealing with them.  Our reasoned choice— our <span lang='el'><i>προαίρεσις</i></span>, as the Stoics called it—is a kind of invincibility that we can cultivate.  We can shrug off hostile attacks and breeze thorough pressure or problems.  And, like our model, when we finish, we can point back into the crowd and say, <q>Next!</q></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 5",
    "topics": [
      {
        "topic": "Steady Your Impulses",
        "quotes": [
          {
            "quote": "Don't be bounced around, but submit every impulse to the claims of justice, and protect your clear conviction in every appearance.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.22"
          }
        ],
        "notes": "<p>Think of the manic people in your life.  Not the ones suffering from an unfortunate disorder, but the ones whose lives and choices are <em>in</em> disorder.  Everything is soaring highs or crushing lows; the day is either amazing or awful.  Aren't those people exhausting?  Don't you wish they just had a filter through which they could test the good impulses versus the bad ones?</p><p>There is such a filter.  Justice.  Reason.  Philosophy.  If there's a central message of Stoic thought, it's this: impulses of all kinds are going to come, and your work is to control them, like bringing a dog to heel.  Put more simply: think before you act.  Ask: <em>Who is in control here?  What principles are guiding me?</em></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 6",
    "topics": [
      {
        "topic": "Don't Seek Out Strife",
        "quotes": [
          {
            "quote": "I don't agree with those who plunge headlong into the middle of the flood and who, accepting a turbulent life, struggle daily in great spirit with difficult circumstances.  The wise person will endure that, but won't choose it—choosing to be at peace, rather than at war.",
            "author": "Seneca",
            "source": "Oedipus, 992"
          }
        ],
        "notes": "<p><q>Only the paranoid survive,</q> Andy Grove, a former CEO of Intel, famously said.  It might be true.  But we also know that the paranoid often destroy themselves quicker and more spectacularly than any enemy.  Seneca, with his access and insight into the most powerful elite in Rome, would have seen this dynamic play out quite vividly.  Nero, the student whose excesses Seneca tried to curb, killed not only his own mother and wife but eventually turned on Seneca, his mentor, too.</p><p>The combination of power, fear, mania can be deadly.  The leader convinced that he might be betrayed, acts first and betrays others first.  Afraid that he's not well liked, he works so hard to get others to like him that it has the opposite effect.  Convinced of mismanagement, he micromanages and becomes the source of the mismanagement.  And on and on—the things we fear or dread, we blindly inflict on ourselves.</p><p>The next time you are afraid of some supposedly disastrous outcome, remember that if you don't control your impulses, if you lose your self-control, you may be the very source of the disaster you so fear.  It has happened to smarter and more powerful and more successful people.  It can happen to us too.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 7",
    "topics": [
      {
        "topic": "Fear Is A Self-Fulfilling Prophecy",
        "quotes": [
          {
            "quote": "Many are harmed by fear itself, and many may have come to their fate while dreading fate.",
            "author": "Seneca",
            "source": "Oedipus, 992"
          }
        ],
        "notes": "<p><q>Only the paranoid survive,</q> Andy Grove, a former CEO of Intel, famously said.  It might be true.  But we also know that the paranoid often destroy themselves quicker and more spectacularly than any enemy.  Seneca, with his access and insight into the most powerful elite in Rome, would have seen this dynamic play out quite vividly.  Nero, the student whose excesses Seneca tried to curb, killed not only his own mother and wife but eventually turned on Seneca, his mentor, too.</p><p>The combination of power, fear, and mania can be deadly.  The leader, convinced that he might be betrayed, acts first and betrays others first.  Afraid that he's not well liked, he works so hard to get others to like him that it has the opposite effect.  Convinced of mismanagement, he micromanages and becomes the source of the mismanagement.  And on and on—the things we fear or dread, we blindly inflict on ourselves.</p><p>The next time you are afraid of some supposedly disastrous outcome, remember that if you don't control your impulses, if you lose your self-control, you may be the very source of the disaster you so fear.  It has happened to smarter and more powerful and more successful people.  It can happen to us too.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 8",
    "topics": [
      {
        "topic": "Did That Make You Feel Better",
        "quotes": [
          {
            "quote": "You cry, <q>I'm suffering severe pain!</q> Are you then relieved from feeling it if you bear it in an unmanly way?",
            "author": "Seneca",
            "source": "Moral Letters, 78.17"
          }
        ],
        "notes": "<p>The next time someone gets upset near you—crying, yelling, breaking something, being pointed or cruel—watch how quickly this statement will stop them cold: <q>I hope this is making you feel better.</q> Because, of course, it isn't.  Only in the bubble of extreme emotion can we justify any of that kind of behavior—and when called to account for it, we usually feel sheepish or embarrassed.</p><p>It's worth applying that standard to yourself.  The next time you find yourself in the middle of a freakout, or moaning and groaning with yourself in the flu-like symptoms, or crying tears of regret, just ask: <em>Is this actually making me feel better?  Is this actually relieving any of the symptoms I wish were gone?</em></p>",
        "thoughts": "<blockquote>Others may hurt you, but your mind can remain calm.  When the mind is disciplined, suffering cannot disturb you.<br><cite>—Dhammapada, 6</cite></blockquote><blockquote>If there is a remedy, then what is the use of frustration?  If there is no remedy, then what is the use of frustration?<br><cite>—Shantideva</cite></blockquote>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 9",
    "topics": [
      {
        "topic": "You Don't Have to Have an Opinion",
        "quotes": [
          {
            "quote": "We have the power to hold no opinion about a thing and to not let it upset our state of mind—for things have no natural power to shape our judgments.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.52"
          }
        ],
        "notes": "<p>Here's a funny exercise: think about all the upsetting things you <em>don't</em> know about—stuff people might have said about you behind your back, mistakes you might have made that never came to your attention, things you dropped or lost without even realizing it.  What's your reaction?  You don't have one because you don't know about it.</p><p>In other words, it <em>is</em> possible to hold no opinion about a negative thing.  You just need to cultivate that power instead of wielding it accidentally.  Especially when having an opinion is likely to make us aggravated.  Practice the ability of having absolutely no thoughts about something—act as if you had no idea it ever occurred.  Or that you've never heard of it before.  Let it become irrelevant or nonexistent to you.  It'll be a lot less powerful this way.</p>",
        "thoughts": "<blockquote>Opinions are like nails; the more you hammer them, the deeper they go.  <br><cite>—Unknown</cite></blockquote><blockquote>Don't waste your time with explanations: people only hear what they want to hear.  <br><cite>—Paulo Coelho</cite></blockquote><blockquote>Those who know do not speak; those who speak do not know.  <br><cite>—Laozi, <em>Dao De Jing</em>, 56</cite></blockquote><blockquote>The wise man speaks because he has something to say; the fool speaks because he has to say something.  <br><cite>—Plato (attributed)</cite></blockquote><blockquote>If you wish to be wise, learn to question reasonably, listen carefully, respond cautiously, and keep silent when you have nothing to say.  <br><cite>—Johann Kaspar Lavater</cite></blockquote><blockquote>Better to remain silent and be thought a fool than to speak and remove all doubt.  <br><cite>—Mark Twain (attributed)</cite></blockquote><blockquote>Even fools are thought wise if they keep silent, and discerning if they hold their tongues.  <br><cite>—Proverbs 17:28</cite></blockquote>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 10",
    "topics": [
      {
        "topic": "Anger is Bad Fuel",
        "quotes": [
          {
            "quote": "There is no more stupefying thing than anger, nothing more bent on its own strength.  If successful, none more arrogant, if foiled, none more insane—since it's not driven back by weariness even in defeat, when fortune removes its adversary it turns its teeth on itself.",
            "author": "Seneca",
            "source": "On Anger, 3.1.5"
          }
        ],
        "notes": "<p>As the Stoics have said many times, getting angry almost never solves anything.  Usually, it makes things worse.  We get upset, then the other person gets upset—now everyone is upset, and the problem is no closer to getting solved.  </p><p>Many successful people will try to tell you that anger is a powerful fuel in their lives.  The desire to <q>prove them all wrong</q> or <q>shove it in their faces</q> has made many a millionaire.  The anger at being called fat or stupid had created fine physical specimens and brilliant minds.  The anger at being rejected has motivated many to carve their own path.</p><p>But that's shortsighted.  Such stories ignore the pollution produced as a side effect and the wear and tear it put on the engine.  It ignores what happens when that initial anger runs out—and how now more and more must be generated to keep the machine going (until, eventually, the only source left is anger at oneself).  <q>Hate is too great a burden to bear,</q> Martin Luther King Jr.  warned his fellow civil rights leaders in 1967.</p><p>The same is true for anger—in fact, it's true for most extreme emotions.  They are toxic fuel.  There's plenty of it out in the world, no question, but never worth the costs that come along with it.</p>",
        "thoughts": "What the Buddha said about anger<ul><li>Anger is a form of suffering.</li><li>Anger is one of the three <q>unwholesome roots</q> of the mind.</li><li>Anger is self-sabotaging.</li><li>Holding onto anger is like holding a hot coal in your hand.</li><li>You will be punished by your anger, not for it.</li><li>Anger can never remove anger.</li></ul></ul><br><blockquote>Holding onto anger is like drinking poison and expecting the other person to die.  <br><cite>—Buddha (attributed)</cite></blockquote><blockquote>One should give up anger, renounce pride, and overcome all fetters.  No suffering befalls one who clings to nothing.  <br><cite>—Dhammapada, 221-222</cite></blockquote><blockquote>A wise man watches his anger as a traveler watches passing clouds—acknowledging, but not grasping.  <br><cite>—Unknown</cite></blockquote><blockquote>Whatever is begun in anger ends in shame.  <br><cite>—Benjamin Franklin</cite></blockquote>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 11",
    "topics": [
      {
        "topic": "Hero or Nero?",
        "quotes": [
          {
            "quote": "Our soul is sometimes a king, and sometimes a tyrant.  A king, by attending to what is honorable, protects the good health of the body in its care, and gives it no base or sordid command.  But an uncontrolled, desire-fueled, over-indulged soul is turned from a king into that most feared and detested thing—a tyrant.",
            "author": "Seneca",
            "source": "Moral Letters, 114.24"
          }
        ],
        "notes": "<p>There is that saying that absolute power corrupts absolutely.  At first glance, that's true.  Seneca's pupil, Nero, and his litany of crimes and murders is a perfect example.  Another emperor, Domitian, arbitrarily banished all philosophers from Rome (Epictetus was forced to flee as a result).  Many of Rome's emperors were tyrants.  Yet, not many years later, Epictetus would become a close friend of another emperor, Hadrian, who would help Marcus Aurelius to the throne, one of the truest examples of a wise philosopher king.</p><p>So, it's not so clear that power <em>always</em> corrupts.  In fact, it looks like it comes down, in many ways to the inner strength and self-awareness of individuals—what they value, what desires they keep in check, whether their understanding of fairness and justice can counteract the temptations of unlimited wealth and deference.</p><p>The same is true for you.  Both personally and professionally.  Tyrant or king?  Hero or Nero?  Which will you be?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 12",
    "topics": [
      {
        "topic": "Protect Your Peace of Mind",
        "quotes": [
          {
            "quote": "Keep constant guard over your perceptions, for it is no small thing you are protecting, but your respect, trustworthiness and steadiness, peace of mind, freedom from pain and fear, in a word your freedom.  For what would you sell these things?",
            "author": "Epictetus",
            "source": "Discourses, 4.3.6b-8"
          }
        ],
        "notes": "<p>The dysfunctional job that stresses you out, a contentious relationship, life in the spotlight.  Stoicism, because is helps us manage and think through our emotional reactions, can make these kinds of situations easier to bear.  It can help you manage and mitigate the triggers that seem to be so constantly tripped.  </p><p>But here's a question: Why are you subjecting yourself to this?  Is this really the environment you were made for?  To be provoked by nasty emails and an endless parade of workplace problems?  Our adrenal glands can handle only so much before they become exhausted.  Shouldn't you preserve them for life-and-death situations?  </p><p>So yes, use Stoicism to manage these difficulties.  But don't forge to ask: <em>Is this really the life I want?</em> Every time you get upset, a little bit of life leaves the body.  Are these really the things on which you want to spend that priceless resource?  Don't be afraid to make a change—a big one.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 13",
    "topics": [
      {
        "topic": "Pleasure Can Become Punishment",
        "quotes": [
          {
            "quote": "Whenever you get an impression of some pleasure, as with any impression, guard yourself from being carried away by it, let it await your action, give yourself a pause.  After that, bring to mind both times, first when you have enjoyed the pleasure and later when you will regret it and hate yourself.  Then compare to those the joy and satisfaction you'd feel for abstaining altogether.  However, if a seemingly appropriate time arises to act on it, don't be overcome by its comfort, pleasantness, and allure—but against all of this, how much better the consciousness of conquering it.",
            "author": "Epictetus",
            "source": "Enchiridion, 34"
          }
        ],
        "notes": "<p>Self-Control is a difficult thing, no question.  Which is why a popular trick from dieting might be helpful.  Some diets allow a <q>cheat day</q>—one day per week in which dieters can eat anything and everything they want.  Indeed, they're encouraged to write a list during the week of all the foods they craved so they can enjoy them all at once as a treat (the thinking being that if you're eating healthy six out of seven days, you're still ahead).</p><p>At first, this sounds like a dream, but anyone who has actually done this knows the truth: each cheat day you eat yourself sick and hate yourself afterward.  Soon enough, you're willingly abstaining from cheating at all.  Because you don't need it, and you definitely don't want it.  It's not unlike a parent catching her child with cigarettes and forcing him to smoke the whole pack.</p><p>It's important to connect the so-called temptation with its actual effects.  Once you understand that indulging might actually be worse that resisting, the urge begins to lose its appeal.  In this way, self-control becomes the real pleasure, and the temptation becomes the regret.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 14",
    "topics": [
      {
        "topic": "Think Before You Act",
        "quotes": [
          {
            "quote": "For to be wise is only one thing—to fix our attention on our intelligence, which guides all things everywhere.",
            "author": "Heraclitus",
            "source": "Lives of the Eminent Philosophers, 9.1"
          }
        ],
        "notes": "<p><em>Why did I do that?</em> you've probably asked yourself.  We all have.  <em>How could I have been so stupid?  What was I thinking?</em></p><p>You weren't—that's the problem.  Within that head of yours is all the reason and intelligence you need.  It's making sure that it's deferred to and utilized that's the tough part.  It's making sure your mind is in charge, not your emotions, not your immediate physical sensations, not your surging hormones.</p><p>Fix your attention on your intelligence.  Let it do its thing.</p",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 15",
    "topics": [
      {
        "topic": "Only Bad Dreams",
        "quotes": [
          {
            "quote": "Clear your mind and get a hold on yourself and, as when awakened from sleep and realizing it was only a bad dream upsetting you, wake up and see that what's there is just like those dreams.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.31"
          }
        ],
        "notes": "<p>The author Raymond Chandler was describing most of us when he wrote in a letter to his publisher, <q>I never looked back, although I had many uneasy periods looking forward.</q>  Thomas Jefferson once joked in a letter to John Adams, <q>How much pain have cost us the evils which have never happened!</q>  And Seneca would put it best: <q>There is nothing so certain in our fear that's not yet more certain in the fact that most of what we dread comes to nothing.</q></p><p>Many of the things that upset us, the Stoics believed, are a product of the imagination, not reality.  Like dreams, they are vivid and realistic at the time but preposterous once we come out of it.  In a dream, we never stop to think and say: <q>Does this make any sense?</q>  No, we go along with it.  The same goes with our flights of anger or fear or other extreme emotions.</p><p>Getting upset is like continuing the dream while you're awake.  The thing that provoked you wasn't real—but your reaction was.  And so from the fake comes real consequences.  Which is why you need to wake up right now instead of creating a nightmare.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 16",
    "topics": [
      {
        "topic": "Don't Make Things Harder Than They Need To Be",
        "quotes": [
          {
            "quote": "If someone asks you how to write your name, would you bark out each letter?  And if they get angry, would you then return the anger?   Wouldn't you rather gently spell out each letter for them?  So then, remember in life that your duties are the sum of individual acts.  Pay attention to each of these as you do your duty ...  just methodically complete your task.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.26"
          }
        ],
        "notes": "<p>Here's a common scenario.  You're working with a frustrating coworker or a difficult boss.  They ask you to do something and, because you dislike the messenger, you immediately object.  There's this problem or that one, or their request is obnoxious and rude.  So you tell them, <q>No, I'm not going to do it.</q>  Then they retaliate by not doing something that you had previously asked of them.  And so the conflict escalates.</p><p>Meanwhile, if you could step back and see it objectively, you'd probably see that not <em>everything</em> they're asking for is unreasonable.  In fact, some of it is pretty easy to do or is, at least, agreeable.  And if you did it, it might make the rest of the tasks a bit more tolerable too.  Pretty soon, you've done the entire thing.</p><p>Life (and our job) is difficult enough.  Let's not make it harder by getting emotional about insignificant matters or digging in for battles we don't actually care about.  Let's not let emotion get in the way of <span lang='el'><i>καθῆκον</i></span>, the simple, appropriate actions on the path to virtue.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 17",
    "topics": [
      {
        "topic": "The Enemy of Happiness",
        "quotes": [
          {
            "quote": "It is quite impossible to unite happiness with a yearning for what we don't have.  Happiness has all that it wants, and resembling the well-fed, there shouldn't be hunger or thirst.",
            "author": "Epictetus",
            "source": "Discourses, 3.24.17"
          }
        ],
        "notes": "<p><em>I'll be happy when I graduate</em>, we tell ourselves.  <em>I'll be happy when I get this promotion, when this diet pays off, when I have the money that my parents never had</em>.  Conditional happiness is what psychologists call this kind of thinking.  Like the horizon, you can walk for miles and miles and never reach it.  You won't even get any closer.</p><p>Eagerly anticipating some future event, passionately imagining something you desire, looking forward to some happy scenario—as pleasurable as these activities might seem, they ruin your chance at happiness here and now.  Locate that yearning for <em>more, better, someday</em> and see it for what it is: the enemy of your contentment.  Choose it or your happiness.  As Epictetus says, the two are not compatible.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 18",
    "topics": [
      {
        "topic": "Prepare for the Storm",
        "quotes": [
          {
            "quote": "This is the true athlete—the person in rigorous training against false impressions.  Remain, firm, you who suffer, don't be kidnapped by your impressions!  The struggle is great, the task divine—to gain mastery, freedom, happiness, and tranquility.",
            "author": "Epictetus",
            "source": "Discourses, 2.18.27-28"
          }
        ],
        "notes": "<p>Epictetus also used the metaphor of a storm, saying that our impressions are not unlike extreme weather that can catch us and whirl us about.  When we get worked up or passionate about an issue, we can relate.</p><p>But let's think about the role of the weather in modern times.  Today, we have forecasters and experts who can fairly accurately predict storm patterns.  Today, we're defenseless against a hurricane only if we refuse to prepare or heed the warnings.</p><p>If we don't have a plan, if we never learned how to put up the storm windows, we will be at the mercy of these external—and internal—elements.  We're still puny human beings compared with one-hundred-mil-per-hour winds, but we have the advantage of being able to prepare—being able to struggle against them in a new way.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 19",
    "topics": [
      {
        "topic": "The Banquet of Life",
        "quotes": [
          {
            "quote": "Remember to conduct yourself in life as if at a banquet.  As something being passed around comes to you, reach out your hand and take a moderate helping.  Does it pass you by?  Don't stop it.  It hasn't yet come?  Don't burn in desire for it, but wait until it arrives in front of you.  Act this way with children, a spouse, toward position, with wealth—one day it will make you worthy of a banquet with the gods.",
            "author": "Epictetus",
            "source": "Enchiridion, 15"
          }
        ],
        "notes": "<p>The next time you see something you want, remember Epictetus's metaphor of life's banquet.  As you find yourself getting excited, ready to do anything and everything to get it—the equivalent of reaching across the table and grabbing a dish out of someone's hands—just remind yourself: that's bad manners and unnecessary.  Then wait patiently for your turn.</p><p>This metaphor has other interpretations too.  For instance, we might reflect that we're lucky to have been invited to such a wonderful feast (gratitude).  Or that we should take our time and savor the taste of what's on offer (enjoying the present moment) but that to stuff ourselves sick with food and drink serves no one, least of all our health (gluttony is a deadly sin, after all).  That at the end of the meal, it's rude not to help the host clean up and do the dishes (selflessness).  And finally, the next time, it's our turn to host and treat others just as we had been treated (charity).</p><p>Enjoy the meal!</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 20",
    "topics": [
      {
        "topic": "The Grand Parade of Desire",
        "quotes": [
          {
            "quote": "Robbers, perverts, killers, and tyrants—gather for your inspection their so-called pleasures!",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.34"
          }
        ],
        "notes": "<p>It's never great to judge other people, but it's worth taking a second to investigate how a life dedicated to indulging every whim actually works out.  The writer Ann Lamott jokes in <em>Bird by Bird</em>, <q>Ever wonder that God thinks of money?  Just look at the people he gives it to.</q>  The same goes for pleasure.  Look at the dictator and his harem filled with plotting, manipulative mistresses.  Look how quickly the partying of a young starlet turns to drug addiction and a stalled career.</p><p>Ask yourself: <em>Is that really worth it?  Is it really that pleasurable?</em></p><p>Consider that when you crave something or contemplate indulging in a <q>harmless</q> vice.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 21",
    "topics": [
      {
        "topic": "Wish Not, Want Not",
        "quotes": [
          {
            "quote": "Remember that it's not only the desire for wealth and position that debases and subjugates us, but also the desire for peace, leisure, travel, and learning.  It doesn't matter what the external thing is, the value we place on it subjugates us to another ...  where our heart is set, there our impediment lies.",
            "author": "Epictetus",
            "source": "Discourses, 4.4.1-2; 15"
          }
        ],
        "notes": "<p>Surely, Epictetus isn't saying that peace, leisure, travel, and learning are bad, is he?  Thankfully, no.  But ceaseless, ardent <em>desire</em>—if not bad in and of itself—is fraught with potential complications.  What we desire makes us vulnerable.  Whether it's an opportunity to travel the world or to be the president or for five minutes of peace and quiet, when we pine for something, when we hope against hope, we set ourselves up for disappointment.  Because fate can always intervene and then we'll likely lose our self-control in response.</p><p>As Diogenes, the famous Cynic, once said, <q>It is the privilege of the gods to want nothing, and of godlike men to want little.</q>  To want nothing make one invincible—because nothing lies outside your control.  This doesn't just go for not wanting the easy-to-criticize things like wealth or fame—the kinds of folly that we see illustrated in some of our most classic plays and fables.  That green light that Gatsby strove for can represent seemingly good things too, like love or a noble cause.  But it can wreck someone all the same.</p><p>When it comes to your goals and the things you strive for, ask yourself: <em>Am I in control of them or they in control of me?</em></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 22",
    "topics": [
      {
        "topic": "What's Better Left Unsaid",
        "quotes": [
          {
            "quote": "Cato practiced the kind of public speech capable of moving the masses, believing proper political philosophy takes care like any great city to maintain the warlike element.  But he was never seen practicing in front of others, and no one ever heard him rehearse a speech.  When he was told that people blamed him for his silence, he replied, <q>Better they not blame my life.  I begin to speak only when I'm certain what I'll say isn't better left unsaid.</q>",
            "author": "Plutarch",
            "source": "Cato the Younger, 4"
          }
        ],
        "notes": "<p>It's easy to act—to just dive in.  It's harder to stop, to pause, to think: <em>No, I'm not sure I need to do that yet.  I'm not sure I am ready.</em>  As Cato entered politics, many expected swift and great things from him—stirring speeches, roaring condemnations, wise analyses.  He was aware of this pressure—a pressure that exists on all of us at all times—and resisted.  It's easy to pander to the mob (and to our ego).</p><p>Instead, he waited and <em>prepared</em>.  He parsed his own thoughts, made sure he was not reacting emotionally, selfishly, ignorantly, or prematurely.  Only then would he speak—when he was confident that his words were worthy of being heard.</p><p>To do this requires awareness.  It requires us to stop and evaluate ourselves honestly.  Can you do that?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 23",
    "topics": [
      {
        "topic": "Circumstances Have No Care For Our Feelings",
        "quotes": [
          {
            "quote": "You shouldn't give circumstances the power to rouse anger, for they don't care at all.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.38"
          }
        ],
        "notes": "<p>A significant chunk of Marcus Aurelius's <em>Meditations</em> is made up of short quotes and passages from other writers.  This is because Marcus wasn't necessarily trying to produce an original work—instead he was <em>practicing</em>, reminding himself here and there of important lessons, and sometimes these lessons were things he had read.</p><p>This particular quote is special because it comes from a play by Euripides, which, except for a handful of quoted fragments like this, is lost to us.  From what we can gather about the play, Bellerophon, the hero, comes to doubt the existence of the gods.  But in this line, he is saying: Why bother getting mad at causes and forces far bigger than us?  Why do we take these things personally?  After all, external events and not sentient beings—they cannot respond to our shouts and cries—and neither can the mostly indifferent gods.</p><p>That's what Marcus was reminding himself of here: circumstances are incapable of considering or carrying for your feelings, your anxiety, or your excitement.  They don't care about your reaction.  They are not people.  So, stop acting like getting worked up is having an impact on a given situation.  Situations don't care at all.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 24",
    "topics": [
      {
        "topic": "The Real Source of Harm",
        "quotes": [
          {
            "quote": "Keep in mind that it isn't the one who has it in for you and takes a swipe that harms you, but rather the harm comes from your own belief about the abuse.  So, when someone arouses your anger, know that it's really your own opinion fueling it.  Instead, make it your first response not to be carried away by such impressions, for with time and distance self-mastery is more easily achieved.",
            "author": "Epictetus",
            "source": "Enchiridion, 20"
          }
        ],
        "notes": "<p>The Stoics remind us that there really is no such thing as an objectively good or bad occurrence.  When a billionaire loses $1 million in market fluctuation, it's not the same as when you or I lose a million dollars.  Criticism from your worst enemy is received differently than negative words from a spouse.  If someone sends you an angry email but you never see it, did it actually happen?  In other words, these situations require our participation, context, and categorization in order to be <q>bad</q>.</p><p>Our reaction is what actually decides whether harm has occurred.  If we feel that we've been wronged and get angry, of course that's how it will seem.  If we raise our voice because we feel we're being confronted, naturally a confrontation will ensue.</p><p>But if we retain control of ourselves, we decide whether to label something good or bad.  In fact, if that same event happened to us at different points in our lifetime, we might have very different reactions.  So why not choose now to <em>not</em> apply these labels?  Why not choose <em>not</em> to react?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 25",
    "topics": [
      {
        "topic": "The Smoke and Dust of Myth",
        "quotes": [
          {
            "quote": "Keep a list before your mind of those who burned with anger and resentment about something, of even the most renowned for success, misfortune, evil deeds, or any special distinction.  Then ask yourself, how did that work out?  Smoke and dust, the stuff of simple myth trying to be legend ...",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.27"
          }
        ],
        "notes": "<p>In Marcus Aurelius's writings, he constantly points out how the emperors who came before him were barely remembered just a few years later.  To him, this was a reminder that no matter how much he conquered, no matter how much he inflicted his will on the world, it would be like building a castle in the sand—soon to be erased by the winds of time.</p><p>The same goes for those driven to the heights of hate or anger or obsession or perfectionism.  Marcus liked to point out that Alexander the Great—one of the most passionate and ambitious men who ever lived—was buried in the same ground as his mule driver.  Eventually, all of us will pass away and slowly be forgotten.  We should enjoy this brief time we have on earth—not be enslaved to emotions that make us miserable and dissatisfied.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 26",
    "topics": [
      {
        "topic": "To Each His Own",
        "quotes": [
          {
            "quote": "Another has done me wrong?  Let him see to it.  He has his own tendencies, and his own affairs.  What I have now is what the common nature has willed, and what I endeavor to accomplish now is what my nature wills.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.25"
          }
        ],
        "notes": "<p>Abraham Lincoln occasionally got fuming mad with a subordinate, one of his generals, even a friend.  Rather than taking it out on that person directly, he'd write a long letter, outlining his case why they were wrong and what he wanted them to know.  Then Lincoln would fold it up, put the letter in the desk drawer, and never send it.  Many of these letters survive only by chance.</p><p>He knew, as the former emperor of Rome knew, that it's easy to fight back.  It's tempting to give them a piece of your mind.  But you almost always end up with regret.  You almost always wish you <em>hadn't</em> sent the letter.  Think of the last time you flew off the handle.  What was the outcome?  Was there any benefit?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 27",
    "topics": [
      {
        "topic": "Cultivating Indifference Where Others Grow Passion",
        "quotes": [
          {
            "quote": "Of all the things that are, some are good, others bad, and yet others indifferent.  The good are virtues and all that share in them; the bad are the vices and all that indulge them; the indifferent lie in between virtue and vice and include wealth, health, life, death, pleasure, and pain.",
            "author": "Epictetus",
            "source": "Discourses, 2.19.12b-13"
          }
        ],
        "notes": "<p>Imagine the power you'd have in your life and relationships if all the things that trouble everyone else—how thin they are, how much money they have, how long they have left to live, how they will die—didn't matter so much.  What if, where others were upset, envious, excited, possessive, or greedy, you were objective, calm, and clearheaded?  Can you envision that?  Imagine what it would do for your relationships at work, or for your love life, or your friendships.  </p><p>Seneca was an incredibly wealthy, even famous, man—yet he was a Stoic.  He had many material things, yet, as the Stoics say, he was also indifferent to them.  He enjoyed them while they were there, but he accepted that they might someday disappear.  What a better attitude than desperately craving <em>more</em> or fearfully dreading losing even one penny.  Indifference is solid middle ground.  </p><p>It's not about avoidance or shunning, but rather not giving any possible outcome more power or preference than is appropriate.  This is not easy to do, certainly, but if you could manage, how much more relaxed would you be?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 28",
    "topics": [
      {
        "topic": "When You Lose Control",
        "quotes": [
          {
            "quote": "The soul is like a bowl of water, and our impressions are like the ray of light falling upon the water.  When the water is troubled, it appears that the light itself is moved too, but it isn't.  So, when a person loses their composure, it isn't their skills and virtues that are troubled, but the spirit in which they exist, and when that spirit calms down so do those things.",
            "author": "Epictetus",
            "source": "Discourses, 3.3.20-22"
          }
        ],
        "notes": "<p>You messed up a little.  Or maybe you messed up <em>a lot</em>.</p><p>So?  That doesn't change the philosophy that you know.  It's not as if your reasoned choice has permanently abandoned you.  Rather, it was you who temporarily abandoned it.</p><p>Remember that the tools and aims of our training are unaffected by the turbulence of the moment.  Stop.  Regain your composure.  It's waiting for you.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "February 29",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 1",
    "topics": [
      {
        "topic": "Where Philosophy Begins",
        "quotes": [
          {
            "quote": "An important place to begin in philosophy is this: a clear perception of one's own ruling principle.",
            "author": "Epictetus",
            "source": "Discourses, 1.26.15"
          }
        ],
        "notes": "<p>Philosophy is intimidating.  Where does one start?  With books?  With lectures?  With the sale of your worldly possessions?</p><p>None of these things.  Epictetus is saying that one becomes a philosopher when they begin to exercise their guiding reason and start to question the emotions and beliefs and even language that others take for granted.  It is thought that an animal has self-awareness when it is able to fully recognize itself in a mirror.  Perhaps we could say that we begin our journey into philosophy when we become aware of the ability to analyze our own minds.</p><p>Can you start with that step today?  When you do, you'll find that from it we really come alive, that we live lives—to paraphrase Socrates—that are actually worth living.</p>",
        "thoughts": ""
      },
      {
        "topic": "Suffering's Principal Cause",
        "quotes": [
          {
            "quote": "The Second Noble Truth identifies craving as the principal cause of suffering.  This includes craving for sensory pleasures, existence, and non-existence.",
            "author": "Analayo Bhikkhu",
            "source": "Satipatthana: The Direct Path to Realization"
          }
        ],
        "notes": "<p>These cravings are a powerful trio.  We constantly seek pleasurable experiences: we fear death and cling desperately to life; we sometimes even long for escape.  Each of these cravings distorts our perception and leads to actions that harm ourselves and others.  By understanding these cravings, we can loosen their grip on us.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 2",
    "topics": [
      {
        "topic": "Accurate Self-Assessment",
        "quotes": [
          {
            "quote": "Above all, it is necessary for a person to have a true self-estimate, for we commonly think we can do more than we really can.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 5.2"
          }
        ],
        "notes": "<p>Most people resist the idea of a true self-estimate, probably because they fear it might mean <em>downgrading</em> some of their beliefs about who they are and what they're capable of.  As Goethe's maxim goes, it is a great failing <q>to see yourself as more than you are.</q> How could you really be considered self-aware if you refuse to consider your weaknesses?</p><p>Don't fear self-assessment because you're worried you might have to admit some things about yourself.  The second half of Goethe's maxim is important too.  He states that it is equally damaging to <q>value yourself at less than your true worth.</q> Is it not equally common to be surprised at how well we're able to handle a previously feared scenario?  The way that we're able to put aside the grief for a loved one and care for others—though we always thought we'd be wrecked if something were to happen to our parents or a sibling.  The way we're able to rise to the occasion in a stressful situation or a life-changing opportunity.</p><p>We underestimate our capabilities just as much and just as dangerously as we overestimate other abilities.  Cultivate the ability to judge yourself accurately and honestly.  Look inward to discern what you're capable of and what it will take to unlock that potential.</p>",
        "thoughts": ""
      },
      {
        "topic": "There Is A Way Out",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Sarah's mind raced constantly.  Work deadlines, emails, social media, a never-ending cascade of worries stole her peace.  The tension thrummed in her temples, an ever-present hum of anxiety.</p><p>One day, browsing online, she stumbled upon a blog by a mindfulness coach.  Intrigued, she read the words:</p><p><q><em>Your stress has a way out.  The key is mindfulness and conscious action.  Mindfulness is learning to be truly present, to observe your thoughts without getting swept away.  This brings calm.  By choosing kindness and compassion every day, you create balance within yourself and in your world.</em></q></p><p>Something in these words resonated.  Sarah began short meditations, focusing on her breath, letting thoughts pass like clouds.  She made small gestures of kindness, the kind that don't require an audience—walking quietly in nature, practicing <em>non-reactivity</em>, respecting silence, letting a bug outside instead of killing it, etc..  With each breath, with each act, the anxiety loosened its grip.  A space for quiet joy began to grow.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 3",
    "topics": [
      {
        "topic": "(Dis)Integration",
        "quotes": [
          {
            "quote": "These things don't go together.  You must be a unified human being, either good or bad.  You must diligently work either on your own reasoning or on things out of your control—take great care with the inside and not what's outside, which is to say, stand with the philosopher, or else with the mob.",
            "author": "Epictetus",
            "source": "Discourses, 3.15.13"
          }
        ],
        "notes": "<p>We're all complicated people.  We have multiple sides to ourselves—conflicting wants, desires, and fears.  The outside world is no less confusing and contradictory.  If we're not careful, all these forces—pushing and pulling—will eventually tear us apart.  We can't live as both Jekyll and Hyde.  Not for long, anyway.</p><p>We have a choice: to stand with the philosopher and focus strenuously on the inside, or to behave like a leader of a mob, becoming whatever the crowd needs at a given moment.</p><p>If we do not focus on our internal integration—on self-awareness—we risk external disintegration.</p>",
        "thoughts": ""
      },
      {
        "topic": "Embracing the Third Noble Truth",
        "quotes": [
          {
            "quote": "The Third Noble Truth is a very gentle truth.  It points towards the possibility of relief from suffering, rather than declaring it unavoidable.",
            "author": "Ajahn Sucitto",
            "source": ""
          }
        ],
        "notes": "<p>The Third Noble Truth is a beacon of hope, not despair.  It says that relief from suffering is possible!  It's not about a quick fix, but a profound journey of understanding.  Through cultivating mindfulness, compassion, and wisdom, we can find inner peace regardless of external circumstances.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 4",
    "topics": [
      {
        "topic": "Awareness is Freedom",
        "quotes": [
          {
            "quote": "The person is free who lives as they wish, neither compelled, nor hindered, nor limited—whose choices aren't hampered, whose desires succeed, and who don't fall into what repels them.  Who wishes to live in deception—tripped up, mistaken, undisciplined, complaining, in a rut?  No one.  These are base people who don't live as they wish; and so, no base person is free.",
            "author": "Epictetus",
            "source": "Discourses, 4.1.1-3a"
          }
        ],
        "notes": "<p>It is sad to consider how much time many people spend in the course of a day doing things they <q>have</q> to do—not necessary obligations like work or family, but the obligations we needlessly accept out of vanity or ignorance.  Consider the actions we take in order to impress other people or the lengths we'll go to fulfill urges or sate desires we don't even question.  In one of his famous letters, Seneca observes how often powerful people are slaves to their money, to their positions, to their mistresses, even—as was legal in Rome—to their slaves.  <q>No slavery is more disgraceful,</q> he quipped, <q>than one which is self-imposed.</q></p><p>We see this slavery all the time—a codependent person who can't help but clean up after a dysfunctional friend, a boss who micromanages employees and sweats every penny.  The countless causes, events, and get-togethers we're too busy to attend but agree to anyway.</p><p>Take an inventory of your obligations from time to time.  How many of these are self-imposed?  How many of them are truly necessary?  Are you as free as you think?</p>",
        "thoughts": ""
      },
      {
        "topic": "Happiness Here and Now",
        "quotes": [
          {
            "quote": "It is possible to live happily in the here and now.  So many conditions of happiness are available—more than enough for you to be happy right now.  You don't have to run into the future in order to get more.",
            "author": "Thich Nhat Hanh",
            "source": "Peace Is Every Step: The Path of Mindfulness in Everyday Life"
          }
        ],
        "notes": "<p>Think of happiness like sunlight.  It's always available but often hidden in clouds.  Our constant search for the <q>perfect</q> future obscures the simple pleasure around us.  True happiness lies in appreciating the present moment, recognizing the good we already have in our lives.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 5",
    "topics": [
      {
        "topic": "Cutting Back On The Costly",
        "quotes": [
          {
            "quote": "So, concerning the things we pursue, and for which we vigorously exert ourselves, we owe this consideration—either there is nothing useful in them, or most aren't useful.  Some of them are superfluous, while others aren't worth that much.  But we don't discern this and see them as free, when they cost us dearly",
            "author": "Seneca",
            "source": "Moral Letters, 42.6"
          }
        ],
        "notes": "<p>Of Seneca's many letters, this is probably one of the most important—and one of the least understood.  He's making a point that goes unheard in a society of ever-bigger houses and ever more possessions: that there's a hidden cost to all that accumulating.  And the sooner we're aware of it, the better.</p><p>Remember: even what we get for free has a cost, if only in what we pay to store it—in our garages and in our minds.  As you walk past your possessions today, ask yourself: <em>Do I need this?  Is it superfluous?  What's this actually worth?  What is it costing me?</em></p><p>You might be surprised by the answers and how much we've been paying without even knowing it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Letting Go: The True Release",
        "quotes": [
          {
            "quote": "The end of suffering comes from letting go.  It does not come from acquiring or achieving, but simply from letting go of what we grasp.",
            "author": "Ajahn Sumedho",
            "source": "The Four Noble Truths"
          }
        ],
        "notes": "<p>Imagine a white-knuckled grip on a railing over a rushing river.  That's how clinging to things, experiences, or even emotions creates tension and suffering.  Letting go isn't about giving up, but about releasing this tight grip.  It allows us to navigate life's currents with greater ease and find a sense of peace within.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 6",
    "topics": [
      {
        "topic": "Don't Tell Yourself Stories",
        "quotes": [
          {
            "quote": "In public avoid talking often and excessively about your accomplishments and dangers, for however much you enjoy recounting your dangers, it's not pleasant for others to hear about your affairs.",
            "author": "Epictetus",
            "source": "Enchiridion, 33.14"
          }
        ],
        "notes": "<p>Modern philosopher Nassim Taleb has warned of the <q>narrative fallacy</q>—the tendency to assemble unrelated events of the past into stories.  These stories, however gratifying to create, are inherently misleading.  They lead to a sense of cohesion and certainty that isn't real.</p> <p>If that's too heady, remember that as Epictetus points out, there is another reason not to tell stories about your past.  It's boring, annoying, and self-absorbed.  It might make you feel good to dominate the conversation and make it all about you, but how do you think it is for everyone else?  Do you think people are really enjoying the highlights of your high school football days?  Is this really the time for another exaggerated tale of your sexual prowess?</p> <p>Try your best not to create this fantasy bubble—live in what's real.  <em>Listen and connect</em> with people, don't perform for them.</p>",
        "thoughts": ""
      },
      {
        "topic": "Finding Nirvana In Change",
        "quotes": [
          {
            "quote": "When you realize the fact that everything changes and find your composure in it, there you find yourself in nirvana.",
            "author": "Suzuki Roshi",
            "source": "Zen Mind, Beginner's Mind"
          }
        ],
        "notes": "<p>Life is a river of constant change.  Clinging to the past or fearing the future creates anxiety.  When we accept the impermanent nature of things and learn to find peace within ourselves, regardless of external circumstances, we experience a taste of nirvana, a state of liberation from suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 7",
    "topics": [
      {
        "topic": "Don't Trust The Senses",
        "quotes": [
          {
            "quote": "Heraclitus called self-deception an awful disease and eyesight a lying sense.",
            "author": "Diogenes Laertius",
            "source": "Lives of the Eminent Philosophers, 9.7"
          }
        ],
        "notes": "<p>Self-awareness is the ability to objectively evaluate the self.  It's the ability to question our own instincts, patterns, and assumptions.  <span lang='el'><i>Οἴησις</i></span>, self-deception or arrogant and unchallenged opinion, requires that we hold all our opinions up to hard scrutiny: even our eyes deceive us.</p><p>On the other hand, that's alarming.  <em>I can't even trust my own sense?!</em>  Sure, you could think about it that way.  Or you could take it another way: because our senses are often wrong, our emotions overly alarmed, our projections overly optimistic, we're better off not rushing into conclusions about anything.  We can take a beat with everything we do and become aware of everything that's going on so we can make the right decision.</p>",
        "thoughts": ""
      },
      {
        "topic": "Liberation Through Non-Clinging",
        "quotes": [
          {
            "quote": "Liberation is the end of all compulsive grasping and clinging, where peace and contentment are possible.",
            "author": "Gil Fronsdal",
            "source": "The Buddha before Buddhism: Wisdom from the Early Teachings"
          }
        ],
        "notes": "<p>Imagine a bird trapped in a cage.  Our compulsive grasping for things, experiences, or even ideas keeps us from experiencing true freedom.  Liberation, in Buddhist terms, is letting go of this constant grasping, allowing ourselves to be open and present.  This is where true peace and contentment can arise.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 8",
    "topics": [
      {
        "topic": "Don't Unintentionally Hand Over Your Freedom",
        "quotes": [
          {
            "quote": "If a person gave away your body to some passerby, you'd be furious.  Yet you hand over your mind to anyone who comes along, so they may abuse you, leaving it disturbed and troubled—have you no shame in that?",
            "author": "Epictetus",
            "source": "Enchiridion, 28"
          }
        ],
        "notes": "<p>Instinctively, we protect our physical selves.  We don't let people touch us, push us around, control where we go.  But when it comes to the mind, we're less disciplined.  We hand it over willingly to social media, to television, to what other people are doing, thinking, or saying.  We sit down to work and the next thing you know, we're browsing the Internet.  We sit down with our families, but within minutes we have our phones out.  We sit down peacefully in a park, but instead of looking inward, we're judging people as they pass by.</p><p>We don't even know that we're doing this.  We don't realize how much waste is in it, how inefficient and distracted it makes us.  And what's worse—no one is <em>making</em> this happen.  It's totally self-inflicted.</p><p>To the Stoics, this is an abomination.  They know that the world can control our bodies—we can be thrown in jail or tossed about by the weather.  But the mind?  That's ours.  We <em>must</em> protect it.  Maintain control over your mind and perceptions, they'd say.  It's your most <em>prized</em> possession.</p>",
        "thoughts": ""
      },
      {
        "topic": "Freedom Through Letting Go",
        "quotes": [
          {
            "quote": "Letting go gives us freedom, and freedom is the only condition for happiness.",
            "author": "Thich Nhat Hanh",
            "source": ""
          }
        ],
        "notes": "<p>Letting go isn't about giving up on everything you enjoy.  It's more about not clinging to fleeting pleasures as a source of lasting happiness.  When we let go of attachment, we open ourselves to a deeper wellspring of joy within, independent of external circumstances.  This inner freedom is the true foundation for lasting happiness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 9",
    "topics": [
      {
        "topic": "Find The Right Scene",
        "quotes": [
          {
            "quote": "Above all, keep a close watch on this—that you are never so tied to your former acquaintances and friends that you are pulled down to their level.  If you don't, you'll be ruined ...  You must choose whether to be loved by these friends and remain the same person, or to become a better person at the cost of those friends ...  if you try to have it both ways you will neither make progress nor keep what you once had.",
            "author": "Epictetus",
            "source": "Discourses, 4.2.1; 4-5"
          },
          {
            "quote": "From good people you'll learn good, but if you mingle with the bad you'll destroy such soul as you had.",
            "author": "Musonius Rufus",
            "source": "Quoting Theognis of Megara, Lectures, 11.53.21-22"
          }
        ],
        "notes": "<p>Jim Rohn's widely quoted line is: <q>You are the average of the five people you spend the most time with.</q>  James Altucher advises young writers and entrepreneurs to find their <q>scene</q>—a group of peers who push them to be better.  Your father might have given you a warning when he saw you spending time with some bad kids: <q>Remember, you become like your friends.</q>  One of Goethe's maxims captures it better: <q>Tell me with whom you consort and I will tell you who you are.</q></p><p>Consciously consider whom you allow into your life—not like some snobby elitist but like someone who is trying to cultivate the best life possible.  Ask yourself about the people you meet and spend time with: <em>Are they making me better?  Do they encourage me to push forward and hold me accountable?  Or do they drag me down to their level?</em>  Now, with this in mind, ask the most important question: <em>Should I spend more or less time with these folks?</em></p><p>The second part of Goethe's quote tell us the stakes of this choice: <q>If I know how you spend your time,</q> he said, <q>then I know what might become of you.</q></p>",
        "thoughts": ""
      },
      {
        "topic": "Enjoyment Without Attachment",
        "quotes": [
          {
            "quote": "Letting do is not about giving up on everything you enjoy.  It's about not clinging to experiences as a source of lasting happiness.",
            "author": "Joseph Goldstein",
            "source": ""
          }
        ],
        "notes": "<p>We can still enjoy beautiful sunsets, delicious meals, and meaningful relationships.  The key is to appreciate them for what they are - impermanent experiences.  When we don't cling to them as a source of lasting happiness, we avoid the disappointment that comes with their inevitable end.  This allows us to experience life more fully, with a sense of openhearted joy.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 10",
    "topics": [
      {
        "topic": "Find Yourself a Cato",
        "quotes": [
          {
            "quote": "We can remove most sins if we have a witness standing by as we are about to go wrong.  The soul should have someone it can respect, by whose example it can make its inner sanctum more inviolable.  Happy is the person who can improve others, not only when present, but even when in their thoughts.",
            "author": "Seneca",
            "source": "Moral Letters, 11.9"
          }
        ],
        "notes": "<p>Cato the Younger, a Roman politician best known for his self-discipline and for his heroic defense of the Republic against Julius Caesar, appears constantly throughout Stoic literature—which is interesting because he didn't write anything down.  He taught no classes.  He gave no interviews.  His bold and brave example is what made him such a commonly cited and quoted philosopher.</p><p>Seneca tells us that we should each have our own Cato—a great and noble person we can allow into our minds and use to guide our actions, even when they're not physically present.  The economist Adam Smith had a similar concept, which is called the indifferent spectator.  It doesn't have to be an actual person, just someone who, like Seneca said, can stand witness to our behavior.  Someone who can quietly admonish us if we are considering doing something lazy, dishonest, or selfish.</p><p>And if we do it right, and live our lives in such a way, perhaps we can serve as someone else's Cato or indifferent spectator when they need it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Embracing Emotions",
        "quotes": [
          {
            "quote": "Instead of trying to get rid of difficult emotions, we can learn to hold them with a gentle, spacious awareness.",
            "author": "Tara Brach",
            "source": "Radical Compassion"
          }
        ],
        "notes": "<p>Imagine a stormy sea.  Trying to fight the waves only creates exhaustion.  Similarly, trying to suppress difficult emotions can backfire.  Instead, Buddhism teaches us to observe them with a gentle curiosity, like watching clouds pass across the sky.  This allows them to arise and pass away naturally.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 11",
    "topics": [
      {
        "topic": "Living Without Restriction",
        "quotes": [
          {
            "quote": "The unrestricted person, who has in hand what they will in all events, is free.  But anyone who can be restricted, coerced, or pushed into something against what they will is a slave.",
            "author": "Epictetus",
            "source": "Discourses, 4.1.128b-129a"
          }
        ],
        "notes": "<p>Take a look at some of the most powerful, rich, and famous people in the world.  Ignore the trappings of their success and what they're able to buy.  Look instead at what they're forced to trade in return—look at what success has cost them.</p><p>Mostly?  Freedom.  Their success depends on attending certain parties, kissing up to people they don't like.  It will require—inevitably—realizing they are unable to say what they actually think.  Worse, it demands that they become a different type of person or do bad things.</p><p>Sure, it might pay well—but they haven't truly examined the transaction.  As Seneca put it, <q>Slavery resides under marble and gold.</q>  Too many successful people are prisoners in jails of their own making.  Is that what you want?  Is that what you're working hard toward?  Let's hope not.</p>",
        "thoughts": ""
      },
      {
        "topic": "Observing Without Judgment",
        "quotes": [
          {
            "quote": "The mind can be trained to observe thoughts and emotions without judgment, allowing them to come and go naturally.",
            "author": "Dalai Lama",
            "source": ""
          }
        ],
        "notes": "<p>Our minds are like busy marketplaces.  Thoughts and emotions constantly arise, jostling for our attention.  Mindfulness meditation trains us to observe this inner chatter without getting caught up in it.  Just like watching leaves float down a stream, we can learn to see thoughts and emotions for what they—fleeting mental phenomena.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 12",
    "topics": [
      {
        "topic": "Seeing Things As The Person At Fault Does",
        "quotes": [
          {
            "quote": "Whenever someone has done wrong by you, immediately consider what notion of good or evil they had in doing it.  For when you see that, you'll feel compassion, instead of astonishment or rage.  For you may yourself have the same notions of good and evil, or similar ones, in which case you'll make an allowance for what they've done.  But if you no longer hold the same notions, you'll be more readily gracious for their error.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.26"
          }
        ],
        "notes": "<p>Socrates used to say that <q>nobody does wrong willingly.</q>  Meaning that no one is wrong on purpose either.  Nobody <em>thinks</em> they're wrong, even when they are.  They think they're right, they're just mistaken.  Otherwise, they wouldn't think it anymore!</p><p>Could it be that the slights you've experienced or the harm that others have done to you was not inflicted intentionally?  What if they simply thought they were doing the right thing—for them, even for you?  What if it's a person's general understanding that is wrong, just as Lincoln was genuine when he ended his famous Cooper Union speech by saying, <q>Let us, to the end, dare to do our duty as we understand it.</q></p><p>How much more tolerant and understanding would you be today if you could see the actions of other people as attempts to do the right thing?  Whether you agree or not, how radically would this lens change your perspective on otherwise offensive or belligerent actions?</p>",
        "thoughts": "This does NOT mean to turn the other cheek or allow offense to continue or to allow yourself to continue being a victim.  This is simply trying to understand from the other person's perspective—the proverbial <q>other shoe</q>."
      },
      {
        "topic": "Seeing Things As They Are",
        "quotes": [
          {
            "quote": "When you see things as they are, the craving for them and the fear of them both dissolve.",
            "author": "Bhante Gunaratana",
            "source": "Mindfulness in Plain English"
          }
        ],
        "notes": "<p>Imagine mist obscuring a beautiful mountain.  Our cravings and anxieties often distort our perception of reality.  When we cultivate wisdom and see things clearly, the need to grasp at things or fear their loss diminishes.  Acceptance replaces craving and fear, allowing us to experience life as it truly is.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 13",
    "topics": [
      {
        "topic": "One Day It Will All Make Sense",
        "quotes": [
          {
            "quote": "Whenever you find yourself blaming providence, turn it around in your mind and you will see that what has happened is in keeping with reason.",
            "author": "Epictetus",
            "source": "Discourses, 3.17.1"
          }
        ],
        "notes": "<p>Part of the reason we fight against the things that happen is that we're so focused on <em>our</em> plan that we forget that there might be a bigger plan we don't know about.  Is it not the case that plenty of times something we thought was a disaster turned out to be, with the passage time, a lucky break?  We also forget that we're not the only people who matter and that our loss might be someone else's gain.</p><p>This sense of being wronged is a simple awareness problem.  We need to remember that all things are guided by reason—but that it is a vast and universal reason that we cannot always see.  That the surprise hurricane was the result of a butterfly flapping its wings a hemisphere away or that misfortune we have experienced is simply the prelude to a pleasant and enviable future.</p>",
        "thoughts": ""
      },
      {
        "topic": "Choice Amidst Challenges",
        "quotes": [
          {
            "quote": "In the midst of difficult circumstances, we still have the power to choose.  To choose acceptance, to choose compassion, to choose wisdom.",
            "author": "Jack Kornfield",
            "source": "A Path with Heart: A Guide through the Perils and Promises of Spiritual Life"
          }
        ],
        "notes": "<p>Life throws curveballs.  While we can't control external circumstances, we can control our response.  Buddhism teaches us to choose acceptance of what is happening, compassion for ourselves and others, and the wisdom to navigate challenges with clarity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 14",
    "topics": [
      {
        "topic": "Self-Deception Is Our Enemy",
        "quotes": [
          {
            "quote": "<a href=https://en.wikipedia.org/wiki/Zeno_of_Elea target=_blank>Zeno</a> would also say that nothing is more hostile to a firm grasp on knowledge that self-deception.",
            "author": "Diogenes Laertius",
            "source": "Lives of the Eminent Philosophers, 7.23"
          }
        ],
        "notes": "<p>Self-deception, delusions of grandeur—these aren't just annoying personality traits.  Ego is more than just off-putting and obnoxious.  Instead, it's the sworn enemy of our ability to learn and grow.</p><p>As Epictetus put it, <q>It is impossible for a person to begin to learn what he thinks he already knows.</q>  Today, we will be unable to improve, unable to learn, unable to earn the respect of others if we think we're already perfect, a genius admired far and wide.  In this sense, ego and self-deception are the enemies of the things we wish to have because we delude ourselves into believing that we already possess them.</p><p>So we must meet ego with the hostility and contempt that it insidiously deploys against us—to keep it away, if only for twenty-four hours at a time.</p>",
        "thoughts": ""
      },
      {
        "topic": "Finding Happiness Within",
        "quotes": [
          {
            "quote": "When we give up hope of finding permanent happiness <q>out there</q>, we begin to look within.  This inner exploration leads to true wisdom.",
            "author": "Chögyam Trungpa",
            "source": ""
          }
        ],
        "notes": "<p>Do we chase happiness externally: in possessions, relationships ...  achievements?  True happiness is an inside job.  When we stop looking for external sources of joy and begin to explore our own minds and hearts, we discover a wellspring of contentment that is always available.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 15",
    "topics": [
      {
        "topic": "The Present Is All We Possess",
        "quotes": [
          {
            "quote": "Were you to live three thousand years, or even a countless multiple of that, keep in mind that no one ever loses a life other than the one they are living, and no one ever lives a life other than the one they are losing.  The longest and the shortest life, then amount to the same, for the present moment lasts the same for all and is all anyone possesses.  No one can lose either the past or the future, for how can someone be deprived of what's not theirs?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 2.14"
          }
        ],
        "notes": "<p>Today, are you looking for more?  That is, wanting the past to be more than what it was (different, better, still here, etc.) or wanting the future to unfold exactly as you expect (with hardly a thought as to how that might affect other people).</p><p>When we do this, we're neglecting the present moment.  The present is in our possession—but it has an expiration date, a quickly approaching one.  If you enjoy all of it, it will be enough.  It can last a whole lifetime.</p>",
        "thoughts": "The past is gone and the future is not guaranteed.  All we have is the present moment.  This is where we can make a difference, where we can live a life of purpose and meaning.  This is where we can be our best selves."
      },
      {
        "topic": "Relaxing Into Reality",
        "quotes": [
          {
            "quote": "The way out of our suffering is to stop resisting what's happening, and instead relax into what is.",
            "author": "Pema Chödrön",
            "source": "Start Where You Are"
          }
        ],
        "notes": "<p>Imagine grasping a steering wheel on a bumpy road.  Resistance creates tension and makes the ride more uncomfortable.  Life has its ups and downs.  When we learn to accept what is happening, without clinging to a different reality, we experience a sense of inner peace and ease.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 16",
    "topics": [
      {
        "topic": "That Sacred Part of You",
        "quotes": [
          {
            "quote": "Hold sacred your capacity for understanding.  For in it is all, that our ruling principle won't allow anything to enter that is either inconsistent with nature or with the constitution of a logical creature.  It's what demands due diligence, care for others, and obedience to God.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 3.9"
          }
        ],
        "notes": "<p>The fact that you can think, the fact that you can read this, the fact that you are able to reason in and out of situations—all of this is what gives you the ability to improve your circumstances and become better.  It's important to appreciate this ability, because it's a genuine ability.  Not everyone is so lucky.</p><p>What you take for granted, others wouldn't even think to dream of.</p><p>Take a little time today to remember that you're blessed with the capacity to use logic and reason to navigate situations and circumstances.  This gives you unthinkable power to alter your circumstances and the circumstances of others.  And remember, with great power goes a greater responsibility.</p>",
        "thoughts": ""
      },
      {
        "topic": "Balancing Joy And Pain",
        "quotes": [
          {
            "quote": "We can learn to hold both joy and pain with open hands, recognizing that both are part of the human experience.",
            "author": "Gil Fronsdal",
            "source": "The Issue at Hand"
          }
        ],
        "notes": "<p>Life is a tapestry woven with joy and sorrow.  Trying to push away pain only creates more suffering.  When we accept that both joy and pain are part of being human, we can experience life more fully, appreciating the beauty and the heartache.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 17",
    "topics": [
      {
        "topic": "The Beauty Of Choice",
        "quotes": [
          {
            "quote": "You are not your body and hair-style, but your capacity for choosing well.  If you choices are beautiful, so too will you be.",
            "author": "Epictetus",
            "source": "Discourses, 3.1.39b-40a"
          }
        ],
        "notes": "<p>It's that line in the <cite>Fight Club</cite>: <q>You are not your job, you're not how much money you have in the bank.  You are not the car you drive.  You're not the contents of your wallet.</q>  Obviously our friend Epictetus never saw that movie or read the book—but apparently the consumerism of the 1990s existed in ancient Rome too.</p><p>It's easy to confuse the image we present to the world for who we actually are, especially when media messaging deliberately blurs that distinction.</p><p>You might <em>look</em> beautiful today, but if that was the result of vain obsession in the mirror this morning, the Stoics would ask, are you <em>actually</em> beautiful?  A body build from hard work is admirable.  A body built to impress gym rats is not.</p><p>That's what the Stoics urge us to consider.  Not how things appear, but what effort, activity, and choices they are a result of.</p>",
        "thoughts": ""
      },
      {
        "topic": "Diminishing Power Of Cravings",
        "quotes": [
          {
            "quote": "When we acknowledge our cravings without judgement, their power over us begins to diminish.",
            "author": "Noah Levine",
            "source": "Dharma Punx"
          }
        ],
        "notes": "<p>We all have desires.  The problem arises when we become fixated on them.  By acknowledging our cravings with a gentle awareness, without judgement we begin to see them for what they are ...  mental urges.  This allows us to choose a more skillful response rather than being ruled by them.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 18",
    "topics": [
      {
        "topic": "Impossible Without Your Consent",
        "quotes": [
          {
            "quote": "Today I escaped the crush of circumstances, or better put, I threw them out, for the crush wasn't from outside me but in my own assumptions.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.13"
          }
        ],
        "notes": "<p>On tough days we might say, <q>My work is overwhelming,</q> or <q>My boss is really frustrating.</q>  If only we could understand that this is impossible.  Someone can't frustrate <em>you</em>, work can't overwhelm you—these are external objects, and they have no access to your mind.  These emotions you feel, as real as they are, come from the inside, not the outside.</p><p>The Stoics use the word <span lang='el'><i>ὑπόληψις</i></span>, which means <q>taking up</q>—of perceptions, thoughts, and judgments by our mind.  What we assume, what we willingly generate in our mind, that's on us.  We can't blame other people for making us feel stressed or frustrated any more than we can blame them for our jealousy.  The cause is within us.  They're just the target.</p>",
        "thoughts": ""
      },
      {
        "topic": "Contentment From Within",
        "quotes": [
          {
            "quote": "True contentment comes from within, not from acquiring more things or experiences.",
            "author": "Sylvia Boorstein",
            "source": "Happiness is an Inside Job"
          }
        ],
        "notes": "<p>Imagine a bottomless pit.  That's how external possessions and experiences can feel.  No matter how much we acquire, the need for more can persist.  True contentment comes from cultivating a sense of inner peace and gratitude, independent of external circumstances.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 19",
    "topics": [
      {
        "topic": "Timeless Wisdom",
        "quotes": [
          {
            "quote": "For there are two rules to keep at the ready—that there is nothing good or bad outside my own reasoned choice, and that we shouldn't try to lead events but to follow them.",
            "author": "Epictetus",
            "source": "Discourses, 3.18.10"
          }
        ],
        "notes": "<p>In the mid-twentieth century, there was an Indian Jesuit priest named Anthony de Mello.  Born in Bombay when it was still under British control, de Mello was an amalgam of many different cultures and perspectives: East, West; he even trained as a psychotherapist.  It's interesting when one sees timeless wisdom develop across schools, across epochs and ideas.  Here is a quote from de Mello's book, <cite>The Way to Love</cite>, that sounds almost exactly like Epictetus:</p><blockquote><q>The cause of my irritation is not in this person but in me.</q></blockquote><p>Remember, each individual has a choice.  You are always the one in control.  The cause of irritation—or our notion that something is bad—comes from us, from our labels or our expectations.  Just as easily, we can change those labels; we can change our entitlement and decide to accept and love what's happening around us.  And this wisdom has been repeated and independently discovered in every century and every country since time began.</p>",
        "thoughts": ""
      },
      {
        "topic": "Immediate Transformation",
        "quotes": [
          {
            "quote": "The Third Noble Truth is not a promise of a future utopia, but a way of seeing things differently right now.",
            "author": "Stephen Batchelor",
            "source": "Buddhism Without Beliefs"
          }
        ],
        "notes": "<p>The Third Noble Truth isn't waiting for some perfect future.  It's about a shift in perspective available to us now.  By understanding the cause of suffering (craving) and the path to its end (letting go).</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 20",
    "topics": [
      {
        "topic": "Ready And At Home",
        "quotes": [
          {
            "quote": "I may wish to be free from torture, but if the time comes for me to endure it, I'll wish to bear it courageously with bravery and honor.  Wouldn't I prefer not to fall into war?  But if war does befall me, I'll wish to carry nobly the wounds, starvation, and other necessities of war.  Neither am I so crazy as to desire illness, but if I must suffer illness, I'll wish to do nothing rash or dishonorable.  The point is not to wish for these adversities, but for the virtue that makes adversities bearable.",
            "author": "Seneca",
            "source": "Moral Letters, 67.4"
          }
        ],
        "notes": "<p>President James Garfield was a great man—raised in humble circumstances, self-educated, and eventually a Civil War hero—whose presidency was cut short by an assassin's bullet.  In his brief time in office, he faced a bitterly divided country as well as a bitterly and internally divided Republican Party.  During one fight, which challenged the very authority of his office, he stood firm, telling an adviser: <q>Of course I deprecate war, but if it is brought to my door the bringer will find me at home.</q></p><p>That's what Seneca is saying here.  We'd be crazy to <em>want</em> to face difficulty in life.  But we'd be equally crazy to pretend that it isn't going to happen.  Which is why when it knocks on our door—as it very well may this morning—let's make sure we're prepared to answer.  Not the way we are when a surprise visitor comes late at night, but the way we are when we're waiting for an important guest: dressed, in the right head space, ready to go.</p>",
        "thoughts": ""
      },
      {
        "topic": "Letting Go Of Being Right",
        "quotes": [
          {
            "quote": "The path to peace is not about getting things right.  It's about letting go of the idea that we need to be right.",
            "author": "Ajahn Brahm",
            "source": "With Each and Every Breath"
          }
        ],
        "notes": "<p>Imagine two friends locked in a heated debate.  Clinging to being right creates tension and disharmony.  The path to peace isn't about winning arguments or proving ourselves.  It's about letting go of the need for ego satisfaction and cultivating understanding.  Sometimes, the most peaceful response is to simply listen with an open mind.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 21",
    "topics": [
      {
        "topic": "The Best Retreat Is In Here, Not Out There",
        "quotes": [
          {
            "quote": "People seek retreats for themselves in the country, by the sea, or in the mountains.  You are very much in the habit of yearning for those same things.  But this is entirely the trait of a base person, when you can, at any moment, find such a retreat in yourself.  For nowhere can you find a more peaceful and less busy retreat than in your own soul—especially if on close inspection it is filled with ease, which I say is nothing more than being well-ordered.  Treat yourself often to this retreat and be renewed.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.3.1"
          }
        ],
        "notes": "<p>Do you have a vacation coming up?  Are you looking forward to the weekend so you can have some peace and quiet?  <em>Maybe</em>, you think, <em>after things settle down</em> or <em>after I get this over with</em>.  But how often has that ever actually worked?</p><p>The Zen meditation teacher Jon Kabat-Zinn coined a famous expression: <q>Wherever you go, there you are.</q>  We can find a retreat at any time by looking inward.  We can sit with our eyes closed and feel our breath go in and out.  We can turn on some music and tune out the world.  We can turn off technology or shut off those rampant thoughts in our head.  <em>That</em> will provide us peace.  Nothing else.</p>",
        "thoughts": ""
      },
      {
        "topic": "Innate Capacity For Serenity",
        "quotes": [
          {
            "quote": "The good news is that we have the innate capacity to experience peace and serenity, regardless of external circumstances.",
            "author": "Herbert Benson",
            "source": "The Relaxation Response"
          }
        ],
        "notes": "<p>Life can be messy.  We face challenges, setbacks, and frustrations.  But the Buddha teaches that peace is not something found in perfect circumstances.  It's an inner wellspring that we can access even amidst difficulty.  By cultivating mindfulness and compassion, we can find a sense of calm regardless of the external storm.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 22",
    "topics": [
      {
        "topic": "The Sign Of True Education",
        "quotes": [
          {
            "quote": "What is it then to be properly educated?  It is learning to apply our natural preconceptions to the right things according to Nature, and beyond that to separate the things that lie within our power from those that don't.",
            "author": "Epictetus",
            "source": "Discourses, 1.22.9-10a"
          }
        ],
        "notes": "<p>A degree on a wall means you're educated as much as shoes on your feet mean you're walking.  It's a start, but hardly sufficient.</p><p>Otherwise, how could so many <q>educated</q> people make unreasonable decisions?  Or miss so many obvious things?  Partly it's because they forget that they ought to focus only on that which lies within their power to control.  A surviving fragment from the philosopher Heraclitus expresses that reality: <blockquote><q>Many who have learned<br>from Hesiod, the countless names<br>of gods and monsters<br>never understand<br>that night and day are one.</q></blockquote></p><p>Just as you can walk plenty well without shoes, you don't need to step into a classroom to understand the basic, fundamental reality of nature and of our proper role in it.  Begin with awareness and reflection.  Not just once, but every single second of every single day.</p>",
        "thoughts": ""
      },
      {
        "topic": "Nirvana: The Quality Of Now",
        "quotes": [
          {
            "quote": "Nirvana is this moment seen directly.  There is no where else than here.  The only gate is now.  The only doorway is your own body and mind.  There's nowhere to go.  There's nothing else to be.  There's no destination.  It's not something to aim for in the afterlife.  It's simply the quality of this moment.",
            "author": "Tara Brach",
            "source": "True Refuge: Finding Peace and Freedom in Your Own Awakened Heart"
          }
        ],
        "notes": "<p>Nirvana can sound mysterious, but it's actually quite simple.  It's not a place we travel to after death.  It's a state of inner peace and freedom from suffering that is available right now, in this very moment.  The key lies in training our minds to be present, to experience the richness of the here and now without getting lost in thoughts about the past or future.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 23",
    "topics": [
      {
        "topic": "The Straitjacketed Soul",
        "quotes": [
          {
            "quote": "The diseases of the rational soul are long-standing and hardened vices, such as greed and ambition—they have put the soul in a straitjacket and have begun to be permanent evils inside it.  To put it briefly, this sickness is an unrelenting distortion of judgment, so things that are only mildly desirable are vigorously sought after.",
            "author": "Seneca",
            "source": "Moral Letters, 75.11"
          }
        ],
        "notes": "<p>In the financial disaster of the late 2000s, hundreds of smart, rational people lost trillions of dollars' worth of wealth.  How could such smart people have been so foolish?  These people knew the system, knew how the markets were supposed to work, and had managed billions, if not trillions, of dollars.  And yet, almost to a person, they were wrong—and wrong to the tune of global market havoc.</p><p>It's not hard to look at that situation and understand that greed was some part of the problem.  Greed was what led people to create complex markets that no one understood in the hope of making a quick buck.  Greed caused other people to make trades on strange pools of debt.  Greed prevented anyone from calling out this situation for what it was—a house of cards just waiting for the slightest breeze to knock it all down.</p><p>It doesn't do you much good to criticize those folks after the fact.  It's better to look at how greed and vices might be having a similar effect in your own life.  What lapses in judgment might your vices be causing you?  What <q>sicknesses</q> might you have?</p><p>And how can your rational mind step in and regulate them?</p>",
        "thoughts": ""
      },
      {
        "topic": "Daily Moments Of Nirvana",
        "quotes": [
          {
            "quote": "We experience moments of cessation, which is Nirvana, every day, the moment the mind is free from self-centeredness.",
            "author": "Ayya Khema",
            "source": "Being Nobody, Going Nowhere: Meditations on the Buddhist Path"
          }
        ],
        "notes": "<p>Think about a lake reflecting the clear blue sky.  When our minds are free from self-centered thoughts and worries, they become like that lake, still and clear.  These moments of inner peace, where suffering ceases, are tastes of Nirvana.  They arise naturally as we cultivate mindfulness and compassion in our daily lives.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 24",
    "topics": [
      {
        "topic": "There is Philosophy In Everything",
        "quotes": [
          {
            "quote": "Eat like a human being, drink like a human being, dress up, marry, have children, get politically active—suffer abuse, bear with a headstrong brother, father, son, neighbor, or companion.  Show us these things so we can see that you truly have learned from the philosophers.",
            "author": "Epictetus",
            "source": "Discourses, 3.21.5-6"
          }
        ],
        "notes": "<p>Plutarch, a Roman biographer as well as an admirer of the Stoics, didn't begin his study of the greats of Roman literature until late in life.  But, as he recounts in his biography of Demosthenes, he was surprised at how quickly it all came to him.  He wrote, <q>It wasn't so much that the words brought me into a full understanding of events, as that, somehow, I had a personal experience of the events that allowed me to follow closely the meaning of the words.</q></p><p>This is what Epictetus means about the study of philosophy.  Study, yes, but go live your life as well.  It's the only way that you'll actually understand what any of it means.  And more important, it's only from your actions and choices over time that it will be possible to see whether you took any of the teachings to heart.</p><p>Be aware of that today when you're going to work, going on a date, deciding whom to vote for, calling your parents in the evening, waving to your neighbor as you walk to your door, tipping the delivery man, saying goodnight to someone you love.  All of that is philosophy.  All of it is experience that brings meaning to the words.</p>",
        "thoughts": ""
      },
      {
        "topic": "Nirvana: The End Of Suffering",
        "quotes": [
          {
            "quote": "Nirvana is not a <q>place</q> nor is it a reward, but simply the cessation of suffering.",
            "author": "Dzongsar Jamyang Khyentse Rinpoche",
            "source": "What Makes You Not a Buddhist"
          }
        ],
        "notes": "<p>Imagine a dark room being filled with sunlight.  Nirvana isn't a destination or a prize.  It's the absence of suffering, the darkness being replaced by the light of inner peace and wisdom.  Through Buddhist practices, we can gradually weaken the grip of craving, aversion, and delusion, allowing the natural state of peace to shine through.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 25",
    "topics": [
      {
        "topic": "Wealth And Freedom Are Free",
        "quotes": [
          {
            "quote": "...freedom isn't secured by filling up on your heart's desire but by removing your desire.",
            "author": "Epictetus",
            "source": "Discourses, 4.1.175"
          }
        ],
        "notes": "<p>There are two ways to be wealthy—to get everything you want or to want everything you have.  Which is easier right here and right now?  The same goes for freedom.  If you chafe and fight and struggle for more, you will never be free.  If you could find and focus on the pockets of freedom you already have?  Well, then you'd be free right here, right now.</p>",
        "thoughts": ""
      },
      {
        "topic": "Realizing Nirvana",
        "quotes": [
          {
            "quote": "Realizing nirvana is realizing that all suffering has ended; it is seeing all of existence in the light of serenity and wisdom.",
            "author": "Anam Thubten",
            "source": "No Self, No Problem: Awakening to Our True Nature"
          }
        ],
        "notes": "<p>Nirvana isn't a state of blissful ignorance.  It's a profound awakening to the true nature of reality.  It's seeing the world with perfect clarity and compassion, free from the distortions of self-centered desires.  This awakening brings an end to suffering and allows us to experience life with a sense of deep joy and serenity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 26",
    "topics": [
      {
        "topic": "What Rules Your Ruling Reason?",
        "quotes": [
          {
            "quote": "How does your ruling reason manage itself?  For in that is the key to everything.  Whatever else remains, be it in the power of your choice or not, is but a corpse and smoke.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.33"
          }
        ],
        "notes": "<p>The Roman satirist Juvenal is famous for this question: <span lang='la'><i>Quis custodiet ipsos custodes?</i></span> (Who watches the watchmen?)  In a way, this is what Marcus is asking himself—and what you might ask yourself throughout the day.  What influences the ruling reason that guides your life?</p><p>This means an exploration of subjects like evolutionary biology, psychology, neurology, and even the subconscious.  Because these deeper forces shape even the most disciplined, <em>rational</em> minds.  You can be the most patient person in the world, but if science shows we make poor decisions on an empty stomach—what good is all that patience?</p><p>So don't stop at Stoicism, but explore the forces that drive and make Stoicism possible.  Learn what underpins this philosophy you're studying, how the body and mind tick.  Understand not only your ruling reason—the watchmen—but whoever and whatever rules that too.</p>",
        "thoughts": ""
      },
      {
        "topic": "Liberation From Dualities",
        "quotes": [
          {
            "quote": "When we let go of our notions of pain and pleasure, gain and loss, we are liberated from them; this is the cessation of suffering.",
            "author": "Mingyur Rinpoche",
            "source": "The Joy of Living: Unlocking the Secret and Science of Happiness"
          }
        ],
        "notes": "<p>We often cling to ideas about how life <q>should be</q> - avoiding pain, seeking pleasure, acquiring things.  These attachments create a constant push and pull, a source of suffering.  When we learn to let go of these notions, and experience life as it is, moment by moment, we find liberation from suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 27",
    "topics": [
      {
        "topic": "Pay What Things Are Worth",
        "quotes": [
          {
            "quote": "Diogenes of Sinope said we sell things of great value for things of very little, and vice versa.",
            "author": "Diogenes Laertius",
            "source": "Lives of the Eminent Philosophers, 6.2.35b"
          }
        ],
        "notes": "<p>You can buy a Plume Blanche diamond-encrusted sofa for close to two hundred thousand dollars.  It's also possible to hire one person to kill another person for five hundred dollars.  Remember that next time you hear someone ramble on about how the market decides what things are worth.  The market might be rational ...  but the people who comprise it are not.</p><p>Diogenes, who founded the Cynic school, emphasized the true worth (<span lang='el'><i>ἀξία</i></span>) of things, a theme that persisted in Stoicism and was strongly reflected in both Epictetus and Marcus.  It's easy to lose track.  When the people around you dump a fortune into trinkets they can't take with them when they die, it might seem like a good investment for you to make too.</p><p>But of course it isn't.  The good things in life cost what they cost.  The unnecessary things are not worth it at any price.  The key is being aware of the difference.</p>",
        "thoughts": ""
      },
      {
        "topic": "A Sanctuary",
        "quotes": [
          {
            "quote": "The Third Noble Truth is the realization that there is a sanctuary, a safe haven, which is the cessation of all suffering.",
            "author": "Jetsunma Tenzin Palmo",
            "source": "Into the Heart of Life"
          }
        ],
        "notes": "<p>Imagine a world consumed by a raging storm.  The Third Noble Truth tells us that even amidst this storm, there exists a safe haven, a place of complete peace and freedom from suffering.  This sanctuary isn't a physical location, but an inner state we can cultivate through Buddhist practices.  It's a place of refuge we can access anytime, regardless of external circumstances.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 28",
    "topics": [
      {
        "topic": "The Discipline of Design",
        "quotes": [
          {
            "quote": "Life without a design is erratic.  As soon as one is in place, principles become necessary.  I think you'll concede that nothing is more shameful than uncertain and wavering conduct, and beating a cowardly retreat.  This will happen in all our affairs unless we remove the faults that seize and detain our spirits, preventing them from pushing forward and making an all-out effort.",
            "author": "Seneca",
            "source": "Moral Letters, 95.46"
          }
        ],
        "notes": "<p>Without a guiding design, life becomes reactive.  We're swept along by the urgency of the moment, pulled in every direction, and left without clarity when challenges arise.  It's not that plans are perfect—they rarely are—but that the act of designing our lives gives us principles to stand on when the unexpected hits.</p><p>A designed life isn't rigid.  It's purposeful.  It helps us push forward when fear or uncertainty might otherwise freeze us in place.  When we live without intention, we risk becoming that wavering figure—unsure, retreating, ashamed not because we failed, but because we never truly committed.</p><p>It's not cowardice in the cartoonish sense.  It's the quiet erosion of confidence that comes from living without structure.  And the antidote isn't bravado—it's design.</p><p></p>",
        "thoughts": ""
      },
      {
        "topic": "Enlightenment: Life In Fullness",
        "quotes": [
          {
            "quote": "Enlightenment, or nirvana, is knowing life in its fullness, without the constant sense of suffering.",
            "author": "Lama Surya Das",
            "source": "Awakening the Buddha Within: Tibetan Wisdom for the Western World"
          }
        ],
        "notes": "<p>Enlightenment, or Nirvana, can seem like a lofty goal.  But it's not about becoming a perfect being.  It's about seeing life clearly, experiencing both joy and sorrow without being swept away by them.  It's living life fully, with a deep understanding of ourselves and the world around us, free from the constant undercurrent of suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 29",
    "topics": [
      {
        "topic": "Why Do You Need To Impress These People Again!",
        "quotes": [
          {
            "quote": "If you should ever turn your will to things outside your control in order to impress someone, be sure that you have wrecked your whole purpose in life.  Be content, then, to be a philosopher in all that you do, and if you wish also to be seen as one, show yourself first that you are and you will succeed.",
            "author": "Epictetus",
            "source": "Enchiridion, 23"
          }
        ],
        "notes": "<p>Is there anything sadder than the immense lengths we'll go to impress someone?  The things we'll do to earn someone's approval can seem, when examined in retrospect, like the result of some temporary form of insanity.  Suddenly we're wearing uncomfortable, ridiculous clothes we've been told are cool, eating differently, talking differently, eagerly waiting for a call or text.  If we did these things because <em>we</em> like it, that would be one thing.  But that's not what it is.  It's just a means to an end—to get someone to give us the nod.</p><p>The irony, as Marcus Aurelius points out repeatedly, is that the people whose opinion we covet are not all that great.  They're flawed—they're distracted and wowed by all sorts of silly things themselves.  We know this and yet we don't want to think about it.  A quote, often (though perhaps incorrectly) attributed to Will Rogers, captures it well: <q>Too many people spend money they haven't earned, to buy things they don't want, to impress people they don't like.</q></p><p>Doesn't that sound pretty ridiculous?  But more than that, isn't it about as far as possible as your can get from the serenity and security that philosophy can provide?</p>",
        "thoughts": ""
      },
      {
        "topic": "Awareness: The Path To Peace",
        "quotes": [
          {
            "quote": "Peace is the fruit of awareness that arises from understanding the nature of life and letting go of fear.",
            "author": "Sylvia Boorstein",
            "source": "Happiness is an Inside Job: Practicing for a Joyful Life"
          }
        ],
        "notes": "<p>Peace isn't the absence of problems.  It's the inner calmness that allows us to navigate life's challenges with grace and wisdom.  This peace arises from cultivating mindfulness, understanding the impermanent nature of life, and letting go of fear.  When we accept what is happening and respond with compassion, we find a sense of inner peace that transcends external circumstances.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 30",
    "topics": [
      {
        "topic": "Reason In All Things",
        "quotes": [
          {
            "quote": "Hurry to your own ruling reason, to the reason of the Whole, and to your neighbor's.  To your own mind to make it just; to the mind of the Whole to remember your place in it; and to your neighbor's mind to learn whether it's ignorant or of sound knowledge—while recognizing it's like yours.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.22"
          }
        ],
        "notes": "<p>If our lives are not ruled by reason, what are they ruled by?  Impulse?  Whim?  Mimicry?  Unthinking habit?  As we examine our past behavior, it's sad how often we find this to be the case—that we were not acting consciously or deliberately but instead by forces we did not bother to evaluate.  It also happens that these are the instances that we're mostly likely to regret.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Practice of Detachment",
        "quotes": [
          {
            "quote": "Freedom from suffering is possible through the cultivation of detachment, compassion, and wisdom.",
            "author": "Matthieu Ricard",
            "source": "Happiness: A Guide to Developing Life's Most Important Skill"
          }
        ],
        "notes": "<p>Imagine a bird trapped in a cage.  Our suffering arises from clinging to things, experiences, and even ideas.  Detachment doesn't mean giving up everything we enjoy.  It means letting go of the attachment that causes us pain.  Cultivating compassion allows us to see the suffering of others and ourselves with kindness, and wisdom helps us understand the root causes of suffering.  Through these practices, we find freedom.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "March 31",
    "topics": [
      {
        "topic": "You're A Product Of Your Training",
        "quotes": [
          {
            "quote": "Chasing what can't be done is madness.  But the base person is unable to do anything else.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.17"
          }
        ],
        "notes": "<p>A dog that's allowed to chase cars will chase cars.  A child who is never given any boundaries will become spoiled.  An investor without discipline is not an investor—he's a gambler.  A mind that isn't in control of itself, that doesn't understand its power to regulate itself, will be jerked around by external events and unquestioned impulses.</p><p>That can't be how you'd like tomorrow to go.  So, you must be aware of that.  You must put in place training and habits NOW to replace ignorance and ill-discipline.  Only then will you begin to behave and act differently.  Only then will you stop seeking the impossible, the short-sighted, and the unnecessary.</p>",
        "thoughts": ""
      },
      {
        "topic": "Freedom From Attachment",
        "quotes": [
          {
            "quote": "When you do not grasp, attach, or cling, you are free, and that freedom from attachment is nirvana.",
            "author": "Shen Yen",
            "source": "The Method of No-Method: The Chan Practice of Silent Illumination"
          }
        ],
        "notes": "<p>Imagine white-knuckling a railing over a rushing river.  Clinging creates tension and suffering.  Letting go, or non-attachment, isn't about indifference.  It's about appreciating things for what they are, without clinging to them as a source of lasting happiness.  When we loosen our grip on desires and expectations, we experience a sense of freedom and inner peace.  This is the essence of Nirvana.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 1",
    "topics": [
      {
        "topic": "The Color Of Your Thoughts",
        "quotes": [
          {
            "quote": "Your mind will take the shape of what you frequently hold in thought, for the human spirit is colored by such impressions.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.16"
          }
        ],
        "notes": "<p>If you bend your body into a sitting position every day for a long enough period of time, the curvature of your spine changes.  A doctor can tell from a radiograph (or an autopsy) whether someone sat at a desk for a living.  If you shove your feet into tiny, narrow dress shoes each day, your feet begin to take on that form as well.</p><p>The same is true for our mind.  If you hold a perpetually negative outlook, soon enough everything you encounter will seem negative.  Close it off and you'll become closed-minded.  Color it with the wrong thoughts and your life will be dyed the same.</p>",
        "thoughts": ""
      },
      {
        "topic": "Nirvana In The Here And Now",
        "quotes": [
          {
            "quote": "Nirvana is not someplace else or something else; it is the absence of clinging to what is not real.  It is the end of suffering right where you are.",
            "author": "Norman Fischer",
            "source": "Training in Compassion: Zen Teachings on the Practice of Lojong"
          }
        ],
        "notes": "<p>Nirvana isn't a distant paradise.  It's the end of suffering that is possible right here, right now.  It's not about achieving a special state, but about letting go of the illusions that cause us pain.  When we see things clearly, without distortion from self-centered desires, we experience a natural state of peace and freedom.  Nirvana is closer than we think; it's the potential for peace that lies within us all.</p>",
        "thoughts": ""
      },
      {
        "topic": "Fourth Noble Truth Of Buddhism",
        "quotes": [
          {
            "quote": "The Eightfold Path Leads to the end of suffering.",
            "author": "Gautama Buddha",
            "source": ""
          }
        ],
        "notes": "<p>The Fourth Noble Truth in Buddhism, Magga, describes the Noble Eightfold Path as the way to end suffering.  This path is a comprehensive guide for ethical and mental development towards spiritual enlightenment.</p><p>The Noble Eightfold Path is categorized into three essential areas:<ol><li><strong>Wisdom (Prajñā)</strong><ul><li>Right Understanding</li><li>Right Intention</li></ul></li><li><strong>Ethical Conduct (Śīla)</strong><ul><li>Right Speech</li><li>Right Action</li><li>Right Livelihood</li></ul></li><li><strong>Mental Discipline (Samādhi)</strong><ul><li>Right Effort</li><li>Right Mindfulness</li><li>Right Concentration</li></ul></li></ol></p><p>Following this path allows Buddhists to gradually eliminate the ignorance and attachments that cause suffering.  It's a holistic approach, where each element supports and enhances the others, aiming for Nirvana—the cessation of all suffering and the end of the cycle of rebirth.  This path serves both as a philosophical framework for understanding existence and a practical guide for ethical living and mindfulness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 2",
    "topics": [
      {
        "topic": "Be Wary Of What You Let In",
        "quotes": [
          {
            "quote": "Drama, combat, terror, numbness, and subservience—every day these things wipe out your sacred principles, whenever your mind entertains them uncritically or lets them slip in.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 10.9"
          }
        ],
        "notes": "<p>How much harder is it to do the right thing when you're surrounded by people with low standards?  How much harder is it to be positive and empathetic inside the negativity bubble of television chatter?  How much harder is it to focus on your own issues when you're distracted with other people's drama and conflict?</p><p>We'll inevitably be exposed to these influences at some point, no matter how much we try to avoid them.  But when we are, there is nothing that says we have to allow those influences to penetrate our minds.  We have the ability to put our guard up and decide what we actually allow in.  Uninvited guests might arrive at your home, but you don't have to ask them to stay for dinner.  You don't have to let them into your mind.</p>",
        "thoughts": ""
      },
      {
        "topic": "Addicted Self",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>John battled a relentless addiction.  Quitting felt like climbing a sand dune—each step forward met with a slide back.  His exhaustion and despair were a weight he couldn't shake.</p><p>Then, a therapist with deep, kind eyes sat across from him.  <q>What brings you this pain, John?</q> she asked.  After he confessed his struggles, she spoke:</p><p><q>There is a way out of this cycle.  It's a framework called the Eightfold Path—like a map for the mind.  It guides you towards understanding your thoughts, choosing actions wisely, speaking with honesty, and focusing your energy.  This isn't about willpower alone, but building a new way of living that makes addiction less powerful.</q></p><p>Hope flickered in John.  He studied the path, one step at a time.  Mindfulness helped him see the urges rise and pass, not define him.  Choosing a job aligned with his values gave him purpose.  He replaced harsh self-talk with compassion.  Gradually, the addiction's grip weakened.  The path was hard, but it led towards the light of freedom and peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 3",
    "topics": [
      {
        "topic": "Deceived And Divided",
        "quotes": [
          {
            "quote": "Circumstances are what deceives us—you must be discerning in them.  We embrace evil before good.  We desire the opposite of what we once desired.  Our prayers are at war with our prayers, our plans with our plans.",
            "author": "Seneca",
            "source": "Moral Letters, 45.6"
          }
        ],
        "notes": "<p>A woman says she wants to meet a nice guy and get married—yet she spends all her time around jerks.  A man says that he wishes he could find a great job, but he hasn't actually bothered to do the looking.  Business executives try to pursue two different strategies at the same time—straddling it's called—and they are shocked when they succeed at neither.</p><p>All of these people, just as is often true for us too, are deceived and divided.  One hand is working against the other.  As Martin Luther King Jr.  once put it, <q>There is something of a civil war going on within all of our lives,</q> a war inside each individual between the good parts of their soul and the bad.</p><p>The Stoics say that that war is usually a result of our conflicting desires, our screwed-up judgments or biased thoughts.  We don't stop and ask: <em>OK, what do I really want?  What am I actually after here?</em>  If we did, we'd notice the contradictory and inconsistent wishes that we have.  And then we'd stop working against ourselves.</p>",
        "thoughts": ""
      },
      {
        "topic": "Multifaceted Journey To Nirvana",
        "quotes": [
          {
            "quote": "The path to enlightenment, or nirvana, is not a single track nor is it a simple escape from samsaric pains.  It is a multifaceted path that integrates ethical conduct, meditation, and wisdom.",
            "author": "Robert Thurman",
            "source": "Inner Revolution"
          }
        ],
        "notes": "<p>The journey to inner peace isn't a one-size-fits-all approach.  Imagine a beautiful tapestry woven with different threads.  The Buddhist path is like this tapestry, with ethical conduct, meditation, and wisdom being the interwoven threads.  Each thread strengthens the others, leading us towards a life of less suffering and greater peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 4",
    "topics": [
      {
        "topic": "Don't Let This Go To Your Head",
        "quotes": [
          {
            "quote": "Make sure you're not made <q>Emperor,</q> avoid that imperial stain.  It can happen to you, so keep yourself simple, good, pure, saintly, plain, a friend of justice, god-fearing, gracious, affectionate, and strong for your proper work.  Fight to remain the person that philosophy wished to make you.  Revere the gods, and look after each other.  Life is short—the fruit of this life is a good character and acts for the common good.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.34"
          }
        ],
        "notes": "<p>It is difficult even to conceive of what life must have been like for Marcus Aurelius—he wasn't born emperor, nor did he obtain the position deliberately.  It was simply thrust upon him.  Nevertheless, he was suddenly the richest man in the world, head of the most powerful army on earth, ruling over the largest empire in the history, considered a god among men.</p><p>It's no wonder he wrote little messages like this one to remind himself not to spin off the planet.  Without them, he might have lost his sense of what was important—falling prey to the lies from all the people who needed things from him.  And here we are, whatever we happen to be doing, at risk of spinning off ourselves.</p><p>When we experience success, we must make sure that it doesn't change us—that we continue to maintain our character despite the temptation not to.  Reason must lead the way no matter what good fortune comes along.</p>",
        "thoughts": ""
      },
      {
        "topic": "Transforming Lives",
        "quotes": [
          {
            "quote": "Practicing mindfulness and cultivating wisdom lead us towards a deeper understanding of how to uproot the causes of our suffering and fundamentally transform our lives.",
            "author": "B.  Alan Wallace",
            "source": "The Attention Revolution: Unlocking the Power of the Focused Mind"
          }
        ],
        "notes": "<p>Mindfulness is like a gentle spotlight, allowing us to see the patterns of our thoughts and actions with clarity.  Wisdom helps us understand the root causes of our suffering, like craving and aversion.  By cultivating both, we can break free from these patterns and create a more fulfilling life.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 5",
    "topics": [
      {
        "topic": "Trust But Verify",
        "quotes": [
          {
            "quote": "First off, don't let the force of the impression carry you away.  Say to it, <q>hold up a bit and let me see who you are and where you are from—let me put you to the test</q>...",
            "author": "Epictetus",
            "source": "Discourses, 2.18.24"
          }
        ],
        "notes": "<p>One of the wonders of your mind is the quickness with which it can comprehend and categorize things.  As Malcolm Gladwell wrote in <cite>Blink</cite>, we are constantly making split-second decisions based on years of experience and knowledge as well as using the same skill to confirm prejudices, stereotypes, and assumptions.  Clearly, the former thinking is a source of strength, whereas the latter is a great weakness.</p><p>We lose very little by taking a beat to consider our own thoughts.  <em>Is this really so bad?  What do I really know about this person?  Why do I have such strong feelings here?  Is anxiety really adding much to the situation?  What's so special about __________?</em></p><p>By asking these questions—by putting our impressions to the test as Epictetus recommends—we're less likely to be carried away by them or make a move on a mistaken or biased one.  We're still free to use our instincts, but we should always, as the Russian proverb says, <q>trust, but verify</q>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Training The Mind",
        "quotes": [
          {
            "quote": "The Eightfold Path is a way of living that leads to the end of suffering.  It's a training program for the mind.",
            "author": "Joseph Goldstein",
            "source": "Insight Meditation"
          }
        ],
        "notes": "<p>The Eightfold Path isn't a set of rigid rules, but rather a framework for living a happier life.  Think of it like a training program for the mind and heart.  By cultivating qualities like right view, right speech, and right action, we gradually develop the mental muscles needed to experience lasting peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 6",
    "topics": [
      {
        "topic": "Prepare Yourself For Negativity",
        "quotes": [
          {
            "quote": "When you first rise in the morning tell yourself: I will encounter busybodies, ingrates, egomaniacs, liars, the jealous and cranks.  They are all stricken with these afflictions because they don't know the difference between good and evil.  Because I have understood the beauty of good and the ugliness of evil, I know that these wrong-doers are still akin to me … and that none can do me harm, or implicate me in ugliness—nor can I be angry at my relatives or hate them.  For we are made for cooperation.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 2.1"
          }
        ],
        "notes": "<p>You can be certain as clockwork that at some point today you're going to interact with someone who seems like a jerk (as we all have been).  The question is: Are you going to be ready for it?</p><p>This exercise calls to mind a joke from the eighteenth-century writer and witticist Nicolas Chamfort, who remarked that if you <q>swallow a toad every morning,</q> you'll be fortified against anything else disgusting that might happen the rest of the day.  Might it not be better to understand up front—right when you wake up—that other people often behave in selfish or ignorant ways (the toad) than it is to nibble it throughout the day?</p><p>But there is a second part to this, just as there is a second half of Marcus's quote: <q>No one can implicate me in ugliness—nor can I be angry at my relative or hate him.</q>  The point of this preparation is not to write off everyone in advance.  It's that, maybe, because you've prepared for it, you'll be able to act with patience, forgiveness, and understanding.</p>",
        "thoughts": ""
      },
      {
        "topic": "Journey of a Well-Trained Mind",
        "quotes": [
          {
            "quote": "Just as a well-maintained cart rolls smoothly along a well-maintained road, so too, a mind that has been well-trained through the Noble Eightfold Path experiences lasting happiness.",
            "author": "Bhikkhu Dhammika",
            "source": ""
          }
        ],
        "notes": "<p>Imagine a bumpy road causing a cart to rattle and shake.  Our minds can be like that cart, tossed about by worries and desires.  The Noble Eightfold Path, like tending to the road and cart, helps us smooth out the journey, leading to a sense of inner peace and lasting happiness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 7",
    "topics": [
      {
        "topic": "Expect To Change Your Opinions",
        "quotes": [
          {
            "quote": "There are two things that must be rooted out in human beings—arrogant opinion and mistrust.  Arrogant opinion expects that there is nothing further needed, and mistrust assumes that under the torrent of circumstances there can be no happiness.",
            "author": "Epictetus",
            "source": "Discourses, 3.14.8"
          }
        ],
        "notes": "<p>How often do we begin some project certain we know exactly how it will go?  How often do we meet people and think we know exactly who and what they are?  And how often are these assumptions proved to be completely and utterly wrong?</p><p>This is why we must fight our biases and preconceptions: because they are a liability.  Ask yourself: <q>What haven't I considered?  Why is this thing the way it is?  Am I part of the problem here or the solution?  Could I be wrong here?</q>  Be doubly careful to honor what you do not know, and then set that against the knowledge you actually have.</p><p>Remember, if there is one core teaching at the heart of this philosophy, it's that we're not as smart and as wise as we'd like to think we are.  Our path to becoming wise comes from the questioning and from humility—not, as many would like to think, from certainty, mistrust, and arrogance.</p>",
        "thoughts": ""
      },
      {
        "topic": "Essentials Of The Path",
        "quotes": [
          {
            "quote": "This, bhikkhus, is the noble eightfold path, that is to say, right view, right intention, right speech, right action, right livelihood, right effort, right mindfulness, right concentration.",
            "author": "",
            "source": "Pali Canon"
          }
        ],
        "notes": "<p>These eight aspects of the path may sound complex, but they all boil down to living a life of integrity, kindness, and wisdom.  Right view encourages seeing things clearly, right intention focuses on wholesome motivations, right speech emphasizes kind communication, and right action promotes ethical behavior.  Right livelihood encourages working in a way that doesn't harm ourselves or others, right effort cultivates positive mental states, right mindfulness fosters present-moment awareness, and right concentration develops mental clarity and focus.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 8",
    "topics": [
      {
        "topic": "The Cost of Accepting Counterfeits",
        "quotes": [
          {
            "quote": "When it comes to money, where we feel our clear interest, we have an entire art where the tester uses many means to discover the worth ...  just as we give great attention to judging things that might steer us badly.  But when it comes to our own ruling principle, we yawn and doze off, accepting any appearance that flashes by without counting the cost.",
            "author": "Epictetus",
            "source": "Discourses, 1.20.8; 11"
          }
        ],
        "notes": "<p>When coins were more rudimentary, people spent time testing them to ensure they were real.  The Greek word <span lang='el'><i>δοκιμάζειν</i></span>—<q>to assay</q>—captured this idea.  Merchants could judge a coin by its sound or feel.  Even today, we instinctively check a bill for authenticity.</p>",
        "thoughts": ""
      },
      {
        "topic": "Heart of the Buddha's Way",
        "quotes": [
          {
            "quote": "The cultivation of mindfulness, ethical conduct, and wisdom forms the heart of the Buddha's way.  It is a journey of discovery that leads to liberation and profound peace.",
            "author": "Christina Feldman",
            "source": "The Buddhist Path to Simplicity"
          }
        ],
        "notes": "<p>The Buddha's teachings are all about cultivating these three qualities.  Mindfulness allows us to see ourselves and the world clearly.  Ethical conduct ensures we're living with integrity and compassion.  Wisdom helps us understand the nature of suffering and how to find liberation from it.  This journey of discovery, open to anyone, leads to a life of profound peace and freedom.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 9",
    "topics": [
      {
        "topic": "Test Your Impressions",
        "quotes": [
          {
            "quote": "From the very beginning, make it your practice to say to every harsh impression, <q>you are an impression and not at all what you appear to be.</q>  Next, examine and test it by the rules you possess, the first and greatest of which is this—whether it belongs to the things in our control or not in our control, and if the latter, be prepared to respond, <q>It is nothing to me.</q>",
            "author": "Epictetus",
            "source": "Enchiridion, 1.5"
          }
        ],
        "notes": "<p>In an overly quantified world of policies and processes, some are swinging back in the other direction.  Bold leaders will <q>trust their gut.</q>  A spiritual guru will say that it's important to <q>let your body guide you.</q>  A friend trying to help us with a difficult decision might ask, <q>What <em>feels</em> right here?</q></p><p>These approaches to decision-making contradict voluminous case studies in which people's instincts have led them right into trouble.  Our senses are wrong all the time!  As animals, subjected to the slow force of evolution, we have developed all sorts of heuristics, biases, and emotional responses that might have worked well on the savannah but are totally counterproductive in today's world.</p><p>Part of Stoicism is cultivating the awareness that allows you to step back and analyze your own senses, question their accuracy, and proceed only with the positive and constructive ones.  Sure, it's tempting to throw discipline and order to the wind and go with what feels right—but if our many youthful regrets are any indication, what <em>feels</em> right <em>right now</em> doesn't always stand up well over time.  Hold your senses suspect.  Again, trust, but always verify.</p>",
        "thoughts": ""
      },
      {
        "topic": "Alleviating Suffering",
        "quotes": [
          {
            "quote": "Understanding the impermanent nature of life is central to the practice of Buddhism, which guides us to alleviate suffering through seeing things as they really are.",
            "author": "Steve Hagen",
            "source": "Buddhism Plain and Simple"
          }
        ],
        "notes": "<p>Life is constantly changing, like a flowing river.  Clinging to the idea that things will stay the same is a root cause of suffering.  Buddhism teaches us to accept the impermanent nature of life, allowing us to let go and find peace in the present moment.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 10",
    "topics": [
      {
        "topic": "Judgement Cause Disturbance",
        "quotes": [
          {
            "quote": "It isn't events themselves that disturb people, but only their judgments about them.",
            "author": "Epictetus",
            "source": "Enchiridion, 5"
          }
        ],
        "notes": "<p>The samurai Masashi made a distinction between our <q>perceiving eye</q> and our <q>observing eye.</q>  The observing eye sees what is.  The perceiving eye sees what things supposedly mean.  Which one do you think causes us the most anguish?</p><p>An event is inanimate.  It's objective.  It simply is what it is.  That's what our observing eye sees.</p><p>But then the perceiving eye takes over: <em>This will ruin me.  How could this have happened?  Ugh!  It's so-and-so's fault.</em>  It layers meaning, judgment, and blame onto what was once a neutral event—stirring up disturbance, then pointing the finger outward.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Awakened One",
        "quotes": [
          {
            "quote": "The integration of meditation practice with a moral life and deep insight leads us beyond suffering and into the awakened way of being.",
            "author": "John Daido Loori",
            "source": "The Eight Gates of Zen: A Program of Zen Training"
          }
        ],
        "notes": "<p>Imagine a three-legged stool.  Meditation practice, a moral life, and deep insight are the legs of this stool.  Each leg is important for stability.  Meditation helps us train the mind, a moral life ensures we act with kindness, and deep insight allows us to see the root causes of suffering.  When these three aspects work together, they lead us beyond suffering and towards a more awakened way of being.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 11",
    "topics": [
      {
        "topic": "If You Want To Learn, Be Humble",
        "quotes": [
          {
            "quote": "Throw out your conceited opinions, for it is impossible for a person to begin to learn what he thinks he already knows.",
            "author": "Epictetus",
            "source": "Discourses, 2.17.1"
          }
        ],
        "notes": "<p>Of all the Stoics, Epictetus is the closest one to a true teacher.  He had a school.  He hosted classes.  In fact, his wisdom is passed down to us through a student who took really good lecture notes.  One of the things that frustrated Epictetus about philosophy students—and has frustrated all college professors since time began—is how students claim to want to be taught but really secretly believe they already know everything.</p><p>The reality is that we're all guilty of thinking we know it all, and we'd all learn more if we could set that attitude aside.  As smart of successful as we may be, there is always someone who is smarter, more successful, and wiser than us.  Emerson put it well: <q>Every man I meet is my master in some point, and in that I learn of him.</q></p><p>If you want to learn, if you want to improve your life, seeking out teachers, philosophers, and great books is a good start.  But this approach will only be effective if you're humble and ready to let go of opinions you already have.</p>",
        "thoughts": ""
      },
      {
        "topic": "Liberation Via The Eightfold Path",
        "quotes": [
          {
            "quote": "The Noble Eightfold Path is a way of living that leads to the complete cessation of suffering.  Each factor of the path supports the others, working together to bring about liberation.",
            "author": "Nanaratana Thera",
            "source": ""
          }
        ],
        "notes": "<p>The Eightfold Path isn't a checklist, but a holistic approach to living.  Think of it like a symphony where each instrument plays its part.  Right view informs right intention, which motivates right speech, and so on.  Each factor supports the others, creating a harmonious way of living that leads to liberation from suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 12",
    "topics": [
      {
        "topic": "Reject Tantalizing Gifts",
        "quotes": [
          {
            "quote": "Atreus: Who would reject the flood of fortune's gifts?<br>Thyestus: Anyone who has experienced how easily they flow back.",
            "author": "Seneca",
            "source": "Thyestes, 536"
          }
        ],
        "notes": "<p><cite>Thyestes</cite> is one of Seneca's darkest and most disturbing plays.  Even two thousand years later it remains a classic of the revenge genre.  Without spoiling it, the quote above comes from the scene in which Atreus is attempting to lure his hated brother, Thyestes, into a cruel trap by offering him tempting and generous gifts.  At first, Thyestes declines, to the complete bafflement of his enemy.</p><p>We are typically surprised when someone turns down an expensive gift or a position of honor or success.  General William T.  Sherman emphatically rejected offers to run for president of the United States, saying at one point: <q>I will not accept if nominated and will not serve if elected.</q>  If his friend Ulysses S.  Grant had made such a <q>Shermanesque statement</q> (as such rejections are now known), Grant certainly would have preserved his own legacy from the disastrous turn of events it suffered.</p><p>Despite his initial misgivings, Thyestes is ultimately tempted and persuaded to accept <q>fortune's gifts,</q> ...  which turned out to be a ruse hiding devastating tragedy.  Not every opportunity is fraught with danger, but the play was intended to remind us that our attraction toward what is new and shiny can lead us into serious trouble.</p>",
        "thoughts": ""
      },
      {
        "topic": "Mindful Navigation",
        "quotes": [
          {
            "quote": "By cultivating a path of mindfulness, kindness, and wisdom, we train our minds to navigate through life's challenges without clinging to them, thereby ending our suffering.",
            "author": "Rick Hanson",
            "source": "Buddha's Brain: The Practical Neuroscience of Happiness, Love, and Wisdom"
          }
        ],
        "notes": "<p>Imagine you're driving through different kinds of weather.  Mindfulness is like keeping your windshield clear — it helps you see what's really in front of you.  Kindness is how gently you handle the wheel, aware that others are on the road too.  Wisdom is knowing that storms pass, and you don't need to grip the wheel in fear—just navigate with presence and patience.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 13",
    "topics": [
      {
        "topic": "Less Is More",
        "quotes": [
          {
            "quote": "Don't act grudgingly, selfishly, without due diligence, or to be a contrarian.  Don't overdress your thought in fine language.  Don't be a person of too many words and too many deeds ....  Be cheerful, not wanting outside help or the relief others might bring.  A person needs to stand on their own, not be propped up.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 3.5"
          }
        ],
        "notes": "<p>In most areas of life, the saying <q>Less is more</q> stands true.  For instance, the writers we admire tend to be masters of economy and brevity.  What they leave out is just as important—sometimes more important—than what they leave in.  There is a poem by Philip Levine titled <q>He Would Never Use One Word Where None Would Do.</q>  And from <cite>Hamlet</cite>, the best of all—the retort from Queen Gertrude after a long, rhetorical speech from Polonius: <q>More matter with less art,</q> she tells him.  Get to the point!</p><p>Imagine the emperor of Rome, with his captive audience and unlimited power, telling himself not to be a person of <q>too many words and too many deeds.</q>  Let that be a reminder the next time you feel self-indulgent or a little full of yourself, the next time you feel like impressing people.</p><p></p>",
        "thoughts": "<blockquote><q>Gol-darnit, Mr.  Lamarr, you use your tongue prettier than a twenty dollar whore!</q><footer>— Taggart, <cite>Blazing Saddles (1974)</cite></footer></blockquote><blockquote><q>Uh, everything that guy just said is bullshit.  Thank you.</q><footer>— Vinny Gambini, <cite>My Cousin Vinny (1992)</cite></footer></blockquote>"
      },
      {
        "topic": "Response To Life's Suffering",
        "quotes": [
          {
            "quote": "Our engagement with the practice of meditation, ethics, and wisdom is our true response to live's suffering, opening the door to freedom and clarity.",
            "author": "Joan Halifax",
            "source": "Being with Dying, Cultivating Compassion and Fearlessness in the Presence of Death"
          }
        ],
        "notes": "<p>Life can be difficult.  Busyness, distractions, and negativity can cloud our minds.  Meditation, ethics, and wisdom are the tools that help us see more clearly and respond to suffering with a sense of peace and purpose.  Engaging with these practices is a powerful way to open the door to freedom and clarity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 14",
    "topics": [
      {
        "topic": "Becoming An Expert In What Matters",
        "quotes": [
          {
            "quote": "Believe me, it's better to produce the balance-sheet of your own life than that of the grain market.",
            "author": "Seneca",
            "source": "On the Brevity of Life, 18.3b"
          }
        ],
        "notes": "<p>The things that some people manage to be experts in: fantasy sports, celebrity trivia, derivatives and commodities markets, thirteenth-century hygiene habits of the clergy.</p><p>We can get very good at what we're <em>paid</em> to do, or adept at a hobby we wish we could be paid to do.  Yet our own lives, habits, and tendencies might be a mystery to us.</p><p>Seneca was writing this important reminder to his father-in-law, who, as it happened, was for a time in charge of Rome's granary.  But then his position was revoked for political purposes.  Who really cares, Seneca was saying, now you can focus that energy on your inner life.</p><p>At the end of your time on this planet, what expertise is going to be more valuable—your understanding of matters of living and dying, or your knowledge of the '87 Bears?  Which will help your children more—your insight into happiness and meaning, or that you followed breaking political news every day for thirty years?</p>",
        "thoughts": ""
      },
      {
        "topic": "Ethical Living Reduces Suffering",
        "quotes": [
          {
            "quote": "The Eightfold Path is a system of ethics that helps us lead a life of non-violence, generosity, and wisdom.  This path naturally reduces suffering for ourselves and others.",
            "author": "Harvey B.  Aronson",
            "source": ""
          }
        ],
        "notes": "<p>The Eightfold Path isn't just about personal transformation.  It's about creating a ripple effect of positive change in the world.  By cultivating non-violence, generosity, and wisdom, we not only reduce our own suffering but also contribute to a more peaceful and compassionate world for all.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 15",
    "topics": [
      {
        "topic": "Pay Your Taxes",
        "quotes": [
          {
            "quote": "Nothing will ever befall me that I will receive with gloom or a bad disposition.  I will pay my taxes gladly.  Now, all the things which cause complaint or dread are like the taxes of life—things from which, my dear Lucilius, you should never hope for exemption or seek escape.",
            "author": "Seneca",
            "source": "Moral Letters, 96.2"
          }
        ],
        "notes": "<p>As your income taxes come due, you might be like many people—complaining at what you have to fork over to the government.  Forty percent of everything I make goes to these people!  And for what?!</p><p>First off, taxes go to a lot of programs and services you almost certainly take for granted.  Second, you think you're so special?  People have been complaining about their taxes for thousands of years, and now they're dead.  Get over it.  Third, this is a good problem to have.  Far better than, say, making so little there is nothing left to pay the government or living in an anarchy and having to pay for every basic service in a struggle against nature.</p><p>But more important, income taxes are not the only taxes you pay in life.  They are just the financial form.  Everything we do has a toll attached to it.  Waiting around is a tax on traveling.  Rumors and gossip are the taxes that come from acquiring a public persona.  Disagreements and occasional frustration are taxes placed on even the happiest of relationships.  Theft is a tax on abundance and having things that other people want.  Stress and problems are tariffs that come attached to success.  And on and on and on.</p><p>There are many forms of taxes in life.  You can argue with them, you can go to great—but ultimately futile—lengths to evade them, or you can simply pay them and enjoy the fruits of what you get to keep.</p>",
        "thoughts": ""
      },
      {
        "topic": "Courage On The Buddha's Path",
        "quotes": [
          {
            "quote": "It takes courage to walk the path of the Buddha—the courage to be kind, the courage to be open, the courage to face our suffering with compassion.",
            "author": "Pema Chödrön",
            "source": "Taking the Leap"
          }
        ],
        "notes": "<p>The path of the Buddha isn't always easy.  It takes courage to be kind when we're angry, to be open when we're afraid, and to face our suffering with compassion.  But this courage is essential for growth and transformation.  As we walk this path, we discover a wellspring of inner strength and peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 16",
    "topics": [
      {
        "topic": "Observe Cause And Effect",
        "quotes": [
          {
            "quote": "Pay close attention in conversation to what is being said, and to what follows from any action.  In the action, immediately look for the target, in words, listen closely to what's being signaled.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.4"
          }
        ],
        "notes": "<p>Through the work of the psychologist Albert Ellis, Stoicism has reached millions of people through what's known as cognitive behavioral therapy (CBT).  As a form of a therapy, CBT helps patients identify destructive patterns in their thoughts and behavior so they can, over time, direct and influence them in a more positive direction.</p><p>Of course, Marcus Aurelius had no formal training in psychology, but his words here are as important as any doctor's.  He's asking you to become an observer of your own thoughts and the actions those thoughts provoke.  Where do they come from?  What biases do they contain?  Are they constructive or destructive?  Do they cause you to make mistakes or engage in behavior you later regret?  Look for patterns; find where cause meets effect.</p><p>Only when this is done can negative behavior patterns be broken; only then can real life improvements be made.</p>",
        "thoughts": ""
      },
      {
        "topic": "Interconnected Realization",
        "quotes": [
          {
            "quote": "As we practice the Eightfold Path, we begin to see the interconnectedness of all things.  This realization inspires us to act with greater compassion and wisdom.",
            "author": "Jack Kornfield",
            "source": "The Wise Heart: A Guide to the Universal Teachings of Buddhist Psychology"
          }
        ],
        "notes": "<p>Imagine a vast web with countless threads, all interconnected.  The Eightfold Path helps us see this web of life, where everything is related.  This realization cultivates compassion, as we recognize the suffering of others as part of our shared experience.  It also fosters wisdom, guiding us to act in ways that benefit all beings.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 17",
    "topics": [
      {
        "topic": "No Harm, No Foul",
        "quotes": [
          {
            "quote": "Do away with the opinion I am harmed, and the harm is cast away too.  Do away with being harmed, and harm disappears.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.7"
          }
        ],
        "notes": "<p>A word can have multiple meanings.  One usage can be harsh and another might be completely innocent.  The same word can be a cruel slur or a female dog.  In the same way, something said sarcastically differs drastically from something that was pointed and mean.</p><p>The interpretation of a remark or a word has an immense amount of power.  It's the difference between a laugh and hurt feelings.  The difference between a fight breaking out and two people connecting.</p><p>This is why it is so important to control the biases and lenses we bring to our interactions.  When you hear or see something, which interpretation do you jump to?  What is your default interpretation of someone else's intentions?</p><p>If being upset or hurt is something you'd like to experience less often, then make sure your interpretations of others' words make that possible.  Choose the right inference from someone's actions or from external events, and it's a lot more likely that you'll have the right response.</p>",
        "thoughts": ""
      },
      {
        "topic": "Development Along The Path",
        "quotes": [
          {
            "quote": "The practice requires developing skillful qualities and abandoning unskillful ones, a process that unfolds along the noble eightfold path.",
            "author": "Thanissaro Bhikkhu",
            "source": "The Mind Like Fire Unbound"
          }
        ],
        "notes": "<p>Think of planting a garden.  We cultivate desirable plants (like kindness) and remove weeds (like anger).  The Eightfold Path helps us identify these <q>skillful</q> and <q>unskillful</q> qualities.  By practicing mindfulness and ethical conduct, we gradually cultivate the qualities that lead to a happier life and let go of those that cause suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 18",
    "topics": [
      {
        "topic": "Opinions Are Like ...",
        "quotes": [
          {
            "quote": "What is bad luck?  Opinion.  What are conflict, dispute, blame, accusation, irreverence, and frivolity?  They are all opinions, and more than that, they are opinions that lie outside of our own reasoned choice, presented as if they were good or evil.  Let a person shift their opinions only to what belongs in the field of their own choice, and I guarantee that person will have peace of mind, whatever is happening around them.",
            "author": "Epictetus",
            "source": "Discourses, 3.3.18b-19"
          }
        ],
        "notes": "<p>Opinions.  Everyone's got one.</p><p>Think about all the opinions you have: about whether today's weather is convenient, about what liberals and conservatives believe, about whether so-and-so's remark is rude or not, about whether you're successful (or not), and on and on.  We're constantly looking at the world around us and putting our opinion on top of it.  And our opinion is often shaped by dogma (religious or cultural), entitlements, expectations, and in some cases, ignorance.</p><p>No wonder we feel upset and angry so often!  But what if we let these opinions go?  Let's try weeding (<span lang='el'><i>ἐκκοπέω</i></span>; cutting or knocking out) them out of our lives so that things simply <em>are</em>.  Not good or bad, not colored with opinion or judgment.  Just <em>are</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Belief Shaping",
        "quotes": [
          {
            "quote": "It's not the events or our lives that shape us, but our beliefs as to what those events mean, and the path shows us how to shape these beliefs to cease suffering.",
            "author": "Sylvia Boorstein",
            "source": "It's Easier Than You Think: The Buddhist Way to Happiness"
          }
        ],
        "notes": "<p>Life happens.  It's not the event itself that causes suffering, but how we interpret it.  The Eightfold Path helps us cultivate <q>right view,</q> seeing things clearly and without distortion.  By understanding the impermanent nature of life and letting go of unhelpful beliefs, we can reduce suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 19",
    "topics": [
      {
        "topic": "Our Sphere Of Impulses",
        "quotes": [
          {
            "quote": "Epictetus says we must discover the missing art of assent and pay special attention to the sphere of our impulses—that they are subject to reservation, to the common good, and that they are in proportion to actual worth.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.37"
          }
        ],
        "notes": "<p>Here we have the emperor, the most powerful man in the world, quoting in his diary the wisdom of a former slave (and from what we know, Marcus might have had direct notes from Epictetus's lectures via one of his former students).  That wisdom was ultimately about surrender and serving the common good—about the limits of our power and the importance of checking our impulses—something every person in authority needs to hear.</p><p>Power and powerlessness seem so rarely to enter the same orbit—but when they do it can change the world.</p><p>In our lives, whether we're experiencing great power or powerlessness, it's critical to leave room for what may happen and keep the common good and the actual worth of things front and center.  And, above all, be willing to learn from anyone and everyone, regardless of their station in life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Cultivating Life Beyond The Mind",
        "quotes": [
          {
            "quote": "The path is not simply about cultivating the mind; it's about cultivating a life of ethics, mindfulness, and wisdom.",
            "author": "Sharon Salzberg",
            "source": "Faith: Trusting Your Own Deepest Experience"
          }
        ],
        "notes": "<p>Buddhism isn't just about meditation or mental exercises.  The Eightfold Path emphasizes cultivating these qualities in all aspects of life.  We practice right speech in our communication, right action in our deeds, and right livelihood in our work.  This holistic approach brings about a more mindful and peaceful way of living.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 20",
    "topics": [
      {
        "topic": "Real Good Is Simple",
        "quotes": [
          {
            "quote": "Here's a way to think about what the masses regard as being <q>good</q> things.  If you would first start by setting your mind upon things that are unquestionably good—wisdom, self-control, justice, courage—with this preconception you'll no longer be able to listen to the popular refrain that there are too many good things to experience in a lifetime.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.12"
          }
        ],
        "notes": "<p>Is it that controversial to say that there are the things that people value (and pressure you to value as well)—and there are the things that are actually good?  Or to question whether wealth and fame are all they are cracked up to be?  As Seneca observed in one of his plays<blockquote><q>If only the hearts of the wealthy were opened to all!<br>How great the fears high fortune stirs up within them.</q></blockquote></p><p>For centuries, people have assumed that wealth would be a wonderful cure-all for their unhappiness or problems.  Why else would they have worked so hard for it?  But when people actually acquired the money and status they craved, they discovered it wasn't quite what they had hoped.  The same is true of so many things we covet without really thinking.</p><p>On the other hand, the <q>good</q> that the Stoics advocate is simpler and more straightforward: wisdom, self-control, justice, courage.  No one who achieves these quiet virtues experiences buyer's remorse.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Awakened Heart",
        "quotes": [
          {
            "quote": "Right understanding leads naturally to right action, right livelihood, and right effort, which are the expressions of the awakened heart.",
            "author": "Ajahn Sumedho",
            "source": "The Sound of Silence"
          }
        ],
        "notes": "<p>Understanding the nature of reality, including the truth of suffering, motivates us to act with kindness (right action) and choose a profession that aligns with our values (right livelihood).  This understanding also inspires <q>right effort</q>—the motivation to cultivate positive mental states and overcome negativity.  These are all expressions of a heart awakened to compassion and wisdom.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 21",
    "topics": [
      {
        "topic": "Don't Let Your Attention Slide",
        "quotes": [
          {
            "quote": "When you let your attention slide for a bit, don't think you will get back a grip on it whenever you wish—instead, bear in mind that because of today's mistake everything that follows will be necessarily worse ...  Is it possible to be free from error?  Not by any means, but it is possible to be a person always stretching to avoid error.  For we must be content to at least escape a few mistakes by never letting our attention slide.",
            "author": "Epictetus",
            "source": "Discourses, 4.12.1; 19"
          }
        ],
        "notes": "<p>David Meyer, a cognitive scientist at the University of Michigan stated, <q>Einstein didn't invent the theory of relativity while he was multitasking at the Swiss patent office.</q>  It came after, when he <em>really</em> had time to focus and study.  Attention matters—and in an era in which our attention is being fought for by every new app, website, article, book, tweet, and post, it's value has only gone up.</p><p>Part of what Epictetus is saying here is that attention is a habit, and that letting your attention slip and wander builds bad habits and enables mistakes.</p><p>You'll never complete all your tasks if you allow yourself to be distracted with every tiny interruption.  Your attention and time are some of your most critical resources.  Don't squander them!</p>",
        "thoughts": ""
      },
      {
        "topic": "Practicing Dharma In Every Step",
        "quotes": [
          {
            "quote": "Every step on the path is an opportunity to practice the dharma, to turn challenges into opportunities for growth and awakening.",
            "author": "Thubten Chodron",
            "source": "Buddhism for Beginners"
          }
        ],
        "notes": "<p>The Buddhist teachings, or dharma, are not just abstract ideas.  They are practical tools for navigating life's ups and downs.  Every challenge, every frustration, is an opportunity to practice mindfulness, patience, and understanding.  By approaching difficulties with the dharma in mind, we can transform them into opportunities for growth and awakening.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 22",
    "topics": [
      {
        "topic": "The Marks of a Rational Person",
        "quotes": [
          {
            "quote": "These are the characteristics of the rational soul: self-awareness, self-examination, and self-determination.  It reaps its own harvest ...  It succeeds in its own purpose ...",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.1-2"
          }
        ],
        "notes": "<p>To be rational today, we have to do just three things:<blockquote>First, we must look inward.<br>Next, we must examine ourselves critically.<br>Finally, we must make our own decisions—uninhibited by biases or popular notions.</blockquote></p>",
        "thoughts": ""
      },
      {
        "topic": "Embracing The Moment",
        "quotes": [
          {
            "quote": "The path involves embracing wholeheartedly the moment as it is, applying principles of meditation and mindfulness in all aspects of life.",
            "author": "Pema Chödrön",
            "source": "The Places that Scare You: A Guide to Fearlessness in Difficult Times"
          }
        ],
        "notes": "<p>Imagine a beautiful painting.  Truly appreciating it requires our full attention.  The Buddhist path encourages us to approach life in the same way.  By being mindful in all activities, washing dishes, talking to a friend, or commuting to work, we experience life more fully and cultivate a sense of peace within the present moment.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 23",
    "topics": [
      {
        "topic": "The Mind Is All Yours",
        "quotes": [
          {
            "quote": "You have been formed of three parts—body, breath, and mind.  Of these, the first two are yours insofar as they are only in your care.  The third alone is truly yours.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.3"
          }
        ],
        "notes": "<p>The body can be ravaged by disease or injured or disabled in a sudden accident.  It can be imprisoned or subjected to torture.  The breath can suddenly cease because our time has come, or because someone has taken it from us.  Breathing can grow labored because of exertion or illness as well.  But up until the very end, our mind is ours.</p><p>It's not that the other two parts of life that Marcus mentions—our body and our breath—don't matter.  They're just less <q>ours<//q> than our mind.  You wouldn't spend much time fixing up a house that you rent, would you?  Our mind is ours—free and clear.  Let's make sure we treat it right.</p>",
        "thoughts": ""
      },
      {
        "topic": "Humility In The Spiritual Journey",
        "quotes": [
          {
            "quote": "The spiritual journey is one of continuous learning and purification.  When you know this, you become humble.",
            "author": "Tenzin Wangyal Rinpoche",
            "source": "The Tibetan Yogas of Dream and Sleep"
          }
        ],
        "notes": "<p>The path of Buddhism is a lifelong journey of discovery.  There's always more to learn about ourselves and the world.  This realization cultivates humility, reminds us that we are all students on this path.  Humility allows us to be open to new ideas and keeps us grounded on our journey.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 24",
    "topics": [
      {
        "topic": "A Productive Use For Contempt",
        "quotes": [
          {
            "quote": "Just as when meat or other foods are set before us we think, this is a dead fish, a dead bird or pig; and also, this fine wine is only the juice of a bunch of grapes, this purple-edged robe just sheep's wool dyed in a bit of blood from a shellfish; or of sex, that it is only rubbing private parts together followed by a spasmic discharge—in the same way our impressions grab actual events and permeate them, so we see them as they really are.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.13"
          }
        ],
        "notes": "<p>There is one Stoic exercise that might well be described as contemptuous expressions.  Stoics use an almost cynical language as a way to dismantle some of the fanciest or most coveted parts of life.  Marcus's joke about sex—why would he say something like that?  Well, if you take a second to consider sex in such an absurd light, you may be less likely to do something shameful or embarrassing in the pursuit of it.  It's a counterbalance to the natural bias we have toward something that feels really good.</p><p>We can apply this same way of thinking to a lot of things that people prize.  Consider that envy-inducing photo you see on social media—imagine the person painstakingly staging it.  What about that job promotion that means so much?  Look at the lives of other so-called successful people.  Still think it holds magical power?  Money, which we want more of and are reluctant to part with—consider how covered in bacteria and filth it is.  That beautiful, perfect person you're admiring from afar?  Remember that if they're single, other people must have dumped them at some point.  There must be <em>something</em> wrong with them.</p><p>This exercise won't turn you into a cynic.  But it will provide some much-needed objectivity.</p>",
        "thoughts": ""
      },
      {
        "topic": "Meditation as a Vehicle to Insight",
        "quotes": [
          {
            "quote": "The path requires thorough commitment to meditation as the vehicle through which insights into the nature of suffering and its cessation are realized.",
            "author": "Reginald Ray",
            "source": "Touching Enlightenment"
          }
        ],
        "notes": "<p>Think of a car as a vehicle for exploring a new city.  Meditation is like the vehicle that allows us to explore the inner landscape of our minds.  Through regular meditation practice, we gain insights into the root causes of suffering and discover ways to let go and find peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 25",
    "topics": [
      {
        "topic": "There's Nothing Wrong With Being Wrong",
        "quotes": [
          {
            "quote": "If anyone can prove and show to me that I think and act in error, I will gladly change it—for I seek the truth, by which no one has ever been harmed.  The one who is harmed is the one who abides in deceit and ignorance.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.21"
          }
        ],
        "notes": "<p>Someone once attempted to argue with the philosopher Cicero by quoting something he had said or written.  This person claimed Cicero was saying one thing now but had believed something different in the past.  His response: <q>I live from one day to the next!  If something strikes me as probable, I say it; and that is how, unlike everyone else, I remain a free agent.</q></p><p>No one should be ashamed at changing his mind—that's what the mind is for.  <q>A foolish consistency is the hobgoblin of little minds,</q> Emerson said, <q>adored by little statesmen and philosophers and divines.</q>  That's why we go to such lengths to learn and expose ourselves to wisdom.  It would be embarrassing if we didn't end up finding out if we were wrong in the past.</p><p>Remember: you're a free agent.  When someone points out a flaw in your belief or actions, it might be criticism, it might be misguided—but it could also be a better perspective.  Stay open.  Listen.  Consider.  And if it turns out to be true, don't be afraid to change.  That's strength, not weakness.</p>",
        "thoughts": ""
      },
      {
        "topic": "Enlightenment in Every Moment",
        "quotes": [
          {
            "quote": "Understanding the true nature of things, or enlightenment, is not a distant reality, but a reality in every moment of the path.",
            "author": "Sogyal Rinpoche",
            "source": "The Tibetan Book of Living and Dying"
          }
        ],
        "notes": "<p>Enlightenment, or Nirvana, can seem like a far-off goal.  But the Buddha teaches us that it's not a destination, but a quality of being present in every moment.  As we walk the path, cultivating mindfulness and compassion, we experience glimpses of this awakened state.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 26",
    "topics": [
      {
        "topic": "Things Happen in Training",
        "quotes": [
          {
            "quote": "When your sparring partner scratches or head-butts you, you don't then make a show of it, or protest, or view him with suspicion or as plotting against you.  And yet you keep an eye on him, not as an enemy or with suspicion, but with a healthy avoidance.  You should act this way with all things in life.  We should give a pass to many things with our fellow trainees.  For, as I've said, it's possible to avoid without suspicion or hate.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.20"
          }
        ],
        "notes": "<p>By seeing each day and each situation as a kind of training exercise, the stakes suddenly become a lot lower.  The way you interpret your own mistakes and the mistakes of others is suddenly a lot more generous.  It's certainly a more resilient attitude than going around acting like the stakes of every encounter put the championship on the line.</p><p>When you catch an elbow or an unfair blow today, shake off the pain and remind yourself: <em>I'm learning</em>.  Maybe my sparring partner is too—but maybe not.  Not everyone is interested in self-awareness or growth, and that's not something I can control.  What matters is that <em>I</em> use the moment to respond thoughtfully, to build strength, and to learn more about myself.</p>",
        "thoughts": ""
      },
      {
        "topic": "Transcending Self on the Path",
        "quotes": [
          {
            "quote": "The path is not just about self-improvement but about transcending the self altogether.",
            "author": "Dzongsar Jamyang Khyentse Rinpoche",
            "source": "What Makes You Not a Buddhist"
          }
        ],
        "notes": "<p>Buddhism isn't just about becoming a <q>better</q> person.  It's about understanding the illusion of separate self and seeing ourselves as interconnected with all things.  Through practices like meditation, we begin to loosen our grip on the ego and experience a sense of spaciousness and liberation.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 27",
    "topics": [
      {
        "topic": "Turn It Inside Out",
        "quotes": [
          {
            "quote": "Turn it inside out and see what it is like—what it becomes like when old, sick, or prostituting itself.  How short-lived the praiser and praised, the one who remembers and the remembered.  Remembered in some corner of these parts, and even there not in the same way by all, or even by one.  And the whole earth is but a mere speck.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.21"
          }
        ],
        "notes": "<p>Stoicism is about looking at things from every angle—and certain situations are easier to understand from different perspectives.  In potentially negative situations, the objective, even superficial gaze might actually be superior.  That view might let us see things clearly without diving too much into what they might represent or what might have caused them.  In other situations, particularly those that involve something impressive or praiseworthy, another approach, like that of contemptuous expressions, is helpful.  By examining situations from the inside out, we can be less daunted by them, less likely to be swayed by them.</p><p>Dig into your fear of death or obscurity, and what will you find?  Turn some fancy ceremony inside out and you'll find—what?</p>",
        "thoughts": "<blockquote><q>Life moves pretty fast.  If you don't stop and look around once in a while, you could miss it.</q><footer>— Ferris Bueller, <cite>Ferris Bueller's Day Off</cite></footer></blockquote>"
      },
      {
        "topic": "Hard Work of Letting Go",
        "quotes": [
          {
            "quote": "Letting go of clinging is the hardest work we will ever do, but it is also the most rewarding.",
            "author": "Ayya Khema",
            "source": "Who is My Self?  A Guide to Buddhist Meditation"
          }
        ],
        "notes": "<p>We often cling to things, experiences, and even ideas.  This clinging is a major source of suffering.  Letting go isn't about indifference, but about letting go of the attachment that causes pain.  It's challenging, but ultimately leads to a sense of freedom and inner peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 28",
    "topics": [
      {
        "topic": "Wants Make You A Servant",
        "quotes": [
          {
            "quote": "Tantalus: The highest power is—<br>Thyestes: No power, if you desire nothing.",
            "author": "Seneca",
            "source": "Thyestes, 440"
          }
        ],
        "notes": "<p>In the modern world, our interactions with tyranny are a bit more voluntary than they were in ancient times.  We put up with our controlling boss, though we could probably get a different job if we wanted.  We change how we dress or refrain from saying what we actually think?  Because we want to fit in with some cool group.  We put up with cruel critics or customers?  Because we want their approval.  In these cases, their power exists because of our wants.  You change that, and you're free.</p><p>The fashion photographer Bill Cunningham occasionally declined to invoice magazines for his work.  When a young upstart asked him why that was, Cunningham's response was epic: <q>If you don't take money, they can't tell you what to do, kid.</q></p><p>Remember: taking the money, wanting the money—proverbially or literally—makes you a servant to the people who have it.  Indifference to it, as Seneca put it, turns the highest power into <em>no power</em>, at least as far as your life is concerned.</p>",
        "thoughts": ""
      },
      {
        "topic": "Dharma Practice",
        "quotes": [
          {
            "quote": "Dharma practice isn't just sitting meditation, it is the complete way we live our lives.",
            "author": "Jetsunma Tenzin Palmo",
            "source": "Into the Heart of Life"
          }
        ],
        "notes": "<p>The Dharma, also known as the teachings of Buddha, are not confined to a meditation cushion.  They are a way of life.  Dharma practice is about integrating mindfulness, compassion, and wisdom into every aspect of our lives, from how we speak to how we work to how we interact with the world around us.  It's about living a life of integrity, kindness, and awareness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 29",
    "topics": [
      {
        "topic": "Washing Away The Dust Of Life",
        "quotes": [
          {
            "quote": "Watch the stars in their courses and imagine yourself running alongside them.  Think constantly on the changes of the elements into each other, for such thoughts wash away the dust of earthly life.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.47"
          }
        ],
        "notes": "<p>It is almost impossible to stare up at the stars and not feel something.  As cosmologist Neil deGrasse Tyson has explained, the cosmos fills us with complicated emotions.  On the one hand, we feel an infinitesimal smallness in comparison to the vast universe; on the other, an extreme connectedness to this larger whole.</p><p>Obviously, given that we're in our bodies every day, it's tempting to think that's the most important thing in the world.  But we counteract that bias by looking at nature—at things much bigger than us.  A line from Seneca, which has since become a proverb, expresses Marcus's insight well: <span lang='la'><i>Mundus ipse est ingens deorum omnium templum</i></span> (The world itself is a huge temple of all the gods).</p><p>Looking at the beautiful expanse of the sky is an antidote to the nagging pettiness of earthly concerns.  And it is good and sobering to lose yourself in that as often as you can.</p>",
        "thoughts": ""
      },
      {
        "topic": "Art of Living",
        "quotes": [
          {
            "quote": "The way of liberation is to learn the art of living, to engage in self-reflection until clarity, peace, and understanding emerge.",
            "author": "Alan Watts",
            "source": "The Way of Zen"
          }
        ],
        "notes": "<p>Imagine a muddy pond.  Self-reflection is like stirring the pond, allowing the mud to settle and the water to become clear.  Through practices like meditation and mindful daily activities, we can gain a clearer understanding of our thoughts, emotions, and motivations.  This clarity allows peace and wisdom to naturally arise.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "April 30",
    "topics": [
      {
        "topic": "What Is In Keeping With Your Character!",
        "quotes": [
          {
            "quote": "Just as what is considered rational or irrational differs for each person, in the same way what is good or evil and useful or useless differs for each person.  This is why we need education, so that we might learn how to adjust our preconceived notions of the rational and irrational in harmony with nature.  In sorting this out, we don't simply rely on our estimate of the value of external things, but also apply the rule of what is in keeping with one's character.",
            "author": "Epictetus",
            "source": "Discourses, 1.2.5-7"
          }
        ],
        "notes": "<p>It is easy to get wrapped up in our own opinions of things.  It's as if we're adhering to invisible scripts—following instructions or patterns we don't even understand.  The more you question these scripts and the more you subject them to the rigorous test of your education, the more you'll be your own compass.  You'll have convictions and thoughts that are your own and belong to no one else.</p><p>Character is a powerful defense in a world that would love to be able to seduce you, buy you, tempt you, and change you.  If you know what you believe and why you believe it, you'll avoid poisonous relationships, toxic jobs, fair-weather friends, and any number of ills that afflict people who haven't thought through their deepest concerns.  That's your education.  That's why you do this work.</p>",
        "thoughts": ""
      },
      {
        "topic": "Balancing Dharma Practice",
        "quotes": [
          {
            "quote": "The true practice of the dharma is about achieving balance—between effort and ease, and between harshness and indulgence.",
            "author": "Jack Kornfield",
            "source": "After the Ecstasy, the Laundry: How the Heart Grows Wise on the Spiritual Path"
          }
        ],
        "notes": "<p>The Buddhist path isn't about extremes.  It's about finding the middle way.  Imagine a tightrope walker - too much effort and they fall, too little and they lose balance.  The dharma teaches us to practice with diligence but also with a sense of ease.  We avoid being harsh on ourselves yet don't indulge in negativity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 1",
    "topics": [
      {
        "topic": "Make Character Your Loudest Statement",
        "quotes": [
          {
            "quote": "For philosophy doesn't consist in outward display, but in taking heed to what is needed and being mindful of it.",
            "author": "Musonius Rufus",
            "source": "Lectures, 16.75.15-16"
          }
        ],
        "notes": "<p>The monk dresses in his robes.  A priest puts on his collar.  A banker wears an expensive suit and carries a briefcase.  A Stoic has no uniform and resembles no stereotype.  They are not identifiable by look, by sight, or by sound.</p><p>The only way to recognize them?  By their character.</p>",
        "thoughts": ""
      },
      {
        "topic": "Living Wisdom Of The Buddha",
        "quotes": [
          {
            "quote": "The noble eightfold path is the practical embodiment of the wisdom of the Buddha, intended to be lived rather than merely pondered.",
            "author": "Bhikkhu Bodhi",
            "source": "The Middle Length Discourses of the Buddha"
          }
        ],
        "notes": "<p>The Buddha's teachings aren't just beautiful philosophies.  The Eightfold Path is a practical guide for living a happier life.  It's not enough to simply think about these principles; we need to integrate them into our daily lives through meditation, ethical conduct, and mindful actions.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 2",
    "topics": [
      {
        "topic": "Be The Person You Want To Be",
        "quotes": [
          {
            "quote": "First tell yourself what kind of person you want to be, then do what you have to do.  For in nearly every pursuit we see this to be the case.  Those in athletic pursuit first choose the sport they want, and then do that work.",
            "author": "Epictetus",
            "source": "Discourses, 3.23.1-2a"
          }
        ],
        "notes": "<p>An archer is unlikely to hit a target they never aimed for.  The same is true for you, whatever your purpose.  You are <em>certain</em> to miss the mark if you never draw the bow or release the arrow.<p>Your reason and values must guide you in discerning what is truly worth aiming at—what is aligned with virtue, duty, and your nature.  But ultimately, it is through right action that any goal is approached.</p>So yes, set aside real time to reflect—quietly and honestly—on what is essential.  Then act toward it with clarity and consistency.  Let go of distractions and what does not serve your role as a rational being.  But do not forsake your obligations or the people entrusted to your care.  The path is not about having everything—but neither is it about abandoning everything.  It is about choosing wisely, and walking forward with integrity.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Path From Rage to Reason",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Chad was fire and fury.  His anger flared at stupid people, those without situational awareness, and those without regard for others.  The world was a battle ground, and he was always on the defensive.</p><p>One day, his wife, Anita, known for her calm demeanor asked, <q>What fuels this rage, Chad?</q>  He vented his frustrations about how people aren't conscious of their own stupidity and not wanting to improve themselves.</p><p>She listened, then offered, <q>Your suffering comes from how you see the world.  There's a path towards peace—it begins with understanding.  Not book learning, but understanding that everything shifts and changes, that we're all connected.  This doesn't mean you agree with everyone or that you won't get annoyed, but it frees you from becoming overly upset</q></p><p>Chad, curious despite himself, began noticing instead of reacting.  He watched his anger like a storm, felt it's heat without getting swept away.  He considered the lives of other drivers and their possible emergencies or unavoidable life distractions, the momentary lapse that others sometimes have.  It wasn't easy, but slowly, the fire dimmed.  His shoulders relaxed.  In the space left by rage, a quiet sort of peace began to grow.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 3",
    "topics": [
      {
        "topic": "Show, Not Tell, What You Know",
        "quotes": [
          {
            "quote": "Those who receive the bare theories immediately want to spew them, as an upset stomach does its food.  First digest your theories and you won't throw them up.  Otherwise they will be raw, spoiled, and not nourishing.  After you've digested them, show us the changes in your reasoned choices, just like the shoulders of gymnasts display their diet and training, and as the craft of artisans show in what they've learned.",
            "author": "Epictetus",
            "source": "Discourses, 3.21.1-3"
          }
        ],
        "notes": "<p>Many of the Stoic aphorisms are simple to remember and even sound smart when quoted.  But that's not what philosophy is really about.  The goal is to turn these words into <em>works</em>.  As Musonius Rufus said, philosophy proves itself when <q>sound teaching is joined with sound conduct.</q></p><p>So, next time you feel the urge to show off what you know, pause and ask: <em>Would it be wiser to speak, or to let my actions quietly reflect the truth of what I've learned?</em></p>",
        "thoughts": ""
      },
      {
        "topic": "The Basis of True Understanding",
        "quotes": [
          {
            "quote": "True understanding arises from our own experience, not from simply believing what others tell us.",
            "author": "Thich Nhat Hanh",
            "source": ""
          }
        ],
        "notes": "<p>The Buddha encouraged his followers to question and explore.  True understanding comes from our own experience on the path.  While the teachings of a master can be helpful, ultimately, it's our own practice and self-reflection that lead to deep insight.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 4",
    "topics": [
      {
        "topic": "What's Truly Impressive",
        "quotes": [
          {
            "quote": "How much better is it to be known for doing well by many than for living extravagantly?  How much more worthy than spending on sticks and stones is it to spend on people?",
            "author": "Musonius Rufus",
            "source": "Lectures, 19.91.26-28"
          }
        ],
        "notes": "<p>Think for a moment about the way we talk about wealth.  We marvel at the lavish homes, the private jets, the entourages.  It's easy to be impressed by extravagance—after all, it's designed to draw attention.</p><p>But this fascination isn't new.  In ancient Rome, the elite were known for spending fortunes on ornamental ponds, decadent feasts, and elaborate parties.  Writers like Juvenal and Martial recorded these details, not always to praise, but often to question.</p><p>Wealth can certainly buy visibility.  It creates an image, a reputation.  But is that all we admire?  The ability to spend endlessly?  Because truthfully, given enough money, most people could do the same.</p><p>Now consider a different kind of example.  Marcus Aurelius once sold imperial possessions to help settle war debts.  In modern times, José Mujica, the former president of Uruguay, lived in a modest home, gave away most of his salary, and drove an old car.  Those choices reflect something harder to fake: discipline, principle, and purpose.  So perhaps the better question is: What kind of life is truly worthy of admiration?</p>",
        "thoughts": ""
      },
      {
        "topic": "Self-Sourced Peace and Joy",
        "quotes": [
          {
            "quote": "When you realize that everything springs only from yourself, you will learn both peach and joy.",
            "author": "Dalai Lama",
            "source": "The Path to Tranquility: Daily Wisdom"
          }
        ],
        "notes": "<p>This quote can be interpreted in two ways.  First, it reminds us that our happiness and suffering ultimately come from our own thoughts and actions.  Second, it points to the interconnectedness of all things.  When we see ourselves as part of a larger web, we experience a sense of peace and belonging.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 5",
    "topics": [
      {
        "topic": "You Are The Project",
        "quotes": [
          {
            "quote": "The raw material for the work of a good and excellent person is their own guiding reason, the body is that of the doctor and the physical trainer, and the farm the farmer's.",
            "author": "Epictetus",
            "source": "Discourses, 3.3.1"
          }
        ],
        "notes": "<p>Professionals are expected to train and refine their skills—that's how excellence is built.  But even then, the time and effort invested must be wisely measured.  Practice is not good simply for being difficult or time-consuming; it's justified when it serves a clear purpose, when it's aligned with one's role and responsibilities.</p><p>The form of that practice differs across professions—some work with tools, others with words, others with people.  But in all cases, what matters is not just the effort, but its direction.</p><p>According to the Stoics, the most essential discipline is the one we often overlook: the training of the mind.  It is the asset that guides every other effort—and the one that demands the most honest attention.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Harm Of Ignorance",
        "quotes": [
          {
            "quote": "The most fundamental aggression to ourselves, the most fundamental harm we can do to ourselves, is to remain ignorant by not having the courage and the respect to look at ourselves honestly and gently.",
            "author": "Pema Chödrön",
            "source": "When Things Fall Apart: Heart Advice for Difficult Times"
          }
        ],
        "notes": "<p>We can be our own worst critics.  This quote reminds us that true self-compassion begins with honest self-reflection.  It takes courage to look at our flaws and shortcomings, but doing so gently, without judgment, allows for growth and transformation.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 6",
    "topics": [
      {
        "topic": "Righteousness is Beautiful",
        "quotes": [
          {
            "quote": "Then what makes a beautiful human being?  Isn't it the presence of human excellence?  Young friend, if you wish to be beautiful, then work diligently at human excellence.  And what is that?  Observe those whom you praise without prejudice.  The just or the unjust?  The just.  The even-tempered or the undisciplined?  The even-tempered.  The self-controlled or the uncontrolled?  The self-controlled.  In making yourself that kind of person, you will become beautiful—but to the extent you ignore these qualities, you'll be ugly, even if you use every trick in the book to appear beautiful.",
            "author": "Epictetus",
            "source": "Discourses, 3.1.6b-9"
          }
        ],
        "notes": "<p>Contemporary ideas about beauty often miss the mark.  We tend to admire qualities that lie mostly outside our control—features like bone structure, height, or eye color.  From a Stoic perspective, this emphasis feels misplaced.</p><p>Is beauty merely the product of good genetics?  Or should it be measured by the choices we make, the virtues we cultivate?  Qualities like steadiness, fairness, self-control, and commitment to duty—these are signs of true inner harmony.  And they endure far longer than appearances.</p><p>Each day offers the chance to live with integrity: to act justly, to remain calm, to stay true to what is right—even when it's hard.  That, according to Epictetus, is what makes someone truly beautiful.  And who wouldn't want to cultivate a beauty that no time or hardship can erase?</p>",
        "thoughts": ""
      },
      {
        "topic": "Insight Through Impermanence",
        "quotes": [
          {
            "quote": "Insight arises from understanding the true nature of all phenomena as impermanent, unsatisfactory, and not-self.",
            "author": "Bhikkhu Bodhi",
            "source": "In the Buddha's Words: An Anthology of Discourses from the Pali Canon"
          }
        ],
        "notes": "<p>Imagine a beautiful flower.  It's vibrant, but eventually wilts.  Everything in life, including ourselves and our experiences, is impermanent.  Recognizing this impermanence, along with the inherent unsatisfactoriness of clinging to things, allows us to see through the illusion of a permanent self and cultivate true insight.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 7",
    "topics": [
      {
        "topic": "How To Have A Good Day",
        "quotes": [
          {
            "quote": "God laid down this law, saying: if you want some good, get it from yourself.",
            "author": "Epictetus",
            "source": "Discourses, 1.29.4"
          }
        ],
        "notes": "<p>If you want to ensure a good day, <em>do good things</em>.  It's that simple.  Every other source of happiness—praise, pleasure, luck, comfort—depends on circumstances beyond your control.  But virtue?  Right action?  That is always within reach.</p><p>This is the essence of self-reliance: drawing your fulfillment not from what happens to you, but from how you choose to live.  The supply is unlimited, and it's yours to access at any moment.</p>",
        "thoughts": ""
      },
      {
        "topic": "wisdom From Direct Experience",
        "quotes": [
          {
            "quote": "Wisdom arises from the direct experience of all phenomena as inherently unsatisfactory, impermanent, and without any essence.",
            "author": "Sharon Salzberg",
            "source": "Lovingkindness: The Revolutionary Art of Happiness"
          }
        ],
        "notes": "<p>Wisdom isn't just intellectual knowledge.  It's the deep understanding that comes from directly experiencing the impermanent and unsatisfying nature of life.  Through practices like meditation, we can see this for ourselves, leading to a wiser and more accepting way of being.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 8",
    "topics": [
      {
        "topic": "Good And Evil?  Look At Your Choices",
        "quotes": [
          {
            "quote": "Where is Good?  In our reasoned choices.  Where is Evil?  In our reasoned choices.  Where is that which is neither Good nor Evil?  In the things outside of our own reasoned choice.",
            "author": "Epictetus",
            "source": "Discourses, 2.16.1"
          }
        ],
        "notes": "<p>Today, as things happen and you find yourself wondering what they all mean—as you find yourself contemplating various decisions, remember: the right thing to do always comes from our reasoned choice.  Not whether something is rewarded.  Not whether something will succeed, but whether it is the right <em>choice</em>.</p><p>Epictetus's dictum helps us cut through all this with clarity and confidence.  Is something good or bad?  Is this right or wrong?</p><p>Let everything else be secondary.  What matters most is whether your response is virtuous—guided by reason, justice, courage, and self-discipline.  That is where your control lies.  That is where your freedom lives.</p>",
        "thoughts": ""
      },
      {
        "topic": "Awakening Starts With Reality",
        "quotes": [
          {
            "quote": "Seeing things as they are is the first step on the path to awakening.",
            "author": "Chögyam Trungpa",
            "source": "Cutting Through Spiritual Materialism"
          }
        ],
        "notes": "<p>Imagine looking at the world through a filter that distorts colors.  Seeing things as they truly are, without illusions or self-deception, is the foundation for awakening.  This clear perception allows us to understand the nature of suffering and find ways to alleviate it.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 9",
    "topics": [
      {
        "topic": "Carpe Diem",
        "quotes": [
          {
            "quote": "Let us therefore set out whole-heartedly, leaving aside our many distractions and exert ourselves in this single purpose, before we realize too late the swift and unstoppable flight of time and are left behind.  As each day arises, welcome it as the very best day of all, and make it your own possession.  We must seize what flees.",
            "author": "Seneca",
            "source": "Moral Letters, 108.27b-28a"
          }
        ],
        "notes": "<p>You will only get one shot at today.  You have only twenty—four hours with which to take it.  And then it is gone and lost forever.  Will you fully inhabit all of today?  Will you call out, <q>I've got this,</q> and do your very best to be your very best?</p><p>What will you manage to make of today before it slips from your fingers and becomes the past?  When someone asks you what you did yesterday, do you really want the answer to be <q>nothing<q>?</p>",
        "thoughts": ""
      },
      {
        "topic": "Enlightenment Begins With Truth",
        "quotes": [
          {
            "quote": "The wisdom that realized the true nature of things directly, without any distortion, is the beginning of enlightenment.",
            "author": "Sogyal Rinpoche",
            "source": "The Tibetan Book of Living and Dying"
          }
        ],
        "notes": "<p>Enlightenment isn't a sudden flash of light.  It's a gradual process of awakening to the true nature of reality.  This awakening starts with wisdom, the ability to see things clearly and directly, without the distortions of our desires and anxieties.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 10",
    "topics": [
      {
        "topic": "Don't Be Inspired, Be Inspirational",
        "quotes": [
          {
            "quote": "Let us also produce some bold act of our own—and join the ranks of the most emulated.",
            "author": "Seneca",
            "source": "Moral Letters, 98.13b"
          }
        ],
        "notes": "<p>It was common in Greek and Roman times, just as it is now, for politicians to pander to their audience.  They would lavish effusive praise on the crowd, on their country, on inspiring military victories of the past.  How many times have you heard a political candidate say, <q>This is the greatest country in the history of the world</q>?  As orator Demosthenes pointed out, we'll gladly sit for hours to hear a speaker who stands in front of some famous or sacred landmark, <q>praising [our] ancestors, describing their exploits and enumerating their trophies.</q></p><p>But what does this flattery accomplish?  Nothing.  Worse, the admiration of shiny accolades distracts us from their true purpose.  Also, as Demosthenes explains, it betrays the very ancestors who inspire us.  He concluded his speech to the Athenian people with words that Seneca would later echo and still resounds centuries later.  <q>Reflect, then,</q> he said, <q>that your ancestors set up those trophies, not that you may gaze at them in wonder, but that you may also imitate the virtues of the men who set them up.</q></p>",
        "thoughts": ""
      },
      {
        "topic": "The Reality of Perception",
        "quotes": [
          {
            "quote": "To understand reality, one must see things as they truly are, not as one wishes them to be.",
            "author": "Thubten Chodron",
            "source": "Buddhism for Beginners"
          }
        ],
        "notes": "<p>We often cling to our desires and create stories about how things <q>should be.</q>  This quote reminds us that true understanding comes from seeing reality as it is, not through the lens of our wishes.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 11",
    "topics": [
      {
        "topic": "Guilt Is Worse Than Jail",
        "quotes": [
          {
            "quote": "The greatest portion of peace of mind is doing nothing wrong.  Those who lack self-control live disoriented and disturbed lives.",
            "author": "Seneca",
            "source": "Moral Letters, 105.7"
          }
        ],
        "notes": "<p>Consider the person who never has to look over their shoulder—not because they haven't been caught, but because they've done nothing wrong.  Seneca reminds us that peace of mind isn't something we recover after a confession or crisis; it's something we preserve through self-control and virtue.</p><p>This is why the disciplined life is so powerful: it shields us from the inner turmoil that plagues those who live by impulse.  While others are trapped in cycles of deceit, indulgence, and regret, the person who chooses what is right over what is easy moves freely and sleeps soundly.</p><p>It's not dramatic confession or eventual surrender that brings peace—it's never compromising your principles in the first place.  True tranquility is not the relief of a burden lifted, but the quiet that comes from never picking it up at all.</p>",
        "thoughts": "If you set your cruise control at the speed limit and enjoy the ride, you don't have to worry about speed traps."
      },
      {
        "topic": "Wisdom's Gateway",
        "quotes": [
          {
            "quote": "The first step in wisdom is to know deeply that all things are impermanent.",
            "author": "Henepola Gunaratana",
            "source": "Eight Mindful Steps to Happiness"
          }
        ],
        "notes": "<p>Wisdom begins with understanding the impermanent nature of life.  Everything changes, nothing lasts forever.  Recognizing this impermanence allows us to let go of clinging and find peace in the present moment.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 12",
    "topics": [
      {
        "topic": "Kindness Is Always The Right Response",
        "quotes": [
          {
            "quote": "Kindness is invincible, but only when it's sincere, with no hypocrisy or faking.  For what can even the most malicious person do if you keep showing kindness and, if given the chance, you gently point out where they went wrong—right as they are trying to harm you?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.18.5.9a"
          }
        ],
        "notes": "<p>What if the next time you were treated meanly, you didn't just restrain yourself from fighting back—what if you responded with unshakable calm and principle?  What if you could, as the <cite><em>Tao</em> Te Ching</cite> advises, <q>respond to anger with virtue</q>?  What kind of effect do you think that would have?</p><p>The <em>Tao</em> teaches that when you respond to hostility with grace, you interrupt the cycle.  People expect anger to be met with anger.  When someone says something cruel or pointed, they're bracing for retaliation—not for peace.  When that retaliation doesn't come, when you meet it with virtue instead, it disorients them.  It's a kind of moral jolt—one that makes them pause and, maybe, change.  And in the process, it makes you better too.</p><p>Most cruelty and spite come from weakness, from a lack of inner harmony.  To answer with composure and virtue is not passive—it's powerful.  It takes strength to stand still.  You have that strength.  Use it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Joyful Freedom In Spiritual Life",
        "quotes": [
          {
            "quote": "The aim of a spiritual life is to awaken a joyful freedom, a benevolent and compassionate heart in spite of everything.",
            "author": "Gil Fronsdal",
            "source": "The Issue at Hand"
          }
        ],
        "notes": "<p>The Buddhist path isn't about avoiding difficulties.  It's about cultivating a joyful freedom and a compassionate heart, even amidst life's challenges.  Through practices like mindfulness and meditation, we can develop inner strength and peace that allows us to navigate life's ups and downs with grace and kindness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 13",
    "topics": [
      {
        "topic": "Fueling The Habit Bonfire",
        "quotes": [
          {
            "quote": "Every habit and capability is confirmed and grows in its corresponding actions, walking by walking, and running by running .  .  .  therefore, if you want to do something make a habit of it, if you don't want to do that, don't, but make a habit of something else instead.  The same principle is at work in our state of mind.  When you get angry, you've not only experienced that evil, but you've also reinforced a bad habit, adding fuel to the fire.",
            "author": "Epictetus",
            "source": "Discourses, 2.18.1-5"
          }
        ],
        "notes": "<p><q>We are what we repeatedly do,</q> Aristotle said, <q>therefore, excellence is not an act but a habit.</q>  The Stoics add to that that we are a product of our thoughts (<q>Such as are your habitual thoughts, such also will be the character of your mind,</q> Marcus Aurelius put it).</p><p>Think about your activities of the last week as well as what you have planned for today and the week that follows.  The person you'd like to be, or the person you see yourself as—how closely do your actions actually correspond to him or her?  Which fire are you fueling?  Which person are you becoming?</p>",
        "thoughts": ""
      },
      {
        "topic": "Perception's Impact On Emotion",
        "quotes": [
          {
            "quote": "Our perception of a situation can have a profound impact on our emotional response.",
            "author": "Herbert Benson",
            "source": "The Relaxation Response"
          }
        ],
        "notes": "<p>Imagine two people looking at the same glass—one sees it half full, the other half empty.  Our perception shapes our emotions.  The Buddha's teachings emphasize cultivating a mindful awareness of our thoughts and perceptions, allowing us to respond to situations with more wisdom and less negativity.</p>",
        "thoughts": "The stoic would describe the glass as having 300 mL in it."
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 14",
    "topics": [
      {
        "topic": "Our Well-Being Lies In Our Actions",
        "quotes": [
          {
            "quote": "Those obsessed with glory attach their well-being to the regard of others, those who love pleasure tie it to feelings, but the one with true understanding seeks it only in their own actions.  .  .  .  Think on the character of the people one wishes to please, the possessions one means to gain, and the tactics one employs to such ends.  How quickly time erases such things, and how many will yet be wiped away.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6:51, 59"
          }
        ],
        "notes": "<p>If your happiness is dependent on accomplishing certain goals, what happens if fate intervenes?  What if you're passed over?  If outside events interrupt?  What if you do achieve everything but find that nobody notices or appreciates it?  That's the danger of tying your happiness to things beyond your control.  It's a risky way to live.</p><p>Think instead of someone doing their job—whether it's teaching, managing a project, raising a child, or simply doing chores around the house.  If they're focused on how others react—whether they get praise, promotion, or gratitude—they will often feel disappointed or unappreciated.  But if they take pride in how they do the work, in doing it thoroughly and with care, they will always have satisfaction, regardless of recognition.</p><p>Like them, we should focus on doing the right thing—not for applause or outcome, but because it's the right thing to do.  Our goal shouldn't be to <q>win</q> but to give our best effort.  Our purpose isn't to be praised, but to act with integrity.  In that, we'll find contentment and strength that no one can take away.</p>",
        "thoughts": ""
      },
      {
        "topic": "Buddha's Guides Not Rules",
        "quotes": [
          {
            "quote": "The Buddha's teachings are a guide, not a set of rules.  We must use our own wisdom to discern what is skillful and what is unskillful.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Think of a map—it helps us navigate, but we still need to make choices about the route.  The Buddha's teachings are a roadmap for living a happier life.  But it's up to us to apply them with wisdom and discernment in our own unique circumstances.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 15",
    "topics": [
      {
        "topic": "Count Your Blessings",
        "quotes": [
          {
            "quote": "Don't set your mind on things you don't possess as if they were yours, but count the blessings you actually possess and think how much you would desire them if they weren't already yours.  But watch yourself, that you don't value these things to the point of being troubled if you should lose them.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.27"
          }
        ],
        "notes": "<p>We don't all chase status or possessions, but it's easy to overlook what we already have.  Often, we take for granted the very things we'd long for if they were suddenly gone—our health, our relationships, our peace of mind.</p><p>Marcus reminds us not to cling too tightly, even to those blessings.  Gratitude doesn't mean attachment.  It means recognizing the value of something while still understanding its impermanence.</p><p>So today, instead of longing for what's out of reach, take stock of what's already yours—and hold it lightly.</p>",
        "thoughts": ""
      },
      {
        "topic": "True Insight Vs.  Appearance",
        "quotes": [
          {
            "quote": "Insight is recognizing things as they actually are, not as they appear to be.",
            "author": "Analayo Bhikkhu",
            "source": "Satipaṭṭhāna: The Direct Path to Realization"
          }
        ],
        "notes": "<p>Imagine a mirage in the desert.  Insight is seeing through illusions and distortions.  Through practices like meditation, we can cultivate a clearer understanding of ourselves, the world, and the nature of suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 16",
    "topics": [
      {
        "topic": "The Chain Method",
        "quotes": [
          {
            "quote": "If you don't wish to be a hot-head, don't feed your habit.  Try as a first step to remain calm and count the days you haven't been angry.  I used to be angry every day, now every other day, then every third or fourth .  .  .  if you make it as far as 30 days, thank God!  For habit is first weakened and then obliterated.  When you can say <q>I didn't lose my temper today, or the next day, or the three or four months, but kept my cool under provocation,</q> you will know you are in better health.",
            "author": "Epictetus",
            "source": "Discourses, 2.18.11b-14"
          }
        ],
        "notes": "<p>One of the most effective strategies for changing behavior—whether it's building a good habit or breaking a bad one—is to create visible momentum.  Think of someone trying to get in shape.  The first workout is tough, but they mark it on the calendar.  Then they show up again the next day.  A few days turn into a week.  The trick becomes simple: don't break the streak.  Each day builds on the last.</p><p>Epictetus is talking about the same idea here, but applied to managing anger.  You start with one day where you keep your cool.  Then you try to do it again the next day.  And again.  Over time, the habit of anger weakens—just like a sugar craving gets weaker the longer you avoid it.  The further you go, the more motivated you become to keep going.  You don't want to ruin your streak.  You want to keep building.</p>",
        "thoughts": ""
      },
      {
        "topic": "Clarity Through Letting Go",
        "quotes": [
          {
            "quote": "Letting go of our fixed ideas about ourselves and the world allows us to see things more clearly.",
            "author": "Ajahn Brahm",
            "source": "With Each and Every Breath"
          }
        ],
        "notes": "<p>We all have mental models about how things work.  Sometimes these models are helpful, but sometimes they distort our perception.  The Buddhist path encourages letting go of rigid beliefs to see the world with fresh eyes and greater understanding.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 17",
    "topics": [
      {
        "topic": "The Stoic Is A Work In Progress",
        "quotes": [
          {
            "quote": "Show me someone sick and happy, in danger and happy, dying and happy, exiled and happy, disgraced and happy.  Show me!  By God, how much I'd like to see a Stoic.  But since you can't show me someone that perfectly formed, at least show me someone actively forming themselves so, inclined in this way .  .  .  Show me!",
            "author": "Epictetus",
            "source": "Discourses, 2.19.24-25a, 28"
          }
        ],
        "notes": "<p>Instead of seeing philosophy as an end to which one aspires, see it as something one <em>applies</em>.  Not occasionally, but over the course of a life—making incremental progress along the way.  Sustained execution, not shapeless epiphanies.</p><p>Epictetus loved to shake his students out of their smug satisfaction with their own progress.  He wanted to remind them—and now you— of the constant work and serious training needed every day if we are ever to approach that perfect form.</p><p>It's important for us to remember in our own journey to self-improvement: one never <em>arrives</em>.  The sage—the perfect Stoic who behaves perfectly in every situation—is an ideal, not an end.</p>",
        "thoughts": ""
      },
      {
        "topic": "Reason and Verification",
        "quotes": [
          {
            "quote": "The Buddha's teachings are not based on blind faith, but on reason, experience and verification.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The Buddha encouraged his followers to question and experiment.  His teachings are based on his own experience and insights, and they invite us to explore them for ourselves.  Ultimately, it's our own practice and experience that lead to true understanding.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 18",
    "topics": [
      {
        "topic": "How You Do Anything Is How You Do Everything",
        "quotes": [
          {
            "quote": "Pay attention to what's in front of you—the principle, the task, of what's being portrayed.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.22"
          }
        ],
        "notes": "<p>It's fun to think about the future.  It's easy to ruminate on the past.  It's harder to put that energy into what's in front of us right at this moment—especially if it's something we don't want to do.  We think: <em>This is just a job; it isn't who I am.  It doesn't matter.</em>  But it does matter.  Who knows—it might be the last thing you ever do.  Here lies Dave, buried alive under a mountain of unfinished business.</p><p>There is an old saying: <q>How you do anything is how you do everything.</q>  It's true.  How you handle today is how you'll handle every day.  How you handle this minute is how you'll handle every minute.</p>",
        "thoughts": ""
      },
      {
        "topic": "Roots of Suffering Unveiled",
        "quotes": [
          {
            "quote": "Right understanding allows us to see the root causes of our suffering, such as craving and clinging.",
            "author": "Ajahn Sucitto",
            "source": ""
          }
        ],
        "notes": "<p>Imagine being lost in a forest because you're following the wrong path.  Right understanding, the first factor of the Eightfold Path, helps us see the true nature of reality, including the root causes of suffering.  By understanding craving and clinging, we can find ways to let go and experience more peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "Scholasticism",
        "quotes": [
          {
            "quote": "Ocean inside a skull-cap<br>Seeking the universal code in letters.<br>The mind is like a flower on icy water;<br>An eye within the petals",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The intellect is one of the thorniest problems for a spiritual aspirant.  One cannot do without it—indeed, it is essential—and yet one cannot allow it to remain totally dominant.  The intellect must be fully developed before it is brought to a point of neutrality.  Unless this is done, it will act as a block, and there will not be any ultimate spiritual success.</p><p>Scholarship is thus an important first step.  Education is a means of gaining access to the conventional world, of satisfying our curiosity, and of avoiding superstitious tendencies.  There can be no talk of delving into philosophical mysteries if one has not even satisfied one's curiosity about nature, civilization, mathematics, and language.  But once mental cultivation is achieved, one must focus increasingly on a part of the mind that is far beyond the scholarly.</p><p>The intellect uses discrimination, categorization, and dualistic distinctions in highly sophisticated ways.  By contrast, spiritual contemplation involves no discrimination, no categorization, and no dualism, so it has very little need for scholasticism.  It is pure action that requires the totality of our inner beings.  It needs pure involvement, not mere study.  The proper use of the intellect is to give it free play, develop it to an extraordinary degree, and yet to leave it behind when spiritual action is required.  A sage knows how to balance and combine both.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 19",
    "topics": [
      {
        "topic": "Learn, Practice, Train",
        "quotes": [
          {
            "quote": "That's why the philosophers warn us not to be satisfied with mere learning, but to add practice and then training.  For as time passes we forget what we learned and end up doing the opposite, and hold opinions the opposite of what we should.",
            "author": "Epictetus",
            "source": "Discourses, 2.9.13-14"
          }
        ],
        "notes": "<p>Very few people can simply watch an instructional video or hear something explained and then know, backward and forward, how to do it.  Most of us actually have to <em>do</em> something several times in order to truly learn.  One of the hallmarks of the martial arts, military training, and athletic training of almost any kind is the hours upon hours upon hours of monotonous practice.  An athlete at the highest level will train for years to perform movements that can last mere seconds—or less.  The two-minute drill, how to escape from a chokehold, the perfect serve.  Simply knowing isn't enough.  It must be absorbed into the muscles and the body.  It must become part of us.  Or we risk losing it the second that we experience stress or difficulty.</p><p>It is true with philosophical principles as well.  You can't just hear something once and expect to rely on it when the world is crashing down around us.  Remember, Marcus Aurelius wasn't writing his meditations for other people.  He was actively meditating <em>for himself</em>.  Even as a successful, wise, and experienced man, he was until the last days of his life practicing and training himself to do the right thing.  Like a black belt, he was still showing up to the dojo every day to do kata; like a professional athlete, he still showed up to practice each week—even though others probably thought it was unnecessary.</p>",
        "thoughts": ""
      },
      {
        "topic": "Interconnectedness In Right View",
        "quotes": [
          {
            "quote": "Right view encourages us to see ourselves not as isolated entities, but as interconnected with all things.",
            "author": "Gil Fronsdal",
            "source": ""
          }
        ],
        "notes": "<p>Imagine a single drop of water in a vast ocean.  Right view encourages us to see ourselves as part of a larger web of existence.  This interconnectedness fosters compassion and a sense of belonging.</p>",
        "thoughts": ""
      },
      {
        "topic": "Marriage",
        "quotes": [
          {
            "quote": "Wall of flames, bridge of tears.<br>Snowflake on newly forged links.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>For a marriage to last, a couple must go through great travails and hardships.  It is like a process of forging steel links together.  The iron must be heated to a high degree, and then plunged into cold water.  A marriage alternates between the heat of passion and love and the chilling times of tragedy, conflict, and adversity.  An enduring marriage becomes like tempered steel.</p><p>It is difficult to go through life alone.  We all need support and the sense of belonging that comes from working toward goals shared with another.  For such a relationship to work, there must be a basic compatibility of values, outlook, and purpose.  It is an inadequate cliché that husband and wife must be friends as well as lovers.  Two mates can know a loyalty found in no other type of relationship.  Yet even in the face of such strength, <em>Tao</em> reminds us of the need for moderation.</p><p>Ultimately, all relationships are temporary.  False attachment to another can become an addiction, a voluntary bondage detrimental to clear perception.  We should not bind another to ourselves, should not define ourselves by our marriage, should not force another to stay with us.  But if chance allows us to walk together, who is anyone to challenge our choice of walking companions?</p><p>When it is time to part, then it is time to part.  There should be no regrets.  The beauty of marriage is like the fleeting perfection of a snowflake.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 20",
    "topics": [
      {
        "topic": "Quality Over Quantity",
        "quotes": [
          {
            "quote": "What's the point of having countless books and libraries, whose titles could hardly be read through in a lifetime.  The learner is not taught, but burdened by the sheer volume, and it's better to plant the seeds of a few authors than to be scattered about by many.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 9.4"
          }
        ],
        "notes": "<p>There is no prize for having read the most books before you die.</p><p>Even if you were the most dedicated reader in the world—a book a day, even—your collection would probably never be bigger than a small branch library.  You'll never even come close to matching what's stored in the servers at Google Books or keep up with the hundreds of thousands of new titles published on Amazon each year.</p><p>What if, when it came to your reading and learning, you prioritized quality over quantity?  What if you read the few great books deeply instead of briefly skimming all the new books?  Your shelves might be emptier, but your brain and your life would be fuller.</p>",
        "thoughts": ""
      },
      {
        "topic": "Seeing Beyond Illusion",
        "quotes": [
          {
            "quote": "Illusion is the root of suffering.  Right view is seeing things as they truly are.",
            "author": "Sam Harris",
            "source": "Waking Up"
          }
        ],
        "notes": "<p>Imagine looking through a dusty window.  Our suffering often arises from seeing the world through the lens of illusion.  Right view helps us see things clearly, without distortion, allowing us to address the true causes of suffering.</p>",
        "thoughts": ""
      },
      {
        "topic": "Dissent",
        "quotes": [
          {
            "quote": "Old man: Dissent is not disloyalty.<br>Be careful before you retaliate.<br>Your steel wrapped in cotton<br>May only be brittle bone wrapped in fat.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>No one is a supreme authority.  People seek leaders, priests, gurus, and hermits thinking that someone has a precise formula for living correctly.  No one does.  No one can know you as well as you can know yourself.  All that you can gain from a wise person is the assurance of some initial guidance.  You may even spend decades studying under such an extraordinary person, but you should never surrender your dignity, independence, and personality.</p><p>There is no single way to do things in life.  There are valid paths, even though they may differ from the ways of respected elders.  Diversity is good for tradition.  Too often, elders confuse dissent with disloyalty and punish people for the crime of having a different view.  They are no longer in touch with <em>Tao</em> but instead mouth self-serving convention.  Perhaps the panic of their own impending death makes them clutch.  When the leaders become repressive, it is a sign that their time is drawing to a close.</p><p>A saying about old masters was that they were like steel wrapped in cotton: They appeared soft on the outside but still held great power on the inside.  We all hope for elders like that.  But oftentimes, the old masters have lost their mandate of <em>Tao</em>.  Then, when tested, they are merely brittle bone and fat.  How can we respect such people?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 21",
    "topics": [
      {
        "topic": "What Kind Of Boxer Are You?",
        "quotes": [
          {
            "quote": "But what is philosophy?  Doesn't it simply mean preparing ourselves for what may come?  Don't you understand that really amounts to saying that if I would so prepare myself to endure, then let anything happen that will?  Otherwise, it would be like the boxer exiting the ring because he took some punches.  Actually, you can leave the boxing ring without consequence, but what advantage would come from abandoning the pursuit of wisdom?  So, what should each of us say to every trial we face?  This is what I've trained for, for this my discipline!",
            "author": "Epictetus",
            "source": "Discourses, 3.10.6-7"
          }
        ],
        "notes": "<p>The Stoics loved to use boxing and wrestling metaphors the way we use baseball and football analogies today.  This is probably because the sport of <span lang='el'><i>παγκράτιον</i></span>—literally, <q>all strength,</q> but a purer form of mixed martial arts than one sees today—in the UFC was integral to boyhood and manhood in Greece and Rome.  (In fact, recent analysis has found instances of <q>cauliflower ear,</q> a common grappling injury, on Greek statues.)  The Stoics refer to fighting because it's what they knew.</p><p>Seneca writes that unbruised prosperity is weak and easy to defeat in the ring, but <q>a man who has been at constant feud with misfortunes acquires a skin calloused by suffering.</q>  This man, he says, fights all the way to the ground and never gives up.</p><p>That's what Epictetus means too.  What kind of boxer are you if you leave because you get hit?  That's the nature of the sport!  Is that going to stop you from continuing?</p>",
        "thoughts": ""
      },
      {
        "topic": "Mindfulness And Right View",
        "quotes": [
          {
            "quote": "Right view is not blind faith in Buddhist teachings, but seeing things as they truly are through the practice of mindfulness.",
            "author": "Joseph Goldstein",
            "source": "The Experience of Insight"
          }
        ],
        "notes": "<p>Right view isn't about simply accepting Buddhist teachings.  It's about cultivating mindfulness and seeing things clearly for ourselves.  Through meditation and mindful daily activities, we can develop our own understanding of reality.</p>",
        "thoughts": ""
      },
      {
        "topic": "Wrinkles",
        "quotes": [
          {
            "quote": "Lines on the face, tattoos of aging.<br>Life is proved upon the body<br>Like needle-jabs from a blind machine.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The older one gets, the more one is conscious of aging.  We can barely remember childhood innocence and exuberance.  We are surprised by the youthful vitality and unmarked face when we see earlier photos of ourselves.  When we look in the mirror, we reluctantly acknowledge the aging mask.  It seems that there is no escaping the marks of life.</p><p>Every experience that we have, everything that we do and think is registered upon us as surely as the steady embroidery of a tattoo artist.  But to a large degree, the pattern and picture that will emerge is up to us.  If we go to a tattoo artist, it is we who select the picture.  In life, it is we who select what we will become by the actions we perform.  There is no reason to go through life thoughtlessly, to let accident shape us.  That is like allowing oneself to be tattooed by a blind man.  How can you help but turn out old and ugly?</p><p>Whether we emerge beautiful or ugly is our sole responsibility.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 22",
    "topics": [
      {
        "topic": "Today Is The Day",
        "quotes": [
          {
            "quote": "You get what you deserve.  Instead of being a good person today, you choose instead to become one tomorrow.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.22"
          },
          {
            "quote": "I don't complain about the lack of time ...  what little I have will go far enough.  Today—this day—will achieve what no tomorrow will fail to speak about.  I will lay siege to the gods and shake up the world.",
            "author": "Seneca",
            "source": "Medea, 423-425"
          }
        ],
        "notes": "<p>We usually know what the right thing is.  We know we shouldn't lose our temper.  We know we should make the healthier choice, get our work done, or avoid wasting time.  The hard part isn't knowledge—it's action.</p><p>What gets in our way?  Steven Pressfield calls it <em>The Resistance</em>—the invisible force that pushes us to delay, to defer, to say, <q>I'll do it tomorrow.</q>  But tomorrow never comes.  As he writes in <cite>The War of Art</cite>: <q>We don't tell ourselves, <q>I'm never going to write my symphony.</q>  Instead, we say, <q>I'm going to write my symphony—I'm just going to start tomorrow.</q></q></p><p>Don't wait.  Today is the day to be good.  To begin.  To act.</p>",
        "thoughts": ""
      },
      {
        "topic": "Understanding Suffering",
        "quotes": [
          {
            "quote": "The heart of the Buddha's teaching lies in the realization that suffering is not to be escaped but understood.",
            "author": "Thich Nhat Hanh",
            "source": "The Heart of the Buddha's Teaching"
          }
        ],
        "notes": "<p>Life isn't always sunshine and rainbows.  The Buddha teaches us that suffering is an inevitable part of the human experience.  However, by understanding the nature of suffering, its causes, and how it arises, we can learn to respond with wisdom and compassion, rather than getting swept away by it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Leisure",
        "quotes": [
          {
            "quote": "Bird chirp, vanguard for coming rain,<br>Dog bark skitters through twilight village.<br>Smoke raises a column through the pines,<br>Contented families dine in golden windows.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Life's pulse is gauged in the hallows, the intervals between events.  If you want to see <em>Tao</em>, you must discern these spaces.  This requires leisure, the change to sit and contemplate, and the opportunity to respond to inner urgings.</p><p>If you can find a place to retreat, you can make a life where <em>Tao</em> will flood into you.  Out in the woods, or in the mountains, or even in small villages where the times are slow paced and the people sensitive to nature, there is the possibility of knowing the deep and the profound.  Only when you have the time to accumulate an unshakable belief and faith can you glimpse the <em>Tao</em> in which there is restfulness and a natural sense of what is right.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 23",
    "topics": [
      {
        "topic": "Show Me How To Live",
        "quotes": [
          {
            "quote": "Show me that the good life doesn't consist in its length, but in its use, and that it is possible—no, entirely too common—for a person who has had a long life to have lived too little.",
            "author": "Seneca",
            "source": "Moral Letters, 49.10b"
          }
        ],
        "notes": "<p>There's no need to <em>prove</em> to the the philosophers.  <em>Prove</em> to yourself!  That no matter how many years you're ultimately given, your life can be clearly and earnestly said to have been a long and full one.  If I can fully commit myself to what is right—living in accordance with virtue—then no matter how long or short my life, I'll consider it well lived, and I'll know it was enough.</p><p>The best way to get there is by focusing on what is here right now, on the task you have at hand—big or small.  As he says, by pouring ourselves fully and intentionally into the present, it <q>gentle[s] the passing of time's precipitous flight.</q></p>",
        "thoughts": "I love Barney, but it's not about how many nights were <q>legen—wait for it—dary</q>.  It's about whether they meant something."
      },
      {
        "topic": "Less Attachment",
        "quotes": [
          {
            "quote": "Seeing the impermanent nature of all things is a key aspect of right view.  When we understand that nothing lasts forever we become less attached and suffer less.",
            "author": "Bhante Gunaratana",
            "source": ""
          }
        ],
        "notes": "<p>Imagine clinging to a beautiful sandcastle at the beach, knowing the tide will wash it away.  We often suffer because we cling to things (experiences, relationships, even our own ideas about ourselves) that are inherently impermanent.  Right view helps us understand this impermanence, leading to less attachment and less suffering.</p>",
        "thoughts": "The joy of the moment isn't diminished by its impermanence—it's <em>because</em> it's impermanent that it has meaning.  I can enjoy the sandcastle, or a mandala, knowing the tide or wind will come.  And I can smile at the certainty that more will follow, each one different, yet part of the same unceasing pattern."
      },
      {
        "topic": "Intuition",
        "quotes": [
          {
            "quote": "Hawk doesn't think during the hunt.<br>It does not care for theory or ethics.<br>All that is does is natural.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Animals live simple lives close to <em>Tao</em>.  They do not need to think or reason: They never doubt themselves.  When they are hungry, they eat.  When they are tired, they sleep.  They respond to the cycles of the day according to their intuition.  They mate at the proper season, and they nurture their young according to their own understanding.  When they die, they fall under the teeth of predators or the dispassionate turning of the seasons.</p><p>By contrast, we as human beings depart from the natural norm, and worry about ethical action.  Extremes of behavior (e.g.  overthinking and overregulation) have become more varied, running the gamut from the sadistic to the moralistic.  <em>Tao</em> considers all this artificial and unnatural.  Why divorce ourselves from nature?</p><p>The follower of <em>Tao</em> prefers to live completely in concert with <em>Tao</em>, avoiding the interference of theory and excessive thought.  Though one must first learn skill and ethics thoroughly, one must come to embody them so completely that they become subconscious.  Reacting to a situation by asking what is right and wrong is already too slow.  One must intuitively do what is correct.  There should be no foreshadowing of an act, nor doubt about oneself.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 24",
    "topics": [
      {
        "topic": "Making Your Own Good Fortune",
        "quotes": [
          {
            "quote": "You say, good fortune used to meet you at every corner.  But the fortunate person is the one who gives themselves a good fortune.  And good fortunes are a well-tuned soul, good impulses and good actions.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.36"
          },
          {
            "quote": "Diligence is the mother of good luck.",
            "author": "Benjamin Franklin",
            "source": "Poor Richard's Almanac"
          },
          {
            "quote": "Luck is not chance, it's toil, fortune's expensive smile is earned.",
            "author": "Emily Dickinson",
            "source": ""
          }
        ],
        "notes": "<p>What is the more productive notion of good luck?  One that is defined by totally random factors outside your control, or a matter of probability that can be increased—though not guaranteed—by the right decisions and the right preparation?  Obviously, the latter.  This is why successful yet mysteriously <q>lucky</q> people seem to gravitate toward it.</p><p>Today, you can hope that good fortune and good luck magically come your way.  Or you can prepare yourself to get lucky by focusing on doing the right thing at the right time—and, ironically, render luck mostly unnecessary in the process.</p>",
        "thoughts": ""
      },
      {
        "topic": "Craving Extinction",
        "quotes": [
          {
            "quote": "Seeing things as they are with right view ...  lead to the complete extinction of craving.",
            "author": "Bhikkhus Nanamoli and Bodhi",
            "source": "The Middle Length Discourses of the Buddha"
          }
        ],
        "notes": "<p>Craving for things—experiences, possessions, even approval—is a major source of suffering.  Right view helps us see the true nature of things, beyond the illusions and distortions created by our desires.  By seeing things clearly, the craving for things that ultimately won't bring lasting happiness starts to lose its power.</p>",
        "thoughts": ""
      },
      {
        "topic": "Latent",
        "quotes": [
          {
            "quote": "Prophets and priests teach the form of <em>Tao</em>.<br><em>Tao's</em> essence cannot be taught.<br>It is latent,<br>And cannot be known by learning.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Why do religions wither and become extinct?  Because they are only the works of people.  After all, religion and spirituality, though related, are not synonymous.  Religion is the creation of people and cultures.  Spirituality is the direct personal relationship with <em>Tao</em>.  Religions often degenerate into convention, ritual, and corruption.  They are imperfect.  When their creators fade, even the holiest words gradually lose their power.</p><p>Our spiritual problems don't substantially differ from those of our ancestors, and today's truths still attempt to find the same spirituality as before.  Why?  Because all truths eventually point to <em>Tao</em>, and <em>Tao</em> has always existed latently, unbroken and eternal.  We may begin our investigations in the realm of the religious, but once we clear away the distortions and interfering aspects of our own consciousness, we enter the realm of <em>Tao</em>.  Once that happens, there is no need for religions.</p><p>If we were to have a genuine spiritual experience, it would be lunacy to then go out and try to become religious leaders.  We would only be repeating the same mistakes of countless other genuine seekers.  It would be far better simply to be a nameless follower of <em>Tao</em>.  Then we avoid the contradictions of social action.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 25",
    "topics": [
      {
        "topic": "Where To Find Joy",
        "quotes": [
          {
            "quote": "Joy for human beings lies in proper human work.  And proper human work consists in: acts of kindness to other human beings, disdain for the stirrings of the senses, identifying trustworthy impressions, and contemplating the natural order and all that happens in keeping with it.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.26"
          }
        ],
        "notes": "<p>We often chase comfort, novelty, or approval, hoping they'll bring us lasting satisfaction.  But Marcus Aurelius reminds us: joy isn't found in these fleeting pleasures—it's found in living according to our nature.</p><p>What does that mean?  It means acting with kindness toward others, resisting the pull of impulse and indulgence, staying clear-eyed about what's real and trustworthy, and reflecting on how we fit into the broader rhythm of the world.  These are not glamorous tasks, but they are steady and true.</p><p>Joy doesn't require a perfect life.  It requires purposeful living.  And proper human work—doing what we're here to do with integrity—is where we begin to feel whole.</p>",
        "thoughts": ""
      },
      {
        "topic": "Less Attachment, Less Suffering",
        "quotes": [
          {
            "quote": "When we see the impermanent nature of things, we are less likely to become attached to them.",
            "author": "Ajahn Brahm",
            "source": "Mindfulness, Bliss, and Beyond"
          },
          {
            "quote": "The mug I just bought to enjoy my coffee is already broken.  I just don't know when it will happen...  but it will.",
            "author": "Mark Tesone",
            "source": "M.  Tesone, personal communication, May 22, 2024"
          }
        ],
        "notes": "<p>Imagine clinging to a leaf in a rushing stream.  The impermanent nature of life is like that rushing stream.  When we truly understand that nothing lasts forever, we are less likely to become attached to people, things, or even ideas.  This detachment allows for a sense of peace and acceptance.</p>",
        "thoughts": ""
      },
      {
        "topic": "Views",
        "quotes": [
          {
            "quote": "Red sea through pine lattice.<br>Islands kneel like vassal before headlands.<br>Rain clouds snag on coastal ridges.<br>Yarrow stands spectral in the lighthouse beam.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>It is difficult to take in the details of a landscape at all once.  Our eyes can only focus on one point at a time.  We look near, then we look far.  We look left, then we look right.  Our view of any one subject, if it is large, is never whole but is a composite image in our minds.  The same is true in regard to our approach to <em>Tao</em>.</p><p><em>Tao</em> is continuous, flowing, and changing, but there is no knowing it in a single view.  We rely on composite images that we form in ourselves.  For a beginner, glimpses of <em>Tao</em> will be random and fleeting.  You will stumble on it from time to time, or you will see it in the brief spaces between events.  For the mature practitioner, your composite view comes from training, technique, research, and the experience of self-cultivation.  But even after years, it is impossible to take in the totality.</p><p>There is a way to know <em>Tao</em> directly and completely.  It requires the awakening of one's spiritual force.  When this happens, spirituality manifests as a brilliant light.  Your mind expands, spirituality manifests as a brilliant light.  Your mind expands into a glowing presence.  Like a lighthouse, this beacon sends into a glowing illumination and eye at the same time.  Significantly, however, what it shows, it also knows directly.  It is the light that sees.</p>",
        "thoughts": ""
      },
      {
        "topic": "Choose a Leadership Model",
        "quotes": [
          {
            "quote": "Be sure you have a mentor worthy of your following.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Give careful thought to which leaders you will follow because they will determine your course.  I have developed six questions to ask myself before picking a model to follow:</p><p><em>Does my model's life deserve a following?</em>  This question relates to quality of character.  I will become like the people I follow, and I don't want models with flawed character.</p><p><em>Does my model's life have a following?</em>  This question looks at credibility.  If the person has no following, he or she may not be worth following.</p><p><em>What is the main strength that influences others to follow my model?  What does the model have to offer me?</em>  What is his best?  Also note that strong leaders have weaknesses as well as strengths.  I don't want to inadvertently emulate the weaknesses.</p><p><em>Does my model produce other leaders?</em>  The answer to this question will tell me whether the model's leadership priorities match mine in regard to developing new leaders.</p><p><em>Is my model's strength reproducible in my life?</em>  If I can't reproduce his strength in my life, his modeling will not benefit me.  But don't be too quick to say that a strength is not reproducible.  Most are.</p><p><em>If my model's strength is reproducible in my life, what steps must I take to develop and demonstrate that strength?</em>  If you only answer the questions and never implement a plan to develop those strengths in yourself, you are only performing an intellectual exercise.</p><p>—<cite>Developing the Leaders Around You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 26",
    "topics": [
      {
        "topic": "Stop Caring What People Think",
        "quotes": [
          {
            "quote": "I'm constantly amazed by how easily we love ourselves above all others, yet we put more stock in the opinions of others than in our own estimation of self.  .  .  .  How much credence we give to the opinions our peers have of us and how little to our very own!",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.4"
          }
        ],
        "notes": "<p>How easily we surrender our peace by measuring ourselves against others.  A possession we once liked suddenly feels wrong after one stray comment.  A life we felt proud of seems insufficient when we learn someone else has more.  But this isn't clarity—it's confusion.  It's letting passing opinions cloud what we know to be good.  Stoicism reminds us that our worth isn't subject to external validation.  What matters is whether our choices align with reason and virtue—not how they appear to others.</p><p>This exercise, like many in Stoicism, teaches that while we control our own opinions, we don't control what others think—least of all about us.  Seeking approval places our peace in the hands of others, a dangerous and unreliable endeavor.</p><p>So don't dwell on what others think.  Focus on what you think.  Think about the result.  The impact.  Whether it is the right thing to do.</p>",
        "thoughts": ""
      },
      {
        "topic": "Transformative Power",
        "quotes": [
          {
            "quote": "Right view is not just intellectual understanding, but a deep seeing that transforms our experience of the world.",
            "author": "Ajahn Sucitto",
            "source": ""
          }
        ],
        "notes": "<p>Right view isn't just about having the <q>correct</q> beliefs.  It's a deep, intuitive understanding that comes from cultivating mindfulness and meditation.  This understanding transforms our experience of the world, allowing us to see things with greater clarity and compassion.</p>",
        "thoughts": ""
      },
      {
        "topic": "Insignificance",
        "quotes": [
          {
            "quote": "Spasms of molten rock<br>Piled a cone three miles high.<br>Rain and wind split a hundred towering fingers.<br>In time, trees strove for leverage in the fissures.<br>After a million years, condors and snakes took up residence.<br><br>Mighty rock, carved walls adorned with<br>Chartreuse and vermillion lichen—<br>Man yet more puny on those stones.<br>How long will it take to see <em>Tao</em>?<br>&nbsp;&nbsp;&nbsp;Until you no longer hold self-importance.<br>",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Compared to the massive movements of heaven and earth, compared to the immensity of geologic time, the greatest acts of humanity and their monuments are beneath significance.  We climb the highest mountains, we dive to the depths of the sea, we fling ourselves as close to the sun as we dare, and we are not even on the scale of nature's measure.  In our egotism and our view of ourselves as the center of the universe, we imagine that our lives have some meaning and importance when placed beside the stars and mountains and rivers.  They do not.  We cannot hope to have any true meaning in the history of the universe.  But we can know it better, we can be a better part of it.</p><p>If you want to know the force that keeps the sky blue, the stars burning, the mountains high and still, the rivers running, and the oceans flowing, then remove the veil that stands between you and <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Managing Your Attitude",
        "quotes": [
          {
            "quote": "Manage Your Attitude Today",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>I grew up in small-town rural Ohio, and there were plenty of farms nearby.  I once heard a farmer say that the hardest thing about cows is that they never stay milked.  A similar thing can be said about a good attitude.  The hardest thing about having a good attitude is that it doesn't stay that way on its own.</p><p>If you're like most people, just getting to work in the morning is a test of your attitude.  I live in the Atlanta area, which is notorious for its bad traffic.  The latest report I read stated that we had the fourth worst traffic in the nation behind Los Angeles, San Francisco, and Washington, D.C.  So every time I get in my car, I remind myself, <em>Today I am going to have a great attitude!</em></p><p>That doesn't mean I always succeed.  I have to remain sensitive to my personal attitude indicators.  If I notice myself getting impatient—which is by far my greatest attitude challenge—I try to remind myself to have a good attitude.  If I hear myself making cynical remarks, I check my attitude.  If I find myself wanting to throw in the towel and stop developing people because they're not catching on quickly enough, I make an attitude correction.  And my fail-safe attitude indicator is Margaret, my wife.  If it's starting to get out of line, she tells me!</p><p>In my book <cite>Today Matters</cite>, one of the concepts I write about is that most people overrate decision making, and they underrate decision managing.  It's pretty easy to say to yourself, <em>From now on, I'm going to have a great attitude.</em>  It's much harder to actually follow through with it.  That's why I believe one of the best things you can do for yourself is make the daily <em>management</em> of your attitude one of your objectives.</p><p>—<cite>The Difference Maker</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 27",
    "topics": [
      {
        "topic": "Sweat The Small Stuff",
        "quotes": [
          {
            "quote": "Well-being is realized by small steps, but is truly no small thing.",
            "author": "Zeno, QUOTED IN DIOGENES LAERTIUS",
            "source": "Lives of the Eminent Philosophers, 7.1.26"
          }
        ],
        "notes": "<p>The famous biographer Diogenes Laertius attributes this quote to Zeno but admits that it might have also been said by Socrates, meaning that it may be a quote of a quote of a quote.  But does it really matter?  Truth is truth.</p><p>In this case, the truth is one we know well: the little things add up.  Someone is a good person not because they say they are, but because they take good actions.  One does not magically get one's act together—it is a matter of many individual choices.  It's a matter of getting up at the right time, making your bed, resisting shortcuts, investing in yourself, doing your work.  And make no mistake: while the individual action is small, its cumulative impact is not.</p><p>Think about all the small choices that will roll themselves out in front of you today.  Do you know which are the right way and which are the easy way?  Choose the right way, and watch as all these little things add up toward transformation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Foundation Of The Path",
        "quotes": [
          {
            "quote": "Right view is the foundation of the Noble Eightfold Path.  Without a clear understanding of reality, it's impossible to achieve liberation from suffering.",
            "author": "Walpola Rahula",
            "source": "What the Buddha Taught"
          }
        ],
        "notes": "<p>The Noble Eightfold Path is like a map leading to a peaceful and fulfilling life.  Right view, the first factor, is the foundation of this map.  Without a clear understanding of the nature of reality, including the truth of suffering, it's difficult to follow the path and experience true liberation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Subservience",
        "quotes": [
          {
            "quote": "Out-of-season rain<br>Dashes crowns of princely trees.<br>Perplexed travelers ask for reasons,<br>Huddling under worn eaves.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Those who follow <em>Tao</em> make much of knowing and acting in conformity to the cycle of seasons.  They have made a science of studying the exact ways in which events progress.  Some have become so skillful that their lives are admired as nearly magical.  Yet when things happen out of turn, even these wise ones are surprised.</p><p>Such is the case with unseasonable rain.  It is supposed to be hot summer, yet it is a day like midwinter.  What is there to do but to accept it?  Following cycles does not mean that you can then expect things to occur with precision and regularity.  The actual ways that circumstances develop will always remain beyond complete regimentation.  Nature doesn't act according to human theories.  Rather, our sciences are imperfect at analyzing nature.</p><p>The follower of <em>Tao</em> is always flexible and adaptable to circumstance.  Even if there is personal desire to do something and advance preparation has been made, the follower must nevertheless bow to nature.  Knowing how to put aside personal priorities in order to fulfill the demands of the time is among the greatest of skills.</p>",
        "thoughts": ""
      },
      {
        "topic": "Make Choices That Will Add Value To Talent",
        "quotes": [
          {
            "quote": "To your talent, begin working on adding one of the qualities below.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What creates the effectiveness necessary for converting talent into results?  It comes from the choices you make.  Orator, attorney, and political leader William Jennings Bryan said, <q>Destiny is not a matter of chance, it is a matter of choice; it is not a thing to be waited for, it is a thing to be achieved.</q>  I've discovered thirteen key choices that can be made to maximize any person's talent:</p><ol><li>Belief lifts your talent.</li><li>Passion energizes your talent.</li><li>Initiative activates your talent.</li><li>Focus directs your talent.</li><li>Preparation positions your talent.</li><li>Practice sharpens your talent.</li><li>Perseverance sustains your talent.</li><li>Courage tests your talent.</li><li>Teachability expands your talent.</li><li>Character protects your talent.</li><li>Relationships influence your talent.</li>  <li>Responsibility strengthens your talent.</li>  <li>Teamwork multiplies your talent.</li></ol><p>Make these choices, and you can become a talent-plus person.  If you have talent, you stand alone.  If you have talent <em>plus</em>, you stand out.</p><p>—<cite>Talent Is Never Enough</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 28",
    "topics": [
      {
        "topic": "The First Two Things Before Acting",
        "quotes": [
          {
            "quote": "The first thing to do—don't get worked up.  For everything happens according to the nature of all things, and in a short time you'll be nobody and nowhere, even as the great emperors Hadrian and Augustus are now.  The next thing to do—consider carefully the task at hand for what it is, while remembering that your purpose is to be a good human being.  Get straight to doing what nature requires of you, and speak as you see most just and fitting—with kindness, modesty, and sincerity.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.5"
          }
        ],
        "notes": "<p>Imagine, for a second, what Marcus's life as an emperor must have been like.  He would preside over the Senate.  He would lead the troops in battle, direct the grand strategy of the army as its highest commander.  He would also hear appeals—from citizens, from lawyers, from foreign governments.  In other words, like most people in power, he was called on to make decisions: all day, every day, decision after decision.</p><p>His formula for decision making is a battle-tested method for doing and acting right—literally.  Which is why we ought to try to use it ourselves.</p><p>First, don't get upset—because that will color your decision negatively and make it harder than it needs to be.</p><p>Second, remember the purpose and principles you value most.  Running potential actions through this filter will eliminate the bad choices and highlight the right ones.</p><p>Don't get upset.<br>Do the right thing.<br>That's it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Abandoning Wrong View",
        "quotes": [
          {
            "quote": "Seeing things as they are with right view...leads to the abandoning of wrong view.",
            "author": "Bhikkhu Bodhi",
            "source": "In the Buddha's Words"
          }
        ],
        "notes": "<p>We all have blind spots and biases.  Right view isn't about being right all the time, but about being open to seeing things differently.  Through practices like meditation and self-reflection, we can cultivate a willingness to let go of outdated beliefs and embrace a more insightful understanding of ourselves and the world.</p>",
        "thoughts": ""
      },
      {
        "topic": "Translation",
        "quotes": [
          {
            "quote": "Place the word <em>Tao</em><br>Into your heart.<br>Use no other words.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Why do so many people seek foreign religions?  Why are so many of our philosophies translations from other languages?  Surely we are all human beings, with hearts and minds, two hands and two legs.  Each of us needs spirituality, but why must we always look abroad?</p><p>People who investigate <em>Tao</em> ask whether they have to be Chinese to benefit from it.  It is true that part of the study of <em>Tao</em> is strictly Chinese.  It is also true that this Taoism has never been exported—unlike Buddhism, Islam, Hinduism, Christianity, or Judaism—and has never been preached beyond the Five Sacred Mountains of China.  It is elitist, to protect itself from coarse unbelievers.  But this Taoism is not the <em>Tao</em> you need.</p><p>The true <em>Tao</em> is of no nationality, no religion.  It is far beyond the conceptions of even the most brilliant human being, so it cannot be the property of one race or culture.  The need to understand <em>Tao</em> is universal; people just give it different names in their native languages.  <em>Tao</em> is the very essence of life itself, so those who are alive always have the possibility of knowing <em>Tao</em>.  It is meant to be found in the here and now, and it is within the grasp of any sincere seeker.</p>",
        "thoughts": ""
      },
      {
        "topic": "Becoming More Disciplined",
        "quotes": [
          {
            "quote": "What kind of example are you setting for your team?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>How are you doing when it comes to discipline?  Do you take on mental and physical challenges just for the practice?  Or are you constantly seeking a way to stay in your comfort zone?  Do you sometimes regret that you've been unable to get yourself to do what you know to be right?  Or most of the time do you believe that you do the best that you can?  And how do you react under pressure?  Do the people on your team expect extra effort or a sudden explosion from you when things go wrong?  Your answers to those questions will give insight into whether you are winning the battle for discipline.</p><p>To become a more disciplined team player ...</p><p><em>Strengthen your work habits.</em>  Discipline means doing the right things at the right time for the right reason.  Review your priorities and follow-through to see if you're on track.  And do something necessary but unpleasant every day to keep yourself disciplined.</p><p><em>Take on a challenge.</em>  To strengthen your mind and resolve, pick a task or project that will put you in over your head.  Doing that will require you to think sharply and act with discipline.  Keep doing that and you will find yourself capable of more than you imagined.</p><p><em>Tame your tongue.</em>  If you sometimes overreact emotionally, a first step to improvement is to stop yourself from saying things you shouldn't.  The next time you want to lash out, hold your tongue for five minutes, and give yourself a chance to cool down and look at things more rationally.  Use this strategy repeatedly and you will find yourself in better command of your emotions.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 29",
    "topics": [
      {
        "topic": "Work Is Therapy",
        "quotes": [
          {
            "quote": "Work nourishes noble minds.",
            "author": "Seneca",
            "source": "Moral Letters, 31.5"
          }
        ],
        "notes": "<p>You know that feeling you get when you haven't been to the gym in a few days?  A bit doughy.  Irritable.  Claustrophobic.  Uncertain.  Others get a similar feeling when they've been on vacation for too long or right after they first retire.  The mind and the body are there to be used—they begin to turn on themselves when not put to some productive end.</p><p>It's sad to think that this kind of frustration is an everyday reality for a lot of people.  They leave so much of their potential unfulfilled because they have jobs where they don't really do much or because they have too much time on their hands.  Worse is when we try to push these feelings away by buying things, going out, fighting, creating drama—indulging in the empty calories of existence instead of finding the real nourishment.</p><p>The solution is simple and, thankfully, always right at hand.  Get out there and work.</p>",
        "thoughts": ""
      },
      {
        "topic": "Different Perspectives",
        "quotes": [
          {
            "quote": "Right understanding is not about being right all the time.  It's about being willing to see things differently.",
            "author": "Kosho Uchiyama",
            "source": "Opening the Hand of Thought"
          }
        ],
        "notes": "<p>The path of Buddhism is a journey of lifelong learning.  Right understanding involves being open to new perspectives and challenging our assumptions.  It's about cultivating a humble and curious mind, always seeking a deeper understanding of ourselves and reality.</p>",
        "thoughts": ""
      },
      {
        "topic": "Pivoting",
        "quotes": [
          {
            "quote": "Some days, you and I go mad.<br>Our bellies get stuffed full,<br>Hearts break, minds snap.<br>We can't go on the old way so<br>We change.  Our lives pivot,<br>Forming a mysterious geometry.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Life revolves.  You cannot go back one minute, or one day.  In light of this, there is no use marking time in any one position.  Life will continue without you, will pass you by, leaving you hopelessly out of step with events.  That's why you must engage life and maintain your pace.</p><p>Don't look back, and don't step back.  Each time you make a decision, move forward.  If your last step gained you a certain amount of territory, then make sure that your next step will capitalize on it.  Don't relinquish your position until you are sure that you have something equal or better in your grasp.  But how do we develop timing for this process?</p><p>It has to be intuitive.  On certain days, we come to our limits, and our tolerance for a situation ends.  When that happens, change without the interference of concepts, guilt, timidity, or hesitancy.  Those are the points when our entire lives pivot and turn toward new phases, and it is right that we take advantage of them.  We mark our progress not by the distance covered but by the lines and angles that are formed.</p>",
        "thoughts": ""
      },
      {
        "topic": "Improving Your Enthusiasm",
        "quotes": [
          {
            "quote": "Make your enthusiasm infectious with your teammates today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Microsoft chairman Bill Gates remarked, <q>What I do best is share my enthusiasm.</q>  Obviously that ability has brought the people in his organization immense success.  If asked, would your teammates say that you have a similar effect on them?  Enthusiasm increases a person's accomplishments while apathy increases his alibis.  Which are people more likely to discover in you?</p><p>To improve your enthusiasm ...</p><p><em>Show a sense of urgency.</em>  A good way to fire up your own furnace is to do things with greater urgency.  Identify a project that you are currently less enthusiastic about than you should be.  Give yourself deadlines for completing its steps that are a little more ambitious than you feel comfortable with.  Doing that should help you be more focused and energized.</p><p><em>Be willing to do more.</em>  One way to demonstrate enthusiasm with your teammates is to go the extra mile with others.  This week when someone asks you to do something, do what's required and then some.  Then quietly observe its impact on the team's atmosphere.</p><p><em>Strive for excellence.</em>  Elbert Hubbard said, <q>The best preparation for good work tomorrow is to do good work today.</q> Nothing breeds enthusiasm like a job well done.  If you've allowed yourself to ease off when it comes to your work standards, redouble efforts to do things according to your highest levels of excellence.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 30",
    "topics": [
      {
        "topic": "Working Hard Or Hardly Working",
        "quotes": [
          {
            "quote": "I can't call a person a hard worker just because I hear they read and write, even if working at it all night.  Until I know what a person is working for, I can't deem them industrious....  I <em>can</em> if the end they work for is their own ruling principle, having it be and remain in constant harmony with Nature.",
            "author": "Epictetus",
            "source": "Discourses, 4.4.41; 43"
          }
        ],
        "notes": "<p>What are the chances that the busiest person you know is actually the most productive?  We tend to associate busyness with goodness and believe that spending many hours at work should be rewarded.</p><p>Instead, evaluate <em>what</em> you are doing, <em>why</em> you are doing it, and <em>where</em> accomplishing it will take you.  If you don't have a good answer, then stop.</p>",
        "thoughts": ""
      },
      {
        "topic": "Living The Teachings",
        "quotes": [
          {
            "quote": "Right understanding is about how we live, not just what we believe.",
            "author": "Stephen Batchelor",
            "source": "Buddhism Without Beliefs"
          }
        ],
        "notes": "<p>The Buddha's teachings aren't just abstract philosophies.  Right understanding, the first factor of the Noble Eightfold Path, translates into action.  It's about integrating mindfulness, compassion, and wisdom into our daily lives, from the way we speak to how we work to how we interact with the world around us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Mercy",
        "quotes": [
          {
            "quote": "Uphold precepts, but be merciful.<br>Gradually absorb, until there is no need for law.<br>Gain wisdom beyond right and wrong.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There was a young priest who returned to the community of his birth.  Instead of the neighborhood he knew as a boy, the community was now predominantly homosexual.  He was uncertain: On one hand, he had to serve the people.  On the other hand, his sect forbade homosexuality and condemned it as a grave wrong.  It would seem that whatever he did, he would be a hypocrite.  He eventually decided to accept all who came to him but still uphold the doctrines of his sect.  He saw his most important duty as mercy, and so he was able to help others without truly violating his precepts.  When there are contradictions between beliefs, one must resolve them in favor of what one judges to be the higher principle.</p><p>We should not sell our ideals short for the sake of expediency or selfishness.  Following a particular spiritual tradition means a full commitment to its rules in order to gain the essence of that tradition.  But we cannot afford to be dogmatic.  Human law is imperfect.  There will always be unprecedented circumstances.  Thus, we must go beyond rules and operate instead from pure wisdom.  We must act with experience, flexibility, and insight.  Let us so absorb integrity—experiencing both its triumphs and defeats—that we do the right thing intuitively.</p><p>Tradition is first.  Mercy is greater than tradition.  Wisdom is greater than mercy.</p>",
        "thoughts": ""
      },
      {
        "topic": "Keeping Mistakes In Perspective",
        "quotes": [
          {
            "quote": "Look for ways to praise your people's mistakes and help your team learn from them today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>To leave the road of continual failure, a person must first utter the three most difficult words to say: <q>I was wrong.</q>  He has to open his eyes, admit his mistakes, and accept complete responsibility for his current wrong actions and attitudes.  Every failure you experience is a fork in the road.  It's an opportunity to take the right action, learn from your mistakes, and begin again.</p><p>Leadership expert Peter Drucker says, <q>The better a man is, the more mistakes he will make, for the more new things he will try.  I would never promote to a top-level job a man who was not making mistakes .  .  .  otherwise he is sure to be mediocre.</q>  Mistakes really do pave the road to achievement.</p><p>Here is an acronym I created to help me keep mistakes in perspective.  Mistakes are:</p><ul><li><strong>M</strong> - messages that give us feedback about life.</li><li><strong>I</strong> - interruptions that should cause us to reflect and think.</li><li><strong>S</strong> - signposts that direct us to the right path.</li><li><strong>T</strong> - tests that push us toward greater maturity.</li><li><strong>A</strong> - awakenings that keep us in the game mentally.</li><li><strong>K</strong> - keys that we can use to unlock the next door of opportunity.</li><li><strong>E</strong> - explorations that let us journey where we've never been before.</li><li><strong>S</strong> - statements about our development and progress.</li></ul><p><cite>—<em>Falling Forward</em></cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "May 31",
    "topics": [
      {
        "topic": "We Have But One Obligation",
        "quotes": [
          {
            "quote": "What is your vocation?  To be a good person.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.5"
          }
        ],
        "notes": "<p>The Stoics believed, above all else, that our job on this earth is to be a good human being.  It is a basic duty, yet we are experts at coming up with excuses for avoiding it.</p><p>Do your job!</p>",
        "thoughts": ""
      },
      {
        "topic": "Born From Understanding",
        "quotes": [
          {
            "quote": "Understanding our own suffering helps us understand the suffering of others.  This understanding is the basis of compassion.",
            "author": "Thich Nhat Hanh",
            "source": ""
          }
        ],
        "notes": "<p>Imagine two people who have been injured.  Someone who has never experienced pain will struggle to understand the other's suffering.  By understanding our own struggles, we can develop empathy and compassion for the suffering of others.  This is the foundation of true kindness.</p>",
        "thoughts": ""
      },
      {
        "topic": "Actual",
        "quotes": [
          {
            "quote": "The actual<br>Is only actual<br>In one place<br>And one time.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When one listens to a barking dog, one might imagine emotion, pain, reaction, anxiety, and self-identification, but actually there is nothing there—just sound from a long and deep corridor, channeled out of nothingness and fading into nothingness again.</p><p>Like that dog, we may all strive, but there is truly nothing to be done.  If we look deeply into our lives, there is only a thin veneer of self-generated meaning over an immense ocean of nothingness.</p><p>What we do only has meaning in the here and now.  It will not remain in the next instant.  Just do what you can for the present, and leave everything else to happen naturally.  Work.  Wash.  Meditate.  Eat.  Study.  Urinate.  Sleep.  Exercise.  Talk.  Listen.  Touch.  Die each night.  Be born again each morning.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Value Of Listening",
        "quotes": [
          {
            "quote": "Focus on listening to others today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Edgar Watson Howe once joked, <q>No man would listen to you talk if he didn't know it was his turn next.</q> Unfortunately, that accurately describes the way too many people approach communication—they're too busy waiting for their turn to really listen to others.  But people of influence understand the incredible value of becoming a good listener.  For example, when Lyndon B.  Johnson was a junior senator from Texas, he kept a sign on his office wall that read, <q>You ain't learnin' nothin' when you're doin' all the talkin'.</q>  And Woodrow Wilson, the twenty-eighth American president, once said, <q>The ear of the leader must ring with the voices of the people.</q></p><p>The ability to skillfully listen is one key to gaining influence with others.  Consider these benefits to listening that we've found:</p><ul><li>Listening shows respect.</li><li>Listening builds relationships.</li><li>Listening increases knowledge.</li><li>Listening generates ideas.</li><li>Listening builds loyalty.</li></ul><p>Roger G.  Imhoff urged, <q>Let others confide in you.  It may not help you, but it surely will help them.</q> At first glance, listening to others may appear to benefit only them.  But when you become a good listener, you put yourself in a position to help yourself too.  You have the ability to develop strong relationships, gather valuable information, and increase your understanding of yourself and others.</p><p><cite>—<em>Becoming a Person of Influence</em></cite>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 1",
    "topics": [
      {
        "topic": "Always Have A Mental Reverse Clause",
        "quotes": [
          {
            "quote": "Indeed, no one can thwart the purposes of your mind—for they can't be touched by fire, steel, tyranny, slander, or anything.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.41"
          }
        ],
        "notes": "<p>Obstacles are a part of life—things happen, stuff gets in our way, situations go awry.  But nothing can stop the Stoic mind when it's operating properly, because in every course of action, it has retained <q>a reverse clause.</q></p><p>What's that?  It's a backup option.  If a friend betrays us, our reverse clause is to learn what this reveals—about them, about us—and to choose wisely how to respond.  Maybe we forgive.  Maybe we protect ourselves.  Maybe we walk away.  If we're thrown in prison, our reverse clause is to refuse to be broken by the change of events and to find ways to be of service to those around us.  When a technical glitch erases our work, our reverse clause is to start fresh and do it better this time.  Our progress can be impeded or disrupted, but the mind can always be changed—it retains the power to redirect the path.</p><p>Part of this is remembering the usual course of things—Murphy's Law states that <q>if anything can go wrong, it will.</q>  So we keep this reverse clause handy because we know we're probably going to have to use it.  No one can thwart that.</p>",
        "thoughts": ""
      },
      {
        "topic": "Dispelling Ignorance",
        "quotes": [
          {
            "quote": "Right understanding is like a lamp that dispels the darkness of ignorance.",
            "author": "Buddhaghosa",
            "source": "The Path of Purification (Visuddhimagga)"
          }
        ],
        "notes": "<p>Imagine walking through a dark forest.  Right understanding is like a lamp that illuminates the path ahead.  It helps us see through confusion and ignorance, allowing us to navigate the challenges of life with greater clarity and wisdom</p>",
        "thoughts": ""
      },
      {
        "topic": "Sleep",
        "quotes": [
          {
            "quote": "Sleep is like a swift train<br>Plunging into long black tunnels,<br>&nbsp;&nbsp;&nbsp;&nbsp;Slicing day with red and black light.<br>No worry about the skeleton engineer.<br>Head to pillow is like head to track,<br>&nbsp;&nbsp;&nbsp;&nbsp;Listening to the rumble of destiny,<br>Knowing that the opening will come.<br>In sleep, as in the tunnels,<br>&nbsp;&nbsp;&nbsp;&nbsp;The sound seems ever closer.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When you sleep, some insist that the world as you know it ceases to exist.  The world exists because something inside of you asserts that it is so.  When awake, are you then no longer dreaming?  Or are you just dreaming another dream?</p><p>Going to sleep takes letting go.  As any insomniac will tell you, it can't be forced.  But we so identify control with waking, is it possible that the uncontrolled aspect of sleep is an equal reality?</p><p>Sleep seems so real, and then we awake.  Waking life seems so real, and yet we need to let go of it every day.  This strange contrast is one that those who follow <em>Tao</em> contemplate continually.  If life is mere shifting from one dream to another, they constantly ask: What is truly real?</p>",
        "thoughts": ""
      },
      {
        "topic": "Build Trust",
        "quotes": [
          {
            "quote": "Take responsibility for earning trust with your followers.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>I have learned that trust is the single most important factor in building personal and professional relationships.  Warren Bennis and Burt Nanus call trust <q>the glue that binds followers and leaders together.</q>  Trust implies accountability, predictability, and reliability.  More than anything else, followers want to believe in and trust their leaders.  They want to be able to say, <q>Someday I want to be like him or her.</q>  People first must believe in you before they will follow your leadership.</p><p>Trust must be built day by day.  It calls for consistency.  Some of the ways a leader can betray trust include: breaking promises, gossiping, withholding information, and being two-faced.  These actions destroy the environment of trust necessary for the growth of potential leaders.  And when a leader breaks trust, he must work twice as hard to regain it.</p><p>People will not follow a leader they do not trust.  It is the leader's responsibility to actively develop that trust in him from the people around him.  Trust is built on many things:</p><ul><li><strong>T</strong>ime.  Take time to listen and give feedback on performance.</li><li><strong>R</strong>espect.  Give someone respect and he will return it with trust.</li><li><strong>U</strong>nconditional Positive Regard.  Show acceptance of the person.</li><li><strong>S</strong>ensitivity.  Anticipate feelings and needs of the potential leader.</li><li><strong>T</strong>ouch.  Give encouragement—handshake, high five, pat on the back.</li></ul><p>Once people trust their leader as a person, they become able to trust his leadership.</p><p>—<cite>Developing the Leaders Around You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 2",
    "topics": [
      {
        "topic": "Plato's View",
        "quotes": [
          {
            "quote": "How beautifully Plato put it.  Whenever you want to talk about people, it's best to take a bird's-eye view and see everything all at once—of gatherings, armies, farms, weddings and divorces, births and deaths, noisy courtrooms or silent spaces, every foreign people, holidays, memorials, markets—all blended together and arranged in a pairing of opposites.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.48"
          }
        ],
        "notes": "<p>There is a beautiful dialogue called <cite>Icaromenippus, an Aerial Expedition</cite> by the poet Lucian in which the narrator is given the ability to fly and sees the world from above.  Turning his eyes earthward, he sees how comically small even the richest people, the biggest estates, and entire empires look from above.  All their battles and concerns were made petty in perspective.</p><p>In ancient times, this exercise was only theoretical—the highest anyone could get was the top of a mountain or a building a few stories tall.  But as technology has progressed, humans have been able to actually take that bird's-eye view—and greater.</p><p>Edgar Mitchell, an astronaut, was one of the first people to see the earth from outer space.  As he later recounted:</p><blockquote><p><q>In outer space you develop an instant global consciousness, a people orientation, an intense dissatisfaction with the state of the world, and a compulsion to do something about it.  From out there on the moon, international politics look so petty.  You want to grab a politician by the scruff of the neck and drag him a quarter of a million miles out and say, <q>Look at that, you son of a bitch.</q></q></p></blockquote><p>Many a problem can be solved with the perspective of Plato's view.  Use it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Mind Training For Peace",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Lisa's mind was a whirlwind - a torrent of <q>what-ifs,</q> self-criticism, and echoes of past hurts.  She yearned for quiet, but her thoughts seemed to have a relentless grip.</p><p>One afternoon, her neighbor, known for her peaceful presence, offered tea.  Lisa unburdened her heart, confessing the relentless negativity.</p><p>The neighbor nodded.  <q>Your suffering, Lisa, is born from the path your mind has worn.  There's another way.  It's called <q><em>Right Thought</em></q>, and it's about more than just happy slogans.  It's retraining your mind to notice the good alongside the difficult.  To question those old, harsh voices.</q></p><p>Intrigued, Lisa started small.  When a worry spiraled, she'd picture a peaceful lake, letting the worry ripple across its surface, then fade.  If self-doubt roared, she countered with one thing she did well that day.  It felt awkward at first.  Yet, like a sapling bending in the wind, she grew stronger.  The relentless worry loosened, and space opened for a gentle kind of peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "Blame",
        "quotes": [
          {
            "quote": "Though others have faults,<br>Concentrate on your own.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Some people have the habit of blaming others.  Perhaps all of us have this weakness.  The list of scapegoats for our miseries is clever and endless.  Parents, community, teachers, government, and even demons and gods are all invoked when we have problems.  If difficulties truly come from the outside, the problem is not blame.  For those cases, the course of action is very clear: Neutralize that influence.  If the problem comes from within, the solution must come from within as well.  Before you blame friends, relatives, or teachers for bad habits and shortsightedness, you should remember that no one is to blame but yourself.</p><p>It is an equal mistake to lose self-esteem simply because you have some flaws.  Looking at your shortcomings and taking steps to eliminate them should be viewed as a dispassionate project.  You are not worthless because you undertake to rise above your faults.  That description is only for those who never attempt to perfect themselves.  We all have a perfect core, a special self inside.  That purity is perfect and holy; therefore, no one is worse than another.</p><p>We are all on this planet simply to reach back into that pure self.  When we reach that spirit, there are no flaws and there is no blame.</p>",
        "thoughts": ""
      },
      {
        "topic": "Say The Right Words At The Right Time",
        "quotes": [
          {
            "quote": "Use discernment in choosing your words and their timing today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Most people recognize that words have incredible power.  Editor and theologian Tyron Edwards observed, <q>Words are both better and worse than thoughts; they express them, and add to them; they give them power for good or evil; they start them on an endless flight, for instruction and comfort and blessing, or for injury, sorrow and ruin.</q>  But saying the right words is not enough.  Timing is crucial.</p><p>Sometimes the best thing we can do for someone else is to hold our tongue.  When tempted to give advice that's not wanted, to show off, to say <q>I told you so,</q> or to point out another's error, the best policy is to say nothing.  As nineteenth-century British journalist George Sala advised, we should strive <q>not only to say the right thing in the right place, but far more difficult, to leave unsaid the wrong thing at the tempting moment.</q></p><p>—<cite>25 Ways to Win with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 3",
    "topics": [
      {
        "topic": "It Is Well To Be Flexible",
        "quotes": [
          {
            "quote": "He can't serve in the military?   Let him seek public office.  Must he live in the private sector?   Let him be a spokesperson.  Is he condemned to silence?   Let him aid his fellow citizens by silent public witness.  Is it dangerous to enter the Forum?   Let him display himself, in private homes, at public events and gatherings, as a good associate, faithful friend, and moderate tablemate.  Has he lost the duties of a citizen?   Let him exercise those of a human being.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 4.3"
          }
        ],
        "notes": "<p>Shortly before his death, as victory in the Civil War was finally within his grasp, Lincoln told a story to an audience of generals and admirals about a man who had approached him for a high-ranking government appointment.  First, the man asked if he might be made a foreign minister.  Upon being turned down, the man asked for a more modest position.  Upon being turned down again, he asked for a job as a low-level customs officer.  Finding he could not get even that, he finally just asked Lincoln for an old pair of trousers.  <q>Ah,</q> Lincoln laughed as he concluded the story, <q>it is well to be humble.</q></p><p>This story embodies the flexibility and determination of Stoicism.  If we can't do <em>this</em>, then perhaps we can try <em>that</em>.  And if we can't do <em>that</em>, then perhaps we can try some <em>other</em> thing.  And if that thing is impossible, there is always another.  Even if that final thing is just being a good human being—we always have some opportunity to practice our philosophy, to make some contribution.</p>",
        "thoughts": ""
      },
      {
        "topic": "Improvement Of <em>Right View</em>",
        "quotes": [
          {
            "quote": "When <em>Right View</em> is solid in us, we have <em>Right Thought</em> (<em lang='pi'>samma sankappa</em>).  We need <em>Right View</em> at the foundation of our thinking.  And if we train ourselves in <em>Right Thought</em>, our <em>Right View</em> will improve.  Thinking is the speech of our mind.",
            "author": "Thich Nhat Hanh",
            "source": "The Heart of the Buddha's Teaching"
          }
        ],
        "notes": "<p><em>Right View</em> and <em>Right Thought</em> (the second factor of the path) are interconnected.  A clear understanding of reality (<em>Right View</em>) leads to ethical and wholesome thinking (<em>Right Thought</em>).  Just as our outward speech reflects our inner thoughts, <em>Right Thought</em> purifies our minds and strengthens our <em>Right View</em>.</p>",
        "thoughts": "Achieving <em>Right Thought</em> involves letting go of attachment; replacing ill thoughts with kindness, forgiveness, and empathy; avoiding gossip and silent judgment; and observing one's own ill thoughts, without judgement, and choosing not to follow them."
      },
      {
        "topic": "Sheaths",
        "quotes": [
          {
            "quote": "Outside is form,<br>Inside is thought.<br>Deepest is the soul.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Traditional sages describe a human being as having three sheaths.  The outer one is the physical body and incorporates primitive drives and instincts.  The inner one is the mind and includes discrimination, reasoning, and sense of individuality.</p><p>Both the body and the mind are enslaved to the outer world because they gain their knowledge from sensory input.  They cannot know anything <q>intangible,</q> anything without a form or a name.</p><p>At the core of every person is the soul.  This is a pure, virgin self.  It does not think in the ordinary sense of the word, has no egotism, and is not concerned with maintaining itself in the world.  Although the body has a shape and the mind is multifaceted, the soul is completely without form or features.  No markings, profiles, names, formulas, numbers, ideas, or conceptions can be projected upon it.  It is pure, shapeless, and empty.</p><p>Any person with training can reach this soul.  Only then can you be convinced of its presence.  When you reach it, your body and mind will become irrelevant, for you are now in a state beyond the senses and beyond thought.  The soul is called absolute because it is beyond all relativity.</p>",
        "thoughts": ""
      },
      {
        "topic": "It All Begins With A Dream",
        "quotes": [
          {
            "quote": "Share your vision with someone today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If you live your dream and successfully share it, others will buy into it.  People have a desire to follow a leader with a great dream.  Now more than ever, people are looking for heroes.  Unfortunately, many are looking in places that are likely to leave them disappointed: sports, music, movies, and television.  But real heroes are leaders who can help others achieve success, people who take others with them.  And it all begins with a dream.</p><p>As Winifred Newman said, <q>Vision is the world's most desperate need.  There are no hopeless situations, only people who think hopelessly.</q></p><p>—<cite>Your Road Map for Success</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 4",
    "topics": [
      {
        "topic": "This Is What We're Here For",
        "quotes": [
          {
            "quote": "Why then are we offended?  Why do we complain?  This is what we're here for.",
            "author": "Seneca",
            "source": "On Providence, 5.7b-8"
          }
        ],
        "notes": "<p>No one said life was easy.  No one said it would be fair.</p><p>Don't forget, though, that you come from a long, unbroken line of ancestors who survived unimaginable adversity, difficulty, and struggle.  It's their genes and their blood that run through your body right now.  Without them, you wouldn't be here.</p><p>You're an heir to an impressive tradition—and as their viable offspring, you're capable of what they are capable of.  You're meant for this.  Bred for it.</p><p>Just something to keep in mind if things get tough.</p>",
        "thoughts": ""
      },
      {
        "topic": "Mental Cultivation",
        "quotes": [
          {
            "quote": "The second step of the Eightfold Path is <em>Right Thought</em>.  This step asserts the ethical foundation of the path, commitment, to mental cultivation.",
            "author": "Bhante Henepola Gunaratana",
            "source": "Mindfulness in Plain English"
          }
        ],
        "notes": "<p><em>Right Thought</em> isn't just about positive thinking.  It's about cultivating ethical intentions and avoiding negativity.  It's a commitment to mental discipline and training our minds to think in ways that are beneficial to ourselves and others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Enjoyment",
        "quotes": [
          {
            "quote": "Sleek sky of cobalt blue;<br>Water like nectar satisfies deeply.<br>Air sweeter than the best perfume;<br>Sunlight warms a grateful cat.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>It is hard to believe life is all for naught.  Can't we take happiness when it comes?</p><p>There is admittedly a great deal of suffering and horror in this world.  But if we are to accept life's sad parts, we must also embrace its good parts.  As long as we are in this world, we must accept it all.  If what comes our way is occasionally wonderful, no one should deny our enjoyment.  We all know that every rise is followed by a fall.  Why dwell only on dread of the future?  As long as we have behaved responsibly, there is nothing wrong with enjoying the best of what life has to offer.</p><p>Look at a cat as she stretches out contentedly in the sun.  There is no thought of the next moment, only the sheer enjoyment of the present.  Rest assured that she will still be able to clean herself, still be able to catch mice, and still be able to do all the things that a cat must do.  But she is without anxieties, and so she is purely and totally who she should be.  She acts as if she were nature's favorite.  And who is to say otherwise?</p>",
        "thoughts": ""
      },
      {
        "topic": "Catch Them Doing Something Right",
        "quotes": [
          {
            "quote": "Catch someone doing something right today and praise them for it.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If you desire to see everyone as a <q>10</q> and help them believe in themselves, you need to encourage them by catching them doing something right.  And that is really countercultural.  We are trained our whole lives to catch people doing something wrong.  If our parents and teachers caught us doing something, you can bet it was something wrong.  So we tend to think in those same terms.</p><p>When you focus on the negative and catch people doing something wrong, it has no real power to make them any better.  When we catch people doing something wrong, they become defensive.  They make excuses.  They evade.  On the other hand, if we catch people doing something right, it gives them positive reinforcement.  It helps them tap into their potential.  It makes them want to do better.</p><p>Make it part of your daily agenda to look for things going right.  They don't have to be big things, though of course you want to praise those things as well.  It can be almost anything, as long as you are sincere in your praise.</p><p>—<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 5",
    "topics": [
      {
        "topic": "Blow Your Own Nose",
        "quotes": [
          {
            "quote": "We cry to God Almighty, how can we escape this agony?  Fool, you don't have hands?  Or could it be God forgot to give you a pair?  Sit and pray your nose doesn't run!  Or, rather just wipe your nose and stop seeking a scapegoat.",
            "author": "Epictetus",
            "source": "Discourses, 2.16.13"
          }
        ],
        "notes": "<p>The world is unfair.  The game is rigged.  So-and-so has it out for you.</p><p>Maybe these theories are true, but practically speaking—for the right here and now—what good are they to you?  That government report or that sympathetic news article isn't going to pay the bills or rehab your broken leg or find that bridge loan you need.  Succumbing to the self-pity and <q>woe is me</q> narrative accomplishes nothing—nothing except sapping you of the energy and motivation you need to <em>do something about your problem</em>.</p><p>We have a choice: Do we focus on the ways we have been wronged, or do we use what we've been given and get to work?  Will we wait for someone to save us, or will we listen to Marcus Aurelius's empowering call to <q>get active in your own rescue—if you care for yourself at all—and do it while you can.</q>  That's better than just blowing your own nose (which is a step forward in itself).</p>",
        "thoughts": ""
      },
      {
        "topic": "Cultivating Right Intention",
        "quotes": [
          {
            "quote": "<em>Right Intention</em>, called <em lang='pi'>samma sankappa</em> in Pali, is the second factor of the path.  It refers to the volitional aspect of consciousness that organized the operational faculties to bring about a particular result.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Intention</em> goes beyond just thinking good thoughts.  It's about directing our mental energy towards wholesome actions.  It's the choice to renounce negativity and cultivate qualities like generosity, kindness, and non-harming.</p>",
        "thoughts": ""
      },
      {
        "topic": "Inseparable",
        "quotes": [
          {
            "quote": "The trunk is hollow,<br>But the branches live.<br>The void is fundamental,<br>But the ten thousand things are diverse.<br>Therefore, wanderers free themselves of cares<br>And follow <em>Tao</em> in great delight.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The base of a tree may occasionally be hollow, yet the trunk can rise a hundred feet to support a lushly growing crown.  <em>Tao</em> may be void, but the world has great profusion.  This is because there is no separation between void and phenomena.  Therefore, <em>Tao</em> cannot be gained from denying the world.</p><p>Void is a part of all reality and thus has tangibility.  The great <em>Tao</em> permeates the world and so it can be studied in the world.  All that needs to be known about <em>Tao</em>'s manifestation can be known by traveling through life.  All experiences are valid, for all experiences are of <em>Tao</em>.</p><p>In all of life, the only thing that separates from <em>Tao</em> is the human ego, because one places oneself before all other things.  By contrast, those who follow <em>Tao</em> divest themselves of self-importance and desire for success.  They prefer to follow <em>Tao</em> as it flows through the land.  They move from place to place as they intuitively sense its direction.  Feeling the divine energy, they live in its vital flow.  These wanderers have glimpsed the void that is in them and in all things.  They delight in life but never see more than void.</p>",
        "thoughts": ""
      },
      {
        "topic": "Be Intentional",
        "quotes": [
          {
            "quote": "Be intentional today.  Make every action count.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What does it mean to be intentional?  It means working with purpose—making every action count.  It's about focusing on doing the right things, moment to moment, day to day, and then following through with them in a consistent way.</p><p>Successful individuals are intentional.  They aren't scattered or haphazard.  They know what they're doing and why they're doing it.  For a team to be successful, it needs intentional people who are able to remain focused and productive, people who make every action count.</p><p>How intentional are you?  As you proceed through your day, do you have a plan and a purpose for everything you do?  Do you know where you're going and why you're doing what you're doing?  Or are you simply drifting down the stream of life?  If your teammates don't detect a sense of intentionality in you, they won't know what to expect from you, and they will be unlikely to count on you when it really counts.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 6",
    "topics": [
      {
        "topic": "When To Sick And When To Quit",
        "quotes": [
          {
            "quote": "Think of those who, not by fault of inconsistency but by lack of effort, are too unstable to live as they wish, but only live as they have begun.",
            "author": "Seneca",
            "source": "On Tranquility Of Mind, 2.6b"
          }
        ],
        "notes": "<p>Seneca warns us not to mistake momentum for meaning.  Just because we started something—a job, a degree, a relationship—doesn't mean we're obligated to finish it if it no longer serves who we're trying to become.  Staying the course can be admirable, but only when the course is worth staying on.</p><p>At the same time, constantly chasing something new every time things get hard is its own kind of trap.  Real growth requires discernment: knowing when to endure and when to pivot.  Ask yourself: Am I sticking with this out of purpose or habit?  Am I quitting to grow or just to escape discomfort?</p><p>The wise path is neither stubborn nor fickle—it's chosen with intention.</p>",
        "thoughts": ""
      },
      {
        "topic": "Renunciation And Compassion",
        "quotes": [
          {
            "quote": "Right resolve (intention) is the determination to renounce sensuality, ill-will, and cruelty, and to develop generosity, good will, and harmlessness.",
            "author": "Walpola Rahula",
            "source": "What the Buddha Taught"
          }
        ],
        "notes": "<p><em>Right Intention</em> is about setting a clear and ethical direction for our lives.  It's the commitment to let go of negativity and cultivate qualities that benefit ourselves and the world around us.  It's about choosing to live with generosity, compassion, and a sense of non-violence.</p>",
        "thoughts": ""
      },
      {
        "topic": "Optimal",
        "quotes": [
          {
            "quote": "If you are best in the morning,<br>Cultivate <em>Tao</em> in the morning.<br>If you are best in the evening,<br>Cultivate <em>Tao</em> in the evening.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Whatever the optimal time of day is for you, you should devote it to the cultivation of <em>Tao</em>.  For example, dawn, when it is quiet, the world is fresh, and the mind is untainted by the day's events, is an ideal time to devote yourself to study.  Morning, the time of birth, should not be wasted on a quick breakfast, a hastily read newspaper, and a manic rush to work.  It is far better to awake from peaceful sleep, wash yourself, drink clear water, and immerse yourself in the rising energy of the day.</p><p>If your optimal time is evening, there are two propitious intervals: twilight, when day and night come into balance, and midnight, when the first breath of the coming day arises.  In the night, worldly cares are put aside, rest and relaxation are paramount, and the entire world withdraws into nocturne.  Night is the time of regeneration, and it should not be wasted on wanton entertainment, indulgent sexuality, and too much sleep.  It is far better to retire from the cares of the day, bathe, and immerse yourself in the gestating power of the dark.</p>",
        "thoughts": ""
      },
      {
        "topic": "How You See Is What You Get",
        "quotes": [
          {
            "quote": "Decide today that what you have is enough.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>You're probably familiar with Murphy's Law: <em>If anything bad can happen, it will—and at the worst possible time.</em>  Or the Peter Principle: <em>People rise to the level of their incompetence.</em>  A similar idea is sometimes called the law of human behavior: <em>Sooner or later we get just what we expect.</em></p><p>Is that law optimistic or pessimistic?  Some say it's hopeful, others say it's cynical.  But there's a third view: realism.  A realist might say expectations shape our mindset, not our fate.  What we expect can influence how we interpret and respond to life—but it doesn't guarantee results.</p><p>Not everyone is naturally optimistic.  Some see the glass half empty, others half full.  Realists want to know if the water's safe to drink.  Regardless of your outlook, you can grow more resilient by learning contentment.  It's not passivity—it's perspective.</p><p>Our culture constantly says, </em>What you have isn't enough.</em>  But contentment helps you weather failure and find value in the struggle.  It's the foundation for building forward—whatever comes.</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 7",
    "topics": [
      {
        "topic": "Finding The Right Mentors",
        "quotes": [
          {
            "quote": "We like to say that we don't get to choose our parents, that they were given by chance—yet we can truly choose whose children we'd like to be.",
            "author": "Seneca",
            "source": "On The Brevity Of Life, 15.3a"
          }
        ],
        "notes": "<p>We are fortunate enough to live in a world where some of the greatest men and women in history have recorded their wisdom (and folly) in books and journals.  Many have had their lives chronicled by careful biographers—from Plutarch to Boswell to Robert Caro.  The literature available at your local library amounts to millions of pages and thousands of years of knowledge, insight, and experience.</p><p>When we reflect on those who have shaped us—teachers, leaders, writers, family, or friends—we begin to recognize the quiet presence of mentorship in our lives.  These mentors, whether near or distant, intentional or incidental, helped shape our values and vision.  The people we admire can continue to guide us, whether we know them personally or not.  If we choose to, we can actively seek out the wisdom of those who came before us—those whose lives embody the values and aspirations we hold dear.</p><p>We not only owe it to ourselves to pursue that wisdom, we owe it to those who took the time to pass it down.  Their lives, their choices, and their words form a kind of lineage we can step into.  When we choose whose children we would like to be—whose example we want to follow—we begin to carry on their legacy.  In doing so, we may one day become the kind of people others look to in the same way.</p>",
        "thoughts": ""
      },
      {
        "topic": "Universal Wish",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> starts with a simple wish: <q>May I be free from suffering.  May all beings be free from suffering.</q>",
            "author": "Sharon Salzberg",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Intention</em> (<em lang='pi'>samma sankappa</em>) doesn't require grand gestures.  It starts with a genuine wish for our own well-being and the well-being of others.  This simple aspiration sets the tone for our actions and cultivates a sense of interconnectedness.</p><p></p><p></p>",
        "thoughts": ""
      },
      {
        "topic": "Dying",
        "quotes": [
          {
            "quote": "Leaden blankets weigh her down,<br>White hanks drape her leathery face.<br>Caught in the numbness of narrowing time,<br>Eyes blinded by gauze,<br>Robotic sighs echo into her coma.<br>Metallic hiss of breathing machine is the<br>Strange violence of modern compassion.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What do we do when those we care deeply about are dying, while we go on living and working?  We might be tempted to indulge in our own feeling of injustice, sadness, or fear, but we should think first of those who are dying.  We have a responsibility to be with them.</p><p>Don't let others die lonely.  No matter how ironic your living may compare with their dying, act for them as they can no longer act.  If they reach out for some way to cope with their impending end, you need not have flowery words.  Merely being with them, perhaps reaching out to hold hands, is eloquence enough.  Death may be near, but any amount of time before it comes is precious.</p><p>Life's moments are not cheapened by death.  Just to observe and affirm is good.  After all, death waits for all of us.  Only the value we place on each minute determine the quality of life.  If we can embrace that, then no one's life is ruined by death.</p>",
        "thoughts": ""
      },
      {
        "topic": "A Little Extra Time",
        "quotes": [
          {
            "quote": "Give just a little bit more time, effort, and patience to a difficult task or problem today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Successful people practice harder and practice longer than unsuccessful people do.  Success expert Peter Lowe, who has gleaned success secrets from hundreds of people who are at the top of their profession, says, <q>The most common trait I have found in all successful people is that they have conquered the temptation to give up.</q></p><p>Giving a little extra time requires more than just perseverance.  It requires patience.  The <em>Law of Process</em> in my book <cite>The 21 Irrefutable Laws of Leadership</cite> says, <q>Leadership develops daily, not in a day.</q>  That can be said of any talent we try to cultivate and improve.</p><p>As you work to give a little extra time to your efforts, it is wise to maintain a longer view of the process of improvement.  Such a perspective really helps.  Gutzon Borglum, the sculptor who created the memorial to the American presidents at Mount Rushmore, was asked if he considered his work to be perfect.  It's said he replied, <q>Not today.  The nose of Washington is an inch too long.  It's better that way, though.  It will erode to be exactly right in 10,000 years.</q>  Now that's patience!</p><p>—<cite>Talent Is Never Enough</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 8",
    "topics": [
      {
        "topic": "Brick By Boring Brick",
        "quotes": [
          {
            "quote": "You must build up your life action by action, and be content if each one achieves its goal as far as possible—and no one can keep you from this.  But there will be some external obstacle!  Perhaps, but no obstacle to acting with justice, self-control, and wisdom.  But what if some other area of my action is thwarted?  Well, gladly accept the obstacle for what it is and shift your attention to what is given, and another action will immediately take its place, one that better fits the life you are building.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.32"
          }
        ],
        "notes": "<p>Progress doesn't come from obsessing over outcomes.  It comes from showing up fully in each small action—completing what's in front of you with care, effort, and attention.  Whether you're pursuing a goal, building a habit, or navigating a challenge, the most important thing is to do the next right thing well.  Big changes come from the accumulation of small, deliberate moments.  A project may span months, but each task takes only minutes.  A life may feel overwhelming, but it's lived one decision at a time.</p><p>When you focus on what you can do now—on taking the next clear step—you often find that obstacles don't need to be overcome directly.  They fade into the background as you move forward.  You may not control outcomes, but you can control your effort, your presence, and your priorities.  And in the end, that's what shapes the course of your life.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Essence Of Right Resolve",
        "quotes": [
          {
            "quote": "Monks, there is <em>Right Resolve</em>.  What is right <em>Right Resolve</em>?  Being resolved on renunciation, on freedom from ill-will, on harmlessness: This is called <em>Right Resolve</em>",
            "author": "The Jhana Sutras",
            "source": "Bhikkhu Bodhi"
          }
        ],
        "notes": "<p><em>Right Intention</em>, also called <em>Right Resolve</em>, is about making a firm commitment.  We choose to renounce negativity, cultivate kindness, and avoid causing harm.  It's a conscious decision to live ethically and create positive karma.</p><p></p><p></p>",
        "thoughts": ""
      },
      {
        "topic": "Writer",
        "quotes": [
          {
            "quote": "She withdrew into herself,<br>First writing just for one,<br>Then touching thousands.<br>She incarnated ghosts, hurt, and joy<br>Into paper-and-ink stories of wonder.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>One author said, <q>I can get rid of anything by writing about it,</q> meaning that the process of externalization could liberate him from the pain in his soul.  That realization produced a delicious dichotomy: to free himself, or to hold on to both joys and tortures by remaining silent about them.</p><p>Writers write because they must.  They need to express something from deep within themselves.  They hear voices that others do not.  They listen urgently, and they must communicate what they hear.</p><p>People feel <em>Tao</em> in the same way that writers feel something unique.  In the process of listening for mysterious voices and expressing the wonder that comes is a magic akin to the perfection of <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "A Great Attitude Is Your Greatest Asset",
        "quotes": [
          {
            "quote": "Make your attitude your greatest asset today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What separates the best from the rest?  What makes the difference between a gold medalist and someone who doesn't make the podium?  Between a thriving entrepreneur and one who struggles to get traction?</p><p>Often, the answer includes a mix of factors—natural talent, early opportunities, intelligence, training, and access to resources.  These are real advantages, and it's unrealistic to pretend they don't matter.</p><p>But among people with comparable abilities or circumstances, attitude can tip the balance.  It can be the edge that turns potential into progress—or stalls it.  As Denis Waitley said in <em>The Winner's Edge</em>, <q>The winner's edge is not in a gifted birth, a high IQ, or in talent.  The winner's edge is all in the attitude, not aptitude.</q>  That may overstate it, but the truth remains: a strong mindset helps you get the most out of whatever you do have.</p><p>You can't buy a better attitude, and no one can give it to you.  It's something you shape through choice and effort.  For years, I've tried to live by this thought: I cannot always choose what happens to me, but I can always choose what happens in me.</p><p>Some things in life are outside my control.  Others are within it.  My attitude toward the things I can't control might not change the outcome—but it can change <em>me</em>.  And in the areas I do control, my attitude directly shapes the results.  That's why mindset isn't everything—but it's never nothing.</p><p>A positive outlook won't make the impossible easy.  But it makes the difficult more manageable.  It won't guarantee success, but it increases your chances.  In that sense, a strong attitude is one of your greatest advantages.</p><p>— adapted from <cite>The Difference Maker</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 9",
    "topics": [
      {
        "topic": "Solve Problems Early",
        "quotes": [
          {
            "quote": "There is no vice which lacks a defense, none that at the outset isn't modest and easily intervened—but after this the trouble spreads widely.  If you allow it to get started you won't be able to control when it stops.  Every emotion is at first weak.  Later it rouses itself and gathers strength as it moves along—it's easier to slow it down than to supplant it.",
            "author": "Seneca",
            "source": "Moral Letters, 106.2b-3a"
          }
        ],
        "notes": "<p>Publilius Syrus reminds us that rivers are easiest to cross at their source.  That's what Seneca means too.  The raging waters and deadly currents of bad habits, ill discipline, chaos, and dysfunction—somewhere they began as no more than just a slight trickle.  Somewhere they are a placid lake or pond, even a bubbling underground spring.</p><p>Which would you rather do—nearly drown in a dangerous crossing in a few weeks or cross now while it's still easy?  It's up to you.</p>",
        "thoughts": ""
      },
      {
        "topic": "Benefiting Ourselves And Others",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is about cultivating a genuine desire to benefit ourselves and others.",
            "author": "Dalai Lama",
            "source": "The Path to Enlightenment"
          }
        ],
        "notes": "<p><em>Right Intention</em> isn't selfish or one-sided.  It's about wanting both our own happiness and the happiness of others.  Imagine a beautiful garden; to flourish, it needs care for both the plants and the soil.  <em>Right Intention</em> encourages us to nourish both our own well-being and the well-being of those around us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Superstition",
        "quotes": [
          {
            "quote": "The voices of ghosts are so familiar,<br>They whisper to me every day.<br>&nbsp;&nbsp;&nbsp;You, so young and rich,<br>&nbsp;&nbsp;&nbsp;Make assumptions with absolute assurance.<br><br>I vacillate between superstition and tradition.<br>&nbsp;&nbsp;&nbsp;You don't need to question.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Tradition is the oral delivery of rites and customs from generation to generation.  Superstition is belief inconsistent with what society generally considers true and rational.  When tradition and superstition become bound together, it is a sign of trouble.  For example, a woman was once taught not to wash her hair on anybody's birthday.  Whenever she protested this, the answer was <q>Don't question!</q>  Years later, she learned that in the old country, letting one's hair down was a sign of mourning and thus inauspicious on a birthday.  What was etiquette in one generation became superstition in another.</p><p>Those raised with traditions and superstitions are often torn between the extremes of biculturalism.  Their inbred beliefs conflict with current knowledge and quickly changing culture, creating doubt and uncertainty.</p><p>There has to be informed revision to all tradition if it is not to degenerate into superstition.  The true substance of any tradition will take new form without compromising its inherent character.  If not, it will just become the outmoded beliefs of old people, and it will fade into ghostly whispers.</p>",
        "thoughts": ""
      },
      {
        "topic": "Take Others To A Higher Level",
        "quotes": [
          {
            "quote": "Bring the mindset of lifting up others into your day today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>I believe that deep down everyone—even the most negative person—wants to be a lifter.  We all want to be a positive influence in the lives of others.  And we can be.  If you want to lift people up and add value to their lives, keep the following in mind:</p><p><em>Lifters commit themselves to daily encouragement.</em>  Roman philosopher Lucius Annaeus Seneca observed, <q>Wherever there is a human being, there is an opportunity for kindness.</q>  Encourage others and do it daily.</p><p><em>Lifters know the little difference that separates hurting and helping.</em>  The little things you do every day have a greater impact on others than you might think.  You hold the power to make another person's life better or worse by the things you do today.</p><p><em>Lifters initiate the positive in a negative environment.</em>  It's one thing to be positive in a positive or neutral environment.  It's another to be an instrument of change in a negative environment.  Sometimes that requires a kind word, other times it takes a servant's action, and occasionally it calls for creativity.</p><p><em>Lifters understand life is not a dress rehearsal.</em>  People who lift others don't wait until tomorrow or some other <q>better</q> day to help people.  They act now!</p><p>Everyone is capable of becoming a person who lifts up others.  You don't have to be rich.  You don't have to be a genius.  You don't have to have it all together.  You do have to care about people and initiate lifting activities.  Doing that will positively change the relationships you already have and open you up to many more.</p><p>—<cite>Winning with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 10",
    "topics": [
      {
        "topic": "From Comparison To Action",
        "quotes": [
          {
            "quote": "If you find something very difficult to achieve yourself, don't imagine it impossible—for anything possible and proper for another person can be achieved as easily by you.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.19"
          }
        ],
        "notes": "<p>It's natural to compare ourselves to others.  When we see someone accomplish something impressive, we might think: <em>Why them?  Why not me?</em>  That question can lead us into envy and self-doubt.</p><p>But we can also respond with curiosity and inspiration: <em>If they can do it, maybe I can too.</em></p><p>The first response assumes life is a competition.  The second sees potential, not limitation.  One response narrows our path; the other expands it.</p><p>We don't always get to choose our first thought, but we can choose what to do with it.  Will we let comparison breed resentment?  Or will we let others' success spark our own?</p><p>What kind of mindset will you practice?</p>",
        "thoughts": ""
      },
      {
        "topic": "Overcoming Evil With Good",
        "quotes": [
          {
            "quote": "One should overcome the evil mind by a good mind.",
            "author": "The Dhammapada",
            "source": "translated by Gil Fronsdal"
          }
        ],
        "notes": "<p>Our thoughts and intentions have power.  <em>Right Intention</em> encourages us to cultivate positive mental states to counteract negativity.  When faced with anger, we choose compassion.  When faced with greed, we choose generosity.  This conscious shift in our mental state leads to a more peaceful and fulfilling life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Truth",
        "quotes": [
          {
            "quote": "There are three level of truth:<br>Experience, reasoning, and knowing.<br>All other assertions should be rejected.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The first type of truth is experience.  Once you have experienced something, you know it.  No person can persuade you otherwise.</p><p>The second type is truth gained by reasoning.  In this case, the truth cannot be immediately verified because the subject is too small (like atomic particles) or too large (like the movement of planets through time) or too abstract (like ideas).  Something may be true, but its truth is borne out by analysis rather than physical testing.</p><p>Either of these two types of truths has a range of validity.  They are relative.  Therefore, though truths are superior to falsehood, opinions, beliefs, and superstition, they each have limits.  There is a third type of truth that is different from these two.</p><p>This is a way of direct spiritual knowing.  Wholly internal, this mode is the direct experiencing of truth through the opening of higher faculties.  Meditation gives one perceptions of absolute certainty.  There is no doubt or need of other investigations; this knowledge is beyond words, descriptions, and rationalization.  In fact, one must be careful not to let the fruits of one's meditations pass into the realm of rationalization.  This will subject you to the relativity of external truths and ruin your confidence.  To avoid doubts and conflicting opinions, followers of <em>Tao</em> keep their revelations secret.  Then what is known directly is absolutely yours.</p>",
        "thoughts": ""
      },
      {
        "topic": "Look Within You",
        "quotes": [
          {
            "quote": "Be sure to <q>blow a certain trumpet</q> today with your people.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Theodore Hesburgh said, <q>The very essence of leadership is that you have a vision.  It's got to be a vision you can articulate clearly and forcefully on every occasion.  You can't blow an uncertain trumpet.</q>  An <q>uncertain trumpet</q> is usually the result of an individual who either lacks a vision or is trying to lead with someone else's dream.  There is a vast difference between a person with a vision and a visionary person.</p><ul><li>A person with a vision talks little but does much.</li><li>A visionary person does little but talks much.</li><li>A person with a vision finds strength from inner convictions.</li><li>A visionary person finds strength from outward conditions.</li><li>A person with vision continues when problems arise.</li><li>A visionary person quits when the road becomes difficult.</li></ul><p>Demosthenes, the greatest orator of the ancient world, stuttered!  Julius Caesar was an epileptic.  Napoleon was of humble parentage and far from being a born genius.  Beethoven was deaf, as was Thomas Edison.  Charles Dickens was lame; so was Handel.  Homer was blind; Plato was a hunchback; Sir Walter Scott was paralyzed.</p><p>What gave these great individuals the stamina to overcome severe setbacks and become successful?  Each person had an inner dream that lit a fire that could not be extinguished.  Great visions begin as an <q>inside job.</q>  Napoleon Hill said, <q>Cherish your visions and dreams as they are the children of your soul: the blueprints of your ultimate achievements.</q></p><p>—<cite>Developing the Leader Within You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 11",
    "topics": [
      {
        "topic": "Just Don't Make Things Worse",
        "quotes": [
          {
            "quote": "How much more harmful are the consequences of anger and grief than the circumstances that aroused them in us!",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.18.8"
          }
        ],
        "notes": "<p>When something goes wrong or is inflicted on us, it's easy to make things worse—first by reacting with anger or grievance, then by flailing around without a plan.  The first rule of holes, goes the adage, is that if you find yourself in a hole, stop digging.  That wisdom should guide the next move.</p><p>Today, give yourself the most simple and doable of tasks: just don't make stuff worse.  Whatever happens, don't add angry or negative emotions to the equation.  Don't react for the sake of reacting.  Leave it as it is.  Stop digging.  Then plan your way out.</p>",
        "thoughts": ""
      },
      {
        "topic": "Seeds of Positive Action",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is about cultivating a kind and generous heart.  It's the seed from which all positive actions grow.",
            "author": "Jack Kornfield",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Intention</em> is like a seed.  When we plant the seed of kindness and generosity, it blossoms into positive actions.  These actions, in turn, benefit ourselves and create a ripple effect of positivity in the world.</p>",
        "thoughts": ""
      },
      {
        "topic": "Accessibility",
        "quotes": [
          {
            "quote": "As long as the sun rises<br>And your heart beats,<br><em>Tao</em> is at hand.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>People think that <em>Tao</em> can only be known through fairy-tale stories of old men in the mountains or obscure poetry about gods riding dragons.  Others declare that elaborate ritual, frightening talismans, and mumblings from the depths of spirit possession are necessary for understanding.  This is simply not true.  Why put another's experience before your own?  <em>Tao</em> is in each of us.  Admittedly, an individual's common ignorance usually obscures awareness of <em>Tao</em>, but this does not mean that there is no <em>Tao</em> or that it is not important.  <em>Tao</em> is there for us to experience any time that we can open ourselves to it.</p><p>Is the sun shining?  Does night follow day?  Is the sky blue?  Do you have feeling?  Then it is possible to know <em>Tao</em> directly and immediately.  Don't delay, don't think yourself too insignificant.  Feel for it.  Right now.  As long as you are alive, <em>Tao</em> is right at hand.</p>",
        "thoughts": ""
      },
      {
        "topic": "Generosity",
        "quotes": [
          {
            "quote": "What are you currently losing by holding on to it?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Nothing speaks to others more loudly or serves them better than generosity from a leader.  True generosity isn't an occasional event.  It comes from the heart and permeates every aspect of a leader's life, touching his time, money, talents, and possessions.  Effective leaders, the kind that people want to follow, don't gather things just for themselves; they do it in order to give to others.  Cultivate the quality of generosity in your life.  Here's how:</p><p><em>Give something away.</em>  Find out what kind of hold your possessions have on you.  Take something you truly value, think of someone you care about who could benefit from it, and give it to him.  If you can do it anonymously, even better.</p><p><em>Put your money to work.</em>  If you know someone with the vision to do something really great—something that will positively impact the lives of others—provide resources for him to accomplish it.  Put your money to work for something that will outlive you.</p><p><em>Find someone to mentor.</em>  Once you reach a certain level in your leadership, the most valuable thing you have to give is yourself.  Find someone to pour your life into.  Then give him time and resources to become a better leader.</p><p>Indian poet Rabindranath Tagore wrote, <q>All that is not given is lost.</q></p><p>—<cite>The 21 Indispensable Qualities of a Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 12",
    "topics": [
      {
        "topic": "A Trained Mind Is Better Than Any Script",
        "quotes": [
          {
            "quote": "In this way you must understand how laughable it is to say, <q>Tell me what to do!</q>  What advice could I possibly give?  No, a far better request is, <q>Train my mind to adapt to any circumstance.</q>  In this way, if circumstances take you off script .  .  .  you won't be desperate for a new prompting.",
            "author": "Epictetus",
            "source": "Discourses, 2.2.20b-1; 24b-25a"
          }
        ],
        "notes": "<p>It would be nice if someone could show us exactly what to do in every situation.  Indeed, this is what we spend a good portion of our lives doing: preparing for this, studying for that.  Saving for or anticipating some arbitrary point in the future.  But plans, as President Dwight D.  Eisenhower once said, <q>are worthless, but planning is everything</q> — they only last until reality intervenes.</p><p>Stoics do not seek to have the answer for every question or a plan for every contingency.  Yet they're also not worried.  Why?  Because they have confidence that they'll be able to adapt and change with the circumstances.  Instead of looking for instruction, they cultivate skills like creativity, independence, self-confidence, ingenuity, and the ability to problem solve.  In this way, they are resilient instead of rigid.  We can practice the same.</p><p>Today, we will focus on the strategic rather than the tactical.  We'll remind ourselves that it's better to be taught than simply <em>given</em>, and better to be flexible than stick to a script.</p>",
        "thoughts": ""
      },
      {
        "topic": "Intentions Shape Reality",
        "quotes": [
          {
            "quote": "Our intentions shape our reality.  Cultivating wholesome intentions leads to a more positive and fulfilling life.",
            "author": "Sam Harris",
            "source": "Waking Up"
          }
        ],
        "notes": "<p>The law of attraction isn't just about material things.  Our intentions shape our experience of life.  By cultivating wholesome intentions, we attract positive experiences and opportunities.  We become magnets for good fortune, not because of some external force, but because our intentions create a positive vibration that attracts similar energy.</p>",
        "thoughts": ""
      },
      {
        "topic": "Navigation",
        "quotes": [
          {
            "quote": "Do you know<br>Where you are<br>On your journey?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Tao</em>'s movement has been compared to the flow of rivers.  Its vastness has been compared to that of oceans.  Some people are content to float here and there with the tide, but for others, such passivity is impossible.  We have to navigate.</p><p>Like early explorers on the high seas, we know where we want to go.  That's when studying precedence is important.  The wisdom of those who went before is like a map.  The truths regarding <em>Tao</em> are like the stars.  We determine our goals, and we set out according to what we know and what we learn.  The future is always uncertain; that is why it is important to objectively evaluate where we are on our spiritual path.</p><p>If you are confronted with a pivotal decision and cannot think of any other way to act, write down all the good things and all the bad things about a given situation.  Also include how much more you want to do.  See if staying your course will give you what you want.  If not, change, no matter how deeply that will disrupt your routines.  Some people never know where they are in life, and that is one of the biggest reasons that they are unhappy.</p>",
        "thoughts": ""
      },
      {
        "topic": "Things Everybody Needs To Understand About People",
        "quotes": [
          {
            "quote": "Try to let everybody you encounter today know that you believe they are somebody.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Knowing what people need and want is the key to understanding them.  And if you can understand them, you can influence them and impact their lives in a positive way.  If we were to boil down all the things we know about understanding people and narrow them down to a short list, we would identify these five things:</p><p><ol><li><em>Everybody wants to be somebody.</em>  There isn't a person in the world who doesn't have the desire to be someone, to have significance.</li><li><em>Nobody cares how much you know until he knows how much you care.</em>  To be an influencer, you have to love people before you try to lead them.</li><li><em>Everybody needs somebody.</em>  Contrary to popular belief, there are no such things as self-made men and women.  Everybody needs friendship, encouragement, and help.</li><li><em>Everybody can be somebody when somebody understands and believes in them.</em>  Once you understand people and believe in them, they really can become somebody.</li>  <li><em>Anybody who helps somebody influences a lot of bodies.</em>  What you give to one person overflows into the lives of all the people that person impacts.  The nature of influence is to multiply.</li></ol></p><p>—<cite>Becoming a Person of Influence</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 13",
    "topics": [
      {
        "topic": "Life Is A Battlefield",
        "quotes": [
          {
            "quote": "Don't you know life is like a military campaign?  One must serve on watch, another in reconnaissance, another on the front line.  .  .  .  So it is for us—each person's life is a kind of battle, and a long and varied one too.  You must keep watch like a soldier and do everything commanded.  .  .  .  You have been stationed in a key post, not some lowly place, and not for a short time but for life.",
            "author": "Epictetus",
            "source": "Discourses, 3.24.31-36"
          }
        ],
        "notes": "<p>The writer Robert Greene often uses the phrase <q>As in war, so in life.</q>  It's an aphorism worth keeping close, because our life is a battle both literally and figuratively.  As a species, we fight to survive on a planet indifferent to our survival.  As individuals, we fight to survive among a species whose population numbers in the billions.  Even inside our own bodies, diverse bacteria battle it out.  <span lang='la'><em>Vivere est militare.</em></span>  (To live is to fight.)</p><p>Today, you'll be fighting for your goal, fighting against impulses, fighting to be the person you want to be.  So what are the attributes necessary to win these many wars?</p><ul><li>Discipline</li><li>Fortitude</li><li>Courage</li><li>Clearheadedness</li><li>Selflessness</li><li>Sacrifice</li></ul><p>And which attributes lose wars?</p><ul><li>Cowardice</li><li>Rashness</li><li>Disorganization</li><li>Overconfidence</li><li>Weakness</li><li>Selfishness</li></ul><p><q>As in war, so these attributes matter in daily life.</q></p>",
        "thoughts": ""
      },
      {
        "topic": "Begin With Self-Compassion",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> starts with self-compassion.  When we are kind to ourselves, it's easier to extend kindness to others.",
            "author": "Tara Brach",
            "source": "Radical Acceptance"
          }
        ],
        "notes": "<p>We can't pour from an empty cup.  <em>Right Intention</em> begins with self-compassion.  When we treat ourselves with kindness and understanding, it becomes easier to extend that same kindness to others.  A full heart of compassion naturally overflows and benefits everyone around us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Censorship",
        "quotes": [
          {
            "quote": "Emperors uphold censorship,<br>But extreme repression leads to extreme reaction.<br>Individualists believe in freedom,<br>But extreme expression leads to extreme reaction.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The emperors of China and Rome punished any expression that displeased them.  Whether it was dissent, unpleasant news, or a portrait that disgusted them, they were ready to destroy the perpetrators without hesitation.  Today, there are democracies but no less a tendency to punish dissent, manipulate information, or castigate artists.  Those in power should be careful: Push the people too far, and they will rebel.</p><p>Artists from early on have tried to push the limits of their expression.  Driven by the desire to create, they have sought to strike down every boundary.  But as long as they do this in a social setting, they should not outpace their audiences.  Those who create must be careful: Challenge the people too much, and they will rebel.</p><p>So there are two extremes.  The desires of the powerful, who feel that censorship is a just tool, and the tendencies of the creative, who feel that they should have no limits to their freedom.  Those who follow <em>Tao</em> avoid these extremes.  They avoid becoming the ruler, for such a position is fraught with danger, hypocrisy, and disappointment.  Neither will they become the grandstanding artist; to arouse others is likewise dangerous.  If they must rule, they use compassion as their standard.  If they do create, they find satisfaction in self-expression.  Above all, they avoid any extreme that will take them from <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Encourage The Dreams Of Others",
        "quotes": [
          {
            "quote": "Ask someone to share their dream with you today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>I consider it a great privilege when people share their dreams with me.  It shows a great deal of courage and trust.  And at that moment, I'm conscious that I have great power in their lives.  That's no small matter.  A wrong word can crush a person's dream; the right word can inspire him or her to pursue it.</p><p>If someone thinks enough of you to tell you about his or her dreams, take care.  Actress Candice Bergen commented, <q>Dreams are, by definition, cursed with short life spans.</q>  I suspect she said that because there are people who don't like to see others pursuing their dreams.  It reminds them of how far they are from living their own dreams.  As a result, they try to knock down anyone who is shooting for the stars.  By talking others out of their dreams, critical people excuse themselves for staying in their comfort zones.</p><p>Never allow yourself to become a dream killer.  Instead, become a dream releaser.  Even if you think another person's dream is far-fetched, that's no excuse for criticizing them.</p><p>—<cite>25 Ways to Win with People</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 14",
    "topics": [
      {
        "topic": "Try The Other Handle",
        "quotes": [
          {
            "quote": "Every event has two handles—one by which it can be carried, and one by which it can't.  If your brother does you wrong, don't grab it by his wronging, because this is the handle incapable of lifting.  Instead, use the other—that he is your brother, that you were raised together, and then you will have hold of the handle that carries.",
            "author": "Epictetus",
            "source": "Enchiridion, 43"
          }
        ],
        "notes": "<p>The famous journalist William Seabrook suffered from such debilitating alcoholism that in 1933 he committed himself to an insane asylum, which was then the only place to get treatment for addiction.  In his memoir, <em>Asylum</em>, he tells the story of the struggle to turn his life around inside the facility.  At first, he stuck to his addicted way of thinking—and as a result, he was an outsider, constantly getting in trouble and rebelling against the staff.  He made almost no progress and was on the verge of being asked to leave.</p><p>Then one day this very quote from Epictetus—about everything having two handles—occurred to him.  <q>I took hold now by the other handle,</q> he related later, <q>and carried on.</q>  He actually began to have a good time there.  He focused on his recovery with real enthusiasm.  <q>I suddenly found it wonderful, strange, and beautiful, to be sober.  .  .  .  It was as if a veil, or scum, or film had been stripped from all things visual and auditory.</q>  It's an experience shared by many addicts when they finally stop doing things their way and actually open themselves to the perspectives and wisdom and lessons of those who have gone before them.</p><p>There is no promise that trying things this way—of grabbing the different handle—will have such momentous results for you.  But why continue to lift by the handle that hasn't worked?</p>",
        "thoughts": ""
      },
      {
        "topic": "Positive Intentions Reduce Stress",
        "quotes": [
          {
            "quote": "Our intentions and motivations significantly impact our stress levels.  Cultivating positive intentions promotes relaxation.",
            "author": "Herbert Benson",
            "source": "The Relaxation Response"
          }
        ],
        "notes": "<p>Our intentions are like the undercurrent of our lives.  Negative intentions create anxiety and tension.  Positive intentions, on the other hand, promote a sense of peace and well-being.  By cultivating <em>Right Intention</em>, we reduce stress and create a foundation for inner peace.</p>",
        "thoughts": ""
      },
      {
        "topic": "Master",
        "quotes": [
          {
            "quote": "Deception occurs when you are divided,<br>Truth appears when you are whole,<br>Uniting male and female brings illumination,<br>The real master is a perfect light.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>No one is ineligible to know higher truth.  When concentration, energy, and thinking are scattered, we cannot break out of ignorance.  The diversity and contradictions of existence confuse us, and appearances deceive us.</p><p>Do we need a master to help us in this struggle to know the truth?  In the beginning we do.  What is not often said is that the human master is but a temporary and imperfect manifestation of the ultimate truth.  Without a master, you cannot make a beginning.  If you never look beyond the person, you will never attain the entirety.  A good master leads you to the true master within.  Only that master, who is your own higher self, can adequately answer all questions.</p><p>Once you unite all elements within yourself, metaphorically referred to as the uniting of male and female, the light that dispels darkness appears.  Just as all colored light together makes colorless light, so too does the combination of all our facets result in the integration of our polarities.  When this happens, you will <q>see</q> a light in your meditations.  This light brings knowledge.  That is why it is called the true master.</p>",
        "thoughts": ""
      },
      {
        "topic": "Add Significance",
        "quotes": [
          {
            "quote": "What would you do if there were no limits on your life?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Moishe Rosen teaches a one-sentence mental exercise that is an effective tool in helping a person identify his dream.  He asks a person to fill in the blanks:</p><p><em>If I had</em> ____________________________,<br><em>I would</em> ____________________________.</p><p>The idea is that if you had anything you wanted—unlimited time, unlimited money, unlimited information, unlimited staff (all the resources you could ask for)—what would you do?  Your answer to that question is your dream.</p><p>Everyone has heard the story of Isaac Newton's discovery of the law of gravity after observing the fall of an apple.  What few people know is that Edmund Halley, the astronomer who discovered Halley's Comet, is almost single-handedly responsible for Newton's theories becoming known.  Halley challenged Newton to think through his original notions.  He corrected Newton's mathematical errors and prepared geometrical figures to support his work.  Not only did he encourage Newton to write his great work, <em>Mathematical Principles of Natural Philosophy</em>, but he edited the work, supervised its publication, and financed its printing, even though Newton could easily afford the printing costs.</p><p>Halley encouraged Newton to act on his dream, and it added immeasurable significance to Newton's life.  Halley received little credit, but he must have gained great satisfaction in knowing he had inspired revolutionary ideas in the advancement of scientific thought.</p><p>—<cite>Developing the Leaders Around You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 15",
    "topics": [
      {
        "topic": "Listening Accomplishes More Than Speaking",
        "quotes": [
          {
            "quote": "To the youngster talking nonsense Zeno said <q>The reason why we have two ears and only one mouth is so we might listen more and talk less.</q>",
            "author": "Diogenes Laertius",
            "source": "Lives of the Eminent Philosophers, 7.1.23"
          }
        ],
        "notes": "<p>Why do some people seem to handle problems more smoothly than others?  Awareness may be the key.</p><p>They don't expect things to go perfectly.  Instead, they manage expectations realistically—rarely counting on what isn't likely in the first place.</p><p>They also consider both best- and worst-case scenarios.  They think through what they <em>wish</em> would happen—but also what realistically <em>can</em> happen if things turn.</p><p>It's not that they hope for setbacks.  But they know setbacks happen, and they've already thought about how to respond.  That kind of awareness makes it easier to act with purpose instead of panic.</p><p>If you carry this mindset into your day, you might not avoid every surprise—but you'll likely meet it with more steadiness, clarity, and less frustration.</p>",
        "thoughts": ""
      },
      {
        "topic": "Commitment To Growth And Ethics",
        "quotes": [
          {
            "quote": "The second element of the path, <em>Right Thought</em>, asks us to commit to ethical and personal growth.",
            "author": "Damien Keown",
            "source": "Buddhism: A Very Short Introduction"
          }
        ],
        "notes": "<p><em>Right Intention</em> is the foundation for <em>Right Thought</em>, the second factor of the Noble Eightfold Path.  It's about making a conscious choice to think ethically and cultivate positive mental states.  This commitment to personal growth sets us on a path towards greater wisdom and a more fulfilling life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Totality",
        "quotes": [
          {
            "quote": "Those who consider their path superior are condescending.<br>A parrot who speaks of the totality of the self is absurd.<br>Many paths lead to the summit.<br>But it takes a whole body to get there.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Once I met a woman who was a lifelong Christian.  She had two sons who practiced yoga.  She thought that was wonderful, but they arrogantly considered their beliefs to be superior to hers and told her that she was not doing enough for her spiritual salvation.</p><p>No one has a right to condemn another person's spiritual beliefs.  No spiritual system is superior to another.  Each one of us should have the philosophy and practices that work for us.  We should be happy once we find it, we should help those who are interested in the spirituality we represent, but none of us should behave condescendingly toward others' spirituality.</p><p>We are all trying to get to the summit of spiritual realization, and there are many valid paths leading to the top.  Of course, the view and terrain on one side of a mountain will differ from the other, but the summit is identical no matter what your approach.</p><p>Whatever your path, all that matters is that you commit yourself totally to following it.  Others will do the same.  As long as we all climb, each from our own direction, and reach the summit of human spirituality, we can achieve complete totality in our lives.  Then all the fracturing discussions of sects and different religions become unnecessary.</p>",
        "thoughts": ""
      },
      {
        "topic": "Dealing With The Weak Link",
        "quotes": [
          {
            "quote": "If your are the leader, it is your responsibility to address the problem of a weak link on your team.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If you're a team leader, you cannot ignore the issues created by a weak link.  For the various kinds of teams, different solutions are appropriate.  If the team is a family, then you don't simply <q>trade</q> weak people.  You lovingly nurture them and try to help them grow, but you also try to minimize the damage they can cause to other family members.  If the team is a business, then you have responsibilities to the owner or stockholders.  If you've offered training without success, then a <q>trade</q> might be in order.  If the team is a ministry and training has made no impact, then it might be appropriate to ask the weak people to sit on the sidelines for a while.  Or they might need some time away from the team to work on emotional or spiritual issues.</p><p>No matter what kind of situation you face, remember that your responsibilities to people come in the following order: to the organization, to the team, and then to the individual.  Your own interests—and comfort—come last.</p><p>—<cite>The 17 Indisputable Laws of Teamwork</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 16",
    "topics": [
      {
        "topic": "No Shame In Needing Help",
        "quotes": [
          {
            "quote": "Don't be ashamed of needing help.  You have a duty to fulfill just like a soldier on the wall of battle.  So what if you are injured and can't climb up without another soldier's help?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.7"
          }
        ],
        "notes": "<p>No one ever said you were born with all the tools you'd need to solve every problem you'd face in life.  In face, as a newborn you were practically helpless.  Someone helped you then, and you came to understand that you could ask for that help.  It was how you knew you were loved.</p><p>Well, you are still loved.  You can ask anyone for help.  You don't have to face everything on your own.</p><p>If you need help, it's okay to reach out.</p>",
        "thoughts": ""
      },
      {
        "topic": "Awakening: Right Intention",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is about wanting to wake up, to see things clearly, and to be free from suffering.",
            "author": "Pema Chödrön",
            "source": "When Things Fall Apart"
          }
        ],
        "notes": "<p><em>Right Intention</em> isn't just about good deeds.  It's about a deep aspiration for awakening, for seeing reality clearly, and for liberation from suffering.  Imagine someone lost in a forest.  <em>Right Intention</em> is like wanting to find the way out, not just taking a random step.</p>",
        "thoughts": ""
      },
      {
        "topic": "Meditation",
        "quotes": [
          {
            "quote": "Sit still and disengage normal activities.<br>Draw energy from the earth,<br>Admit power from the heavens.<br>Fertilize the seed within;<br>Let it sprout into a flower of pure light.<br>And let brightness open the top of your head:<br>Divine light will come pouring in.<br>Your mind is empty,<br>Light seeps into your whole body.<br>Sitting cross-legged, with hands clasped,<br>As if trying to embrace the brilliant flood,<br>Your skin turns transparent.<br>How can a bag of skin hold divine magnitude?<br>Your last vestiges burn away in a torrent of infinity.<br><br>Only after indeterminate time do you return.<br>Flesh, blood, bone.<br>Were you gone?  Or were you never here in the first place?<br>Where is the torrent?<br>It is not gone;<br>You've only closed to it once more.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "",
        "thoughts": ""
      },
      {
        "topic": "Failure Is An Inside Job",
        "quotes": [
          {
            "quote": "Rely on a positive attitude today to get you through difficult circumstances.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>In our culture, we often hear people say, <q>Money doesn't buy happiness.</q>  But most people would rather test that theory with a full stomach and a paid electric bill.  The truth is, money matters.  It creates comfort, safety, options, and freedom—all of which make happiness easier to access.  Still, none of those guarantees contentment.  Because contentment isn't about what you own.  It's about how you think.</p><p>As Willy Wonka once said, <q>Don't forget what happened to the man who suddenly got everything he ever wanted...  he lived happily ever after.</q>  Sometimes, getting what you want <strong>is</strong> the answer.  But even then, the question remains: Will you appreciate it, or will you still be chasing—in Rockefeller's words—<q>just a little more</q>?</p><p>Contentment comes from having a positive attitude.  It means:<ul><li>Searching for the best in everything—not assuming the worst</li><li>Remaining upbeat—even when you get beat up</li><li>Seeing solutions in every problem—not problems in every solution</li>  <li>Believing in yourself—even when others believe you've failed</li><li>Remaining steady—even when others give up</li></ul></p><p>No matter what happens to you, a positive attitude comes from within.  Your circumstances and your contentment are unrelated.</p><p>—adapted from <cite>Failing Forward</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 17",
    "topics": [
      {
        "topic": "Offense Or Defense?",
        "quotes": [
          {
            "quote": "Fortune doesn't have the long reach we suppose, she can only lay siege to those who hold her tight.  So, let's step back from her as much as possible.",
            "author": "Seneca",
            "source": "Moral Letters, 82.5b-6"
          }
        ],
        "notes": "<p>Machiavelli, who supposedly admired Seneca, writes in <cite>The Prince</cite> that <q>fortune is a woman, and it is necessary, in order to keep her down, to beat her and struggle with her.</q>  Even for the sixteenth century, it's disturbing imagery.  But for a ruthless and endlessly ambitious ruler, it was par for the course.  Is that the kind of life you're aiming for?</p><p>Now compare that view with Seneca's.  He's not only saying that the more you struggle with fortune, the more control it has over you — he's also urging restraint.  Stepping back from fortune's chaos, not charging headlong into it, is the stronger position.  Where Machiavelli proposes domination, Seneca recommends detachment and clarity.  Philosophy, for Seneca, is a kind of inner fortress — a discipline that frees us from greed, softens our fears, and prepares us for whatever life throws our way.</p><p>In sports or war, the metaphor might be the choice between a strategy of relentless offense versus one of resilient, flexible defense.  Which will you choose?  What kind of person are you?</p><p>Only you can answer that question.  But it's worth noting how most of the princes in Machiavelli's book actually ended — and how few of them died peacefully in bed, surrounded by people they loved.</p>",
        "thoughts": ""
      },
      {
        "topic": "Renunciation And Compassion",
        "quotes": [
          {
            "quote": "<em>Right Thought</em>, as one component of the path, means the renunciation of sensuality, the absence of ill-will, and non-cruelty.",
            "author": "Bhikkhu Bodhi",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Thought</em>, built upon <em>Right Intention</em>, goes beyond mere action.  It's about cultivating wholesome mental states.  This includes letting go of excessive desires, cultivating goodwill towards others, and avoiding any thoughts of cruelty.</p>",
        "thoughts": ""
      },
      {
        "topic": "Sage",
        "quotes": [
          {
            "quote": "Ancient sages lived in forests and<br>Wandered from village to village,<br>Sharing openly, teaching the people<br>Without profit or ownership.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There were more holy aspirants in ancient times.  These men and women cultivated themselves in the mountains or wandered among forests and streams.  When they came to a village and saw that there was some knowledge that could be imparted to the people, they did so openly.  Once they taught what was necessary, they disappeared, knowing that others would follow behind them.  They did not establish religious schools, temples, or philosophies bearing their names.  They knew knowledge did not belong to anyone.  It could not be owned, parceled out for profit, or withheld selfishly.</p><p>Nowadays, many people regard knowledge as a mere commodity to be packaged, marketed, and sold.  Their interest is not in benefit for others' souls but for their own pocketbooks.  For example, one contemporary master requires a thousand ounces of gold before he will teach a single technique.  We live in a world where the selfless sharing of knowledge is no longer a virtue.</p><p>The more knowledge that you give away, the more will come to you.  The more you hoard, the less you will accumulate.  Be compassionate to others.  What do you have to fear by being open?</p>",
        "thoughts": ""
      },
      {
        "topic": "Life Gives You What You Expect",
        "quotes": [
          {
            "quote": "Begin your thirty-day trial of expecting the best of everything.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The happiest people in life don't necessarily <em>have</em> the best of everything.  They just try to <em>make</em> the best of everything.  They're like the person in a remote village who goes to the well each day and says, <q>Every time I come to this well, I come away with my bucket full!</q> instead of, <q>I can't believe I have to keep coming back to this well to fill up my bucket!</q></p><p>Attitude doesn't change reality, but it does shape how we respond to it.  Ask a coach before a big game whether the team's mindset matters.  Ask a surgeon if a patient's will to fight influences recovery.  Ask a teacher whether a student's approach affects how they learn.  Our outlook doesn't control the world — but it does change how we move through it.</p><p>I've learned that life rarely gives us what we expect — but it often reflects what we contribute.  If you bring negativity into every encounter, you'll likely find resistance.  But if you approach situations with calm, clarity, and effort, you're more likely to shape a better result.  Try it for thirty days: look for opportunities instead of disappointments.  Show up prepared, present, and kind.  Not because you expect perfection, but because you're committed to being your best in a world that's unpredictable at best.</p><p>—<cite>The Difference Maker</cite> (rewritten by clycos)</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 18",
    "topics": [
      {
        "topic": "Prepared And Active",
        "quotes": [
          {
            "quote": "Let Fate find us prepared and active.  Here is the great soul—the one who surrenders to Fate.  The opposite is the weak and degenerate one, who struggles with and has a poor regard for the order of the world, and seeks to correct the faults of the gods rather than their own.",
            "author": "Seneca",
            "source": "Moral Letters, 107.12"
          }
        ],
        "notes": "<p>Whatever happens today, let it find us prepared and active: ready for problems, ready for difficulties, ready for people to behave in disappointing or confusing ways, ready to accept and make it work for us.  Let's not wish we could turn back time or remake the universe according to our preference.  Not when it would be far better and far easier to remake ourselves.</p>",
        "thoughts": ""
      },
      {
        "topic": "Mindful Creation Of Tomorrow",
        "quotes": [
          {
            "quote": "What we are today comes from our thoughts of yesterday, and our present thoughts build our life of tomorrow: Our life is the creation of our mind.",
            "author": "Walpola Rahula",
            "source": "What the Buddha Taught"
          }
        ],
        "notes": "<p>Our thoughts are powerful.  They shape who we are and how we experience life.  <em>Right Thought</em> encourages us to be mindful of our thoughts and cultivate positive mental states.  By doing so, we actively create a brighter future for ourselves.</p>",
        "thoughts": ""
      },
      {
        "topic": "Armor",
        "quotes": [
          {
            "quote": "Ripe fruit, crisp greens, live grain,<br>Vital roots, tender meat, spring water.<br>Growing essence nourishes your own.<br>Essence alloyed with breath makes you flexible but hard.<br>The sage's body is armored.<br>The sage is impervious to death.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Those who follow Tao speak of three treasures in the body: essence, breath, and spirit.</p><p>Essence is the biochemical aspect of your body, nurtured by the food you eat, and regulated by the quality of your hormones.  Therefore, all your food should be packed and glowing with energy.  Eat food as close to its source as possible.  Pray before you eat, for everything that you take, whether plant or animal, is living.  You must consume to survive, but when you die, acknowledge that you will become food for others.</p><p>To build the breath, work and exercise diligently.  Build stamina and discipline yourself.  You will gain great flexibility combined with hardened flesh, and you will be graceful.  Immunity to minor physical traumas as well as many kinds of illness will be yours.</p><p>The ultimate training of the spirit begins with the question of death.  The sages see beyond dying.  Though they must die, they also know that nothing is lost because no one owns body or mind anyway.  Those who follow Tao safeguard themselves and live their spirituality with a realistic appreciation of death.  The establishment of essence, breath, and spirit is like wearing armor; the travails of the world mean nothing.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Power Of Right Choices",
        "quotes": [
          {
            "quote": "Maximize your talent by steering your entire life in the right direction.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Life is shaped by choices.  Each decision contributes to who a person becomes—career, relationships, education, daily priorities.  Among the most important choices is not what to do, but <em>who to become</em>.</p><p>Success isn't about being dealt the best hand, but about playing whatever hand is given with skill and intention.  Talent alone is not the defining factor.  What matters is how talent is developed, applied, and refined over time through consistent choices.</p><p>Those who maximize their potential are not simply gifted—they are disciplined, purposeful, and aligned with growth.  They build on what they have, rather than waiting for perfect conditions.</p><p>A timeless reminder from <cite>Oh, The Places You'll Go!</cite> captures this clearly:</p><blockquote><p>You have brains in your head.<br>You have feet in your shoes.<br>You can steer yourself<br>Any direction you choose.</p></blockquote><p>With the right direction and decisions, a person becomes more than their starting point—fulfilling potential and living with intention and purpose.</p><p>—adapted from <cite>Talent Is Never Enough</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 19",
    "topics": [
      {
        "topic": "Stay Focused On The Present",
        "quotes": [
          {
            "quote": "Don't let your reflection on the whole sweep of life crush you.  Don't fill your mind with all the bad things that might still happen.  Stay focused on the present situation and ask yourself why it's so unbearable and can't be survived.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.36"
          }
        ],
        "notes": "<p>When you look back at some of the most impressive, even scary, things that you've done or endured, how were they possible?  How were you able to see past the danger or the poor odds?  As Marcus described, you were too busy with the details to let the whole sweep of the situation crush you.  In fact, you probably didn't even think about it at the time.</p><p>Sometimes grasping the big picture is important, and the Stoics have helped us with that before.  A lot of times, though, it's counterproductive and overwhelming to be thinking of everything that lies ahead.  So by focusing exclusively on the present, we're able to avoid or remove those intimidating or negative thoughts from our frame of view.</p><p>A man walking a tightrope tries not to think about how high up he is.  Like us, they're better off putting one foot in front of the other and considering everything else to be extraneous.</p>",
        "thoughts": ""
      },
      {
        "topic": "Intentions Of Love Over Greed",
        "quotes": [
          {
            "quote": "<em>Right Thought</em> ensures that our actions stem from intentions of love rather than greed, hatred, or delusion.",
            "author": "Jack Kornfield",
            "source": "The Wise Heart: A Guide to the Universal Teachings of Buddhist Psychology"
          }
        ],
        "notes": "<p><em>Right Thought</em> acts as a filter for our actions.  It ensures our deeds come from a place of love and compassion, not from negative emotions like greed, hatred, or confusion.  When our actions are rooted in love, they bring positive consequences for ourselves and others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Shrine",
        "quotes": [
          {
            "quote": "Wade the warm stream to<br>The shrine across the river of golden sound,<br>Where a drunken bee drones the holy syllable<br>Over a crimson lotus.<br>Rich mango magenta and spice offerings<br>Are piled high by the devout.<br>Entering into hut of blue stone—<br>Cool black interior smeared with incense and<br>Pierced with tiny triangles of candle flame—<br>Ordinary cares fall to the crystalline floor.<br>Fiery letters appear in the air<br>And reappear in your heart.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>It is good to have holy places in the world, and it is good for us to go on pilgrimages.  Ultimately, it is not the place that is important; it is what you feel that is lasting.  To visit a place is minor; to change within yourself is greater.</p><p>When people visit a holy place, some say that the spirits of that place speak to them.  Others remember the exotic pageantry.  When it comes to sacred sites, it's better to be a pilgrim than a tourist.  Go with a humble attitude, and let your heart be moved by what you experience.  Then you will receive the true treasure of the shrine.</p>",
        "thoughts": ""
      },
      {
        "topic": "Give Encouragement",
        "quotes": [
          {
            "quote": "Look for opportunities to encourage your team today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Encouragement can be a quiet force behind growth.  A well-timed word or gesture may offer someone the energy to move forward or the reassurance that they're not alone.  It doesn't have to be grand—just sincere.</p><p>When someone enters a new role or faces uncertainty, even a small sign of support can make a difference.  Encouragement isn't about fixing problems for others.  It's about affirming their effort and helping them carry on when the outcome is still unclear.</p><p>Reinforcement matters.  Thank people for thoughtful work.  Recognize improvement when you see it.  And tailor your encouragement—what resonates with one person may not register with another.  Take time to notice what uplifts those around you.</p><p>Sometimes, the smallest gesture—an honest thank-you, a specific compliment, or a quiet acknowledgment—can remind someone that what they do matters.  Encouragement is less about motivating others and more about affirming their value as they grow.</p><p>—adapted from <cite>Developing the Leaders Around You</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 20",
    "topics": [
      {
        "topic": "Calm Is Contagious",
        "quotes": [
          {
            "quote": "If then it's not that the things you pursue or avoid are coming at you, but rather that you in a sense are seeking them out, at least try to keep your judgment of them steady, and they too will remain calm and you won't be seen chasing after or fleeing from them.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.11"
          }
        ],
        "notes": "<p>Calm can come from your leader—SHOULD come from your leader, but it can come from anyone.  If a teammate loses their wits, if the group is unsure of what to do next, it's a leader's job to do one thing: instill calm—not by force but by example.</p><p>That's who you want to be, whatever your line of work: the casual relaxed person in every situation who tells everyone else to take a breath and not to worry.  Because you've got this.  Don't be the agitator, the paranoid, the worrier, or the irrational.  Be the calm, not the liability.</p><p>It will catch on.</p>",
        "thoughts": ""
      },
      {
        "topic": "Ensuring Harmless Deeds",
        "quotes": [
          {
            "quote": "With <em>Right Intention</em>, we ensure our deeds cause no distress or harm to others.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Intention</em> involves thoughtful consideration of the consequences our actions may have on others.  It encourages us to choose paths that avoid causing harm or suffering, emphasizing the importance of mindfulness in our words, actions, and thoughts.  This mindfulness is crucial because even our smallest behaviors can have a significant ripple effect on the world around us.  By cultivating such intentions, we foster a more compassionate and understanding environment, ensuring our impact aligns with our ethical values.</p>",
        "thoughts": ""
      },
      {
        "topic": "Altar",
        "quotes": [
          {
            "quote": "Each day I forge my body into steel<br>And fold in bright strands of consciousness.<br>Piling up ripe fruit and fragrant flowers,<br>Lighting red candles and incense,<br>Serving tea, rice, and wine.<br>Anointing with aromatic oils,<br>Offering heart and bones,<br>The altar is my anvil, sun and moon the coals,<br>Discipline the hammer, lungs the bellows.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Followers of <em>Tao</em> have private altars in their homes.  The pious see an altar only for supplication; the skeptical see the altar as false and insincere.  Actually, devotional effort is absolutely necessary for those beginning on the path.</p><p>True spiritual cultivation begins with the premise that you already have a pure spirit and only need to clear away obfuscations.  Thus one must work on both the physical and mental levels in order to achieve the quickest results.  Such varied efforts need a strong center.  By focusing on the altar as the platform for all practices, you will keep yourself strongly on your path.  The outward acts then pile up like offerings after offerings, and the outward votive furniture becomes your means of memorializing your efforts.  Then your body itself becomes a steel altar, an unshakable monument to spiritual devotion.</p>",
        "thoughts": ""
      },
      {
        "topic": "Make Your Teachable Moments Count",
        "quotes": [
          {
            "quote": "Find ways to create action steps, and follow through on something you can learn today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>One <cite>Peanuts</cite> cartoon by Charles Schulz showed Charlie Brown at the beach building a magnificent sand castle.  With it completed, he stood back to admire his work, at which point he and his work were engulfed by a downpour that leveled his beautiful castle.  In the last frame, he says, <q>There must be a lesson here, but I don't know what it is.</q></p><p>Unfortunately that's the way many people feel after a potentially valuable experience.  Even people who are strategic about seeking teachable moments can miss the whole point of the experience.  I say this because for thirty years I've been a speaker at conferences and workshops — events that are designed to help people learn.  But I've found that many people walk away from an event and do very little with what they heard after closing their notebooks.</p><p>We tend to focus on learning events instead of the learning process.  Because of this, I try to help people take action steps that will help them implement what they learn.  I suggest that in their notes, they use a code to mark things that jump out at them:</p><ul><li><em>Think</em> about what's happening and what needs attention.</li><li><em>Stop</em> what's not working.</li><li><em>Start</em> what needs to be done.</li><li><em>Continue</em> what's working well.<li><em>Share</em> what you've learned.</li></ul><p>After the conference I recommend that they create to-do lists based on what they marked, then schedule time to follow through.</p><p>—adapted from <cite>Talent Is Never Enough</cite></p>",
        "thoughts": "Kinda reminds me of Disney's <cite>Stop, Look, and Listen</cite><br>REMEMBER: Conferences and workshops are like going to the doctor's office - it's just a check-up.  The real work is not from attending seminars, it's doing the daily tasks, like exercising, eating right, and getting enough rest."
      }
    ]
  },
  {
    "date": "June 21",
    "topics": [
      {
        "topic": "Take A Walk",
        "quotes": [
          {
            "quote": "We should take wandering outdoor walks, so that the mind might be nourished and refreshed by the open air and deep breathing.",
            "author": "Seneca",
            "source": "On Tranquility Of Mind, 17.8"
          }
        ],
        "notes": "<p>In a notoriously loud city like Rome, it was impossible to get much peace and quiet.  The noises of wagons, the shouting of vendors, the hammering of a blacksmith—all filled the streets with piercing violence (to say nothing of the putrid smells of a city with poor sewage and sanitation).  So philosophers went on a lot of walks—to get where they needed to go, to clear their heads, to get fresh air.</p><p>Throughout the ages, philosophers, writers, poets, and thinkers have found that walking offers an additional benefit—time and space for better work.  As Nietzsche would later say: <q>It is only ideas gained from walking that have any worth.</q></p><p>Today, make sure you take a walk.  And in the future, when you get stressed or overwhelmed, take a walk.  When you have a tough problem to solve or a decision to make, take a walk.  When you want to be creative, take a walk.  When you need to get some air, take a walk.  When you have a phone call to make, take a walk.  When you need some exercise, take a long walk.  When you have a meeting or a friend over, take a walk together.</p><p>Nourish yourself and your mind and solve your problems along the way.</p>",
        "thoughts": ""
      },
      {
        "topic": "Compassionate And Wise Thinking",
        "quotes": [
          {
            "quote": "<em>Right Thinking</em> means to think in ways that are non-harmful, that are compassionate and wise.",
            "author": "Dalai Lama",
            "source": "How to Practice: The Way to a Meaningful Life"
          }
        ],
        "notes": "<p><em>Right Thinking</em> encourages us to cultivate a wise and compassionate mind, urging us to engage in thought patterns that are beneficial while steering clear of negativity.  By learning to direct our thoughts in positive, constructive ways, we embrace a mindful approach that significantly enhances our mental well-being.</p><p>This deliberate cultivation of positive thinking fosters a deeper sense of peace and contentment in our lives, leading to more fulfilling interactions and a greater sense of harmony with the world around us.  Through <em>Right Thinking</em>, we not only improve our own lives but also contribute positively to the lives of others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Solstice",
        "quotes": [
          {
            "quote": "When the true light appears,<br>The entire planet turns to face it.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The summer solstice is the time of greatest light.  It is a day of enormous power.  The whole planet is turned fully to the brilliance of the sun.</p><p>This great culmination is not static or permanent.  Indeed, solstice as a time of culmination is only a barely perceptible point.  The sun appears to stand still.  Its diurnal motion seems to nearly cease.  Yesterday, it was still reaching this point; tomorrow, it will begin a new phase of its cycle.</p><p>Those who follow <em>Tao</em> celebrate this day to remind themselves of the cycles of existence.  They remember that all cycles have a left and a right, an up side and a down side, a zenith and a nadir.  Today, day far surpasses night, and yet night will gradually begin to reassert itself.  All of life is cycles.  All of life is balance.</p><p>So celebrate, but be not proud.  For whenever you celebrate high achievement, the antithesis is also approaching.  Likewise, in misfortune, be not sad.  For whenever you mourn in grief, the antithesis is also approaching.  Those who know how to reach the peak of any cycle and remain glorious are the wisest of all.</p>",
        "thoughts": ""
      },
      {
        "topic": "Manage Your Emotions",
        "quotes": [
          {
            "quote": "When faced with an emotional decision, ask yourself, <q>What does the team need?</q>  Not <q>What will make me feel better?</q>",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Emotional driving—operating a vehicle while visibly sad, angry, or agitated—increases crash risk nearly tenfold, according to 2015 research from Virginia Tech's Transportation Institute.  That should tell us something: emotions, if unmanaged, don't just affect our inner state; they ripple outward and can create real-world consequences—sometimes catastrophic ones.</p><p>It's important for everybody to manage emotions.  Nobody likes to spend time around an emotional time bomb who may <q>go off</q> at any moment.  But it's especially critical for leaders to control their emotions because whatever they do affects many other people.</p><p>Good leaders know when to display emotions and when to delay them.  Sometimes they show them so that their people can feel what they're feeling.  It stirs them up.  Is that manipulative?  I don't think so, as long as the leaders are doing it for the good of the team and not for their own gain.  Because leaders see more than others and ahead of others, they often experience the emotions first.  By letting the team know what you're feeling, you're helping them to see what you're seeing.</p><p>Other times leaders have to hold their feelings in check.  When I say that leaders should delay their emotions, I'm not suggesting that they deny them or bury them.  The bottom line in managing your emotions is that you should put others—not yourself—first in how you handle and process them.  Whether you delay or display your emotions should not be for your own gratification.</p><p>—adapted from<cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 22",
    "topics": [
      {
        "topic": "The Definition Of Insanity",
        "quotes": [
          {
            "quote": "If you are defeated once and tell yourself you will overcome, but carry on as before, know in the end you'll be so ill and weakened that eventually you won't even notice your mistake and will begin to rationalize your behavior.",
            "author": "Epictetus",
            "source": "Discourses, 2.18.31"
          }
        ],
        "notes": "<p>It's been said that the definition of insanity is trying the same thing over and over again but expecting a different result.  Yet that's exactly what most people do.  They tell themselves: <em>Today, I won't get angry.  Today, I won't gorge myself.</em>  But they don't actually do anything differently.  They try the same routine and hope it will work this time.</p>Hope is not a strategy!</p><p>Failure is a part of life we have little choice over.  Learning from failure, on the other hand, is optional.  We have to choose to learn.  We must consciously opt to do things differently—to tweak and change until we actually get the result we're after.  But that's hard.</p><p>Sticking with the same unsuccessful pattern is easy.  It doesn't take any thought or any additional effort, which is probably why most people do it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Steadfast Path Of Righteousness",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is the decision to forsake the paths of unwholesomeness and to embark steadfastly on the path of righteousness.",
            "author": "Lama Surya Das",
            "source": "Awakening the Buddha Within"
          }
        ],
        "notes": "<p><em>Right Intention</em> is a turning point.  It's the decision to leave behind negative ways of thinking and acting and choose a path of ethical conduct.  This commitment to living a wholesome life sets us on a journey towards true liberation.</p>",
        "thoughts": ""
      },
      {
        "topic": "Renunciation",
        "quotes": [
          {
            "quote": "Wine's pleasure,<br>Love's intoxication,<br>Work's obsession,<br>Children's involvement,<br>Age's sorrow.<br>When will craving end?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Originally there was nothing.  It is to nothing that we return.  Differentiation came out of the interplay of cosmic opposites.  Human life became mired in complexities, and this constant diversity is stressful and disruptive.  We ourselves add to the problem with our own lusts and ambitions.  We intoxicate ourselves, we indulge in sensual gratification, we strive for success in our careers, we commit decades to the raising of children.  All this, only to be caught in the closing jaws of old age, gradually hemmed in until there is no alternative other than sorrows, infirmities, and senility.</p><p>Duty is inevitable, but we need not saddle ourselves with extra responsibilities.  Keep life simple.  Give up as much as possible.  Renounce unnecessary cravings and desires.  Leave behind the trappings of wealth and success.  Turn toward the divine.  It satisfies, it brings knowledge, and it brings joy.</p>",
        "thoughts": ""
      },
      {
        "topic": "Remember The Big Stones",
        "quotes": [
          {
            "quote": "Make the time we have meaningful.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>A professor stood before his class with a large glass jar.  Without saying a word, he filled it with big rocks.  Then he asked the students, <q>Is the jar full?</q></p><p><q>Yes,</q> they answered.</p><p>He then took a box of small pebbles and poured them in, shaking the jar so the pebbles filled the spaces between the rocks.  Again, he asked, <q>Is the jar full?</q></p><p>The students nodded.</p><p>Next, he poured in sand, which filled the remaining spaces.  <q>Now is it full?</q> he asked.</p><p>They all agreed it was.  Finally, he poured in a glass of water.</p><p>Then he said, <q>This jar represents your life.  The big rocks are the most important things—your values, your loved ones, your health, your growth.  The pebbles are the smaller responsibilities.  The sand and water are everything else—the distractions, the noise.</q></p><p>He paused.  <q>If you fill the jar with sand or water first, there's no room for the rocks.  But if you put the big rocks in first, everything else will find its place.</q></p><p>This story gently reminds us that what we prioritize first shapes everything else.  It doesn't ask us to measure how much time we have left—it challenges us to make the time we have meaningful.</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 23",
    "topics": [
      {
        "topic": "The Long Way Around",
        "quotes": [
          {
            "quote": "You could enjoy this very moment all the things you are praying to reach by taking the long way around—if you'd stop depriving yourself of them.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.1"
          }
        ],
        "notes": "<p>Ask most people what they're working toward and you'll get an answer like: <q>I'm trying to become a <em>[insert profession]</em>.</q>  Or they'll tell you they're trying to get appointed to some impressive committee or position, become a millionaire, get discovered, become famous, whatever.</p><p>Now you ask a couple more questions, such as <q>Why are you doing that?</q> or <q>What are you hoping it will be like when you get it?</q> and you find at the very core of it, people want freedom, they want happiness, and they want the respect of their peers.</p><p>A Stoic looks at all this and shakes his head at the immense effort and expense we put into chasing things that are simple and straightforward to acquire.  It's as if we prefer to spend years building a complicated Rube Goldberg machine instead of just reaching out and picking up what we want.  It's like looking all over for your sunglasses and then realizing they were on your head the whole time.</p><p>Freedom?  That's easy.  It's in your choices.<br>Happiness?  That's easy.  It's in your choices.<br>Respect of your peers?  That too is in the choices you make.</p><p>And all of that is right in front of you.  No need to take the long way to get there.</p>",
        "thoughts": ""
      },
      {
        "topic": "Seeds of Future Actions",
        "quotes": [
          {
            "quote": "Intentions are the seeds that create our future.",
            "author": "Anagarika Munindra",
            "source": "Living This Life Fully: Stories and Teachings of Munindra"
          }
        ],
        "notes": "<p>Our intentions are like seeds we sow in the fertile ground of our being.  Just as a seed holds the blueprint for a vibrant flower or a towering tree, our intentions hold the potential to shape the future we create.  Choosing right <em>intention</em>, cultivating seeds of kindness, generosity, and wisdom, is akin to planting a good seed.  With careful nurturing and attention, these intentions will blossom into a more positive and fulfilling life, enriching not only ourselves, but also those around us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Worship",
        "quotes": [
          {
            "quote": "You can worship gods,<br>but you cannot worship <em>Tao</em>",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Adoration of your god is more beautiful than lovers, more fulfilling than feasts, more valuable than mammon.  It provides greater shelter than palaces.  Proper worship is joyous and ecstatic.</p><p>If you have a limited view of worship, you can always lose sight of holiness.  When you are on a junior level of achievement, you can turn away from your gods at any time.  Those who follow <em>Tao</em> know that <em>Tao</em> is not the god on the altar; they therefore see their god in their every action and never lose sight of the divine.</p><p>Gods can be worshiped, but the <em>Tao</em> can't be worshiped.  Why?  Because gods lead to good things and inspire our highest devotion.  As magnificent as this is to imagine, it is still limited when compared to the eternity of <em>Tao</em>.  <em>Tao</em> has no definitions, no limit, no personal or individual consciousness.  Thus, to worship <em>Tao</em> is meaningless, for our effort would be lost in an infinite sea.  There is no supplication to it, for it will not respond.  There is no adoration of it, for it displays no glory.  There is no ecstatic union with it, for it has no differentiations.  <em>Tao</em> is great.  <em>Tao</em> is eternal.  Anything limited and small—even worship—disappears in it.  One can only enter <em>Tao</em> to become a part of its limitlessness.</p>",
        "thoughts": ""
      },
      {
        "topic": "Build Authentic Rapport",
        "quotes": [
          {
            "quote": "Build authentic relationships but don't overstep boundaries.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Strong leadership doesn't require deep personal relationships, but it <em>does</em> benefit from authentic rapport.  Taking time to understand what drives the people you lead—their strengths, goals, and communication preferences—can help you support and equip them more effectively.</p><p>This doesn't mean getting involved in their private lives or becoming their confidant.  Instead, it means creating a culture of respect, curiosity, and support:</p><ul><li>Ask thoughtful, work-appropriate questions about their goals and interests.</li><li>Notice what kind of tasks they thrive in—and which ones drain them.</li><li>Be consistent and fair with everyone, so connection doesn't become confusion or favoritism.</li><li>Show care through <em>listening</em>, <em>support</em>, and <em>clarity</em> — not personal involvement.</li></ul><p>People don't need you to be their friend.  They need to know that you see them, value their contributions, and want to help them succeed in their role.  When people feel respected and understood, they're more likely to engage—with their work, with you, and with the mission.</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 24",
    "topics": [
      {
        "topic": "The Truly Educated Aren't Quarrelsome",
        "quotes": [
          {
            "quote": "The beautiful and good person neither fights with anyone nor, as much as they are able, permits others to fight .  .  .  this is the meaning of getting an education—learning what is your own affair and what is not.  If a person carries themselves so, where is there any room for fighting?",
            "author": "Epictetus",
            "source": "Discourses, 4.5.1; 7b-8a"
          }
        ],
        "notes": "<p>Socrates famously traveled around Athens, approaching the people he disagreed with most, and engaging them in long discussions.  In these discussions—or what record we have of them—there are many examples of his conversation mates getting exasperated, upset, or aggravated by his many questions.  Indeed, the people of Athens eventually got so upset, they sentenced Socrates to death.</p><p>But Socrates never seemed to get upset himself.  Even when talking about matters of life and death, he always kept his cool.  He was much more interested in hearing what the other person had to say than making sure he was heard or—as most of us insist upon—winning the argument.</p><p>The next time you face a political dispute or a personal disagreement, ask yourself: <em>Is there any reason to fight about this?  Is arguing going to help solve anything?</em>  Would an educated or wise person really be as quarrelsome as you might initially be inclined to be?  Or would they take a breath, relax, and resist the temptation for conflict?  Just think of what you could accomplish—and how much better you would feel—if you could conquer the need to fight and win every tiny little thing.</p>",
        "thoughts": ""
      },
      {
        "topic": "Questioning Motives",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> involves questioning our motives and asking ourselves, <q>Does this action truly benefit myself and others?</q>",
            "author": "Stephen Batchelor",
            "source": "Buddhism Without Beliefs"
          }
        ],
        "notes": "<p><em>Right Intention</em> requires self-reflection.  We need to constantly question our motives and ensure our actions align with our desire to benefit ourselves and others.  This mindful approach allows us to make choices that contribute to a happier world for all.</p>",
        "thoughts": ""
      },
      {
        "topic": "Diversity",
        "quotes": [
          {
            "quote": "Gods have many faces,<br>But true divinity has no face.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There are so many gods in the world.  Taoists have their pantheon.  The Buddhists, Hindus, and other religions have theirs.  The Islamic and Judeo-Christian schools may be monotheistic, but their sects differ vastly from one another.  Those who follow <em>Tao</em> assert that each of us sees the divine in our own way.  Is there one god, or many?</p><p>Among those who follow <em>Tao</em>, there are those who say that if there are gods, then everyone is a god.  You are god.  There is nothing in the sky, and no one lives your life but you.  Whatever one believes in terms of deities is fine.  It's all individual preference, and it ultimately means self-awareness.  But there is something beyond the diversity of gods, and that is the absolute.</p><p>That which is absolute is formless.  Thus <em>Tao</em> is nameless and faceless.  We cannot consider <em>Tao</em> our god.  That would be to give it form and therefore bring it back into the world where the myriad things have names.  We use the word <em>Tao</em> for convenience only, but in fact, we are referring to a deep mystery.  As long as we live in the world of diversity, whether it is the frantic pace of our professional lives or the involvement with all the gods of the world, we will not be with <em>Tao</em>.  It is only when we leave the diversity of existence and find the formless absolute that we reach <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "Make The Most Of Your Gifts And Opportunities",
        "quotes": [
          {
            "quote": "Strive to make the most of your potential today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>We each have unique strengths, resources, and opportunities.  What we choose to do with them is a reflection of our commitment—to ourselves and to those we impact.  When we give less than our best, we risk leaving potential untapped and missing the chance to make a real difference.</p><p>If we approach each day with intention and effort, we can shape meaningful outcomes not just for ourselves, but for others around us.  Doing our best consistently helps build a life of purpose and contribution.</p><p>There's a story about President Dwight Eisenhower that speaks to this idea.  He once admitted that he wished he had stronger public speaking skills and a better background in political communication.  He shared a memory from his youth in Kansas, where a farmer was selling a cow.  When a potential buyer asked about pedigree and milk production, the farmer replied, <q>I don't know what a pedigree is, and I don't know about butterfat, but she's a good cow, and she'll give you all the milk she has.</q></p><p>That's all anyone can do—give fully of what they have.  And most of the time, that's more than enough.</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 25",
    "topics": [
      {
        "topic": "The Wise Don't Have <q>Problems</q>",
        "quotes": [
          {
            "quote": "This is why we say nothing happens to the wise person contrary to their expectations",
            "author": "Seneca",
            "source": "On Tranquility Of Mind, 13.3b"
          }
        ],
        "notes": "<p>Hesiod, the poet, said that <q>the best treasure is a sparing tongue.</q></p><p>Robert Greene considers it a law of power: Always Say Less Than Necessary.</p><p>We talk because we think it's helping, whereas in reality it's making things hard for us.  If our spouse is venting, we want to tell them what they should do.  In fact, all they actually want us to do is <em>hear</em> them.  In other situations, the world is trying to give us feedback or input, but we try to talk ourselves out of the problem—only to make it worse.</p><p>So today, will you be part of the problem or part of the solution?  Will you hear the wisdom of the world or drown it out with more noise?</p>",
        "thoughts": ""
      },
      {
        "topic": "Sturdy Roots",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is like a strong tree.  From this root of intention, many wholesome actions can sprout and grow.",
            "author": "Buddhaghosa",
            "source": "The Path of Purification (Visuddhimagga)"
          }
        ],
        "notes": "<p><em>Right Intention</em> is the foundation for positive action.  Imagine a strong tree with deep roots.  <em>Right Intention</em> is like those roots, providing stability and nourishment for the wholesome actions that grow from it.  A genuine desire to be kind and compassionate naturally leads to positive deeds that benefit ourselves and others.</p>",
        "thoughts": ""
      },
      {
        "topic": "Cultivation",
        "quotes": [
          {
            "quote": "Imagine a sculpture<br>You work on every day.<br>If you stop, the beauty<br>Will slowly go away.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What if you were at work on a beautiful sculpture but your material reverted or decayed if you ever ceased to progress?  This is the unfortunate nature of spiritual efforts.</p><p>You can never stop trying to purify yourself, improve yourself, strengthen yourself, and cultivate the sacred that is inside you.  If you do well one day, that is good.  But if you cease your efforts, you will slide backwards.  That is why you must strive on every level, from the physical to the mental to the spiritual.  Your vigilance must never flag.  Your determination must never waver.</p><p>Paradoxically, there is nothing to achieve.  It is only our minds that convince ourselves that we must do something.  We are already pure, already sacred.  But we live in a polluted world, we have egotistical thoughts that constantly divide us from the true <em>Tao</em>, and we cannot remain forever in a pure state and still function in the world.  If you attained the higher levels of <em>Tao</em>, you would appear to an outsider as if in a trance, and it would be impossible to interact with others.  So if you are trying to be spiritual in today's world, you must never cease striving to keep yourself pure.  Once you are not with <em>Tao</em>, you must constantly struggle with the impurity of the world.</p>",
        "thoughts": ""
      },
      {
        "topic": "Defining The Team",
        "quotes": [
          {
            "quote": "Are you and your teammates on the same page when it comes to values?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>We've all seen teams that have a common goal yet lack common values.  Everyone on the team has different ideas about what's important.  The result is chaos.  Eventually the team breaks down if everyone tries to do things his own way.  That's why team members need to be on the same page.  Just as personal values influence and guide an individual's behavior, organizational values influence and guide the team's behavior.</p><p>If you want to add value to your team and help it reach its potential, then you need to share in its values.  First, make sure that you know what they are.  Then, examine your values and goals in comparison to them.  If you can wholeheartedly buy into the team's values, commit yourself to aligning yourself with them.  If you can't, then your misalignment will be a constant source of frustration to you and your teammates.  And you might want to think about finding a different team.</p><p>—<cite>The 17 Indisputable Laws of Teamwork</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 26",
    "topics": [
      {
        "topic": "Try The Opposite",
        "quotes": [
          {
            "quote": "What assistance can we find in the fight against habit?  Try the opposite!",
            "author": "Epictetus",
            "source": "Discourses, 1.27.4"
          }
        ],
        "notes": "<p>Viktor Frankl, a psychologist and Holocaust survivor, treated patients suffering from phobias or neurotic habits using a method he called <q>paradoxical intention.</q>  Let's say a patient couldn't sleep.  The standard therapy would have been something obvious, like relaxation techniques.  Frankl instead encouraged the patient to try <em>not</em> to fall asleep.  He found that shifting focus off the problem deflected the patient's obsessive attention away from it and allowed them to eventually sleep normally.</p><p>Fans of the TV show <cite>Seinfeld</cite> might remember an episode called <q>The Opposite</q> where George Costanza magically improves his life by doing the <em>opposite</em> of whatever he'd normally do.  <q>If every instinct you have is wrong,</q> Jerry says to him, <q>then the opposite would have to be right.</q>  The larger point is that sometimes our instincts or habits get stuck in a bad pattern that pushes us further from our natural, healthy selves.</p><p>Now you shouldn't immediately toss out everything in your life—<em>some</em> stuff IS working.  But what if you explored opposites today?  What if you broke the pattern?</p>",
        "thoughts": ""
      },
      {
        "topic": "Recognizing Intentions",
        "quotes": [
          {
            "quote": "Our intentions set the stage for what is possible.  We need to recognize them and be honest about them.",
            "author": "Pema Chödrön",
            "source": ""
          }
        ],
        "notes": "<p>Our intentions wield immense power, yet they often operate beneath the surface of our conscious awareness.  The Buddha's teachings emphasize the importance of bringing mindfulness to our motivations.  By pausing to examine the <q>why</q> behind our thoughts, words, and actions, we can cultivate wholesome intentions with clarity and purpose.  This mindful reflection helps us recognize and release those intentions rooted in negativity, paving the way for a life guided by kindness, compassion, and wisdom.</p>",
        "thoughts": ""
      },
      {
        "topic": "Unfortunate",
        "quotes": [
          {
            "quote": "An unfortunate one is a rootless ghost,<br>His walk a mad angel's gait.<br>Insolent steps of one thrown from heaven<br>To toil in red dust,<br>As if he had not had enough<br>In a thousand previous lifetimes.<br>Where is his heart?  Where is his soul?<br>To call this heaven's will<br>Is a cheap answer.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There was once a god who committed a crime.  His punishment was to be thrown back to earth to suffer the misfortunes of being human.</p><p>When you see those less fortunate than yourself, whether they are the homeless on the streets or simply the ugly and unpopular, can you be sure that they are not like that god flung back to this mad planet?</p><p>Is their misfortune their own fault?  Or do you explain with references to morality, destiny, <em>reincarnation</em>, and cosmic justice?  Even the words of saints offer no relief for their suffering, so it hardly seems fair to blame them.</p><p>Let us not hold ourselves above our fellow human beings, no matter how great the disparity.  To withhold your scorn is already beautiful.  To see how we are all of one family is compassion.</p>",
        "thoughts": ""
      },
      {
        "topic": "Encouraging Growth As A Team Lead",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>As a team lead, you play a pivotal role in helping others grow—professionally, not personally.  Here are six ways to support your team members without crossing professional lines:</p><p><ol><li><strong>Ask about interests and goals.</strong><br>Open the door with questions like: <q>Are there any areas you'd like to get more experience in?</q> or <q>Is there a skill you're hoping to develop this year?</q></li><li><strong>Recognize contributions clearly and specifically.</strong><br>Instead of general praise, highlight specific actions and strengths—e.g., <q>You handled that client escalation well.  Your calm communication made a difference.</q></li><li><strong>Discuss growth barriers constructively.</strong><br>If someone is facing a challenge—whether technical, interpersonal, or structural—work with them to identify realistic ways forward without prying into personal issues.</li><li><strong>Offer targeted opportunities.</strong><br>Match people with projects, mentorships, or training that align with their strengths and stated interests—without assuming they want more responsibility.</li><li><strong>Check in at a sustainable cadence.</strong><br>Use your regular 1:1s to revisit progress or goals organically.  Keep it professional and low-pressure: <q>Still interested in exploring more leadership opportunities, or has that shifted?</q></li><li><strong>Model a growth mindset on your team.</strong><br>Encourage learning, experimentation, and feedback.  Let people know it's okay to grow gradually, and that professional development isn't a race.</li></ol></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 27",
    "topics": [
      {
        "topic": "Adversity Reveals",
        "quotes": [
          {
            "quote": "How does it help, my husband, to make misfortune heavier by complaining about it?  This is more fit for a king—to seize your adversities head on.  The more precarious his situation, the more imminent his fall from power, the more firmly he should be resolved to stand and fight.  It isn't manly to retreat from fortune.",
            "author": "Seneca",
            "source": "Oedipus, 80"
          }
        ],
        "notes": "<p>During the Vietnam War, Admiral James Stockdale was held captive for over seven years in the infamous <q>Hanoi Hilton</q> prison.  He was beaten, tortured, and kept in solitary confinement, yet he never gave up hope—nor did he pretend things were easier than they were.</p><p>Years later, when asked how he survived such horrific conditions, he said, <q>I never lost faith in the end of the story.  I never doubted … not only that I would get out, but also that I would prevail in the end and turn the experience into the defining event of my life.</q></p><p>When asked who didn't make it out, he replied, <q>Oh, that's easy.  The <em>optimists</em> … They were the ones who said, <q>We'll be out by Christmas.</q>  And Christmas would come, and Christmas would go.  Then Easter.  Then Thanksgiving.  And they died of a broken heart.</q></p><p>This mindset, which Jim Collins later called the <q>Stockdale Paradox</q> is this: <q>You must never confuse faith that you will prevail in the end… with the discipline to confront the most brutal facts of your current reality.</q></p>",
        "thoughts": ""
      },
      {
        "topic": "Practicing Non-Attachment",
        "quotes": [
          {
            "quote": "<em>Right Thought</em> means having the resolve to practice non-attachment, loving-kindness, and harmlessness.",
            "author": "Jean Smith",
            "source": "The Beginner's Guide to Walking the Buddha's Eightfold Path"
          }
        ],
        "notes": "<p><em>Right Thought</em>, blossoming from the seeds of <em>Right Intention</em>, transcends simply harboring good thoughts.  It's a deliberate cultivation of specific qualities that shape how we navigate the world.  This includes letting go of clinging and attachment, those grasping desires that often lead to suffering.  <em>Right Thought</em> fosters loving-kindness, a deep sense of goodwill, not just towards others, but also towards ourselves.  It cultivates compassion, understanding our own and others' struggles.  Finally, <em>Right Thought</em> actively rejects any thoughts of harming others, recognizing the interconnectedness of all beings.</p>",
        "thoughts": ""
      },
      {
        "topic": "Childhood",
        "quotes": [
          {
            "quote": "No.  No.  No.<br>This ruins a child.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Children are one of the most precious aspects of life, and yet they often are mistreated and abused.  If you are a parent, your most important task is to raise your child with as little trauma as possible.  Firmness, consistency, and patience are essential.  There will undoubtedly be times when you have to correct a child to prevent mistakes and bad habits.  However, when it comes to a child's curiosity, individuality, or initiative, there should never be any discouragement.  In that sense, it is wrong to say no.</p><p>There is a legend about a thief who stole into heaven and took the peaches that gave immortality.  He returned to earth and was about to eat them when he chanced upon two little boys.  Taken with their intelligence, he asked them riddle after riddle about the deepest meanings of life and they answered with laughing ease.  The thief decided to share his peaches with the boys, and they all became immortal.</p><p>If the boys had had their curiosity killed early in life, could they have answered well?  If a thief could be kind to children, can't the rest of us be too?  And if the children never had an opportunity, could they have become immortals?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 28",
    "topics": [
      {
        "topic": "No Self-Flagellation Needed",
        "quotes": [
          {
            "quote": "Philosophy calls for simple living, but not for penance—it's quite possible to be simple without being crude.",
            "author": "Seneca",
            "source": "Moral Letters, 5.5"
          }
        ],
        "notes": "<p>Marcus's meditations are filled with self-criticism and so are the writings of other Stoics.  It's important to remember, however, that that's as far as it goes.  There was no self-flagellation, no paying penance, no self-esteem issues from guilt or self-loathing.  You never hear them call themselves worthless pieces of crap, nor do they ever starve or cut themselves as punishment.  Their self-criticism is <em>constructive</em>.</p><p>Laying into yourself, unduly depriving yourself, punishing yourself—that's self-flagellation, not self-improvement.</p><p>No need to be too hard on yourself.  Hold yourself to a higher standard but not an impossible one.  And forgive yourself if and when you slip up.</p>",
        "thoughts": ""
      },
      {
        "topic": "Guiding Compass",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> is a compass that guides us on the path.  It reminds us of our true purpose and helps us make choices that lead to happiness and peace.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Intention</em> serves as our compass on the ever-unfolding journey toward a more fulfilling life.  It's that steady needle pointing us true north, reminding us of our deepest yearning—to awaken from suffering and experience lasting peace.  With this clear direction illuminating our path, we are empowered to make choices that align with our values and steer us away from the tangled undergrowth of negativity.  Each step guided by <em>Right Intention</em> brings us closer to a life brimming with happiness and inner serenity, a verdant oasis we cultivate with every mindful choice.</p>",
        "thoughts": ""
      },
      {
        "topic": "War",
        "quotes": [
          {
            "quote": "Weapons are tools of ill omen<br>&nbsp;&nbsp;Wielded by the ignorant.<br>If their use is unavoidable,<br>&nbsp;&nbsp;The wise act with restraint.<br>The greatest sorrow is to be a veteran.<br>&nbsp;&nbsp;Witness to the atrocities of humanity.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>If you hold a real weapon in your hand, you will feel its character strongly.  It begs to be used.  It is fearsome.  Its only purpose is death, and its power is not just in the material from which it is made but also from the intention of its makers.</p><p>It is regrettable that weapons must sometimes be used, but occasionally, survival demands it.  The wise go forth with weapons only as a last resort.  They never rejoice in the skill of weapons, nor do they glorify war.</p><p>When death, pain, and destruction are visited upon what you hold to be most sacred, the spiritual price is devastating.  What hurts more than one's own suffering is bearing witness to the suffering of others.  The regret of seeing human beings at their worst and the sheer pain of not being able to help the victims can never be redeemed.  If you go personally to war, you cross the line yourself.  You sacrifice ideals for survival and the fury of killing.  That alters you forever.  That is why no one rushes to be a veteran.  Think before you want to change so unalterably.  The stakes are not merely one's life, but one's very humanity.</p>",
        "thoughts": ""
      },
      {
        "topic": "Vision Statements",
        "quotes": [
          {
            "quote": "Are you communicating vision and pursuing it with passion?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What you see is what you can be.  This deals with your potential.  I have often asked myself, does the vision make the leader?  Or, does the leader make the vision?</p><p>I believe the vision comes first.  I have known many leaders who lost the vision and, therefore, lost their power to lead.  People do what people see.  That is the greatest motivational principle in the world.  Stanford Research says that 89 percent of what we learn is visual, 10 percent of what we learn is auditory, and 1 percent of what we learn is through other senses.</p><p>In other words, people depend on visual stimulation for growth.  Couple a vision with a leader willing to implement that dream, and a movement begins.  People do not follow a dream in itself.  They follow the leader who has that dream and the ability to communicate it effectively.  Therefore, vision in the beginning will make a leader, but for that vision to grow and demand a following, the leader must take responsibility for it.</p><p>Hubert H.  Humphrey is an example of <q>what you see is what you can be.</q>  During a trip to Washington, D.C., in 1935, he wrote this in a letter to his wife: <q>Honey, I see how someday, if you and I just apply ourselves and make up our minds to work for bigger and better things, we can someday live here in Washington and probably be in government, politics, or service .  .  .  Oh, gosh, I hope my dream comes true—I'm going to try anyhow.</q></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 29",
    "topics": [
      {
        "topic": "No Excuses",
        "quotes": [
          {
            "quote": "Is it possible to curb your arrogance, to overcome pleasure and pain, to rise above your ambition, and to not be angry with stupid and ungrateful people—yes, even to care for them.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.8"
          }
        ],
        "notes": "<p><q>I was just born this way.</q>  <q>I never learned anything different.</q>  <q>My parents set a terrible example.</q>  <q>Everyone else does it.</q>  What are these?  Excuses that people use to justify staying as they are instead of striving to become better.</p><p>Of course it's possible to curb our arrogance, control our anger, and be a caring person.  How do you think others do it?  Certainly their parents weren't perfect; they didn't come out of the womb incapable of ego or immune to temptation.  They worked on it.  They made it a priority.  They solved it like they would solve any other problem: by dedicating themselves to finding a solution, making incremental progress until they did.</p><p>They <em>became</em> who they are.  Just like you can.</p>",
        "thoughts": ""
      },
      {
        "topic": "Cultivating Wholesome Qualities",
        "quotes": [
          {
            "quote": "<em>Right Intention</em> doesn't mean being perfect all the time.  It means a sincere desire to cultivate wholesome qualities and minimize harmful ones.",
            "author": "Thanissaro Bhikkhu",
            "source": "The Wings to Awakening"
          }
        ],
        "notes": "<p>The path to <em>Right Intention</em> isn't about perfection.  It's about a genuine effort to cultivate wholesome qualities like generosity and compassion, while minimizing negativity.  We all make mistakes, but what matters is the direction of our journey—are we moving towards kindness and wisdom, or away from them?</p>",
        "thoughts": ""
      },
      {
        "topic": "Force",
        "quotes": [
          {
            "quote": "A sword is never sheathed<br>&nbsp;&nbsp;Until it has tasted blood.<br>A good swordsman<br>&nbsp;&nbsp;Is seldom seen with a sword.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Many centuries ago, there was a wanderer who was constantly chased by assassins.  He was the best swordsman in the country.  His challengers wanted to overcome him and thereby establish their own fame.  Although the swordsman had long ago repented his killing and had renounced his status, he was still considered the best.</p><p>Over and over, his enemies came for him, and just as many times he defeated them using things at hand—umbrella, fan, sticks.  He did not draw a real sword for he knew he was far too lethal when armed.</p><p>So it is that the wise remain humble so that others are not aroused against them.  They avoid conflict whenever possible.  If trouble comes to seek them, they use only the bare amount of force in return.  To go further is to fall into excess.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "June 30",
    "topics": [
      {
        "topic": "The Obstacle Is The Way",
        "quotes": [
          {
            "quote": "While it's true that someone can impede our actions, they can't impede our intentions and our attitudes, which have the power of being conditional and adaptable.  For the mind adapts and converts any obstacle to its action into a means of achieving it.  That which is an impediment to action is turned to advance action.  The obstacle on the path becomes the way.  ",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.20"
          }
        ],
        "notes": "<p>Today, things will happen that will be contrary to your plans.  If not today, then certainly tomorrow.  As a result of these obstacles, you will not be able to do what you planned.  This is not as bad as it seems, because your mind is infinitely elastic and adaptable.  You have the power to use the Stoic exercise of turning obstacles upside down, which takes one negative circumstance and uses it as an opportunity to practice an unintended virtue or form of excellence.</p><p>If something prevents you from getting to your destination on time, then this is a chance to practice patience.</p><p>If an employee makes an expensive mistake, this is a chance to teach a valuable lesson.</p><p>If a computer glitch erases your work, it's a chance to start over with a clean slate.</p><p>If someone hurts you, it's a chance to practice forgiveness.</p><p>If something is hard, it is a chance to get stronger.</p>",
        "thoughts": ""
      },
      {
        "topic": "Generosity Over Greed",
        "quotes": [
          {
            "quote": "<em>Right Thinking</em> or <em>Right Thought</em> can be seen as a commitment to developing thoughts based on generosity rather than greed.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Thinking</em> encourages us to shift our mental focus from greed to generosity.  Instead of constantly wanting more, we cultivate a sense of abundance and a desire to share with others.  This shift in perspective leads to a more peaceful and fulfilling life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Axle",
        "quotes": [
          {
            "quote": "The mind is in spinning wheels at the<br>Navel, heart, throat, head.<br>The connecting shaft is emptiness.<br>Without an unobstructed route,<br>Energy cannot flow.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>People search for the sacred and are told it is within themselves.  It is sometimes difficult to see how literally the sages mean that.  They see the mind as existing in other areas of the body in addition to the brain.  These centers, nominally functional in the average person, are called chakras or wheels by those who follow <em>Tao</em>.  Through meditation, one becomes acquainted with each of them and learns how to release power so profound that one is literally divine.</p><p>The concept of void is central to many philosophies including that of <em>Tao</em>.  However, it seems so abstract at times.  Here void has a functional role.  The pathway connecting the energy centers of the mind is like a long shaft beginning from the perineum and ending at the top of the head.  If not for emptiness, or hollowness of this shaft, the sacred energy of the body could not be conducted.</p><p>All the diversity of our lives is merely a manifestation of our minds, expressed through the turning of the various wheels within ourselves.  The more they turn, the more complex circumstances and thinking become.  However, if we want simplicity and tranquility, we need only go to the center of the spinning mind where it is empty and still.  Thus it is said that diversity comes from the revolving of the wheels and origins come from the central void.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 1",
    "topics": [
      {
        "topic": "Do Your Job",
        "quotes": [
          {
            "quote": "Whatever anyone does or says, for my part I'm bound to the good.  In the same way an emerald or gold or purple might always proclaim: <q>whatever anyone does or says, I must be what I am and show my true colors.</q>",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.15"
          }
        ],
        "notes": "<p>The Stoics believed that every person, animal, and thing has a purpose or a place in nature.  Even in ancient Greek and Roman times, they vaguely understood that the world was composed of millions of tiny atoms.  It was this idea—this sense of an interconnected cosmos—that underpinned their sense that every person and every action was part of a larger system.  Everyone had a job—a specific duty.  Even people who did bad things—they were doing their job of being evil because evil is a part of life.</p><p>The most critical part of this system was the belief that you, the student who has sought out Stoicism, have the most important job: to be good!  To be wise.  <q>To remain the person that philosophy wished to make us.</q></p><p>Do your job today.  Whatever happens, whatever other people's jobs happen to be, do yours.  <em>Be good.</em></p>",
        "thoughts": ""
      },
      {
        "topic": "Mindfulness Rooted In Motivation",
        "quotes": [
          {
            "quote": "Motivation is the root of all mindfulness.  <em>Right Intention</em> is therefore the heart that guides the mindfulness.",
            "author": "Dzongsar Jamyang Khyentse Rinpoche",
            "source": ""
          }
        ],
        "notes": "<p>Mindfulness is a powerful tool for self-awareness, but it needs direction.  <em>Right Intention</em> acts like the heart that guides our mindfulness.  Our genuine desire for awakening and a more peaceful life fuels our mindfulness practice, allowing us to see things clearly and make wise choices.</p>",
        "thoughts": ""
      },
      {
        "topic": "Flow",
        "quotes": [
          {
            "quote": "If the boulders are moved,<br>Even a river will change its flow.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Except for occasional flooding, the mightiest river keeps to its bed.  It flows where it finds openings between cliffs and rocks.  If the river is dammed, if the cliff walls are moved, if the boulders are shifted, it will flow a different course.  It could even be made to flow backwards if the earth moved far enough.</p><p>So it is with the flow of our lives.  Once the fixed objects of our lives shift, our circumstances change.  If we move to another city, life will change.  If we marry one person over another, life will be different.  If we situate our business in a good neighborhood, life will be prosperous.  If we choose a house in a good setting, life will be healthy.  If we arrange our furniture properly, life will be comfortable.  If we eat correctly, life will be prolonged.  In short, followers of <em>Tao</em> realize that the flow of life can be affected and to some degree consciously manipulated simply by altering its parameters.</p><p>Life is the flow of energy.  It is the air that we breathe, the force that moves the weather, the force of all minds combined.  It keeps the rivers flowing, our hearts beating, and the sky blue.  This flow of energy moves constantly according to the fixed points that exist at any given moment.  Therefore, by manipulating the cardinal points of our lives, we can change the flow.  The freedom to choose and to change belongs to us.</p>",
        "thoughts": ""
      },
      {
        "topic": "Being Mission-Conscious",
        "quotes": [
          {
            "quote": "Avoid getting bogged down in details and keep the big picture in mind today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Do you and your teammates keep the big picture in mind?  Or do you tend to get so bogged down in the details of your responsibilities that you lose sight of the big picture?  If you in any way hinder the bigger team—your organization—because of your desire to achieve personal success or even the success of your department, then you may need to take steps to improve your ability to keep the team's mission in mind.</p><p><em>Check to see if your team focuses on its mission.</em>  Start by measuring the clarity of the mission.  Does your team or organization have a mission statement?  If not, work to get the team to create one.  If it does, then examine whether the goals of the team match its mission.  If the values, mission, goals, and practices of a team don't match up, you're going to have a tough time as a team player.</p><p><em>Find ways to keep the mission in mind.</em>  If you're a strong achiever, the type of person who is used to working alone, or you tend to focus on the immediate rather than the big picture, you may need extra help being reminded of the mission of the team.  Write down the mission and place it somewhere you can see it.  Keep it in front of you so that you are always conscious of the team's mission.</p><p><em>Contribute your best as a team member.</em>  Once you're sure of the team's mission and direction, determine to contribute your best in the context of the team, not as an individual.  That may mean taking a behind-the-scenes role for a while.  Or it may mean focusing your inner circle in a way that contributes more to the organization, even if it gives you and your people less recognition.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 2",
    "topics": [
      {
        "topic": "On Duty And Circumstance",
        "quotes": [
          {
            "quote": "Never shirk the proper dispatch of your duty, no matter if you are freezing or hot, groggy or well-rested, vilified or praised, not even if dying or pressed by other demands.  Even dying is one of the important assignments of life and, in this as in all else, make the most of your resources to do well the duty at hand.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.2"
          }
        ],
        "notes": "<p><em>Will this make me rich?  Will people be impressed?  How hard do I need to try?  How long will this take?  What's in it for me?  Should I do this other thing instead?</em>  These are the questions we ask ourselves amid the day's opportunities and obligations.</p><p>Marcus Aurelius had many responsibilities, as those who hold executive power do.  He judged cases, heard appeals, sent troops into battle, appointed administrators, approved budgets.  A lot rode on his choices and actions.  Should he do this or that?  What about this concern or that concern?  When would he get to enjoy himself?  The simple reminder above was a way to cut through the <em>Gordian</em> knot of incentives, complaints, fears, and competing interests.</p><p>It's what we must use to decide what to do in each and every phase of life.  Morality can be complicated—but the <em>right thing</em> is usually clear and intuitive enough to feel in our gut.  Our duty is rarely easy, but it is important.  It's also usually the harder choice.  But we must do it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Silence Speaks Louder",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Maria's life was a constant stream of texts, emails, and social media updates.  Her words, often rushed and reactive, seemed to spark arguments and misunderstandings.</p><p>One day, a meditation app offered a daily quote: <q>Speak only if your words improve on silence.</q>  The simplicity struck Maria.  Was her constant chatter truly helpful?</p><p>Intrigued, she began a <q>silence challenge</q>—a few minutes each day where she simply observed.  She noticed the urge to comment, the knee-jerk reaction to reply.  Slowly, she learned to choose her words with care, speaking only when necessary, with kindness and truth.</p><p>The world didn't quiet, but Maria did.  The tension in her shoulders eased, replaced by a newfound calm.  Her words, once like pebbles thrown into a pond, now carried the weight of intention, creating ripples of understanding, not discord.</p>",
        "thoughts": ""
      },
      {
        "topic": "Middle",
        "quotes": [
          {
            "quote": "Those who attain the middle<br>Dominate the whole.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Today is the 183rd day.  It is exactly the middle day out of 365.  Once you reach the center of anything, you can dominate the whole in any way you please.  In chess, those who gain the middle board are usually in the superior position.  In a storm, those who reach the eye are safe.  In making decisions, those who cleave to the center are wise.</p><p>There are 182 days on either side of today to make a year.  There is no center day in an even-numbered period.  It is the odd-numbered set that has a center.  It is the odd-numbered set that is dynamic.</p><p>In all areas of life, it is good to establish goals and parameters.  Define the scope of anything that you do.  That way, you will know when you have reached the center and perseverance will be easier.</p>",
        "thoughts": ""
      },
      {
        "topic": "Set Goals For Growth",
        "quotes": [
          {
            "quote": "Be SMART about your goals and you'll get SMARTER.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The greatest achievers in life are people who set goals for themselves and then work hard to reach them.  What they <em>get</em> by reaching the goals is not nearly as important as what they <em>become</em> by reaching them.  When you help people set goals, use the following guidelines — many of which reflect the widely accepted <em>SMART</em> goal-setting framework (Specific, Measurable, Achievable, Relevant, Time-bound):</p><p><em>Clearly state the goals.</em>  (SMART: Specific)  When goals have no clear focus, neither will the actions of the people trying to achieve them.</p><p><em>Make the goals measurable.</em>  (SMART: Measurable)  Your potential leaders will never know when they have achieved their goals if they aren't measurable.  When they are measurable, the knowledge that they have been attained will give them a sense of accomplishment.</p><p><em>Make the goals attainable.</em>  (SMART: Achievable)  Ian MacGregor, former AMAX Corporation chairman of the board, said, <q>I work on the same principle as people who train horses.  You start with low fences, easily achieved goals, and work up.</q></p><p><em>Make the goals appropriate.</em>  (SMART: Relevant)  Always keep in mind the job you want the people to do and the desired result: the development of your people into effective leaders.  Identify goals that will contribute to that larger goal.</p><p><em>Put the goals in writing.</em>  (SMART: Time-bound when paired with a deadline; often included in <q>SMARTER</q> as Evaluate and Record)  When people write down their goals, it makes them more accountable for those goals.</p><p><em>Make the goals require a <q>stretch.</q></em>  (Not in SMART, but often added as <q>Challenging</q> or <q>Exciting</q> in extended versions)  As mentioned before, goals have to be achievable.  On the other hand, when goals don't require a stretch, the people achieving them won't grow.</p><p>It is also important to encourage your potential leaders to review their goals and progress.  Ben Franklin set aside time every day to review two questions.  In the morning he asked himself, <q>What good shall I do today?</q>  In the evening he asked, <q>What good have I done today?</q></p><p>—adapted from <cite>Developing the Leaders Around You</cite> by clycos</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 3",
    "topics": [
      {
        "topic": "Turn <em>Have To</em> Into <em>Get To</em>",
        "quotes": [
          {
            "quote": "The task of a philosopher: we should bring our will into harmony with whatever happens, so that nothing happens against our will and nothing that we wish for fails to happen.",
            "author": "Epictetus",
            "source": "Discourses, 2.14.7"
          }
        ],
        "notes": "<p>A long To-Do list seems intimidating and burdensome—all the things we <em>have</em> to do in the course of a day or a week.  But a <em>Get To Do</em> list sounds like a privilege—all the things we're excited about the opportunity to experience.  This isn't just semantic playing.  It is a central facet of the philosopher's worldview.</p><p>Today, don't try to impose your will on the world.  Instead see yourself as fortunate to receive and respond to the will <em>in</em> the world.</p><p>Stuck in traffic?  A few wonderful minutes to relax and sit.  Your car broke down after idling for so long?  Ah, what a nice nudge to take a long walk the rest of the way.  A swerving car driven by a distracted, cell-phone-wielding idiot nearly hit you as you were walking and soaked you head to toe with muddy water?  What a reminder about how precarious our existence is and how silly it is to get upset about something as trivial as being late or having trouble with your commute!</p><p>Kidding aside, it might not seem like it makes a big difference to see life as something you <em>have</em> to do versus <em>get to</em> do, but there is.  A huge, magnificent difference.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Three Pillars Of <em>Right Speech</em>",
        "quotes": [
          {
            "quote": "<em>Right Speech</em> starts with the question, is what I'm about to say true, beneficial, and kind?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p><em>Right Speech</em> acts as a bridge, elegantly connecting the wellspring of <em>Right Intention</em> and the mindful clarity of <em>Right Thought</em> to the world around us.  It's in our interactions that these inner qualities take form.  <em>Right Speech</em> compels us to turn away from harsh words and the poisonous whispers of gossip.  Instead, we embrace truthful communication, weaving words that are laced with kindness and intended for the benefit of ourselves and others.  Our words hold immense power to uplift or to wound.  <em>Right Speech</em> encourages us to wield this power consciously, choosing to be a source of harmony and encouragement, leaving a trail of gentle echoes in our wake.</p>",
        "thoughts": ""
      },
      {
        "topic": "Site",
        "quotes": [
          {
            "quote": "Desert:&nbsp;&nbsp;visions.<br>Tropics: &nbsp;&nbsp;possession.<br>Forests:&nbsp;&nbsp;alchemy.<br>Mountains:&nbsp;&nbsp;asceticism.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Throughout the world, the site where people practiced spirituality has been significant.  In the deserts of the Middle East, holy people had visions.  In the tropics, sorcerers used spirit possession.  In the forests of Europe and Asia, alchemists perfected their arts.  In the Himalayas, sages hid themselves away for ascetic practices.  Of course, these were not the only places for such arts, but it is more than coincidental that certain practices are tied to the place.  If you go to any of these lands, you can still feel the essence that inspired generations.</p><p>Thus it is that you should be sensitive to where you situate yourself in the world.  Selecting a spiritual site requires subtlety.  If you do not know the science of geomancy, it is better to go to a place known to be conducive to what you want to achieve.  Then narrow your choice by what you see and feel.  If you sense that there is great well-being, that the plants and animals of the area are healthy, that the place is not subject to extremes of weather that would adversely affect your health, then that is the place for you.  When you move there, you will be sustained.</p><p>No site is forever.  If you find that the flow of energy has gone elsewhere or that others begin to ruin an area, then search for a new place of vitality.  That is why those who follow <em>Tao</em> seldom have fixed homes.  They wander from site to site so as to constantly remain in the stream of <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "The People You Attract",
        "quotes": [
          {
            "quote": "Who you are is who you attract—grow accordingly.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Effective leaders are always on the lookout for good people.  What will determine whether the people you want are the people you get?  It's determined by who you <em>are</em>.  If you have recruited and hired a staff, you will probably find that you and the people who follow you share common ground in several key areas.</p><p>Shared experiences: People often form teams around common experiences or stages of life, but effective leaders embrace age diversity and encourage inter-generational collaboration.</p><p>Attitude: People with good attitudes tend to make people around them feel more positive.  Terrible attitudes bring others down.</p><p>Background: People attract—and are attracted to—others of similar background.  This natural magnetism is so strong that organizations that value diversity have to fight against it.</p><p>Values: Whether shared values are positive or negative, the character you possess is what you will likely find in the people who follow you.</p><p>Energy: It's a good thing that people with similar levels of energy are attracted to one another, because when you pair a high-energy person with a low-energy person and ask them to work closely together, they can drive one another crazy.</p><p>Giftedness: People are attracted to talent and excellence and are most likely to respect and follow one who possesses their kind of talent.</p><p>Leadership Ability: Who you are is what you attract.  The leaders you attract will be similar in style and ability to you.</p><p>—adapted from <cite>The 21 Irrefutable Laws of Leadership</cite> by clycos</p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 4",
    "topics": [
      {
        "topic": "Protect The Flame",
        "quotes": [
          {
            "quote": "Protect your own good in all that you do, and as concerns everything else take what is given as far as you can make reasoned use of it.  If you don't, you'll be unlucky, prone to failure, hindered and stymied.",
            "author": "Epictetus",
            "source": "Discourses, 4.3.11"
          }
        ],
        "notes": "<p>The goodness inside you is like a small flame, and you are its keeper.</p><p>It's your job, today and every day, to make sure that it has enough fuel, that it doesn't get obstructed or snuffed out.</p><p>Every person has their own version of the flame and is responsible for it, just as you are.  If they all fail, the world will be much darker—that is something you don't control.  But so long as your flame flickers, there will be some light in the world.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Power Of Positive Speech",
        "quotes": [
          {
            "quote": "<em>Right Speech</em> is not just about avoiding harmful words, but also about speaking words that are truthful, kind, and helpful.",
            "author": "Walpola Rahula",
            "source": ""
          }
        ],
        "notes": "<em>Right Speech</em> isn't merely about the content of our words, but also the intention behind them.  It requires a mindful pause, a moment to bridge the gap between thought and speech.  In that space of reflection, we can contemplate three guiding questions: <q>Is what I'm about to say true?  Does it hold any benefit for the listener?  Is it rooted in kindness?</q>  By considering these questions, we transform impulsive reactions into thoughtful communication.  Our words then become a force for good, fostering understanding, building bridges, and contributing to a more positive and harmonious world.  Right speech becomes a practice in compassion, ensuring our words uplift rather than wound, and leave a ripple effect of kindness in their wake.</p>",
        "thoughts": ""
      },
      {
        "topic": "Flame",
        "quotes": [
          {
            "quote": "Enter the cavern with its<br>Walls of tangled strands.<br>Find the living flame<br>That burns on blood.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The brain is a physical object that generates mental energy.  It is a tangle of strands, an unknowable, dense web.  It is a mass of emotions, memories, instincts, reactions, and thoughts.  Whatever comes into its scope of awareness is channeled through its dark core.  Energy sparks through at speeds faster than lightning, but still, there are many areas that lie dormant, unused, nearly petrified with age.</p><p>With the proper methods, we can enter into the center of the brain.  Metaphorically speaking, this area is like a cavern with a subterranean river running through it.  That river can be kindled with a spiritual spark, and the whole river can be set aflame.  This illumination is spiritual energy.  It can be used to rejuvenate the brain and to supplement the limitations of our normal mental abilities.</p><p>Methods that deal with the mind only as a brain will always be limited.  Coping with life only through physical faculties will always fall short of the ultimate answers.  Only thought lighting a living fire within ourselves can we dance quickly and spontaneously enough to meet the rhythm of life.</p>",
        "thoughts": ""
      },
      {
        "topic": "Attitude Towards Challenges",
        "quotes": [
          {
            "quote": "Let your positive attitude transform every challenge into an opportunity.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>I once heard a lecturer say that no society has ever developed tough people during times of peace.  While hardship is not something we seek, it often shapes our strength.  Strength is not the absence of struggle, but the decision to keep going.  Think back to the times in your life when you have grown the most.  I'm willing to bet that you grew as the result of overcoming difficulties.  The better your attitude, the more likely you will be to overcome difficulties, grow, and move forward.</p><p>I've been told that in the Chinese language, the character for <em>good</em> (好) is formed by combining the symbols for <em>woman</em> (女) and <em>child</em> (子).  This combination reflects traditional values in which a woman and child symbolized familial harmony and prosperity.  Rather than simply blending two elements, the character conveys an ideal—that goodness arises from unity, care, and nurturing relationships.</p><p>Possessing a positive attitude can have a similar effect.  When a problem comes into contact with someone who has a positive attitude, the result is often something transformative.  Out of the turmoil that problems cause can emerge great leaders, creators, and healers.  Every challenge has an opportunity.  And every opportunity has a challenge.  A person's attitude determines how she handles those.</p><p>—adapted from <cite>The Difference Maker</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 5",
    "topics": [
      {
        "topic": "No One Said It'd Be Easy",
        "quotes": [
          {
            "quote": "Good people will do what they find honorable to do, even if it requires hard work; they'll do it even if it causes them injury; they'll do it even if it will bring danger.  Again, they won't do what they find base, even if it brings wealth, pleasure, or power.  Nothing will deter them from what is honorable, and nothing will lure them into what is base.",
            "author": "Seneca",
            "source": "Moral Letters, 76.18"
          }
        ],
        "notes": "<p>If doing good was easy, everyone would do it.  (And if doing bad wasn't tempting or attractive, nobody would do it.)  The same goes for your duty.  If <em>anyone</em> could do it, it would have been assigned to someone else.  But instead it was assigned to you.</p><p>Thankfully, you're not like everyone.  You're not afraid of doing what is hard.  You can resist superficially attractive rewards.  Can't you?</p>",
        "thoughts": ""
      },
      {
        "topic": "Listening As The Foundation",
        "quotes": [
          {
            "quote": "<em>Right Speech</em> starts with listening deeply.  When we truly hear another person, our words naturally become more kind and compassionate.",
            "author": "Sharon Salzberg",
            "source": ""
          }
        ],
        "notes": "<p>Before we can speak truthfully and kindly, we need to listen deeply.  This involves giving someone our full attention, trying to understand their perspective, and holding space for their emotions.  When we listen deeply, our responses naturally become more compassionate and our words more meaningful.</p>",
        "thoughts": ""
      },
      {
        "topic": "Point",
        "quotes": [
          {
            "quote": "Make the mind<br>A single point.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The key to any meditation is to concentrate the mind into a single point.  There are many methods for doing this, from singing, to listening to holy words, to contemplative procedures.  But the end result is the same: to focus our minds sharply.</p><p>A point has a definite position in space but neither size nor shape.</p><p>A point marks an actual place in time, such as a point of departure.</p><p>A point is the very essence of something, as in the point of an idea.</p><p>A point is a coordinate for navigation.</p><p>A point is the dominant center, as in the principal point of perspective.</p><p>A point determines our outlook, as in point of view.</p><p>Once the mind is made into a single point, it takes on the above attributes.  In contrast, a mind that is not focused is dispersed over a wide area.  Its thoughts are scattered, its energies are in disarray, and it cannot move clearly in any direction.  It is at the mercy of a thousand influences and is easily disoriented.  The result is confusion, ignorance, unhappiness, and helplessness.  A mind that is clearly focused, however, receives all things and can abide in utter tranquility.  It is no exaggeration to say that its world revolves around it.  It no longer has to chase after all that appears before it.</p>",
        "thoughts": ""
      },
      {
        "topic": "Develop And Follow Your Priorities",
        "quotes": [
          {
            "quote": "What is your top priority?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>There's an old saying that if you chase two rabbits, both will escape.  Unfortunately that is what many people seem to do.  They don't focus their attention, and as a result, they become ineffective.  Perhaps the reason is that people in our culture have too many choices—nearly unlimited options.  Management expert Peter Drucker recognized this phenomenon.  He said, <q>Concentration is the key to economic results.  No other principle of effectiveness is violated as constantly today as the basic principle of concentration ...  Our motto seems to be, 'Let's do a little bit of everything.'</q></p><p>If you want to develop your talent, you need to focus.  If you're going to focus, you need to work on knowing what your true priorities are and then following them.  This is something I have learned to do over time.  I love options.  I like to have the freedom to pursue the best course of action at any given moment.  When I was in my twenties, I spent a lot of time doing things that had little return.  In my thirties, I did better, but I still wasn't as focused as I should have been.  It wasn't until I reached forty that I started to become highly selective about where I spent my time and energy.  Today I filter just about everything I do through my top priority: <em>Am I adding value to people?</em>  For me, it all comes down to that.</p><p>—<cite>Talent Is Never Enough</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 6",
    "topics": [
      {
        "topic": "Rise And Shine",
        "quotes": [
          {
            "quote": "On those mornings you struggle with getting up, keep this thought in mind—I am awakening to the work of a human being.  Why then am I annoyed that I am going to do what I'm made for, the very things for which I was put into this world?  Or was I made for this, to snuggle under the covers and keep warm?  It's so pleasurable.  Were you then made for pleasure?  In short, to be coddled or to exert yourself?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.1"
          }
        ],
        "notes": "<p>It's comforting to think that even two thousand years ago the emperor of Rome (who was reportedly a bit of an insomniac) was giving himself a pep talk in order to summon up the willpower to throw the blankets off each morning and get out of bed.  From the time we're first sent off to school until we retire, we're faced with that same struggle.  It'd be nicer to shut our eyes and hit the snooze button a few more times.  But we can't.</p><p>Because we have a job to do.  Not only do we have the calling we've dedicated ourselves to, but we have the larger cause that the Stoics speak about: the greater good.  We cannot be of service to ourselves, to other people, or to the world unless we get up and get working—the earlier the better.  So c'mon.  Get in the shower, have your coffee, and get going.</p>",
        "thoughts": ""
      },
      {
        "topic": "Harmonizing Words",
        "quotes": [
          {
            "quote": "<em>Right Speech</em> means using our words to create peace and understanding, not conflict or division.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The words we speak aren't mere whispers fading into the air; they hold the immense power to build bridges of connection or walls of division.  <em>Right Speech</em>, a cornerstone of Buddhist practice, encourages us to wield this power consciously, using our words to cultivate harmony and understanding.  We turn away from the destructive whispers of gossip, the negativity that breeds discord, and the inflammatory language that fans the flames of conflict.  Instead, <em>Right Speech</em> invites us to speak with intention, fostering peace and connection.  We choose words laced with kindness, empathy, and truth, building bridges that allow hearts to connect and fostering a sense of shared humanity.  With each mindful utterance, we contribute to a more compassionate world, weaving a tapestry of understanding where walls once stood.</p>",
        "thoughts": ""
      },
      {
        "topic": "Artist",
        "quotes": [
          {
            "quote": "Facing blank paper<br>Is an artist's terror.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>When an artist creates, he or she is like a shaman.  Inspiration comes as a gift.  Those who follow <em>Tao</em> are the same.  Their awareness of <em>Tao</em> is not something they have cleverly formulated, nor is it something that they possess.  <em>Tao</em> comes to them like a gift.  That is why the arts and <em>Tao</em> are so closely allied: The act of receiving and expressing is the same.</p><p>Just as an artist dreads not being able to make art, so too does one who follows <em>Tao</em> dread not feeling <em>Tao</em>.</p><p>There are many times when we are called upon to be creative: an athlete on the field, a lecturer before an audience, a musician on stage, a cook at the stove, a parent with a child.  How do we keep the channel open?  Some people try by maintaining tidy and regular lives, others by being constantly active.  We are all different, and there is no right or wrong.  The only thing that counts is feeling <em>Tao</em> in your own life and maintaining that feeling as much of the time as possible.  If you find those special things that are latent in you and learn to express them, then you will know <em>Tao</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "the Past Impacts The Present",
        "quotes": [
          {
            "quote": "In what way is your past coloring your present?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>A few years ago, I heard my friend Chuck Swindoll tell the story of Chippie the parakeet.  He said the bird's problems began when the woman who owned him decided to clean up the seeds and loose feathers from the bottom of his cage using a vacuum.  When the phone rang, the owner turned to pick it up, and—you guessed it—with a thud and a whoosh, Chippie was gone.</p><p>The owner quickly turned off the vacuum and unzipped the bag.  There was Chippie.  He was stunned but breathing.</p><p>Seeing that he was covered with black dust, his owner rushed Chippie to the bathtub, where she turned on the faucet full blast and held the bird under the icy water.</p><p>At that point she realized that she'd done even more damage, and she quickly cranked up her blow dryer and gave the wet, shivering little parakeet a blast.  Chuck finished the story by saying, <q>Chippie doesn't sing much anymore .  .  .</q></p><p>People who are unable to overcome the past are a little like Chippie.  They allow their negative experiences to color the way they live.</p><p>It may sound as if I'm making light of what may have happened to you in the past.  I'm not.  I know that people suffer genuine tragedies in this imperfect world.  They lose children, spouses, parents, and friends—sometimes under horrible circumstances.  People contract cancer, multiple sclerosis, AIDS, and other debilitating diseases.  They suffer unspeakable abuses at the hands of others.  But tragedies don't have to stop a person from possessing a positive outlook, being productive, and living life to the fullest.  No matter how dark a person's past is, it need not color his present permanently.</p><p>—<cite>Failing Forward</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 7",
    "topics": [
      {
        "topic": "Our Duty To Learn",
        "quotes": [
          {
            "quote": "This is what you should teach me, how to be like Odysseus—how to love my country, wife and father, and how, even after suffering shipwreck, I might keep sailing on course to those honorable ends.",
            "author": "Seneca",
            "source": "Moral Letters, 88.7b"
          }
        ],
        "notes": "<p>Many schoolteachers teach <cite>The Odyssey</cite> all wrong.  They teach the dates, they debate whether Homer was really the author or not, whether he was blind, they explain the oral tradition, they tell students what a Cyclops is or how the Trojan Horse worked.</p><p>Seneca's advice to someone studying the classics is to forget all that.  The dates, the names, the places—they hardly matter.  What matters is the <em>moral</em>.  If you got everything else wrong from <cite>The Odyssey</cite>, but you left understanding the importance of perseverance, the dangers of hubris, the risks of temptation and distraction?  Then you really learned something.</p><p>We're not trying to ace tests or impress teachers.  We are reading and studying to live, to be good human beings—always and forever.</p>",
        "thoughts": ""
      },
      {
        "topic": "Words As Tools For Stress Relief",
        "quotes": [
          {
            "quote": "Words have a powerful impact on our stress levels.  Choosing calming and encouraging words can promote relaxation.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>The words we choose aren't simply sounds we utter; they are potent seeds that take root in the fertile soil of our minds and the minds of those around us.  They have the profound power to shape our mental landscapes, influencing not just how we perceive the world, but also how we feel about ourselves and others.  <em>Right Speech</em>, a core principle in Buddhist teachings, encourages us to cultivate a mindful awareness of this power.  It guides us to speak in ways that promote peace and well-being.  By fostering a sense of calmness and inner harmony, we not only choose calming and encouraging words, we not only uplift those around us but also nurture a more positive outlook within ourselves.  <em>Right Speech</em> becomes a tool for self-care and a catalyst for creating a more peaceful and supportive environment, one thoughtful word at a time.</p>",
        "thoughts": ""
      },
      {
        "topic": "Caring",
        "quotes": [
          {
            "quote": "Don't go out looking for good deeds to do,<br>&nbsp;&nbsp;But if one comes your way, do not refuse.<br>If you meet someone who is suffering,<br>&nbsp;&nbsp;You must help them.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>What good is self-cultivation and wisdom if you just keep it for yourself?  Knowledge is meant to be used, and if you can use it on behalf of others, you should.</p><p>There was once a man who prayed daily to a particular god among many in the temple.  Eventually, he noticed that the incense he lit drifted all over—other gods were getting the benefit of his efforts!  He built a paper cone over the incense burner so that all the smoke would be directed right at the nose of his god.  Unfortunately, this turned the face of his god black with soot.</p><p>Those who follow <em>Tao</em> believe in using sixteen attributes on behalf of others: mercy, gentleness, patience, nonattachment, control, skill, joy, spiritual love, humility, reflection, restfulness, seriousness, effort, controlled emotion, magnanimity, and concentration.  Whenever you need to help another, draw upon these qualities.  Notice that self-sacrifice is not included in this list.  You do not need to destroy yourself to help another.  Your overall obligation is to complete your own journey along your personal <em>Tao</em>.  As long as you can offer solace to others on your same path, you have done the best that you can.</p>",
        "thoughts": ""
      },
      {
        "topic": "Improving Your Preparedness",
        "quotes": [
          {
            "quote": "Focus on solid preparation today.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>Are you used to winging it?  Do you try to fake it 'til you make it?  Or is solid preparation part of your regular routine?  If you continually let your teammates down, you're probably playing in the wrong position or not spending enough time and energy preparing to meet challenges.  To improve your preparedness .  .  .</p><p><em>Become a process thinker.</em>  Getting ready requires thinking ahead so that you recognize now what you will need later.  Create a system or list for yourself that will help you mentally walk through any process ahead of time, breaking tasks down into steps.  Then determine what preparation will be required to complete each step.</p><p><em>Do more research.</em>  People in just about every profession utilize some kind of research to improve themselves.  Become more familiar with the research tools of your trade and make yourself an expert at using them.</p><p><em>Learn from your mistakes.</em>  The greatest preparation tool can often be a person's own experience.  Think about the mistakes you recently made while completing a project or executing a challenge.  Write them down, study them, and determine what you can do differently the next time you face a similar situation.</p><p>—<cite>The 17 Essential Qualities of a Team Player</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 8",
    "topics": [
      {
        "topic": "Stop Monkeying Around",
        "quotes": [
          {
            "quote": "Enough of this miserable, whining life.  Stop monkeying around!  Why are you troubled?  What's new here?  What's so confounding?  The one responsible?  Take a good look.  Or just the matter itself?  Then look at that.  There's nothing else to look at.  And as far as the gods go, by now you could try being more straightforward and kind.  It's the same, whether you've examined these things for a hundred years, or only three.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.37"
          }
        ],
        "notes": "<p><q>Character,</q> Joan Didion would write in one of her best essays, <q>the willingness to accept responsibility for one's own life — is the source from which self-respect springs.</q></p><p>Marcus is urging us not to waste time complaining about what we haven't got or how things have worked out.  We have to quit monkeying around and be the owners of our own lives.  Character can be developed, and when it is, self-respect will ensue.  But that means starting and getting serious about it.  Not later, not after certain questions have been answered or distractions dealt with, but now.  Right now.  Taking responsibility is the first step.</p><p>To be without this character is the worst of all fates.  As Didion put it in <cite>On Self-Respect</cite>, <q>To live without self-respect is to lie awake some night, beyond the reach of warm milk, the phenobarbital, and the sleeping hand on the coverlet, counting up the sins of commission and omission, the trusts betrayed, the promises subtly broken, the gifts irrevocably wasted through sloth or cowardice or carelessness.</q></p><p>You're so much better than that.</p>",
        "thoughts": ""
      },
      {
        "topic": "The Dual Nature Of Speech",
        "quotes": [
          {
            "quote": "Speech is a powerful force.  It can wound and heal.  Be mindful of the words you speak.",
            "author": "Bhikkhus Nanamoli and Bodhi",
            "source": "The Middle Length Discourses of the Buddha"
          }
        ],
        "notes": "<p>The words we release into the world carry a weight far greater than we often realize.  They have the power to pierce deeply, inflicting pain and leaving wounds that linger.  Conversely, they can offer solace and comfort, a balm to a troubled soul.  <em>Right Speech</em>, a core teaching in <em>Buddhism</em>, reminds us to be mindful of this power we wield with every utterance.  It encourages us to pause and consider the impact our words may have.</p><p>We choose to speak with kindness, letting our words be laced with compassion and understanding.  Knowing that our words leave a lasting impression, we strive to create ripples of positivity, fostering connection and offering comfort to those around us.  <em>Right Speech</em> becomes a practice in mindful communication, ensuring our words become instruments of healing and kindness, leaving a legacy of warmth in their wake.</p>",
        "thoughts": ""
      },
      {
        "topic": "Victory",
        "quotes": [
          {
            "quote": "Can you be both martial and spiritual?<br>Can you overcome your ultimate opponent?",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>To be martial requires discipline, courage, and perseverance.  It has nothing to do with killing.  People fail to look beyond this one narrow aspect of being a warrior and so overlook all the other excellent qualities that can be gained from training.  A warrior is not a cruel murderer.  A warrior is a protector of ideals, principle, and honor.  A warrior is noble and heroic.</p><p>A warrior will have many opponents in a lifetime, but the ultimate opponent is the warrior's own self.  Within a fighter's personality are a wide array of demons to be conquered: fear, laziness, ignorance, selfishness, egotism, and so many more.  To talk of overpowering other people is inconsequential.  To actually overcome one's own defects is the true nature of victory.  That is why so many religions depict warriors in their iconography.  These images are not symbols for dominating others.  Rather, they are symbols of the ferocity and determination that we need to overcome the demons within ourselves.</p>",
        "thoughts": ""
      },
      {
        "topic": "Be Willing To Do What Others Won't",
        "quotes": [
          {
            "quote": "Cultivate a whatever-it-takes attitude.",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p>David Livingstone, the renowned missionary and explorer, never waited for perfect conditions.  While many modern quotes falsely attribute fictional stories to him, one thing he actually did say was this: <q>I will go anywhere, provided it be forward.</q>  That sentence captures what top leaders want from the people around them—individuals who are willing to move into uncertainty, take initiative, and press ahead even when there's no clear road.</p><p>Livingstone endured malaria, lost companions, and traveled through unmapped terrain—yet never asked for ease.  Instead, he believed in progress over comfort, conviction over convenience.  That spirit remains the hallmark of true leadership today: not waiting for the road, but choosing to advance anyway.</p><p>Few things gain the appreciation of a top leader more quickly than an employee with a whatever-it-takes attitude.  They must be willing and able to think outside of their job description, to be willing to tackle the kinds of jobs that others are too proud or too frightened to take on.</p><p>Few things are more frustrating for a leader than having someone refuse to do a task because it is <q>not his job.</q>  (In moments like those, most of the top leaders I know are tempted to invite such people to be without a job altogether!)  Good leaders don't think in those terms.  They understand the Law of the Big Picture from <cite>The 21 Irrefutable Laws of Leadership</cite>: <q>The goal is more important than the role.</q></p><p>A 360-Degree Leader's goal is to get the job done, to fulfill the vision of the organization and its leader.  That often means doing whatever it takes.  As a leader <q>moves up,</q> that more often takes the form of hiring someone to get it done, but leaders in the middle often don't have that option.  So instead, they jump in and get it done themselves.</p><p>—adapted from <cite>The 360° Leader</cite></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 9",
    "topics": [
      {
        "topic": "The Philosopher King",
        "quotes": [
          {
            "quote": "For I believe a good king is from the outset and by necessity a philosopher, and the philosopher is from the outset a kingly person.",
            "author": "Musonius Rufus",
            "source": "Lectures, 8.33.32-34"
          }
        ],
        "notes": "<p>The Israeli general Herzl Halevi believed that philosophy was essential in his role as a leader and warrior.  <q>People used to tell me that business administration is for the practical life and philosophy is for the spirit,</q> he said.  <q>Through the years I found it is exactly the opposite—I used philosophy much more practically.</q>  War and leadership offer an unending series of ethical decisions that require priorities, balance, and clarity.  That's what philosophy helps with.</p><p>Plato knew this when he imagined a utopia ruled by a philosopher king.  <q>Either philosophers should become kings,</q> he said in <cite>The Republic</cite>, <q>or those now called kings should truly and sufficiently undertake philosophy.</q>  Marcus Aurelius was quite literally that philosopher king.</p><p>What does that have to do with you?  There are fewer kings these days, but we're all leaders in one way or another—of families, of companies, of a team, of an audience, of a group of friends, of ourselves.  It's the study of philosophy that cultivates our reason and ethics so that we can do our job well.  We can't just wing it—too many people are counting on us to do it right.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 10",
    "topics": [
      {
        "topic": "Love The Humble Art",
        "quotes": [
          {
            "quote": "Love the humble art you have learned, and take rest in it.  Pass through the remainder of your days as one who whole-heartedly entrusts all possessions to the gods, making yourself neither a tyrant nor a slave to any person.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.31"
          }
        ],
        "notes": "<p>Stop by a comedy club any weekend night in New York or Los Angeles and you're likely to find some of the world's biggest and most commercially successful comedians in there, workshopping their craft for just a handful of people.  Though they make a fortune in movies or on the road, there they are, practicing the most basic form of their art.</p><p>If you ask any of them: <q>Why are you doing this?  Why do you still perform?</q>  The answer is usually: <q>Because I'm good at it.  Because I love it.  Because I want to get better.  Because I thrive on connecting with an audience.  Because I just can't <em>not</em> do it.</q></p><p>It's not work for them to get up on stage at Carolines or the Comedy Cellar at 1 a.m.  It's invigorating.  They don't <em>have</em> to do it.  They're free, and they <em>choose</em> this.</p><p>Whatever humble art you practice: Are you sure you're making time for it?  Are you loving what you do enough to make the time?  Can you trust that if you put in the effort, the rest will take care of itself?  Because it will.  Love the craft, be a craftsman.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 11",
    "topics": [
      {
        "topic": "The Start-Up Of You",
        "quotes": [
          {
            "quote": "But what does Socrates say?  <q>Just as one person delights in improving his farm, and another his horse, so I delight in attending to my own improvement day by day.</q>",
            "author": "Epictetus",
            "source": "Discourses, 3.5.14"
          }
        ],
        "notes": "<p>Building a business from scratch can be an immensely rewarding pursuit.  It's why people put their whole lives into doing it, working countless hours and taking countless risks.</p><p>But shouldn't we be just as invested in building <em>ourselves</em> as we would be to any company?</p><p>Like a start-up, we begin as just an idea: we're incubated, put out into the world where we develop slowly, and then, over time, we accumulate partners, employees, customers, investors, and wealth.  Is it really so strange to treat your own life as seriously as you might treat an idea for a business?  Which one <em>really</em> is the matter of life and death?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 12",
    "topics": [
      {
        "topic": "Some Simple Rules",
        "quotes": [
          {
            "quote": "In your actions, don't procrastinate.  In your conversations, don't confuse.  In your thoughts, don't wander.  In your soul, don't be passive or aggressive.  In your life, don't be all about business.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.51"
          }
        ],
        "notes": "<p>Simple is rarely easy.  But now that you have these rules, make it your duty to put them into practice—with the first item on your to-do list, with the first conversation you have, with your soul, and, of course, with the life you make for yourself.  Not just today, but every day.</p><p>Practice it and don't forget it.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 13",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 14",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 15",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 16",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 17",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 18",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 19",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 20",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 21",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 22",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 23",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 24",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 25",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 26",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 27",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 28",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 29",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 30",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "July 31",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 1",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 2",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 3",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 4",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 5",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 6",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 7",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 8",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 9",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 10",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 11",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 12",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 13",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 14",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 15",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 16",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 17",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 18",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 19",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 20",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 21",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 22",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 23",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 24",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 25",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 26",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 27",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 28",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 29",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 30",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "August 31",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 1",
    "topics": [
      {
        "topic": "A Strong Soul is Better than Good Luck",
        "quotes": [
          {
            "quote": "The rational soul is stronger than any kind of fortune—from its own share it guides its affairs here or there, and is itself the cause of a happy or miserable life.",
            "author": "Seneca",
            "source": "Moral Letters, 98.2b"
          }
        ],
        "notes": "<p>Cato the Younger had enough money to dress in fine clothing.  Yet he often walked around Rome barefoot, indifferent to assumptions people made about him as he passed.  He could have indulged in the finest food.  He chose instead to eat simple fare.  Whether it was raining or intensely hot, he went bareheaded by choice.</p><p>Why not indulge in some easy relief?  Because Cato was training his soul to be strong and resilient.  Specifically, he was learning indifference: an attitude of <q>let come what may</q> that would serve him well in the trenches with the army, in the Forum and the Senate, and in his life as a father and statesman.</p><p>His training prepared him for any conditions, any kind of luck.  If we undergo our own training and preparations, we might find ourselves similarly strengthened.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 2",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 3",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 4",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 5",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 6",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 7",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 8",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 9",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 10",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 11",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 12",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 13",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 14",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 15",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 16",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 17",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 18",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 19",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 20",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 21",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 22",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 23",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 24",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 25",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 26",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 27",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 28",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 29",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "September 30",
    "topics": [
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 1",
    "topics": [
      {
        "topic": "Let Virtue Shine Bright",
        "quotes": [
          {
            "quote": "Does the light of a lamp shine and keep its glow until its fuel is spent?  Why shouldn't your truth, justice, and self-control shine until you are extinguished?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.15"
          }
        ],
        "notes": "<p>Seneca, repeating Heraclitus, writes that <q>we mortals are lighted and extinguished.</q> The light of reason suffuses the universe.  Whether the wick of your lamp is being lit for the first time, after a long period of darkness, or even right before the proverbial big sleep, it makes no difference.</p><p>Here is where you are now, and it's a good a place as any to let virtue shine and continue to shine for as long as you exist.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 2",
    "topics": [
      {
        "topic": "The Most Valuable Asset",
        "quotes": [
          {
            "quote": "But the wise person can lose nothing.  Such a person has everything stored up for themselves, leaving nothing to Fortune, their own goods are held firm, bound in virtue, which requires nothing from chance, and therefore can't be either increased or diminished.",
            "author": "Seneca",
            "source": "On the Firmness of the Wise, 5.4"
          }
        ],
        "notes": "<p>Some people put their money in assets—stocks, bonds, property.  Others invest in relationships or accomplishments, knowing that they can draw on these things just as easily as others can draw funds from a bank account.  But a third type, Seneca says, invests in themselves—in being a good and wise person.</p><p>Which of these assets is most immune to market fluctuations and disasters?  Which is most resilient in the face of trials and tribulations?  Which will never abandon you?  Seneca's own life is an interesting example.  He became quite wealthy as a friend of the emperor, but as Nero became more and more deranged, Seneca realized he needed to get out.  He offered Nero a deal; he would give Nero all his money and return all of Nero's gifts in exchange for complete and total freedom.</p><p>Ultimately, Nero rejected this offer, but Seneca left anyway, retiring in relative peace.  But one day, the executioners came with their mortal decree.  In that moment, what did Seneca rely on?  It wasn't his money.  It wasn't his friends, who, although they meant well, were a considerable source of grief and mourning.  It was his virtue and inner strength.</p><p>It was Seneca's most trying moment—his last and his finest.</p>",
        "thoughts": "Don't forget your woobies"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 3",
    "topics": [
      {
        "topic": "A Mantra of Mutual Interdependence",
        "quotes": [
          {
            "quote": "Meditate often on the interconnectedness and mutual interdependence of all things in the universe.  For in a sense, all things are mutually interwoven together and therefore have an affinity for each other—for one thing follows after another according to their tension of movement, their sympathetic stirrings, and the unity of all substance.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.38"
          }
        ],
        "notes": "<p>Ann Lamott once observed that all writers <em>are little rivers running into one lake,</em> all contributing to the same big project.  The same is true in many industries—though sadly, even inside the same company, people selfishly forget they're working together.  As human beings we all breathe the atoms that make up our ancestors and flow into the same earth when we die.</p><p>Over and over again, the Stoics reminded themselves of the interconnectedness of life.  Perhaps that was because life in Greece and Rome was particularly harsh.  Animals and people were slaughtered senselessly to amuse the masses in the Colosseum (events lamented in the Stoic writings).  Countries were conquered and its citizens sold into slavery to expand the empire (the futility of which the Stoics also lamented).  This kind of cruelty is possible only when we forget how we're related to our fellow human beings and the environment.</p><p>Today, take a moment to remember that we are woven together that each of us plays a role (good, bad, or ugly) in this world.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 4",
    "topics": [
      {
        "topic": "All For One, One For All",
        "quotes": [
          {
            "quote": "That which isn't good for the hive, isn't good for the bee.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.54"
          }
        ],
        "notes": "<p>Inherent in the Stoic concept of <span lang='el'><i>σῠμπᾰ́θειᾰ</i></span> is the notion of an interconnected cosmos in which everything in the universe is part of a larger whole.  Marcus Aurelius was one of the first writers to articulate the notion of cosmopolitanism —saying that he was a citizen of the world, not just Rome.</p><p>The idea that you're a bee in the hive is a reminder of this perspective.  Marcus even states the reverse of that idea later in his <em>Meditations</em>, just so he doesn't forget: <q>That which doesn't harm the community can't harm the individual.</q></p><p>Just because something is bad for you doesn't mean it's bad for everyone.  Just because something is good for you definitely doesn't mean its good for everyone.  Think of the hedge fund managers who bet massively against the economy—they profited by rooting for essentially everyone and everything else to fail.  Is that who you want to be?  A good Stoic understands that proper impulses, and the right actions that arise from them, naturally carry the good of the whole, which is the wise person's only good.  Conversely, good and wise actions by the whole are what's good for the individual.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 5",
    "topics": [
      {
        "topic": "Words Can't Be Unsaid",
        "quotes": [
          {
            "quote": "Better to trip with the feet than with the tongue.",
            "author": "Zeno, QUOTED IN DIOGENES LAERTIUS",
            "source": "Lives of the Eminent Philosophers, 7.1.26"
          }
        ],
        "notes": "<p>You can always get up after you fall but remember, what has been said can never be unsaid.  Especially cruel and  hurtful things.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 6",
    "topics": [
      {
        "topic": "Look Out for Each Other",
        "quotes": [
          {
            "quote": "It's in keeping with Nature to show our friends affection and to celebrate their advancement, as if it were our very own.  For if we don't do this, virtue, which is strengthened only by exercising our perceptions, will no longer endure in us.",
            "author": "Seneca",
            "source": "Moral Letters, 109.15"
          }
        ],
        "notes": "<p>Watching other people succeed is one of the toughest things to do—especially if we are not doing well ourselves.  In our hunter-gatherer minds, we suspect that life is a zero-sum game—that for someone to have more means that we might end up with less.</p><p>But like all parts of philosophy, empathy and selflessness are a matter of practice.  As Seneca observed, it's possible to learn to <q>rejoice in all their successes and be moved by their every failure.</q> This is what a virtuous person does.</p><p>They teach themselves to actively cheer for other people—even in cases where that might come at their own expense—and to put aside jealousy and possessiveness.  You can do that too.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 7",
    "topics": [
      {
        "topic": "A Selfish Reason to be Good",
        "quotes": [
          {
            "quote": "The person who does wrong, does wrong to themselves.  The unjust person is unjust to themselves—making themselves evil.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.4"
          }
        ],
        "notes": "<p>The next time you do something wrong, try to remember how it made you feel.  Rarely does one say, <q>I feel great!</q></p><p>There is a reason there's often vomit at crime scenes.  Instead of the catharsis the person thought they'd feel when they let themselves get out of control or when they got their revenge, they ended up making themselves sick.  We feel a version of this when we lie, when we cheat, when we screw someone over.</p><p>So in that split second before your ill-gotten gains kick in, ask: <em>How do I feel about myself?</em> Is that moment when fear rises in your throat because you suspect you may get caught really worth it?</p><p>Self-awareness and wrongdoing rarely go together.  If you need a selfish reason to not do wrong—put yourself in touch with these feelings.  They're a powerful disincentive.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 8",
    "topics": [
      {
        "topic": "A Higher Pleasure",
        "quotes": [
          {
            "quote": "Yes, getting your wish would have been so nice.  But isn't that exactly why pleasure trips us up?  Instead, see if these things might be ever nicer—a great soul, freedom, honesty, kindness, saintliness.  For there is nothing so pleasing as wisdom itself, when you consider how sure-footed and effortless the works of understanding and knowledge are.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.9"
          }
        ],
        "notes": "<p>Nobody can argue that pleasure doesn't <em>feel</em> good.  That's pretty much what it does by definition.</p><p>But today Marcus Aurelius is reminding you—just as he reminded himself—that those pleasures hardly stand up to virtue.  The dopamine rush that comes from sex is momentary.  So is the pride of an accomplishment or the hearty applause of a crowd.  These pleasures are powerful, but they wear off and leave us wanting more.  What last longer (and remains more within our circle of control)?  Wisdom, good character, sobriety, and kindness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 9",
    "topics": [
      {
        "topic": "Set the Standards and Use Them",
        "quotes": [
          {
            "quote": "When the standards have been set, things are tested and weighed.  And the work of philosophy is just this, to examine and uphold the standards, but the work of a truly good person is in using those standards when they know them.",
            "author": "Epictetus",
            "source": "Discourses, 2.11.23-25"
          }
        ],
        "notes": "<p>We go through our days responding and reacting, but it's rare to really pause and ask: <em>Is this thing I'm about to do consistent with what I believe?</em> Or better: <em>Is this the kind of thing the person I would like to be should do?</em> <p>The work of living is to set standards and then <em>not</em> compromise them.  When you're brushing your teeth, choosing your friends, losing your temper, falling in love, instructing your child, or walking your dog—all of these are opportunities.</p><p>Not, <em>I want to do good</em>—that's an excuse.  But, <em>I will do good in this particular instance, right now.</em> Set a standard; hold fast to it.  That's all there is.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 10",
    "topics": [
      {
        "topic": "Reverence and Justice",
        "quotes": [
          {
            "quote": "Leave the past, let the grand design take care of the future, and instead only rightly guid the present to reverence and justice.  Reverence so that you'll love what you've been allotted, for nature brought you both to each other.  Justice so that you'll speak the truth freely and without evasion, and so that you'll act only as the law and value of things require.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 12.1"
          }
        ],
        "notes": "<p>Aulus Gellius relates that Epictetus once said, <q>If anyone would take two words to hear and take pains to govern and watch over themselves by them, they will live an impeccable and immensely tranquil life.  The two words are: persist and resist.</q> That's great advice.  But what principles should determine what we persist in and what ought to resist?</p><p>Marcus supplies that answer: reverence and justice.  In other words, virtue.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 11",
    "topics": [
      {
        "topic": "Honesty as our Default",
        "quotes": [
          {
            "quote": "How rotten and fraudulent when people say they intend to 'give it to you straight.' What are you up to, dear friend?  It shouldn't need your announcement, but be readily seen, as if written on your forehead, heard in the ring of your voice, a flash in you eyes—just as the beloved sees it all in the lover's glance.  In short, the straight-forward and good person should be like a smelly goat—you know when they are in the room with you.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.15"
          }
        ],
        "notes": "<p>All of us have used phrases like that before.<q>I'm going to be straight-forward with you here...</q> <q>I'll be honest...</q> <q>No disrespect but...</q> Empty expressions or not, they prompt the question: If you have to preface your remarks with indicators of honesty or directness, what does that say about everything else you say?  If you say you're being honest <em>now</em>, does that mean you usually aren't?</p><p>What if, instead, you cultivated a life and reputation in which honesty was as bankable as a note from the U.S.  Treasury, as emphatic and explicit as a contract, as permanent as a tattoo?  Not only would it save you from needing to use the reassurances that other, less scrupulous people must engage in, it will make you a better person.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 12",
    "topics": [
      {
        "topic": "Always Love",
        "quotes": [
          {
            "quote": "Hecto says, <q>I can teach you a love potion made without any drugs, herbs, or special spell—if you would be loved, love.</q>",
            "author": "Seneca",
            "source": "Moral Letters, 9.6"
          }
        ],
        "notes": "<p>In 1992, Barbara Jordan addressed the Democratic National Convention and railed against the greed and selfishness and divisiveness of the previous decade.  People were ready for a change.  <q>Change it to what?</q> she asked.  <q>Change that environment of the 80s to an environment which is characterized by a devotion to the public interest, public service, tolerance, and love.  Love.  Love.  Love.</q></p><p>Love.  Love.  Love.  Love.  Why?  Because, as the Beatles put it, <q>In the end, the love you take is equal to the love you make.</q> Not just in politics, not just in tolerance, but in our personal lives.  There is almost no situation in which hatred helps.  Yet almost every situation is made better by love—or empathy, understanding, appreciation—even situations in which you are in opposition to someone.</p><p>And who knows, you might just get some of that love back.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 13",
    "topics": [
      {
        "topic": "Revenge is a Dish Best Not Served",
        "quotes": [
          {
            "quote": "The best way to avenge yourself is to not be like that.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.6"
          },
          {
            "quote": "How much better to heal than seek revenge from injury.  Vengeance wastes a lot of time and exposes you to many more injuries than the first that sparked it.  Anger always outlasts hurt.  Best to take the opposite course.  Would anyone think it normal to return a kick to a mule or a bite to a dog?",
            "author": "Seneca",
            "source": "On Anger, 3.27.2"
          }
        ],
        "notes": "<p>Let's say that someone has treated you rudely.  Let's say someone got promoted ahead of you because they took credit for your work or did something dishonest.  It's natural to think: <em>Oh, that's how the world works</em>, or <em>One day it will be my turn to be like that</em>.  Or most common: <em>I'll get them for this</em>.  Except these are the worst possible responses to bad behavior.</p><p>As Marcus and Seneca both wrote, the proper response—indeed the best revenge—is to exact no revenge at all.  If someone treats you rudely and you respond with rudeness, you have not done anything but prove to them that they were justified in their actions.  If you meet other people's dishonesty with dishonesty of your own, guess what?  You're proving them right—now everyone <em>is</em> a liar.</p><p>Instead, today, let's seek to be better than the things that disappoint or hurt us.  Let's try to be the example we'd like others to follow.  It's awful to be a cheat, to be selfish, to feel the need to inflict pain on our fellow human beings.  Meanwhile, living morally and well is quite nice.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 14",
    "topics": [
      {
        "topic": "Don't Get Mad, Help",
        "quotes": [
          {
            "quote": "Are you angry when someone's armpits stink or when their breath is bad?  What would be the point?  Having such a mouth and such armpits, there's going to be a smell emanating.  You say, they must have sense, can't they tell how they are offending others?  Well, you have sense too, congratulations!  So, use your natural reason to awaken theirs, show them, call it out.  If the person will listen, you will have cured them without useless anger.  No drama nor unseemly show required.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.28"
          }
        ],
        "notes": "<p>The person sitting next to you on the plane, the one who is loudly chattering and knocking around in your space?  The one you're grinding your teeth about, hating from the depth of your soul because they're rude, ignorant, obnoxious?  In these situations, you might feel it takes everything you have to restrain yourself from murdering them.</p><p>It's funny how <em>that</em> thought comes into our heads before, you know, politely asking them to stop, or making the minor scene of asking for an awkward conversation that might actually help this person and make the world a better place.  We don't just want people to be better, we expect it to magically happen—that we can simply will other people to change, burning holes into their skull with our angry stare.</p><p>Although when you think about it that way, it makes you wonder who the rude one actually is.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 15",
    "topics": [
      {
        "topic": "Spread the Word",
        "quotes": [
          {
            "quote": "Some people with exceptional minds quickly grasp virtue, or produce it within themselves.  But other dim and lazy types, hindered by bad habits, must have their rusty souls constantly scrubbed down....  The weaker sorts will be helped and lifted from their bad opinions if we put them in the care of philosophy's principles.",
            "author": "Seneca",
            "source": "Moral Letters, 95.36-37"
          }
        ],
        "notes": "<p>Stoicism is not an evangelical religion.  You're not obligated to save anyone—there's no hell if a soul remains in ignorance of the teachings of Epictetus or Marcus Aurelius.</p><p>But now that you've learned and studied a better path, you can be of service to others.  You can share your wisdom or insight with a friend or stranger—remembering that behavior is always a better example than a lecture.</p><p>Everyone deserves to benefit from <q>philosophy's principles</q> as Seneca put it.  If you see someone who is in need of help, or has asked for guidance, provide it.  You owe them that much.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 16",
    "topics": [
      {
        "topic": "Spread the Word",
        "quotes": [
          {
            "quote": "Some people with exceptional minds quickly grasp virtue, or produce it within themselves.  But other dim and lazy types, hindered by bad habits, must have their rusty souls constantly scrubbed down...  The weaker sorts will be helped and lifted from their bad opinions if we put them in the care of philosophy's principles.",
            "author": "Seneca",
            "source": "Moral Letters, 95.36-37"
          }
        ],
        "notes": "<p>Stoicism is not an evangelical religion.  You're not obligated to save anyone—there's no risk of hell if a soul remains in ignorance of the teachings of Epictetus or Marcus Aurelius.</p><p>But now that you've learned and studied a better path, you can be of service to others.  You can share your wisdom or insight with a friend or stranger—remembering that behavior is always a better example than a lecture.</p><p>Everyone deserves to benefit from <q>philosophy's principles</q> as Seneca put it.  If you see someone who is in need of help, or has asked for guidance, provide it.  You owe them that much.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 17",
    "topics": [
      {
        "topic": "The Benefit of Kindness",
        "quotes": [
          {
            "quote": "A benefit should be kept like a buried treasure, only to be dug up in necessity....Nature bids us to do well by all....Wherever there is a human being, we have an opportunity for kindness.",
            "author": "Seneca",
            "source": "On The Happy Life, 24.2-3"
          }
        ],
        "notes": "<p>The first person you meet today—passing acquaintance or friend—no matter the context—positive or negative—is an opportunity for kindness.  Or as different translators have taken this line from Seneca to mean, it is an opportunity for <em>benefit</em>.  For both of you.  You can seek to understand where they are coming from.  You can seek to understand who they are, what they need, and what forces or impulses might be acting on them.  And you can treat them well and be better off for it.</p><p>The same is true with the second person you encounter, and the third.  Of course, there is no guarantee that they will return the favor, but that's not our concern.  As always, we're going to focus on what we control: in this case, the ability to choose to respond with kindness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 18",
    "topics": [
      {
        "topic": "Frenemies",
        "quotes": [
          {
            "quote": "There's nothing worse than a wolf befriending a sheep.  Avoid false friendship at all costs.  If you are good, straightforward, and well meaning it should show in your eyes and not escape notice.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 11.15"
          }
        ],
        "notes": "<p>It's pretty obvious that one should keep away from the wicked and two-faced as much as possible—the jealous friend, the narcissistic parent, the untrustworthy partner.  At first glance, Marcus Aurelius is reminding us to avoid false friends.</p><p>But what if we turn it around?  What if, instead, we ask about the times that we have been false to <em>our</em> friends.</p><p>We've all been a frenemy at one point or another.  We've been nice to their face—usually because there was something in it for us—but later, in different company, we said how we really felt.  Or we've strung someone along, cared only when things were going well, or declined to help even though someone really needed us.</p><p>This behavior is beneath us—and worth remembering the next time we accuse someone else of being a bad friend.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 19",
    "topics": [
      {
        "topic": "Good Habits Drive Out Bad Habits",
        "quotes": [
          {
            "quote": "Since habit is such a powerful influence, and we're used to pursuing our impulses to gain and avoid outside our own choice, we should set a contrary habit against that, and where appearances are really slippery, use the counterforce of our training.",
            "author": "Epictetus",
            "source": "Discourses, 3.12.6"
          }
        ],
        "notes": "<p>When a dog is barking loudly because someone is at the door, the worst thing you can do is yell.  To the dog, it's like you're barking too!  When a dog is running away, it's not helpful to chase it—again, now it's like you're both running.  A better option in both scenarios is to give the dog something else to do.  Tell it to sit.  Tell it to go to its bed or kennel.  Run in the other direction.  Break the pattern, interrupt the negative impulse.</p><p>The same goes for us.  When a bad habit reveals itself, counteract it with a commitment to a contrary virtue.  For instance, let's say you find yourself procrastinating today—don't dig in and fight it.  Get up and take a walk to clear your head and reset instead.  If you find yourself saying something negative or nasty, don't kick yourself.  Add something positive and nice to qualify the remark.</p><p>Oppose established habits, and use the counterforce of training to get traction and make progress.  If you find yourself cutting corners during a a workout or on a project, say to yourself: <q>OK, now I am going to go even further or do even better.</q></p><p>Good habits have the power to drive out bad habits.  And habits are easy to pick up—as we all know.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 20",
    "topics": [
      {
        "topic": "Marks of the Good Life",
        "quotes": [
          {
            "quote": "You have proof in the extent of your wanderings that you never found the art of living anywhere—not in logic, nor in wealth, fame, or in any indulgence.  Nowhere.  Where is it then?  In doing what human nature demands.  How is a person to do this?  By having principles be the source of desire and action.  What principles?  Those to do with good and evil, indeed in the belief that there is no good for a human being except what creates justice, self-control, courage and freedom, and nothing evil except what destroys these things.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.1.(5)"
          }
        ],
        "notes": "<p><em>What is the meaning of life?  Why was I born?</em> Most of us struggle with these questions—sometimes when we're young, sometimes not until we're older.  Rarely do we find much in the way of direction.  But that's simply because we miss the point.  As Viktor Frankl points out in <cite>Man's Search for Meaning</cite>, it is not our question to ask.  Instead, it is <em>we</em> who are being asked the question.  It's our lives that are the answer.</p><p>No amount of travel or reading or clever sages can tell you what you want to know.  Instead, it is <em>you</em> who must find the answer in your actions, in living the good life—by embodying the self-evident principles of justice, self-control, courage, freedom, and abstaining from evil.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 21",
    "topics": [
      {
        "topic": "Heroes, Here and Now",
        "quotes": [
          {
            "quote": "Such behavior!  People don't want to praise their contemporaries whose lives they actually share, but hold great expectations for the praise of future generations—people they haven't met or ever will!  This is akin to being upset that past generations didn't praise you.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.18"
          }
        ],
        "notes": "<p>Alexandria, the city in Egypt, still bears the name of its founder, Alexander the Great, some 2,300 years after he set foot there.  How cool would it feel to have a city named after you for so many centuries?  To know that people are still saying your name?</p><p>Here's a thought: it wouldn't be cool.  Because, like Alexander, you'll be dead.  You'll have no idea whether your name lasted down through the centuries.  No one gets to enjoy their own legacy—by definition.</p><p>Worse, think of all the horrible things Alexander did to achieve what he did.  He fought pointless wars.  He had a terrible temper—even killing his best friend in a drunken fight.  He was ruthless and a slave to his ambition.  Is he really so admirable?</p><p>Instead of wasting even a second considering the opinions of future people—people who are not even born yet—focus every bit of yourself on being the best person you can be in the present moment.  On doing the right, right now.  The distant future is irrelevant.  Be good and noble and impressive now—while is still matters.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 22",
    "topics": [
      {
        "topic": "It's Easy to Get Better, But Better at What?",
        "quotes": [
          {
            "quote": "So someone's good at taking down an opponent, but that doesn't make them more community-minded, or modest, or well-prepared for any circumstance, or more tolerant of the faults of others.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.52"
          }
        ],
        "notes": "<p>Self-improvement is a noble pursuit.  Most people don't even bother.  But among those who do, it's possible for vanity and superficiality to corrupt the process.  Do you want six-pack abs because you are challenging yourself and committing to a difficult goal?  Or is it because you want to impress people with your shirt off?  Are you running that marathon because you want to test your limits or because you're running away from your problems at home?</p><p>Our will shouldn't be directed at becoming the person who is in perfect shape or who can speak multiple languages but who doesn't have a second for other people.  What's the point of winning at sports but losing in the effort to be a good husband, wife, father, mother, son, or daughter?  Let's not confuse getting better at <em>stuff</em> with being a better <em>person</em>.  One is a much bigger priority that the other.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 23",
    "topics": [
      {
        "topic": "Show the Qualities You Were Made For",
        "quotes": [
          {
            "quote": "People aren't in awe of your sharp mind?  So be it.  But you have many other qualities you can't claim to have been deprived of at birth.  Display then those qualities in your own power: honesty, dignity, endurance, chastity, contentment, frugality, kindness, freedom, persistence, avoiding gossip, and magnanimity.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.5"
          }
        ],
        "notes": "<p>It' easy to blame our circumstances.  One person curses that they weren't born taller, another they're not smarter, with a different complexion, or born in a different country.  It'd be hard to find a single person on this planet—from supermodels on down—who doesn't think they're deficient in a least some way.  But whatever your perceived deficits are, remember that there are positive qualities that you can develop that don't depend on genetic accidents.</p><p>You have the <em>choice</em> to be truthful.  You have the <em>choice</em> to be dignified.  You can <em>choose</em> to endure.  You can choose to be chaste.  You can choose to be thrifty.  You can choose to be kind to others.  You can choose to be free.  You can persist under difficult odds.  You can avoid trafficking in gossip.  You can choose to be gracious.</p><p>And honestly, aren't the traits that are the result of effort and skill more impressive anyway?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 24",
    "topics": [
      {
        "topic": "The Fountain of Goodness",
        "quotes": [
          {
            "quote": "Dig deep within yourself, for there is a fountain of goodness ever ready to flow if you will keep digging.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.59"
          }
        ],
        "notes": "<p>Today, we could hope that goodness comes our way—good news, good weather, good luck.  Or we could <em>find</em> it ourselves, <em>in</em> ourselves.  Goodness isn't something that's going to be delivered by mail.  You have to dig it up inside your own soul.  You find it within your own thoughts, and you make it with your own actions.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 25",
    "topics": [
      {
        "topic": "Two Tasks",
        "quotes": [
          {
            "quote": "What, then, makes a person free from hindrance and self-determining?  For wealth doesn't, neither does high-office, state or kingdom—rather, something else must be found...in the case of living, it is the knowledge of how to live.",
            "author": "Epictetus",
            "source": "Discourses, 4.1.62-64"
          }
        ],
        "notes": "<p>You have two essential tasks in life: to be a good person and to pursue the occupation that you love.  Everything else is a waste of energy and a squandering of your potential.</p><p>How does one do that?  OK, that's a tougher question.  But the philosophy we see from the Stoics makes it simple enough: say no to distractions, to destructive emotions, to outside pressure.  Ask yourself: <em>What is it that only I can do?  What is the best use of my limited time on this planet?</em> Try to do the right thing when the situation calls for it.  Treat other people the way you would hope to be treated.  And understand that every small choice and tiny matter is an opportunity to practice these larger principles.</p><p>That's it.  that's what goes into the most important skill of all: how to live.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 26",
    "topics": [
      {
        "topic": "Three Parts, One Aim",
        "quotes": [
          {
            "quote": "The best and the greatest number of authors have asserted that philosophy consists of three parts: the moral, the natural, and the rational.  The first puts the soul in order.  The second thoroughly examines the natural order of things.  The third inquires into the proper meaning of words, and their arrangements and proofs which keep falsehoods from creeping in to displace truth.",
            "author": "Seneca",
            "source": "Moral Letters, 89.9"
          }
        ],
        "notes": "<p>These three parts—the moral, the natural, and the rational—have one aim.  As different as they are, they have the same purpose: to help you live a good life ruled by reason</p><p>Not in the future, but right now.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 27",
    "topics": [
      {
        "topic": "We Reap What We Sow",
        "quotes": [
          {
            "quote": "Crimes often return to their teacher.",
            "author": "Seneca",
            "source": "Thyestes, 311"
          }
        ],
        "notes": "<p>It's ironic that Seneca would have one of his characters utter this line.  As we know, for many years Seneca served as the tutor and mentor to the emperor Nero.  There is a lot of evidence that Seneca was, in fact, a positive moral influence on the deranged young man, but even at the time, Seneca's contemporaries found it strange that a philosopher would serve as the right hand to such an evil person.  They even used the Greek word <span lang='el'><i>τυραννοδιδάσκαλος</i></span>—tyrant teacher—to describe him.  And just as Shakespeare observed in <cite>Macbeth</cite>, <q>Bloody instructions, which, being taught, return / To plague th'inventor,</q> Seneca's collaboration with Nero ultimately ended with the student murdering the teacher.</p><p>It's something to think about when you consider whom to work with and whom to do business with in life.  If you show a client how to do something unethical or illegal, might they return the favor to an unsuspecting you later on?  If you provide a bad example to your employees, to your associates, to your children, might they betray you or hurt you down the road?  What goes around comes around, is the saying.  Karma is a notion we have imported from the East, along similar lines.</p><p>Seneca paid a price for his instruction to Nero.  As has been true throughout the ages, his hypocrisy—avoidable or not—was costly.  So too will be yours.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 28",
    "topics": [
      {
        "topic": "We Were Made For Each Other",
        "quotes": [
          {
            "quote": "You'll more quickly find an early thing kept from the earth than you will a person cut off from other human beings.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 9.9.3"
          }
        ],
        "notes": "<p>Naturally, Marcus Aurelius and the rest of the Stoics were not familiar with Newtonian physics.  But they knew that what went up must come down.  That's the analogy he's using here: our mutual interdependence with our fellow human beings is stronger than the law of gravity.</p><p>Philosophy attracts introverts.  The study of human nature can make you aware of other people's faults and can breed contempt for others.  So do struggle and difficulty—they isolate us from the world.</p><p>But none of that changes that we are, as Aristotle put it, social animals.  We need each other.  We must be there for each other.  We must take care of each other (and to allow others to care for us in return).  To pretend otherwise is to violate our nature, to be more or less than what it means to be a human being.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 29",
    "topics": [
      {
        "topic": "Character is Fate",
        "quotes": [
          {
            "quote": "Each person acquires their own character, but their official roles are designated by chance.  You should invite some to your table because they are deserving, others because they may come to deserve it.",
            "author": "Seneca",
            "source": "Moral Letters, 47.15b"
          }
        ],
        "notes": "<p>In the hiring process, most employers look at where someone went to school, what jobs they've held in the past.  This is because past success can be an indicator of future successes.  But is it always?  There are plenty of people who were successful because of luck.  Maybe they got into Oxford or Harvard because of their parents.  And what about a young person who hasn't had time to build a track record?  Are they worthless?</p><p>Of course not.  This is why <em>character</em> is a far better measure of a man or woman.  Not just for jobs, but for friendships, relationships, for everything.  Heraclitus put it as a maxim: <q>Character is fate.</q></p><p>When you seek to advance your own position in life, character is the best lever—perhaps not in the short term, but certainly over the long term.  And the same goes for the people you invite into your life.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 30",
    "topics": [
      {
        "topic": "Who Get's the Lion's Share?",
        "quotes": [
          {
            "quote": "Aren't you ashamed to reserve for yourself only the remnants of your life and to dedicate to wisdom only that time can't be directed to business?",
            "author": "Seneca",
            "source": "On the Brevity of Life, 3.5b"
          }
        ],
        "notes": "<p>In one of his letters, Seneca tells the story about Alexander the Great.  Apparently as Alexander was conquering the world, certain countries would offer him pieces of their territory in hopes that he'd leave them alone in exchange.  Alexander would tell them, writes Seneca, that he hadn't come all the way to Asia to accept whatever they would give him, but instead they were going to have to accept whatever he chose to leave them.</p><p>According to Seneca, we should treat philosophy the same way in our lives.  Philosophy shouldn't have to accept what time or energy is left over from other occupations but instead we should graciously make time for those other pursuits only once our study is finished.</p><p>If real self-improvement is what we're after, why do we leave our reading until those few minutes before we shut off the lights and go to bed?  Why do we block off eight to ten hours in the middle of the day to be at the office or to go to meetings but block out no time for thinking about the big questions?  The average person somehow manages to squeeze in twenty-eight hours of television per week—but ask them if they had time to study philosophy, and they will probably tell you they're too busy.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "October 31",
    "topics": [
      {
        "topic": "You Were Born Good",
        "quotes": [
          {
            "quote": "The human being is born with an inclination toward virtue.",
            "author": "Musonius Rufus",
            "source": "Lectures, 2.7.1-2"
          }
        ],
        "notes": "<p>The notion of original sin has weighed down humankind for centuries.  In reality, we're made to help each other and be good to each other.  We wouldn't have survived as a species otherwise.</p><p>There is hardly an idea in Stoic philosophy that wouldn't be immediately agreeable to a child or that doesn't jibe with common sense.  The ideas within it go to the core of who we are and what we know to be true.  The only things they conflict with are the various inventions of society—which usually serve some selfish interest more than they benefit the common good.</p><p>You were born good.  <q>All of us have been made by nature,</q> Rufus said, <q>so that we can live free from error and nobly—not that one can and another can't, but all.</q> You were born with an attraction to virtue and self-mastery.  If you've gotten far from that, it's not out of some inborn corruption but from a nurturing of the wrong things and the wrong ideas.  As Seneca pointed out, philosophy is a tool to strip it all away—to get back to our true nature.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 1",
    "topics": [
      {
        "topic": "Accepting What Is",
        "quotes": [
          {
            "quote": "Don't seek for everything to happen as you wish it would, but rather wish that everything happens as it actually will—then your life will flow well.",
            "author": "Epictetus",
            "source": "Enchiridion, 8"
          },
          {
            "quote": "It is easy to praise providence for anything that may happen if you have two qualities: a complete view of what has actually happened in each instance and a sense of gratitude.  Without gratitude what is the point of seeing, and without seeing what is the object of gratitude?",
            "author": "Epictetus",
            "source": "Discourses, 1.6.1-2"
          }
        ],
        "notes": "<p>Something happened that we wish had not.  Which of these is easiest to change: our opinion or the event that is past?</p><p>The answer is obvious.  Accept what happened and change your wish that it had not happened.  Stoicism calls this the <q>art of acquiescence</q>—to accept rather than fight every little thing.</p><p>And the most practiced Stoics take it a step further.  Instead of simply <em>accepting</em> what happens, they urge us to actually <em>enjoy</em> what has happened—whatever it is.  Nietzsche, many centuries later, coined the perfect expression to capture this idea: <span lang='la'><i>amor fati</i></span> (a love of fate).  It's not just accepting, it's <em>loving</em> everything that happens.</p><p>To wish for what happened to happen is a clever way to avoid disappointment because nothing is contrary to your desires.  But to actually feel gratitude for what happens?  To love it?  That's a recipe for happiness and joy.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 2",
    "topics": [
      {
        "topic": "Binding Our Wishes to What Will Be",
        "quotes": [
          {
            "quote": "But I haven't at any time been hindered in my will, nor forced against it.  And how is this possible?  I have bound up my choice to act with the will of God.  God wills that I be sick, such is my will.  He wills that I should choose something, so do I.  He wills that I reach for something, or something be given to me—I wish for the same.  What God doesn't will, I do not wish for.",
            "author": "Epictetus",
            "source": "Discourses, 4.1.89"
          }
        ],
        "notes": "<p>When General Dwight D.  Eisenhower wrote to his wife on the eve of the invasion of Normandy, he told her, <q>Everything we could think of has been done, the troops are fit everybody is doing his best.  The answer is in the lap of the gods.</q> He'd done everything he could—and now, what would happen would happen and as Epictetus might say, he was ready to bear whatever that was.  In fact, Eisenhower had written another letter that night and prepared it for release in case the invasion failed.  If failure was what God—or fate or luck or whatever you want to call it—willed, he was ready.</p><p>There is a wonderful lesson there.  The man in charge of perhaps the most powerful army the world had ever assembled, on the eve of the most expertly organized and planned invasion the world will hopefully ever know, was humble enough to know that the outcome ultimately belonged to someone or something bigger than him.</p><p>And so it goes with all our ventures.  No matter how much preparation, no matter how skilled or smart we are, the ultimate outcome is in the lap of the gods.  The sooner we know that, the better we will be.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 3",
    "topics": [
      {
        "topic": "Following the Doctor's Orders",
        "quotes": [
          {
            "quote": "Just as we commonly hear people say the doctor prescribed someone particular riding exercises, or ice baths, or walking without shoes, we should in the same way say that nature prescribed someone to be diseased, or disabled, or to suffer any kind of impairment.  In the case of the doctor, prescribed means something ordered to help aid someone's healing.  But in the case of nature, it means that what happens to each of us is ordered to help aid our destiny.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.8"
          }
        ],
        "notes": "<p>The Stoics were masters at analogies and used them as a tool to help strengthen their reasoning.</p><p>Here, Marcus observes how willingly we will put up with unpleasantness if commanded to by the magic words <q>doctor's orders.</q> The doctor says you've got to take this nasty medicine, and you'll do it.  The doctor tells you you have to start sleeping hanging upside down like a bat.  You'll feel silly, but soon enough you'll get to dangling because you think it will make you better.</p><p>On the other hand, when it comes to external events, we fight like hell if anything happens contrary to our plans.  But what if, Marcus asks, a doctor had prescribed this exact thing as a part of our treatment?  What if this was as good for us as medicine?</p><p>Well, what if?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 4",
    "topics": [
      {
        "topic": "Not Good, Nor Bad",
        "quotes": [
          {
            "quote": "There is no evil in things changing, just as there is no good in persisting in a new state.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.42"
          }
        ],
        "notes": "<p>When people say change is good, they're usually trying to reassure someone (or themselves).  Because instinctively we view change as bad—or at lest we're suspicious of it.</p><p>The Stoics want you to do away with those labels altogether.  Change isn't good.  The status quo isn't bad.  They just <em>are</em>.</p><p>Remember, events are objective.  It's only our opinion that says something is good or bad (and thus worth fighting against or fighting for).  A better attitude?  To decide to make the most of everything.  But to do that you must first cease fighting.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 5",
    "topics": [
      {
        "topic": "A Higher Power",
        "quotes": [
          {
            "quote": "This is the very thing which makes up the virtue of the happy person and a well-flowing life—when the affairs of life are in every way tuned to the harmony between the individual divine spirit and the will of the director of the universe.",
            "author": "Chrysippus, Quoted in Diogenes Laertius",
            "source": "Lives of the Eminent Philosophers, 7.1.88"
          }
        ],
        "notes": "<p>In undergoing a twelve-step program, many addicts struggle most with step 2: acknowledging a higher power.  Addicts often fight this one.  At first they claim it's because they're atheists or because they don't like religion or because they don't understand why it matters.</p><p>But they later realize that this is just the addiction talking—it's another form of selfishness and self-absorption.  The actual language of the step is pretty easy to swallow: <q>[We] came to believe that a Power greater than ourselves could restore us to sanity.</q> Subsequent steps ask the addict to submit and let go.  The second step really has less to do with <q>god</q> than those other steps—the letting go.  It's about attuning to the universe and discarding the toxic idea that we're at the center of it.</p><p>It's no wonder that the Stoics are popular with those in twelve-step programs.  It's also clear that this wisdom is beneficial to us all.  You don't have to believe there is a god directing the universe, you just need to stop believing that <em>you're</em> that director.  As soon as you can attune your spirit to that idea, the easier and happier your life will be, because you will have given up the most potent addiction of all: control</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 6",
    "topics": [
      {
        "topic": "Someone Else is Spinning the Thread",
        "quotes": [
          {
            "quote": "If the breaking day sees someone proud,<br />The ending day sees them brought low.<br />No one should put too much trust in triumph,<br />No one should give up hope of trials improving.<br />Clotho mixes one with the other and stops<br />Fortune from resting, spinning every fate around.<br />No one has had so much divine favor<br />That they could guarantee themselves tomorrow.<br />God keeps our lives hurtling on,<br />Spinning in a whirlwind.",
            "author": "Seneca",
            "source": "Thyestes, 613"
          }
        ],
        "notes": "<p>The novelist Cormac McCarthy was living in a motel room when he heard a knock at the door.  It was a messenger—he'd been awarded the MacArthur <q>genius</q> grant and $250,000.  Unexpected events can be good as well as bad.</p><p>Who could dream of such an unexpected twist?  Who but Clotho, one of the three Greek goddesses of fate, who <q>spins</q> the thread of human life?  To the ancients, she was the one who decided the course of the events of our lives—some good, some bad.  As the playwright Aeschylus wrote, <q>When the gods send evil, one cannot escape it.</q> The same was true for great destiny and good fortune.</p><p>Their resigned attitude might seem strange to us today, but they understood who was really in control (not them, not us!).  No amount of prosperity, no amount of difficulty, is certain or forever.  A triumph becomes a trial, a trial becomes a triumph.  Life can change in an instant.  Remember, today, how often it does.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 7",
    "topics": [
      {
        "topic": "How to be Powerful",
        "quotes": [
          {
            "quote": "Don't trust in your reputation, money, or reputation, but in the strength that is yours—namely, your judgments about the things that you control and don't control.  For this alone is what makes us free and unfettered, that picks us up by the neck from the depths and lifts us eye to eye with the rich and powerful.",
            "author": "Seneca",
            "source": "Discourses, 3.26.34-35"
          }
        ],
        "notes": "<p>In a scene in Steven Pressfield's classic novel about Alexander the Great, <cite>The Virtues of War</cite>, Alexander reaches a river crossing only to be confronted by a philosopher who refuses to move.  <q>This man has conquered the world!</q> one of Alexander's men shouts.  <q>What have you done?</q> The philosopher responds, with complete confidence, <q>I have conquered the need to conquer the world.</q></p><p>We do know that Alexander did clash with Diogenes the Cynic, a philosopher known for his rejection of what society prizes and, by extension, Alexander's self-image.  Just as in Pressfield's fictional encounter, in Diogenes's real confrontation with Alexander, the philosopher was more powerful than the most powerful man in the world—because, unlike him, Diogenes had fewer wants.  They were able to look each other in the eye and see who really had control over himself, who had achieved the self-mastery required for real and lasting power.</p><p>You can have that too.  It just means focusing inward on acquiring power rather than outward.  As Publilius Syrus, himself a former slave, put it: <q>Would you have a great empire?  Rule over yourself!</q></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 8",
    "topics": [
      {
        "topic": "Actors in a Play",
        "quotes": [
          {
            "quote": "Remember that you are an actor in a play, playing a character according to the will of the playwright—if a short play, then it's short; if long, long.  If he wishes you to play the beggar, play even that role well, just as you would if it were a cripple, a honcho, or an everyday person.  For this is your duty, to perform well the character assigned you.  That selection belongs to another.",
            "author": "Epictetus",
            "source": "Enchiridion, 17"
          }
        ],
        "notes": "<p>Marcus Aurelius didn't want to be emperor.  He wasn't a politician who sought office, and he wasn't a true heir to the throne.  As far as we can tell from his letters and from history, what he really wanted was to be a philosopher.  But the powerful elite in Rome, including the emperor Hadrian, saw something in him.  Groomed for power, Marcus was adopted and put in line for the throne because they knew he could handle it.  Meanwhile, Epictetus lived much of his life as a slave and was persecuted for his philosophical teachings.  Both did quite a lot with the roles they were assigned.  </p><p>Our station in life can be as random as a roll of the dice.  Some of us are born into privilege, others into adversity.  Sometimes we're given exactly the opportunities we want.  At other times, we're given a lucky break, but to us it feels like a burden.</p><p>The Stoics remind us that whatever happens to us today or over the course of our lives, wherever we fall on the intellectual, social, or physical spectra, our job is not to complain or bemoan our plight but to do the best we can to accept it and fulfill it.  Is there still room for flexibility or ambition?  Of course!  The history of the stage is littered with stories of bit parts that turned into starring roles and indelible characters that were expanded in future adaptations.  But even this begins with acceptance and understanding—and a desire to excel at what we have been assigned.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 9",
    "topics": [
      {
        "topic": "All is Fluid",
        "quotes": [
          {
            "quote": "The universe is change.  Life is opinion.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.3.4b"
          }
        ],
        "notes": "<p>In Plutarch's <cite>Life of Theseus</cite>, he describes how the ship of Theseus, an Athenian hero, was preserved by the people of Athens in battle-ready condition for many centuries.  Each time a board decayed, it would be replaced until eventually every stick of wood in it had been replaced.  Plutarch asks: Is it still the ship of Theseus, or is it a new one?</p><p>In Japan, a famous Shinto shrine is rebuilt every twenty-three years.  It's gone through more than sixty of those cycles.  Is it one shrine, 1,400 years old?  Or sixty consecutive shrines?  Even the U.S.  Senate, given its staggered elections, could be said to have never been fully turned over.  Is it the same body formed in the days of George Washington?</p><p>Our understanding of what something <em>is</em> is just a snapshot—an ephemeral opinion.  The universe is in a constant state of change.  Our nails grow and are cut and keep growing.  New skin replaces dead skin.  Old memories are replaced by new memories.  Are we still the same people?  Are the people around us the same?  Nothing is exempt from this fluidity, not even the things we hold most sacred.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 10",
    "topics": [
      {
        "topic": "Always the Same",
        "quotes": [
          {
            "quote": "Think by way of example on the times of Vespasian, and you'll see all these things: marrying, raising children, falling ill, dying, wars, holiday feasts, commerce, farming, flattering, pretending, suspecting, scheming, praying that others die, grumbling over one's lot, falling in love, amassing fortunes, lusting after office and power.  Now that life of theirs is dead and gone ...  the time of Trajan, again the same ...",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.32"
          }
        ],
        "notes": "<p>Earnest Hemingway opens his book <cite>The Sun Also Rises</cite> with a Bible verse: <q>One generation passeth, and another generation cometh; but the earth abideth forever.  The sun also ariseth, and the sun goeth down, and hasteth to his place where he arose.</q> It was this passage, his editor would say, that <q>contained all the wisdom of the ancient world.</q></p><p>And what wisdom is that?  One of the most striking things about history is just how long human beings have been doing what they do.  Though certain attitudes and practices have come and gone, what's left are people—living, dying, loving, fighting, crying, laughing.</p><p>Breathless media reports or popular books often perpetuate the belief that we've reached the apex of humanity, or that this time, things <e>really are different</e>.  The irony is that people have believed that for centuries.</p><p>Strong people resist this notion.  They know that with a few exceptions, things are the same as they've always been and always will be.  You're just like the people who came before you, and you're but a brief stopover until the people just like you who will come after.  The earth abides forever, but we will come and go.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 11",
    "topics": [
      {
        "topic": "It's Not The Thing, It's What We Make Of It",
        "quotes": [
          {
            "quote": "When you are distressed by an external thing, it's not the thing itself that troubles you, but only your judgement of it.  And you can wipe this out at a moment's notice.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.47"
          }
        ],
        "notes": "<p>Imagine you've dreamed of a life in politics.  You're young, you're vigorous, and you've held increasingly powerful positions over the course of your career.  Then at thirty-nine, you start to feel run down.  Your doctors tell you that you have polio and your life will never be the same.  Your career is over—right?</p><p>This is the story of Franklin Delano Roosevelt, now widely regarded as one of America's greatest political leaders.  He was, at middle age, diagnosed with polio after spending years preparing for and dreaming about the presidency.</p><p>It's impossible to understand FDR without understanding this disability.  The <q>external thing</q> was that he was crippled—this was a literal fact—but his judgement of it was that it did not cripple his career or his personhood.  Though he was certainly the victim of a then incurable disease, he wiped away—almost immediately—the victim's mentality.</p><p>Let's not confuse acceptance with passivity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 12",
    "topics": [
      {
        "topic": "The Strong Accept Responsibility",
        "quotes": [
          {
            "quote": "If we judge as good and evil only the things in the power of our own choice, then there is no room left for blaming gods or being hostile to others.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.41"
          }
        ],
        "notes": "<p>A sign on President Harry Truman's desk read, THE BUCK STOPS HERE.  As president, with more power and control than pretty much anyone else, he knew that, good or bad, there wasn't anyone he could blame for stuff other than himself.  There was no one to pass the buck to.  The chain ended there, in the Oval Office.</p><p>As the president of our own lives—and knowing that our powers begin and end with our reasoned choice—we would do well to internalize this same attitude.  We don't control things outside that sphere, but we do control our attitudes and our responses to those events—and that's plenty.  It's enough that we go into each and every day knowing that there is no one to pass the buck to.  It ends with us.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 13",
    "topics": [
      {
        "topic": "Never Complain, Never Explain",
        "quotes": [
          {
            "quote": "Don't allow yourself to be heard any longer griping about public life, not even with your own ears!",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.9"
          }
        ],
        "notes": "<p>Not only do even the most fortunate of us complain, it often seems like the more fortunate we are, the more time we have to do so.  Marcus Aurelius was a reluctant chief executive—just as you might be a reluctant accountant, kid's soccer coach, or lawyer.  Or perhaps you generally like your job, but you could do without a few of its attendant responsibilities.  Where does that thinking get you?  Nowhere, other than in a negative state of mind.</p><p>It calls to mind a motto of British prime minister Benjamin Disraeli: <q>Never complain, never explain.</q> He said this because, like Marcus, he knew that the burdens of responsibility were immense.  It's so easy to complain about this or that, or to try to make excuses and justifications for the things you've done.  But that doesn't accomplish anything—and it never lightens the load.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 14",
    "topics": [
      {
        "topic": "You Choose The Outcome",
        "quotes": [
          {
            "quote": "He was sent to prison.  But the observation <q>he has suffered evil</q>, is an addition coming from you.",
            "author": "Marcus Aurelius",
            "source": "Discourses, 3.8.5b-6a"
          }
        ],
        "notes": "<p>This is classic Stoic thinking, as you've gathered by now.  An event itself is objective.  How we describe it—that it was unfair, or it's a great calamity, or that they did it on purpose—is on us.</p><p>Malcom X (then Malcom Little) went into prison a criminal, but he left as an educated, religious, and motivated man who would hep in the struggle for civil rights.  Did he suffer an evil?  Or did he choose to make his experience a positive one?</p><p>Acceptance is passive.  It's the first step in an active process toward self-improving.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 15",
    "topics": [
      {
        "topic": "Everything Is Change",
        "quotes": [
          {
            "quote": "Meditate often on the swiftness with which all that exists and is coming into being is swept by us and carried away.  For substance is like a river's unending flow, its activities continually changing and causes infinitely shifting so that almost nothing at all stands still.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.23"
          }
        ],
        "notes": "<p>Marcus borrows this wonderful metaphor from Heraclitus, who said, <q>No man step in the same river twice.</q> Because the river has changed, and so has the man.</p><p>Life is in a constant state of change.  And so are we.  To get upset by things is to wrongly assume that they will last.  To kick ourselves or blame others is grabbing at the wind.  To resent change is to wrongly assume that you have a choice in the matter.</p><p>Everything is change.  Embrace that.  Flow with it.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 16",
    "topics": [
      {
        "topic": "Hope And Fear Are The Same",
        "quotes": [
          {
            "quote": "Hecato says, 'cease to hope and you will cease to fear.' ...  The primary cause of both these ills is that instead of adapting ourselves to present circumstances we send out thoughts too far ahead.",
            "author": "Seneca",
            "source": "Moral Letters, 5.7b-8"
          }
        ],
        "notes": "<p>Hope is generally regarded as good.  Fear is generally regarded as bad.  To a Stoic like Hecato (known as Hecato of Rhodes), they are the same—both are projections into the future about things we do not control.  Both are the enemy of this present moment that you are actually in.  Both mean you're living a life in opposition to <span lang='la'><i>amor fati</i></span>.</p><p>It's not about overcoming our fears but understanding that both hope and fear contain a dangerous amount of <em>want</em> and <em>worry</em> in them.  And, sadly, the want is what causes the worry.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 17",
    "topics": [
      {
        "topic": "Judge Not, Lest...",
        "quotes": [
          {
            "quote": "When philosophy is wielded with arrogance and stubbornly, it is the cause for the ruin of many.  Let philosophy scrape off your own faults, rather than be a way to rail against the faults of others.",
            "author": "Seneca",
            "source": "Moral Letters, 103.4b-5a"
          }
        ],
        "notes": "<p>Remember, the proper direction of philosophy—of all the things we're doing here—is focused inward.  To make <em>ourselves</em> better and to leave other people to that task for themselves and their own journey.  Our faults are in our control., and so we turn to philosophy to help scrape them off like barnacles from the hull of a ship.  Other people's faults?  Not so much.  That's for them to do.</p><p>Leave other people to their faults.  Nothing in Stoic philosophy empowers you to judge them—only to accept them.  Especially when we have so many of our own.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 18",
    "topics": [
      {
        "topic": "Four Habits Of The Stoic Mind",
        "quotes": [
          {
            "quote": "Our rational nature moves freely forward in its impressions when it:<ol><li>accepts nothing false or uncertain;</li><li>directs its impulses only to acts for the common good;</li><li>limits its desires and aversions only to what's in its own power</li><li>embraces everything nature assigns it</li></ol>",
            "author": "Marcus Aurelius",
            "source": "Meditations, 8.7"
          }
        ],
        "notes": "<p>If you notice, Marcus repeatedly reminds himself what Stoicism is.  These bullet points are helpful to those of us reading thousands of years later, but really they were intended to be helpful to him.  Maybe that day he had accepted a bad impression or had acted selfishly.  Maybe he had pinned his hopes on something outside his control or complained and fought against something that had happened.  Or maybe it had just been awhile since he'd thought these things and wanted a reminder.</p><p>Whatever his case was, or whatever ours is today, let's align our minds along these four critical habits: <ol><li>Accept only what is true.</li><li>Work for the common good.</li><li>Match our needs and wants with what is in our control.</li><li>Embrace what nature has in store for us.</li></ol></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 19",
    "topics": [
      {
        "topic": "Maxims From Three Wise Men",
        "quotes": [
          {
            "quote": "For any challenge we should hold three thoughts at our command:<br />'Lead on God and Destiny,<br />To that Goal fixed for me long ago.<br />I will follow and not stumble; even if my will<br />is weak I will soldier on.'",
            "author": "Cleanthes",
            "source": "Enchiridion, 53"
          },
          {
            "quote": "Whoever embraces necessity count as wise,<br />skilled in divine matters.",
            "author": "Euripides",
            "source": "Enchiridion, 53"
          },
          {
            "quote": "If it pleases the gods, so be it.  They may well kill me, but they can't hurt me.",
            "author": "Plato's Crito and Apology",
            "source": "Enchiridion, 53"
          }
        ],
        "notes": "<p>These three quotes compiled by Epictetus show us—in wisdom across history—the themes of tolerance, flexibility, and, ultimately, acceptance.  Cleanthes and Euripides evoke destiny and fate as concepts that help ease acceptance.  When one has a belief in a greater or higher power (be it God or gods), then there is no such thing as an event going contrary to plan.</p><p>Even if you don't believe in a deity, you can take some comfort in the various laws of the universe or even the circle of life.  What happens to us as individuals can seem random or upsetting or cruel or inexplicable, when in fact these events make perfect sense when our perspective is zoomed out, even just slightly.</p><p>Let's practice this perspective today.  Pretend that each event—whether desired or unexpected—was willed to happen, willed specifically for you.  You wouldn't fight that, would you?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 20",
    "topics": [
      {
        "topic": "Behold, Now As Ever",
        "quotes": [
          {
            "quote": "If you've seen the present, you've seen all things, from time immemorial into all of eternity.  For everything that happens is related and the same.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.36"
          }
        ],
        "notes": "<p>The events that will transpire today are the same as the things that have always occurred.  People living and dying, animals living and dying, clouds rolling in and rolling out, air sucked in and sucked out, as it has for aeons.  This moment right now, to paraphrase Emerson, is a quotation of the moments that have come before and will come ever after.</p><p>This idea is expressed nowhere more beautifully than in the Christianity hymn <cite>Gloria Patri.</cite> <q>As it was in the beginning, and now, and always, and to the ages of ages.</q> This thought is not supposed to be depressing or uplifting.  It's just a fact.  However, it can have a calming, centering effect.  No need to get excited, no need to wait on pins and needles.  If you haven't seen this before, someone else has.  That can be a relief.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 21",
    "topics": [
      {
        "topic": "Once Is Enough, Once Is Forever",
        "quotes": [
          {
            "quote": "A good isn't increased by the addition of time, but if one is wise for even a moment, they will be no less happy than the person who exercises virtue for all time and happily passes their life in it.",
            "author": "Chrysippus",
            "source": "Quoted by Plutarch in Moralia: <q>Against the Stoics on Common Conceptions,</q> 1062 (Loeb, P.682)"
          }
        ],
        "notes": "<p>Perhaps wisdom and happiness are like winning a medal in the Olympics.  It doesn't matter whether you won a hundred years ago or ten minutes ago, or whether you won just once or in multiple events.  It doesn't matter whether someone beats your time or score down the road, and it doesn't matter whether you never compete again.  You'll always be a medalist, and you'll always know what if feels like.  No one can take that away—and it would not be impossible to feel <em>more</em> of that feeling.</p><p>The Julliard-trained actor Evan Handler, who not only survived acute myeloid leukemia but also severe depression, has talked about his decision to take antidepressants, which he did for a deliberately brief time.  He took them because he wanted to know what true, normal happiness felt like.  Once he did, he knew he would stop.  He could go back to the struggle like everyone else.  He had the ideal for a moment and that was enough.</p><p>Perhaps today will be the day when we experience happiness or wisdom.  Don't try to grab that moment and hold on to it with all your might.  It's not under your control how long it lasts.  Enjoy it, recognize it, remember it.  Having it for a moment is the same as having it forever.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 22",
    "topics": [
      {
        "topic": "The Glass Is Already Broken",
        "quotes": [
          {
            "quote": "Fortune falls heavily on those for whom she's unexpected.  The one always on the lookout easily endures.",
            "author": "Seneca",
            "source": "On Consolation To Helvia, 5.3"
          }
        ],
        "notes": "<p>There is a story of a Zen master who had a beautiful prized cup.  The master would repeat to himself, <q>The glass is already broken.</q> He enjoyed the cup.  He used it.  He showed if off to visitors.  But in his mind, it was already broken.  And so one day, when it did break, he simply said, <q>Of course.</q></p><p>This is how the Stoics think too.  There is supposedly a true story about Epictetus and a lamp.  He never locked his house, and so his expensive lamp was stolen.  When Epictetus replaced it, he replaced it with a cheaper one so he could be less attached to it if it were stolen again.</p><p>Devastation—that feeling that we're absolutely crushed and shocked by an event—is a factor of how unlikely we considered that event in the first place.  No one is <em>wrecked</em> by the fact that it's snowing in the winter, because we've accepted (and even anticipated) this turn of events.  What about the occurrences that surprise us?  We might not be so shocked if we took the time to consider their possibility.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 23",
    "topics": [
      {
        "topic": "Attachments Are The Enemy",
        "quotes": [
          {
            "quote": "In short, you must remember this—that if you hold anything dear outside of your own reasoned choice, you will have destroyed your capacity for choice.",
            "author": "Epictetus",
            "source": "Discourses, 4.4.23"
          }
        ],
        "notes": "<p>According to Anthony de Mello, <q>there is one thing and only one thing that causes unhappiness.  The name of that thing is Attachment.</q> Attachments to an image you have of a person, attachments to wealth and status, attachments to a certain place or time, attachments to a job or to a lifestyle.  All of those things are dangerous for one reason: they are outside of our reasoned choice.  How long we keep them is not in our control.</p><p>As Epictetus realized some two thousand years before de Mello, our attachments are what make it so hard to accept change.  Once we have them, we don't want to let go.  We become slaves to maintaining the status quo.  We are like the Red Queen in <cite>Alice in Wonderland</cite>—running faster and faster to stay in the same place.</p><p>But everything is in a constant state of change.  We have certain things for a while and then lose them.  The only permanent thing is <span lang='el'><i>προαίρεσις</i></span>, our capacity for reasoned choice.  The things we are attached to can come and go, our choice is resilient and adaptable.  The sooner we become aware of this the better.  The easier it will be to accept and adapt to what does happen.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 24",
    "topics": [
      {
        "topic": "Train To Let Go Of What's Not Yours",
        "quotes": [
          {
            "quote": "Whenever you experience the pangs of losing something, don't treat it like a part of yourself but as a breakable glass, so when it falls you will remember that and won't be troubled.  So too, whenever you kiss your child, sibling, or friend, don't layer on top of the experience all the things you might wish, but hold them back and stop them, just as those who ride behind triumphant generals remind them they are mortal.  In the same way, remind yourself that your precious one isn't one of your possessions, but something given for now, not forever ...",
            "author": "Epictetus",
            "source": "Discourses, 3.24.84-86a"
          }
        ],
        "notes": "<p>At a Roman triumph, the majority of the public would have their eyes glued to the victorious general at the front—one of the most coveted spots during roman times.  Only a few would notice the aide in the back, right behind the commander, whispering into his ear, <q>Remember, thou are mortal.</q> What a reminder to hear at the peak of glory and victory!</p><p>In our own lives, we can train to be that whisper.  When there is something we prize—or someone that we love—we can whisper to ourselves that is is fragile, mortal, and not truly ours.  No matter how strong or invincible something feels, it never is.  We must remind ourselves that it can break, can die, can leave us.</p><p>Loss is one of our deepest fears.  Ignorance and pretending don't make things any better.  They just mean the loss will be all the more jarring when it occurs.</p>",
        "thoughts": "Per the Dhammacakkappavattana Sutta, the 4 noble truths are: <ol><li>Now this is the noble truth of suffering: birth is suffering, aging is suffering, illness is suffering, death is suffering; union with what is displeasing is suffering; separation from what is pleasing is suffering; not to get what one wants is suffering; in brief, the five aggregates (body, feelings, perceptions, mental activity, and consciousness) subject to clinging are suffering.</li><li>Now this is the noble truth of the origin of suffering: it is this craving which leads to re-becoming, accompanied by delight and lust, seeking delight here and there; that is, craving for sensual pleasures, craving for becoming, craving for disbecoming.</li><li>Now this is the noble truth of the cessation of suffering: it is the remainderless fading away and cessation of that same craving, the giving up and relinquishing of it, freedom from it, non-reliance on it.</li><li>Now this is the noble truth of the way leading to the cessation of suffering: it is this noble eightfold path; that is, right view, right intention, right speech, right action, right livelihood, right effort, right mindfulness, right concentration.</li></ol>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 25",
    "topics": [
      {
        "topic": "Funny How That Works Out",
        "quotes": [
          {
            "quote": "As for me, I would choose being sick over living in luxury, for being sick only harms the body, whereas luxury destroys both the body and the soul, causing weakness and incapacity in the body, and lack of control and cowardice in the soul.  What's more, luxury breeds injustice because it also breeds greediness.",
            "author": "Musonius Rufus",
            "source": "Lectures, 20.95.14-17"
          }
        ],
        "notes": "<p>Stories about lottery winners tend to share one lesson: suddenly coming into a great deal of money is a curse, not a blessing.  Just a few years after they get their big check, many lottery winners are actually in worse financial shape.  They've lost friends, they've gotten divorced.  Their whole lives have been turned into a nightmare as a result of their obscenely good fortune.</p><p>It's like that Metallica lyric (fittingly from a song call <q>No Leaf Clover</q>): <q>Then it comes to be that the soothing light at the end of your tunnel / Is just a freight train coming your way.</q></p><p>And yet the most common response from a cancer survivor, the person who went through the thing we all dread and fear?  <q>It was the best thing that ever happened to me.</q></p><p>Funny how that works out, isn't it?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 26",
    "topics": [
      {
        "topic": "The Altar Of No Difference",
        "quotes": [
          {
            "quote": "We are like many pellets of incense falling on the same altar.  Some collapse sooner, others later, but it makes no difference.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.15"
          }
        ],
        "notes": "<p>What's the difference between you and richest person in the world?  One has a little more money than the other.  What's the difference between you and the oldest person in the world?  One has been around a little longer than the other.  Same goes for the tallest, smartest, fastest, and on down the line.</p><p>Measuring ourselves against other people makes acceptance difficult, because we want what <em>they</em> have, or we want how things <em>could</em> have gone, not what we happen to have.  But that makes no difference.</p><p>Some might see this line from Marcus as pessimistic, whereas others see it as optimistic.  It's really just <em>truth</em>.  We're all here and we're all going to leave this earth eventually, so let's not concern ourselves with petty differences in the meantime.  We have too much to do.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 27",
    "topics": [
      {
        "topic": "The Pleasure Of Tuning Out The Negative",
        "quotes": [
          {
            "quote": "How satisfying it is to dismiss and block out any upsetting or foreign impression, and immediately to have peace in all things.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.2"
          }
        ],
        "notes": "<p>The Stoics were mercifully spared the information overload endemic to today's society.  They had no social media, no newspapers, no television chatter to rile them up.  But even back then, an undisciplined person would have found plenty to be distracted and upset by.</p><p>Part of the Stoic mindset then was a sort of a cultivated ignorance.  Publilius Syrus's epigram expresses it well: <q>Always shun that which makes you angry.</q> Meaning: turn your mind away from the things that provoke it.  If you find that discussing politics at the dinner table leads to fighting, why do you keep bringing it up?  If your sibling's life choices bother you, why don't you stop picking at them and making them your concern?  The same goes for so many other sources of aggravation.</p><p>It's not a sign of weakness to shut them out.  Instead, it's a sign of strong will.  Try saying: <q>I know the reaction I typically take in these situations, and I'm not going to do it this time.</q> And then follow it with: <q>I'm also going to remove the stimulus from my life in the future was well.</q></p><p>Because what follows is peace and serenity.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 28",
    "topics": [
      {
        "topic": "It's Not On Them, It's On You",
        "quotes": [
          {
            "quote": "If someone is slipping up, kindly correct them and point out what they missed.  But if you can't, blame yourself—or no one.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 10.4"
          }
        ],
        "notes": "<p>A good teacher knows that when a student is failing, the blame fall on the instructor, not the pupil.  How much more generous and tolerant would we be if we could extend this understanding to other spheres in our life?  To be able to see that if a friend is unreliable, maybe it's because they don't know what's wrong or because we haven't tried to help them fix their flaw.  If an employee is underperforming, just talk to them or figure out if they're lacking in support.  If someone is being annoying, try talking to them about the problem with their behavior, or ask yourself: <em>Why am I being so sensitive?</em></p><p>And if this doesn't work, try letting it go.  It might be an isolated incident anyway.</p>",
        "thoughts": "<p>Let's get back to a time when a student, god forbid, could actually be blamed for their own exam performance.  A time when the default position was one of trust in teachers and what they do.  Let's support, respect and nurture our young people but never compromise on our pursuit of educational purity.  Let's press the reset button and create a just equilibrium between student responsibility and teacher accountability.  This is vital for our society in the long run, because in promoting the mantra that failure is always someone else's fault, we deprive our young people of one of the key drivers of change and progress: the realization of failure.<p><cite>Thomas Rogers, 'Let's get back to a time when students, not teachers, could be blamed for exam performance', 04 Jan 2016</cite><p>People make mistakes.  When they do make a mistake, and you feel the need to point it out, at least do them the kindness of showing them how to avoid it next time.  But if you point fingers and refuse to teach, the blame is on you.  That's your failure, not theirs, because you're choosing to neglect an opportunity to do good.  Of course, if you can't help them learn, no one is to blame.  The mistake they made could have easily been made by you.</p><cite>Patrick Allan, <a href=https://lifehacker.com/dont-blame-others-if-you-refuse-to-help-them-learn-1820261236 target=_blank>lifehacker</a>, 08-NOV-17</cite>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 29",
    "topics": [
      {
        "topic": "You're Going To Be OK",
        "quotes": [
          {
            "quote": "Don't lament this and don't get agitated.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.43"
          }
        ],
        "notes": "<p>There's that feeling we get when something happens: <em>It's all over now.  All is lost.</em> What follows are complaints and pity and misery—the impotent struggle against something that's already occurred.</p><p>Why bother?  We have no idea what the future holds.  We have no idea what's coming up around the bend.  It could be more problems, or this could be the darkness before the dawn.</p><p>If we're Stoic, there is one thing we can be sure of: whatever happens, we're going to be OK.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "November 30",
    "topics": [
      {
        "topic": "Follow The <em>Logos</em>",
        "quotes": [
          {
            "quote": "The person who follows reason in all things will have both leisure and a readiness to act—they are at once both cheerful and self-composed.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 10.12b"
          }
        ],
        "notes": "<p>The guiding reason of the world—the Stoics called this the <em>logos</em>—gives us what we want, other times it gives us precisely what we do not want.  In either case, they believed that the <em>logos</em> was an all-powerful force that governed the universe.</p><p>There is a helpful analogy to explain the <em>logos</em>: We are like a dog leashed to a moving cart.  The direction of the cart will determine where we go.  Depending on the length of the leash, we also have a fair amount of room to explore and determine the pace, but ultimately what each of us must choose is whether we will go willingly or be painfully dragged.  Which will it be?</p><p>Cheerful acceptance?  Or ignorant refusal?  In the end, they amount to the same.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 1",
    "topics": [
      {
        "topic": "Pretending Today Is The End",
        "quotes": [
          {
            "quote": "Let us prepare our minds as if we'd come to the very end of life.  Let us postpone nothing.  Let us balance life's books each day....The one who puts the finishing touches on their life each day is never short of time.",
            "author": "Seneca",
            "source": "Moral Letters, 101.7b-8a"
          }
        ],
        "notes": "<p><q>Live each day as if it were your last</q> is a cliché.  Plenty say it, few actually do it.  How reasonable would that be anyway?  Surely Seneca isn't saying to forsake laws and considerations—to find some orgy to join because the world is ending.</p><p>A better analogy would be a soldier about to leave on deployment.  Not knowing whether they'll return or not, what do they do?</p><p>They get their affairs in order.  They handle their business.  They tell their children or their family that they love them.  They don't have time for quarreling or petty matters.  And then in the morning they are ready to go—hoping to come back in one piece but prepared for the possibility that they might not.</p><p>Let us live today that same way.</p>",
        "thoughts": "<p><speaker>Capt.  Ronald Speirs:</speaker> You know why you hid in that ditch, Blithe?<br /><speaker>Pvt.  Albert Blithe:</speaker> I was scared.<br /><speaker>Capt.  Ronald Speirs:</speaker> We're all scared.  You hid in that ditch because you think there's still hope.  But Blithe, the only hope you have is to accept the fact that you're already dead, and the sooner you accept that, the sooner you'll be able to function as a soldier's supposed to function.  Without mercy, without compassion, without remorse.  All war depends on it.</p><p><speaker>Nixon:</speaker> Harry...  what exactly are you doing with your reserve chute?  You've been hauling that thing around ever since we jumped.<br /><speaker>Harry Welsh:</speaker> Gonna send it back to Kitty when we get back to England.  Silk.  Figure it'll make a good wedding dress, you know.  What with the rationing and all.<br /><speaker>Nixon:</speaker> [Chuckling] Jeez, Harry, I never would have guessed.<br /><speaker>Harry Welsh:</speaker> What?  That I'm so sentimental?<br /><speaker>Nixon:</speaker> No, that you think we're gonna make it back to England.</p>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 2",
    "topics": [
      {
        "topic": "Don't Mind Me, I'm Only Dying Slow",
        "quotes": [
          {
            "quote": "Let each thing you would do, say or intend be like that of a dying person.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 2.11.1"
          }
        ],
        "notes": "<p>Have you ever heard someone ask: <q>What would you do if you found out tomorrow that you had cancer?</q> The question is designed to make you consider how different life might be if you were suddenly given just a few months or weeks to live.  There's nothing like a terminal illness to wake people up.</p><p>But here's the thing: you already have a terminal diagnosis.  We all do!  As the writer Edmund Wilson put it, <q>Death is one prophecy that never fails.</q> Every person is born with a death sentence.  Each second that passes by is one you'll never get back.</p><p>Once you realize this, it will have  profound impact on what you do, say, and think.  Don't let another day tick away in ignorance of the reality that you're a dying person.  We all are.  Can today be the day we stop pretending otherwise?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 3",
    "topics": [
      {
        "topic": "The Philosopher As An Artisan Of Life And Death",
        "quotes": [
          {
            "quote": "Philosophy does not claim to get a person an external possession.  To do so would be beyond its field.  As wood is to the carpenter, bronze to the sculptor, so our own lives are the proper material in the art of living.",
            "author": "Epictetus",
            "source": "Discourses, 1.15.2"
          }
        ],
        "notes": "<p>Philosophy is not some idle pursuit appropriate only for academics or the rich.  Instead, it is one of the most essential activities that a human being can engage in.  Its purpose, as Henry David Thoreau said a few thousand years after Epictetus, is to help us <q>solve the problems of life, not only theoretically but practically.</q> This aligns nicely with Cicero's famous line: <q><em>To philosophize is to learn how to die.</em></q></p><p>You're not reading these quotes and doing these thought exercises for fun.  Though they may be enjoyable and help you lighten up, their aim is to help you sculpt and improve your life.  And because all of us have but one life and one death, we should treat each experience like a sculptor with his chisels, carving until, to paraphrase Michelangelo, we set free the angel in the marble.</p><p>We are trying to do this difficult thing—living and dying—as well as we can.  And to do that, we must remember what we've learned and the wise words we've been given.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 4",
    "topics": [
      {
        "topic": "You Don't Own That",
        "quotes": [
          {
            "quote": "Anything that can be prevented, taken away, or coerced is not a person's own—but those things that can't be blocked are their own",
            "author": "Epictetus",
            "source": "Discourses, 3.24.3"
          }
        ],
        "notes": "<p>The conservationist Daniel O'Brien has said that he doesn't <q>own</q> his several-thousand-acre buffalo ranch in South Dakota, he just lives there while the bank lets him make mortgage payments on it.  It's a joke about the economic realities of ranching.  But it also hints at the idea that land doesn't belong to one individual, that it will far outlast us and our descendants.  Marcus Aurelius used to say that we don't own anything and that even our lives are held in trust.</p><p>We may claw and fight and work to own things, but those things can be taken away in a second.  The same goes for other things we like to think are <q>ours</q> but are equally precarious: our status, our physical health or strength, our relationships.  How can these really be ours if something other than us—fate, bad luck, death, and so on—can dispossess us of them without notice?</p><p>So what do we own?  Just our lives—and not for long</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 5",
    "topics": [
      {
        "topic": "The Benefits Of Sobering Thoughts",
        "quotes": [
          {
            "quote": "Keep death and exile before your eyes each day, along with everything that seems terrible—by doing so, you'll never have a base thought nor will you have excessive desire.",
            "author": "Epictetus",
            "source": "Enchiridion, 21"
          }
        ],
        "notes": "<p>Political winds could change in an instant, depriving you of the most basic freedoms you take for granted.  Or, no matter who you are or how safely you've lived your life, there's someone out there who would rob and kill you for a couple of dollars.</p><p>As it's written in the timeless <cite>Epic of Gilgamesh</cite><blockquote><q>Man is snapped off like a reed in the canebreak!<br />The comely young man, the pretty young woman—<br />All too soon in their prime Death abducts them!</q></blockquote></p><p>Death is not the only unexpected interruption we might face—our plans can be dashed to pieces by a million things.  Today might be a bit more pleasant if you ignore those possibilities, but at what cost?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 6",
    "topics": [
      {
        "topic": "The Sword Dangles Over You",
        "quotes": [
          {
            "quote": "Don't behave as if you are destine to live forever.  What's fated hangs over you.  As long as you live and while you can, become good now.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.17"
          }
        ],
        "notes": "<p>There is an ancient story of a courier who had made light of the responsibilities of his king.  To prove he was mistaken, the king arranged to switch places with the courtier so he could experience what it was like to be a king.  The king made one other adjustments: he hung a sword by a hair over the throne to illustrate the peril and burden of kingship as well as the constant fear of assassination We call that dangling reminder of death and difficulty the Sword of Damocles.</p><p>The reality is that a similar sword hangs over all of us—life can be taken from us at any moment.  And that threat can send us in one of two directions: we can fear and dread it, or we can use it to motivate us.  To do good, to be good.  Because the sword is dangling, and there's nothing else to be concerned with, would you rather it catch you in the middle of some shameful, selfish act?  Would you rather it catch you <em>waiting</em> to be good in the future?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 7",
    "topics": [
      {
        "topic": "The Cards We're Dealt",
        "quotes": [
          {
            "quote": "Think of the life you lived until now as over and, as a dead man, see what's left as a bonus and live it according to Nature.  Love the hand that fate deals you and play it as your own, for what could be more fitting?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.56-57"
          }
        ],
        "notes": "<p>We have an irrational fear of acknowledging our own mortality.  We avoid thinking about it because we think it will be depressing.  In fact, reflecting on mortality often has the opposite effect—invigorating us more than saddening us.  Why?  Because it give us clarity.</p><p>If you were suddenly told you had but a week to live, what changes would you make?  If you died but were resuscitated, how different would your perspective be?</p><p>When, as Shakespeare's Prospero puts it, <q>every third thought shall be my grave,</q> there's no risk of getting caught up in petty matters or distractions.  Instead of denying our fear of death, let's let it make the best people we can be.</p><p>Today.</p>",
        "thoughts": "<p><speaker>Keating:</speaker> <q>Seize the day.  Gather ye rosebuds while ye may.</q> Why does the writer use these lines?<br /><speaker>Charlie:</speaker> Because he's in a hurry.<br /><speaker>Keating:</speaker> No.  Ding!  Thank you for playing anyway.  Because we are food for worms, lads.  Because, believe it or not, each and every one of us in this room is one day going to stop breathing, turn cold and die.<p>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 8",
    "topics": [
      {
        "topic": "Don't Hide From Your Feelings",
        "quotes": [
          {
            "quote": "It's better to conquer grief than to deceive it.",
            "author": "Seneca",
            "source": "On Consolation To Helvia, 17.1b"
          }
        ],
        "notes": "<p>We've all lost people we were close to—a friend, a colleague, a parent, a grandparent.  While we were suffering from our grief, some well-meaning person did their best to take our mind off it or make us think about something else for a couple hours.  However kind, these gestures are misguided.</p><p>The Stoics are stereotyped as suppressing their emotions, but their philosophy was actually intended to teach us to face, process, and deal with emotions <em>immediately</em> instead of running from them.  Tempting as it is to deceive yourself or hide form a powerful emotion like grief—by telling yourself and other people that you're fine—awareness and understanding are better.  Distraction might be pleasant in the short term—by going to gladiatorial games, as a Roman might have done, for example.  Focusing is better in the long term.</p><p>That means facing it now.  Process and parse what you are feeling.  Remove your expectations, your entitlements, your sense of having been wronged.  Find the positive in the situation, but also sit with your pain and accept it, remembering that it is a part of life.  That's how one conquers grief.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 9",
    "topics": [
      {
        "topic": "Spendthrifts of Time",
        "quotes": [
          {
            "quote": "Were all the geniuses of history to focus on this single theme, they could never fully express their bafflement at the darkness of the human mind.  No person would give up even an inch of their estate, and the slightest dispute with a neighbor can mean hell to pay; yet we easily let others encroach on our lives—worse, we often pave the way for those who will take it over.  No person hands out their money to passerby, but to how many do each of us hand out our lives!  We're tight-fisted with property and money, yet think too little of wasting time, the one thing about which we should all be the toughest misers.",
            "author": "Seneca",
            "source": "On the Brevity of Life, 3.1-2"
          }
        ],
        "notes": "<p>Today there will be endless interruptions: phone calls, emails, visitors, unexpected events.  Booker T.  Washington observed that <q>the number of people who stand ready to consume one's time, to no purpose, is almost countless.</q></p><p>A philosopher, on the other hand, knows that their default state should be one of reflection and inner awareness.  This is why they so diligently protect their personal space and thoughts from the intrusions of the world.  They know that a few minutes of contemplation are worth more than any meeting or report.  They also know how little time we're actually given in life—and how quickly our stores can be depleted.</p><p>Seneca reminds us that while we might be good at protecting our physical property, we are far too lax at enforcing our mental boundaries.  Property can be regained; there is quite a bit of it out there—some of it still untouched by man.  But time?  Time is our most irreplaceable asset—we cannot buy more of it.  We can only strive to waste as little as possible.</p>",
        "thoughts": "<blockquote>Gather ye rosebuds while ye may,<br />Old Time is still a-flying;<br />And this same flower that smiles today<br />To-morrow will be dying.<br />The glorious lamp of heaven, the sun,<br />The higher he's a-getting,<br />The sooner will his race be run,<br />And nearer he's to setting.<br />That age is best which is the first,<br />When youth and blood are warmer;<br />But being spent, the worse, and worst<br />Times still succeed the former.<br />Then be not coy, but use your time,<br />And, while ye may, go marry:<br />For having lost but once your prime,<br />You may forever tarry.<br /><br /><cite>To the Virgins, to Make Much of Time, Robert Herrick</cite></blockquote>"
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 10",
    "topics": [
      {
        "topic": "Don't Sell Yourself Too Cheaply",
        "quotes": [
          {
            "quote": "I say, let no one rob me of a single day who isn't going to make a full return on the loss.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 1.11b"
          }
        ],
        "notes": "<p>People spend a lot more money when they use credit cards than when they have to pull out actual cash.  If you ever wondered why credit card companies and banks push cards so aggressively, this is why.  The more credit cards you have, the more you'll spend.</p><p>Do we treat the days of our lives like we treat our money?  Because we don't exactly know how many days we'll be alive, and because we try our hardest <em>not</em> to think about the fact that someday we'll die, we're pretty liberal with how freely we spend our time.  We let people and obligations impose on that time, only rarely asking: <em>What am I getting in return here?</em></p><p>Seneca's maxim is the equivalent of cutting up your credit cards and switching to cash.  He says to put real thought into every transaction: <em>Am I getting my money's worth here?  Is this a fair trade?</em></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 11",
    "topics": [
      {
        "topic": "Dignity And Bravery",
        "quotes": [
          {
            "quote": "As Cicero says, we hate gladiators if they are quick to save their lives by any means; we favor them if they show contempt for their lives.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 11.4b"
          }
        ],
        "notes": "<p>Lyndon Johnson's college classmates used to tell an embarrassing story about him.  Johnson apparently had a big mouth and felt he had to constantly dominate and intimidate others.  Yet his biographer, Robert Caro makes it clear that when someone stood up to young Lyndon, he proved himself to be a complete coward.  In one instance, during an argument over a poker game, instead of fighting, Johnson threw himself on a bed and <q>began kicking his feet in the air with a frantic, windmilling motion...like a girl.</q> He shouted, <q>If you hit me, I'll kick you!  If you hit me, I'll kick you!</q></p><p>Later in his life, Johnson also worked extremely hard to avoid serving in World War II and lived it up in California while other soldiers fought and died abroad.  He later claimed to be a war hero.  It was one of his most shameful lies.</p><p>We do not need to disregard our physical safety or engage in wanton acts of violence to be brave.  But nobody respects a coward.  Nobody like a shirker of duty.  Nobody admires a person who puts too high a price on their own comfort and needs.</p><p>That's the irony of cowardice.  It's aimed at self-protection, but it creates shameful secrets.  Self-preservation is hardly worth it because of everything it costs in return.</p><p>Be brave.  Be dignified.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 12",
    "topics": [
      {
        "topic": "The Beat Goes On",
        "quotes": [
          {
            "quote": "Walk the long gallery of the past, of empires, and kingdoms succeeding each other without number.  And you can also see the future, for surely it will be exactly the same, unable to deviate from the present rhythm.  It's all one whether we've experienced forty years or an aeon.  What more is there to see?",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.49"
          }
        ],
        "notes": "<p>All things die.  Not just people but companies, kingdoms, religions, and ideas—eventually.  The Roman Republic lasted 450 years.  The Roman Empire, of which Marcus Aurelius was considered to be one of the <q>five good emperors,</q> lasted 500 years.  The longest recorded life of a human being is 122 years.  The average life expectancy in the United States is a little over seventy-eight years.  In other countries, in other eras, it has been more and it has been less.  But in the end we all succumb, as Marcus said, to the rhythm of events—of which there is always a final, determined beat.  There is no need to dwell on this fact, but there is no point in ignoring it either.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 13",
    "topics": [
      {
        "topic": "It's Just A Number",
        "quotes": [
          {
            "quote": "You aren't' bothered, are you, because you weight a certain amount and not twice as much?  So why get worked up that you've been given a certain lifespan and not more?  Just as you are satisfied with your normal weight, so you should be with the time you've been given.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.49"
          }
        ],
        "notes": "<p>They say age is just a number, but to some people it's a very important one—otherwise, women wouldn't lie about being younger, and ambitious young men would like about being older.  Rich people and health nuts spend billions of dollars in an effort to move their expiration date from around seventy-eight years to hopefully <em>forever</em>.</p><p>The number of years we manage to eke out doesn't matter, only what those years are composed of.  Seneca put it best when he said, <q>Life is long if you know how to use it.</q> Sadly, most people don't—they waste the life they've been given.  Only when it is too late do they try to compensate for that waste by vainly hoping to put more time on the clock.</p><p>Use today.  Use every day.  Make yourself satisfied with what you have been given.</p> ",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 14",
    "topics": [
      {
        "topic": "What We Should Know By The End",
        "quotes": [
          {
            "quote": "Soon you will die, and still aren't sincere, undisturbed, or free from suspicion that external things can harm you, nor are you gracious to all, knowing that wisdom and acting justly are one and the same.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.37"
          }
        ],
        "notes": "<p>From what we understand, Marcus wrote many of his meditations later in life, when we was suffering from serious illness.  So when he says, <q>Soon you will die,</q> he was speaking frankly to himself about his own mortality.  How scary that must have been.  He was staring at the real possibility of death and not liking what he saw in these last minutes.</p><p>Sure, he's accomplished many things in his life, but his emotions were still the cause of discomfort, pain, and frustration.  He knew that with his limited time left, better choices would provide relief.</p><p>Hopefully, you have a lot more time left—but that makes it even more important to make headway while you still can.  We are unfinished products up until the end, as Marcus knew very well.  But the earlier we learn it, the more we can enjoy the fruits of the labor on our character—and the sooner we can be free (or <em>freer</em>) of insincerity, anxiety, ungraciousness, and un-Stoic-ness.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 15",
    "topics": [
      {
        "topic": "A Simple Way To Measure Our Days",
        "quotes": [
          {
            "quote": "This is the mark of perfection of character—to spend each day as if it were your last, without frenzy, laziness, or any pretending.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 7.69"
          }
        ],
        "notes": "<p>The Stoics didn't think that anyone could be perfect.  The idea of becoming a sage—the highest aspiration of a philosopher—wasn't realistic.  This was just their Platonic ideal.</p><p>Still, they started every day hoping to get a little closer to that mark.  There was much to gain in the trying.  Can you actually live today like it is your last day?  Is it even possible to embody completeness or perfection in our <em>ethos</em> (character), effortlessly doing the right thing for a full twenty-four hours?  Is it possible for more than a minute?</p><p>Maybe not.  But if trying was enough for the Stoics, it should be enough for us too.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 16",
    "topics": [
      {
        "topic": "Everlasting Good Health",
        "quotes": [
          {
            "quote": "I tell you, you only have to learn to live like the healthy person does ...  living with complete confidence.  What confidence?  The only one worth holding, in what is trustworthy, unhindered, and can't be taken away—your own reasoned choice.",
            "author": "Epictetus",
            "source": "Discourses, 3.26.23b-24"
          }
        ],
        "notes": "<p>As the Stoics say repeatedly, it's dangerous to have faith in what you do not control.  But your own reasoned choice?  Well, for now that <em>is</em> in your control.  Therefore it is one of the few things you can have confidence in.  It's the only area of health that can't suddenly be given a terminal diagnosis (except for the one we all get the day we're born).  It's the only one that remains pristine and never wears down—it's only the user who quits it; never will it quit the user.</p><p>In this passage, Epictetus points out that slaves and workers and philosophers alike can live this way.  Socrates, Diogenes, and Cleanthes lived this way—even while they had families and while they were struggling students.</p><p>And so can you.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 17",
    "topics": [
      {
        "topic": "Know Thyself—Before It's Too Late",
        "quotes": [
          {
            "quote": "Death lies heavy upon me<br>who, known exceedingly well by all,<br>dies unknown to himself.",
            "author": "Seneca",
            "source": "Thyestes, 400"
          }
        ],
        "notes": "<p>Some of the most powerful and important people in the world seem to have almost no self-awareness.  Although total strangers know endless amounts of trivia about them, celebrities—because they are too busy or because it hurts too much—appear to know very little about themselves.</p><p>We can be guilty of the same sin.  We ignore Socrates's dictum to <q>know thyself</q>—often realizing we have done so at our peril, years later, when we wake up one day and realize how rarely we have asked ourselves questions like: <em>Who am I?  What's important to me?  What do I like?  What do I need?</em></p><p>Now—right now—you have the time to explore yourself, to understand your own mind and body.  Don't wait.  Know yourself.  Before it's impossibly late.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 18",
    "topics": [
      {
        "topic": "What Comes To Us All",
        "quotes": [
          {
            "quote": "Both Alexander the Great and his mule-keeper were both brought to the same place by death—they were either received into the all-generative reason, or scattered among the atoms.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.24"
          }
        ],
        "notes": "<p>In a world that is in many ways becoming more and more unequal, there aren't many truly equalitarian experiences left.  When Benjamin Franklin observed that <q>in this world nothing can be said to be certain, except death and taxes,</q> he couldn't have known how good some people would get at avoiding their taxes.  But death?  That's still the one thing that everyone experiences.</p><p>We all face the same end.  Whether you conquer the known world or shine the shoes of the people who do, at the end death will be a radical equalizer—a lesson in abject humility.  Shakespeare had Hamlet trace out the logic in stark terms for both Alexander and Julius Ceasar:<blockquote>Imperious Ceasar, dead and turn'd to clay,<br>Might stop a hole to keep the wind away:<br>O, that that earth, which kept the world in awe,<br>Should patch a wall to expel the winter flaw!</blockquote></p><p>The next time you feel yourself getting high and mighty—or conversely, feeling low and inferior—just remember, we all end up the same way.  In death, no one is better, no one is worse.  All our stories have the same finale.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 19",
    "topics": [
      {
        "topic": "Human Scale",
        "quotes": [
          {
            "quote": "Think of the whole universe of matter and how small your share.  Think about the expanse of time and how brief—almost momentary—the part marked for you.  Think of the workings of fate and how infinitesimal your role.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 5.24"
          }
        ],
        "notes": "<p>The amount of matter in the universe is immense—on the order of trillions of atoms.  What percentage of that matter does one human body constitute?</p><p>The earth, as far as science tells us, is some 4.5 billion years old and shows no sign of ending soon.  Our time on the earth, on the other hand, will be what?  Several decades, maybe?</p><p>Sometime we need to have the facts and the figures spelled out in front of us to fully realize the scale at which humans happen to exist in the big scheme of things.</p><p>Consider this the next time you feel self-important, or like everything rises and falls on what you do next.  It doesn't.  You're just one person among many, doing your best among many.  That's all you need to do.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 20",
    "topics": [
      {
        "topic": "Fear The Fear Of Death",
        "quotes": [
          {
            "quote": "Do you ponder how the supreme of human evils, the surest mark of the base and cowardly, is not death, but the fear of death?  I urge you to discipline yourself against such fear, direct all your thinking, exercises, and reading this way—and you will know the only path to human freedom.",
            "author": "Epictetus",
            "source": "Discourses, 3.26.38-39"
          }
        ],
        "notes": "<p>To steel himself before he committed suicide rather than submit to Julius Ceasar's destruction of the Roman Republic, the great Stoic philosopher Cato read a bit of Plato's <cite>Phaedo</cite>.  In it, Plato writes, <q>It is the child within us that trembles before death.</q> Death is scary because it is such an unknown.  No one can come back and tell us what it is like.  We are in the dark about it.</p><p>As childlike and ultimately ignorant as we are about death, there are plenty of wise men and women who can at least provide some guidance.  There's a reason that the world's oldest people never seem to be afraid of death: they've had more time to think about it than we have (and they realized how pointless worrying was).  There are other wonderful resources: Florida Scott-Maxwell's Stoic diary during her terminal illness, <cite>The Measure of My Days</cite>, is one.  Seneca's famous words to his family and friends, who had broken down and begged with his executioners, is another.  <q>Where,</q> Seneca gently chided them, <q>are your maxims of philosophy, or the preparation of so many years' study against evils to come?</q> Throughout philosophy there are inspiring, brave words from brave men and women who can help us face this fear.</p><p>There is another helpful consideration about death from the Stoics.  If death is truly the end, then what is there exactly to fear?  For everything from your fears to your pain receptors to your worries and your remaining wishes, they will perish with you.  As frightening as death might seem, remember: it contains within it the end of fear.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 21",
    "topics": [
      {
        "topic": "What Do You Have To Show For Your Years?",
        "quotes": [
          {
            "quote": "Many times an old man has no other evidence besides his age to prove he has lived a long time.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 3.8b"
          }
        ],
        "notes": "<p>How long have you been alive?  Take the years, multiply them by 365, and then by 24.  How many hours have you lived?  What do you have to show for all of them?</p><p>The answer for many people is: not enough.  We had so many hours that we took them for granted.  All we have to show for our time on this planet are rounds of golf, years spent at the office, time spent watching mediocre movies, a stack of mindless books we hardly remember reading, and maybe a garage full of toys.  We're like the character in Raymond Chandler's <cite>The Long Goodbye:</cite> <q>Mostly, I just kill time,</q> he says, <q>and it dies hard.</q></p><p>One day, our hours will begin to run out.  It would be nice to be able to say: <q>Hey, I really made the most of it.</q> Not in the form of achievements, not money, not status—you know what the Stoics think of all that—but in wisdom, insight, and real progress in the things that all humans struggle against.</p><p>What if you could say that you really made something of this time that you had?  What if you could prove that you really did live [insert number] years?  And not just lived them, but lived them <em>fully</em>.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 22",
    "topics": [
      {
        "topic": "Stake Your Own Claim",
        "quotes": [
          {
            "quote": "For it's disgraceful for an old person, or one in sight of old age, to have only the knowledge carried in their notebooks.  Zeno said this ...  what do you say?  Cleanthes said that ...  what do you say?  How long will you be compelled by the claims of another?  Take charge and stake your own claim—something posterity will carry in its notebook.",
            "author": "Seneca",
            "source": "Moral Letters, 33.7"
          }
        ],
        "notes": "<p>Musing in his notebook about the topic of immortality, Ralph Waldo Emerson complained how writers dance around a difficult topic by relying on quotes.  <q>I hate quotation</q>, he wrote.  <q>Tell me what you know.</q></p><p>Seneca was throwing down the same gauntlet some twenty centuries before.  It's easier to quote, to rely on the wise words of others.  Especially when the people you're deferring to are such towering figures.</p><p>It's harder (and more intimidating) to venture out on your own and express your own thoughts.  But how do you think those wise and true quotes from those towering figures were created in the first place?</p><p>Your own experiences have value.  You have accumulated your own wisdom too.  Stake your claim.  Put something down for the ages—in words and also in example.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 23",
    "topics": [
      {
        "topic": "What Are You So Afraid Of Losing?",
        "quotes": [
          {
            "quote": "You are afraid of dying.  But, come now, how is this life or yours anything but death.",
            "author": "Seneca",
            "source": "Moral Letters, 77.18"
          }
        ],
        "notes": "<p>Seneca tells an amazing story about an obscenely wealthy Roman who was carried around by slaves on a litter.  On one occasion, after being lifted out of a bath, the roman asked, <q>Am I sitting down yet?</q> Seneca's point was essentially: What kind of sad pathetic life is it if you're so disconnected from the world that you don't even know whether you're on the ground?  How did the man know whether he was even <em>alive</em> at all?</p><p>Most of us are afraid of dying.  But sometimes this fear begs the question: To protect what exactly?  For a lot of people the answer is: hours of television, gossiping, gorging, wasting potential, reporting to a boring job, and on and on and on.  Except, in the strictest sense, is this actually a life?  Is this worth gripping so tightly and being afraid of losing?</p><p>It doesn't sound like it.</p>",
        "thoughts": "The same can be said for ill thoughts and feeling towards circumstances and people They are not worthy of my time.  They are not worthy to occupy my mind and heart."
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 24",
    "topics": [
      {
        "topic": "Meaningless ...  Like A Fine Wine",
        "quotes": [
          {
            "quote": "You know what wine and liqueur tastes like.  It makes no difference whether a hundred or a thousand bottles pass through your bladder—you are nothing more than a filter.",
            "author": "Seneca",
            "source": "Moral Letters, 77.16"
          }
        ],
        "notes": "<p>Here we have another contemptuous expression, this time from Seneca, who, given his reputation for opulence, probably enjoyed a nice drink from time to time.  His point will probably rattle anyone for whom success and adulthood has turned them into a wine snob (though the logic can be applied just as easily to foodies, techies, audiophiles, and the like).</p><p>As fun and exciting and pleasurable as these pleasures are, it's worth putting them in their place.  You don't get a prize at the end of your life for having consumed more, worked more, spent more, collected more, or learned more about the various vintages than everyone else.  You are just a conduit, a vessel that temporarily held or interacted with these fancy items.</p><p>If you find yourself lusting over them, this meditation might help reduce their luster just a smidge.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 25",
    "topics": [
      {
        "topic": "Don't Burn The Candle At Both Ends",
        "quotes": [
          {
            "quote": "The mind must be given relaxation—it will rise improved and sharper after a good break.  Just as rich fields must not be forced—for they will quickly lose their fertility if never given a break—so constant work on the anvil will fracture the force of the mind.  But it regains its powers if it is set free and relaxed for a while.  Constant work gives rise to a certain kind of dullness and feebleness in the rational soul.",
            "author": "Seneca",
            "source": "On Tranquility of Mind, 17.5"
          }
        ],
        "notes": "<p>One can't read Marcus Aurelius and Seneca and not be struck by the difference between these two radically different personalities.  Each had his own strengths and weaknesses.  Which would you rather have entrusted with the immense responsibility of an empire?  Probably Marcus.  But who would you rather be as a person?  Probably Seneca.</p><p>One of the reasons is that Seneca seems to have had what we would now refer to as work/life balance.  Whereas Marcus can read as though he's worn down and tired, Seneca always feels energetic, fresh, robust.  His philosophy of rest and realization—intermixed with his rigorous study and other Stoic rituals—probably had a lot to do with it.</p><p>The mind is a muscle, and like the rest, it can be strained, overworked, even injured.  Our physical health is also worn down by over-commitment, a lack of rest, and bad habits.  Remember the tall tale about John Henry—the man who challenged the machine?  He died of exhaustion at the end.  Don't forget that.</p><p>Today, you may face things that try your patience, require considerable focus or clarity, or demand creative breakthroughs.  Life is a long haul—it will mean many such moments.  Are you going to be able to handle them if you've burned the candle at both ends?  If you've been abusing and overworking your body?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 26",
    "topics": [
      {
        "topic": "Life Is Long—If You Know How To Use It",
        "quotes": [
          {
            "quote": "It's not at all that we have too short a time to live, but that we squander a great deal of it.  Life is long enough, and it's given in sufficient measure to do many great things if we spend it well.  But when it's poured down the drain of luxury and neglect, when it's employed to no good end, we're finally driven to see that it has passed by before we even recognized it passing.  And so it is—we don't receive a short life, we make it so.",
            "author": "Seneca",
            "source": "On the Brevity of Life, 1.3-4a"
          }
        ],
        "notes": "<p>No one knows how long they have to live, but sadly, we can be sure of one thing: we'll waste far too much of life.  Wasting it sitting around, waste it chasing the wrong things, waste it by refusing to take the time to ask ourselves what's actually important to us.  Far too often, we're like the overconfident academics that Petrarch criticized in his classic essay on ignorance—the types who <q>fritter away their powers incessantly in caring for things outside of them and seek themselves there.</q> yet they have no idea this is what they're doing.</p><p>So today, if you find yourself rushed or uttering the words, <q>I just don't have enough time,</q> stop and take a second.  Is this actually true?  Or have you just committed to a lot of unnecessary things?  Are you actually being efficient, or have you assumed a great deal of waste into your life?  The average American spends something like forty hours a year in traffic.  That's <em>months</em> over the course of a life.  And for <q>traffic,</q> you can substitute so many activities—from fighting with others to watching television to daydreaming.</p><p>Your life is plenty long—just use it properly.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 27",
    "topics": [
      {
        "topic": "Don't Let Your Soul Go First",
        "quotes": [
          {
            "quote": "It's a disgrace in this life when the soul surrenders first while the body refuses to.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 6.29"
          }
        ],
        "notes": "<p>Despite his privileges, Marcus Aurelius had a difficult life.  The Roman historian Cassius Dio mused that Marcus <q>did not meet with the good fortune that he deserved, for he was not strong in body and was involved in a multitude of troubles throughout practically his entire reign.</q> At one point, he was so sick that a rumor spread that he had died—and matters were made worse when his most trusted general used it as an opportunity to declare himself the new emperor.</p><p>But throughout these struggles—the years at war, the crippling illnesses, his troubled son—he never gave up.  It's an inspiring example for us to think about today if we get tired, frustrated, or have to deal with some crisis.  Here was a guy who had every reason to be angry and bitter, who could have abandoned his principles and lived in luxury or ease, who could have put his responsibilities aside and focused on his own health.</p><p>But he never did.  His soul stayed strong even after his body became weak.  He didn't give up, right up to the second until his body finally did—when he died near Vienna in 180 AD.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 28",
    "topics": [
      {
        "topic": "On Being Remembered",
        "quotes": [
          {
            "quote": "Everything lasts for a day, the one who remembers and the remembered.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 4.35"
          }
        ],
        "notes": "<p>Take a walk down Forty-first Street toward the beautiful New York City Public Library, with its majestic stone lions.  On your way up <q>Library Way,</q> you'll pass a placard laid into the cement, part of a series of quotations from great writers throughout history.  This one is from Marcus Aurelius: <q>Everything is only for a day, both that which remembers and that which is remembered.</q></p><p>The library itself was designed by the firm of John Mervin Carrère, one of the twentieth century's most accomplished architects.  It combines the collections of such luminaries and philanthropists as Samuel Tilden, John Jacob Astor, and Lames Lenox, and their names are carved into the stone.  Today, the naming rights go to hedge fund manager Stephen A.  Schwarzman.  The opening of the library in 1911 was attended by President William Howard Taft, Governor John Alden Dix, and New York City mayor William Jay Gaynor.  The plaques you pass on your way were designed by the excellent Gregg LeFevre.</p><p>Marcus's quote makes us ponder: How many of these people have we even heard of?  The people involved in the story of the library were some of the most famous men in the world.  Masters of their respective crafts, rich beyond imagination in some cases.  Even along <q>Library Way,</q> many of the famous authors are unfamiliar to the modern reader.  They are long gone, as are the people who remembered them.</p><p>All of us, including Marcus—who is passed over by just as many unaware pedestrians—last for just a day, at most.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 29",
    "topics": [
      {
        "topic": "Give Thanks",
        "quotes": [
          {
            "quote": "In all things we should try to make ourselves be as grateful as possible.  For gratitude is a good think for ourselves, in a manner in which justice, commonly held to belong to others, is not.  Gratitude pays itself back in large measure.",
            "author": "Seneca",
            "source": "Moral Letters, 81.19"
          }
        ],
        "notes": "<p>Think of all the things you can be grateful for today.  That you are alive, that you live in a time primarily of peace, that you have enough health and leisure to read this book.  What of the little things?  The person who smiled at you, the woman who held the door open, that song you like on the radio, the pleasant weather.</p><p>Gratitude is infectious.  Its positivity is radiant.</p><p>Even if today was your last day on the earth—if you knew in advance that it was going to end in a few short hours—would there still be plenty to be grateful for?  How much better would your life be if you kicked off every day like that?  If you let it carry through from morning to night and touch every part of your life?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 30",
    "topics": [
      {
        "topic": "Taking The Bite Out Of It",
        "quotes": [
          {
            "quote": "To bear trials with a calm mind<br>robs misfortune of its strength and burden.",
            "author": "Seneca",
            "source": "Hercules Oetaeus, 231-232"
          }
        ],
        "notes": "<p>The people you admire, the ones who seem to be able to successfully handle and deal with adversity and difficulty, what do they have in common?  Their sense of equilibrium, their orderly discipline.  On the one-yard line, in the midst of criticism, after a heartbreaking tragedy, during a stressful period, they keep going.</p><p>Not because they are better than you.  Not because they're smarter.  But because they have learned a little secret.  You can take the bite out of any tough situation by bringing in a calm mind to it.  By considering it and meditating on it in advance.</p><p>And this is true not just for our day-to-day adversities but for the greatest and most unavoidable trial of all: our own eventual death.  It could come tomorrow, it could come in forty years.  It could be quick and painless, or it could be excruciating.  Our greatest asset in that ordeal will not be religion, it will not even be the wise words of the philosophers.  It will be, simply, our calm and reasoned mind.</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  },
  {
    "date": "December 31",
    "topics": [
      {
        "topic": "Get Active In Your Own Rescue",
        "quotes": [
          {
            "quote": "Stop wandering about!  You aren't likely to read your own notebooks, or ancient histories, or the anthologies you've collected to enjoy in your old age.  Get busy with life's purpose, toss aside empty hopes, get active in your own rescue—if you care for yourself at all—and do it while you can.",
            "author": "Marcus Aurelius",
            "source": "Meditations, 3.14"
          }
        ],
        "notes": "<p>The purpose of all our reading and studying is to aid us in the pursuit of the good life (and death).  At some point, we must put our books aside and take action.  So that, as Seneca put it, the <q>words become works.</q> There is an old saying that a <q>scholar made is a soldier spoiled.</q> We want to be both scholars and soldiers—soldiers in the good fight.</p><p>That's what's next for you.  Move forward, move onward.  Another book isn't the answer.  The right choices and decisions are.  Who knows how much time you have left, or what awaits us tomorrow?</p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      },
      {
        "topic": "",
        "quotes": [
          {
            "quote": "",
            "author": "",
            "source": ""
          }
        ],
        "notes": "<p></p>",
        "thoughts": ""
      }
    ]
  }
]"
}